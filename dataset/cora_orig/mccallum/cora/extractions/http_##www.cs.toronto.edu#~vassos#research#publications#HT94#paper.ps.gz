URL: http://www.cs.toronto.edu/~vassos/research/publications/HT94/paper.ps.gz
Refering-URL: http://www.cs.toronto.edu/~vassos/research/list-of-publications.html
Root-URL: http://www.cs.toronto.edu
Title: A Modular Approach to Fault-Tolerant Broadcasts and Related Problems  
Author: Vassos Hadzilacos Sam Toueg 
Address: Toronto, Ontario, Canada M5S 1A1  Ithaca, New York 14853, USA  
Affiliation: Department of Computer Science University of Toronto  Department of Computer Science Cornell University  
Abstract-found: 0
Intro-found: 1
Reference: [ABD + 87] <author> Hagit Attiya, Amotz Bar-Noy, Danny Dolev, Daphne Koller, David Peleg, and Rudiger Reischuk. </author> <title> Achievable cases in an asynchronous environment. </title> <booktitle> In Proceedings of the Twenty-Eighth Symposium on Foundations of Computer Science, </booktitle> <pages> pages 337-346. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1987. </year>
Reference: [Abr85] <author> N. Abramson. </author> <title> Development of the ALOHANET. </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> 31 </volume> <pages> 119-123, </pages> <month> March </month> <year> 1985. </year>
Reference-contexts: In such a network a process can broadcast a message to all other processes. Examples are Ethernet, Token Bus, Token Ring, and FDDI networks. Other types of networks include redundant broadcast channel networks (e.g., Delta-4 [VM90] and [Cri90b]), packet radio networks (e.g., ALOHA <ref> [Abr85] </ref>), switch-based networks (e.g., AN2 [Owi93]), etc. Many of the results in this paper are independent of the type of communication network. When we need to focus on a particular type of network we concentrate on point-to-point ones.
Reference: [ADKM92] <author> Yair Amir, Danny Dolev, Shlomo Kramer, and Dalia Malki. Transis: </author> <title> A communication sub-system for high availability. </title> <booktitle> In Proceedings of the Twenty Second International Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 76-84. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> July </month> <year> 1992. </year>
Reference-contexts: For example, processes may have to deliver all messages in the same order. Systems and applications based on fault-tolerant broadcasts include SIFT [WLG + 78], State Machines [Lam78a,Sch90], Atomic Commitment [BT93], Isis [BJ87,BCJ + 90], Psync [PBS89], Amoeba [Kaa92], Delta-4 [VM90], Transis <ref> [ADKM92] </ref>, Highly Available System [Cri87], and Advanced Automation System [CDD90]. Another paradigm that simplifies the task of designing fault-tolerant distributed applications is Consensus. <p> The origins of FIFO Broadcast and Causal Broadcast are in the Isis system [BJ87], although many systems now provide such primitives, including Psync [PBS89] and Transis <ref> [ADKM92] </ref>. Atomic Broadcast goes back to the early work of Lamport on the State Machine approach to fault-tolerance [Lam78a], and is a central mechanism in the HAS project [CASD85]. The concept of Uniformity was introduced by Neiger and Toueg in [NT87] in connection to the Agreement property. <p> the previous theorem. 2 The impossibility of Atomic Broadcast in asynchronous systems seems paradoxical since this primitive is a basic service provided by many practical systems which, on the 58 face of it, appear to be asynchronous. (Such systems include Isis [BJ87,BCJ + 90], Amoeba [Kaa92], Delta-4 [VM90], and Transis <ref> [ADKM92] </ref>.) There is no contradiction here. What this indicates is that such systems, at some level, explicitly or implicitly use of one of the mechanisms previously mentioned for circumventing the impossibility result. For example, the Isis Atomic Broadcast algorithm uses a failure detector mechanism based on timeouts.
Reference: [BCJ + 90] <author> Kenneth P. Birman, Robert Cooper, Thomas A. Joseph, Kenneth P. Kane, and Frank Bernhard Schmuck. </author> <title> Isis A Distributed Programming Environment, </title> <month> June </month> <year> 1990. </year>
Reference: [BD85] <author> Ozalp Babaoglu and Rogerio Drummond. </author> <title> Streets of Byzantium: Network ar-chitectures for fast reliable broadcasts. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 11(6) </volume> <pages> 546-554, </pages> <month> June </month> <year> 1985. </year>
Reference: [BD87] <author> Ozalp Babaoglu and Rogerio Drummond. </author> <title> (Almost) no cost clock synchronization. </title> <booktitle> In Proceedings of the Seventeenth International Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 42-47. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> July </month> <year> 1987. </year>
Reference: [Ben83] <author> Michael Ben-Or. </author> <title> Another advantage of free choice: Completely asynchronous agreement protocols. </title> <booktitle> In Proceedings of the Second ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 27-30, </pages> <month> August </month> <year> 1983. </year>
Reference: [BG93] <author> Elizabeth Borowsky and Eli Gafni. </author> <title> Generalized FLP impossibility result for t-resilient asynchronous computations. </title> <booktitle> In Proceedings of the Twenty fifth ACM Symposium on Theory of Computing, </booktitle> <pages> pages 91-100. </pages> <publisher> ACM Press, </publisher> <month> May </month> <year> 1993. </year>
Reference: [BHG87] <author> Philip A. Bernstein, Vassos Hadzilacos, and Nathan Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison-Wesley, </publisher> <year> 1987. </year>
Reference-contexts: This concerns a problem, technically known as Non-Blocking Atomic Commitment <ref> [BHG87] </ref>, that cannot be solved if the communication network may partition into two or more components, so that no messages can be exchanged between processes in different components. It is the possibility of network partioning that makes Non-Blocking Atomic Commitment unsolvable.
Reference: [BJ87] <author> Kenneth P. Birman and Thomas A. Joseph. </author> <title> Reliable communication in the presence of failures. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 5(1) </volume> <pages> 47-76, </pages> <month> February </month> <year> 1987. </year>
Reference-contexts: Bibliographic Notes The specification of the various types of broadcasts given in this section was designed by the authors with the help of Ajei Gopal. The origins of FIFO Broadcast and Causal Broadcast are in the Isis system <ref> [BJ87] </ref>, although many systems now provide such primitives, including Psync [PBS89] and Transis [ADKM92]. Atomic Broadcast goes back to the early work of Lamport on the State Machine approach to fault-tolerance [Lam78a], and is a central mechanism in the HAS project [CASD85].
Reference: [BMZ88] <author> Ofer Biran, Shlomo Moran, and Shmuel Zaks. </author> <title> A combinatorial characterization of the distributed tasks that are solvable in the presence of one faulty processor. </title> <booktitle> In Proceedings of the Seventh ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 263-275, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: Ricciardi and Birman consider failure detectors in the context of the group membership problem in [RB91]. Agreement-like problems that are solvable in asynchronous systems in the presence of failures are described in [DLP + 86,ABD + 87,BW87,Fek90,Fek93]. <ref> [BMZ88] </ref> gives a graph-theoretic characterization of the problems that can be solved (deterministically) in asyn 63 chronous systems with one crash failure.
Reference: [BN91] <author> Rida Bazzi and Gil Neiger. </author> <title> Optimally simulating crash failures in a Byzantine environment. </title> <editor> In S. Toueg, P.G. Spirakis, and L. Kirousis, editors, </editor> <booktitle> Proceedings of the Fifth International Workshop on Distributed Algorithms, Lecture Notes on Computer Science, </booktitle> <pages> pages 108-128. </pages> <publisher> Springer-Verlag, </publisher> <month> October </month> <year> 1991. </year>
Reference: [BN92] <author> Rida Bazzi and Gil Neiger. </author> <title> Simulating crash failures with many faulty processors. </title> <editor> In A. Segal and S. Zaks, editors, </editor> <booktitle> Proceedings of the Sixth International Workshop on Distributed Algorithms, Lecture Notes on Computer Science, </booktitle> <pages> pages 166-184. </pages> <publisher> Springer-Verlag, </publisher> <month> November </month> <year> 1992. </year>
Reference: [Bra87] <author> Gabriel Bracha. </author> <title> Asynchronous Byzantine agreement protocols. </title> <journal> Information and Computation, </journal> <volume> 75(2) </volume> <pages> 130-143, </pages> <month> November </month> <year> 1987. </year>
Reference: [BSS91] <author> Kenneth P. Birman, Andre Schiper, and Pat Stephenson. </author> <title> Lightweight causal and atomic group multicast. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 9(3) </volume> <pages> 272-314, </pages> <month> August </month> <year> 1991. </year>
Reference: [BT93] <author> Ozalp Babaoglu and Sam Toueg. </author> <title> Non-blocking atomic commitment. </title> <editor> In Sape J. Mullender, editor, </editor> <booktitle> Distributed Systems, chapter 6. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1993. </year> <month> 79 </month>
Reference-contexts: Stronger variants of Reliable Broadcast impose additional requirements on the order in which messages are delivered. For example, processes may have to deliver all messages in the same order. Systems and applications based on fault-tolerant broadcasts include SIFT [WLG + 78], State Machines [Lam78a,Sch90], Atomic Commitment <ref> [BT93] </ref>, Isis [BJ87,BCJ + 90], Psync [PBS89], Amoeba [Kaa92], Delta-4 [VM90], Transis [ADKM92], Highly Available System [Cri87], and Advanced Automation System [CDD90]. Another paradigm that simplifies the task of designing fault-tolerant distributed applications is Consensus.
Reference: [BW87] <author> Michael F. Bridgland and Ronald J. Watro. </author> <title> Fault-tolerant decision making in totally asynchronous distributed systems. </title> <booktitle> In Proceedings of the Sixth ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 52-63, </pages> <month> August </month> <year> 1987. </year>
Reference: [CAS86] <author> Flaviu Cristian, Houtan Aghili, and H. Raymond Strong. </author> <title> Approximate clock synchronization despite omission and performance faults and processor joins. </title> <booktitle> In Proceedings of the Sixteenth International Symposium on Fault-Tolerant Computing, </booktitle> <month> July </month> <year> 1986. </year>
Reference: [CASD85] <author> Flaviu Cristian, Houtan Aghili, H. Raymond Strong, and Danny Dolev. </author> <title> Atomic broadcast: From simple message diffusion to Byzantine agreement. </title> <booktitle> In Proceedings of the Fifteenth International Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 200-206, </pages> <month> June </month> <year> 1985. </year> <note> A revised version appears as IBM Research Laboratory Technical Report RJ5244 (April 1989). </note>
Reference-contexts: Send-omission failures were introduced in [Had84]. [PT86] introduced the class of general-omission failures consisting of crash, send- and receive-omission failures. Timing failures were first considered in <ref> [CASD85] </ref>, and arbitrary failures in [PSL80,LSP82]. [PSL80,LSP82] also consider message authentication, a mechanism that restricts the faulty behavior of processes that are subject to arbitrary failures. A precise definition of the properties of message authentication, and a mechanism for providing them without digital signatures in point-to-point networks appears in [ST87b]. <p> Atomic Broadcast goes back to the early work of Lamport on the State Machine approach to fault-tolerance [Lam78a], and is a central mechanism in the HAS project <ref> [CASD85] </ref>. The concept of Uniformity was introduced by Neiger and Toueg in [NT87] in connection to the Agreement property. <p> As we observed in Section 6.7.4, this is already a Causal Broadcast that satisfies Local-Time -Timeliness. Now apply the transformation that adds Total Order (Figure 4). Bibliographic Notes The algorithm for Reliable Broadcast that satisfies Local-Time -Timeliness and tolerates timing failures (Figure 12) is due to <ref> [CASD85] </ref>. That paper also presented an Atomic Broadcast algorithm for point-to-point networks using the idea of delaying the delivery of a message m until local time ts (m) + .
Reference: [CD89] <author> Benny Chor and Cynthia Dwork. </author> <title> Randomization in byzantine agreement. </title> <booktitle> Advances in Computer Research, </booktitle> <volume> 5 </volume> <pages> 443-497, </pages> <year> 1989. </year>
Reference-contexts: Theorem 14 does not make any assumption on the type or synchrony of the communication network. Now consider asynchronous point-to-point networks with crash failures. In such systems, Reliable Broadcast can be implemented (see Section 6), and Consensus can be solved using randomization <ref> [CD89] </ref> or failure detectors [CT91]. These results and Theorem 14 imply: Corollary 5 In asynchronous point-to-point networks with crash failures, Atomic Broadcast can be implemented using randomization or failure detectors. Bibliographic Notes Fischer, Lynch and Paterson [FLP85] proved the basic result that Consensus is not solvable deterministically in asynchronous systems. <p> Bibliographic Notes Fischer, Lynch and Paterson [FLP85] proved the basic result that Consensus is not solvable deterministically in asynchronous systems. Soon after this result was first published, it was shown that Consensus can be solved with randomized algorithms in asynchronous systems. Such algorithms include [Ben83,Rab83,Bra87], and are surveyed in <ref> [CD89] </ref>.
Reference: [CDD90] <author> Flaviu Cristian, Robert D. Dancey, and Jon Dehn. </author> <title> Fault-tolerance in the advanced automation system. </title> <type> Technical Report RJ 7424, </type> <institution> IBM Research Laboratory, </institution> <month> April </month> <year> 1990. </year>
Reference-contexts: Systems and applications based on fault-tolerant broadcasts include SIFT [WLG + 78], State Machines [Lam78a,Sch90], Atomic Commitment [BT93], Isis [BJ87,BCJ + 90], Psync [PBS89], Amoeba [Kaa92], Delta-4 [VM90], Transis [ADKM92], Highly Available System [Cri87], and Advanced Automation System <ref> [CDD90] </ref>. Another paradigm that simplifies the task of designing fault-tolerant distributed applications is Consensus.
Reference: [CHT92] <author> Tushar Deepak Chandra, Vassos Hadzilacos, and Sam Toueg. </author> <title> The weakest failure detector for solving consensus. </title> <booktitle> In Proceedings of the Tenth ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 147-158, </pages> <month> August </month> <year> 1992. </year>
Reference-contexts: Such algorithms include [Ben83,Rab83,Bra87], and are surveyed in [CD89]. Unreliable failure detectors were introduced by Chandra and Toueg in [CT91], who gave Consensus algorithms based on failure detectors of varying strength. [CT91] also shows that Reliable Broadcast together with Consensus can be transformed into Atomic Broadcast (Theorem 14). <ref> [CHT92] </ref> determines the weakest failure detector that can be used to solve Consensus. Ricciardi and Birman consider failure detectors in the context of the group membership problem in [RB91].
Reference: [CM84] <author> Jo-Mei Chang and N.F. Maxemchuk. </author> <title> Reliable broadcast protocols. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(3) </volume> <pages> 251-273, </pages> <month> August </month> <year> 1984. </year>
Reference: [Coa87] <author> Brian A. Coan. </author> <title> Achieving Consensus in Fault-Tolerant Distributed Computer Systems: Protocols, Lower Bounds, and Simulations. </title> <type> PhD thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <month> June </month> <year> 1987. </year>
Reference: [Cri87] <author> Flaviu Cristian. </author> <title> Issues in the design of highly available computing services. </title> <booktitle> In Annual Symposium of the Canadian Information Processing Society, </booktitle> <pages> pages 9-16, </pages> <month> July </month> <year> 1987. </year> <note> Also IBM Research Report RJ5856, </note> <month> July </month> <year> 1987. </year>
Reference-contexts: For example, processes may have to deliver all messages in the same order. Systems and applications based on fault-tolerant broadcasts include SIFT [WLG + 78], State Machines [Lam78a,Sch90], Atomic Commitment [BT93], Isis [BJ87,BCJ + 90], Psync [PBS89], Amoeba [Kaa92], Delta-4 [VM90], Transis [ADKM92], Highly Available System <ref> [Cri87] </ref>, and Advanced Automation System [CDD90]. Another paradigm that simplifies the task of designing fault-tolerant distributed applications is Consensus.
Reference: [Cri89] <author> Flaviu Cristian. </author> <title> Probabilistic clock synchronization. </title> <journal> Distributed Computing, </journal> <volume> 3 </volume> <pages> 146-158, </pages> <year> 1989. </year>
Reference-contexts: In such networks, one can implement approximately synchronized clocks, i.e., clocks that are always close to each other and whose drift with respect to real time is bounded (for example, see <ref> [LM85,ST87a, Cri89] </ref>).
Reference: [Cri90a] <author> Flaviu Cristian. </author> <title> Reaching agreement on processor group membership in synchronous distributed systems. </title> <type> Technical Report RJ5964, </type> <institution> IBM Research Laboratory, </institution> <month> October </month> <year> 1990. </year>
Reference: [Cri90b] <author> Flaviu Cristian. </author> <title> Synchronous atomic broadcast for redundant broadcast channels. </title> <booktitle> Real-Time Systems, </booktitle> <volume> 2(3) </volume> <pages> 195-212, </pages> <month> September </month> <year> 1990. </year> <note> Also IBM Research Report RJ7203, December 1989 (revised April 1990). 80 </note>
Reference-contexts: In such a network a process can broadcast a message to all other processes. Examples are Ethernet, Token Bus, Token Ring, and FDDI networks. Other types of networks include redundant broadcast channel networks (e.g., Delta-4 [VM90] and <ref> [Cri90b] </ref>), packet radio networks (e.g., ALOHA [Abr85]), switch-based networks (e.g., AN2 [Owi93]), etc. Many of the results in this paper are independent of the type of communication network. When we need to focus on a particular type of network we concentrate on point-to-point ones.
Reference: [CT91] <author> Tushar Chandra and Sam Toueg. </author> <title> Unreliable failure detectors for asynchronous systems (preliminary version). </title> <booktitle> In Proceedings of the Tenth ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 325-340. </pages> <publisher> ACM Press, </publisher> <month> August </month> <year> 1991. </year>
Reference-contexts: reasons underlying these two impossibility results is reflected in their proofs, which are based on entirely different ideas (compare [FLP85] and [Gra78]). 7.2.2 Transforming Reliable Broadcast and Consensus to Atomic Broadcast In Figure 14, we show how to transform any Reliable Broadcast and Consensus algorithms into an Atomic Broadcast algorithm <ref> [CT91] </ref>. This transformation uses repeated (possibly concurrent but completely independent) executions of Consensus. Informally, the kth execution of Consensus is used to decide on the kth batch of messages to be A-delivered. <p> Theorem 14 does not make any assumption on the type or synchrony of the communication network. Now consider asynchronous point-to-point networks with crash failures. In such systems, Reliable Broadcast can be implemented (see Section 6), and Consensus can be solved using randomization [CD89] or failure detectors <ref> [CT91] </ref>. These results and Theorem 14 imply: Corollary 5 In asynchronous point-to-point networks with crash failures, Atomic Broadcast can be implemented using randomization or failure detectors. Bibliographic Notes Fischer, Lynch and Paterson [FLP85] proved the basic result that Consensus is not solvable deterministically in asynchronous systems. <p> Soon after this result was first published, it was shown that Consensus can be solved with randomized algorithms in asynchronous systems. Such algorithms include [Ben83,Rab83,Bra87], and are surveyed in [CD89]. Unreliable failure detectors were introduced by Chandra and Toueg in <ref> [CT91] </ref>, who gave Consensus algorithms based on failure detectors of varying strength. [CT91] also shows that Reliable Broadcast together with Consensus can be transformed into Atomic Broadcast (Theorem 14). [CHT92] determines the weakest failure detector that can be used to solve Consensus. <p> Such algorithms include [Ben83,Rab83,Bra87], and are surveyed in [CD89]. Unreliable failure detectors were introduced by Chandra and Toueg in <ref> [CT91] </ref>, who gave Consensus algorithms based on failure detectors of varying strength. [CT91] also shows that Reliable Broadcast together with Consensus can be transformed into Atomic Broadcast (Theorem 14). [CHT92] determines the weakest failure detector that can be used to solve Consensus. Ricciardi and Birman consider failure detectors in the context of the group membership problem in [RB91].
Reference: [CT92] <author> Tushar Deepak Chandra and Sam Toueg. </author> <type> Personal communication. </type> <year> 1992. </year>
Reference-contexts: The one from Consensus to Atomic Broadcast assumes that Reliable Broadcast is available and that only crash failures occur. 18 Both transformations make no assumptions on the type or synchrony of the communication network. 18 A more complex transformation can actually work for any type of failures <ref> [CT92] </ref>, but it is beyond the scope of this paper. 57 These two transformations have important consequences regarding the solvability of Atomic Broadcast in asynchronous point-to-point networks with crash failures: 1.
Reference: [DDS87] <author> Danny Dolev, Cynthia Dwork, and Larry Stockmeyer. </author> <title> On the minimal synchronism needed for distributed consensus. </title> <journal> Journal of the ACM, </journal> <volume> 34(1) </volume> <pages> 77-97, </pages> <month> January </month> <year> 1987. </year>
Reference: [DHS86] <author> Danny Dolev, Joseph Y. Halpern, and H. Raymond Strong. </author> <title> On the possibility and impossibility of achieving clock synchronization. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 22(2) </volume> <pages> 230-250, </pages> <month> April </month> <year> 1986. </year>
Reference: [DLP + 86] <author> Danny Dolev, Nancy A. Lynch, Shlomit S. Pinter, Eugene W. Stark, and William E. Weihl. </author> <title> Reaching approximate agreement in the presence of faults. </title> <journal> Journal of the ACM, </journal> <volume> 33(3) </volume> <pages> 499-516, </pages> <month> July </month> <year> 1986. </year>
Reference: [DLS88] <author> Cynthia Dwork, Nancy A. Lynch, and Larry Stockmeyer. </author> <title> Consensus in the presence of partial synchrony. </title> <journal> Journal of the ACM, </journal> <volume> 35(2) </volume> <pages> 288-323, </pages> <month> April </month> <year> 1988. </year>
Reference: [Fek90] <author> Alan D. Fekete. </author> <title> Asymptotically optimal algorithms for approximate agreement. </title> <journal> Distributed Computing, </journal> <volume> 4(1) </volume> <pages> 9-30, </pages> <year> 1990. </year>
Reference: [Fek93] <author> Alan D. Fekete. </author> <title> Asynchronous approximate agreement. </title> <journal> Information and Computation, </journal> <note> 1993. To appear. </note>
Reference: [FLP85] <author> Michael J. Fischer, Nancy A. Lynch, and Michael S. Paterson. </author> <title> Impossibility of distributed consensus with one faulty process. </title> <journal> Journal of the ACM, </journal> <volume> 32(2) </volume> <pages> 374-382, </pages> <month> April </month> <year> 1985. </year>
Reference-contexts: The asynchronous model has been adopted by many systems, such as those described in [BJ87,PBS89,ADKM92]. Theoretical investigation of this model was spurred by the surprising result of Fischer, Lynch and Paterson, stating that Consensus cannot be solved deterministically in this model <ref> [FLP85] </ref>. A variety of models of partial synchrony are studied in [DDS87,DLS88]. <p> Proof: It is well-known that Consensus cannot be solved in such a system <ref> [FLP85] </ref>. <p> The difference in the reasons underlying these two impossibility results is reflected in their proofs, which are based on entirely different ideas (compare <ref> [FLP85] </ref> and [Gra78]). 7.2.2 Transforming Reliable Broadcast and Consensus to Atomic Broadcast In Figure 14, we show how to transform any Reliable Broadcast and Consensus algorithms into an Atomic Broadcast algorithm [CT91]. This transformation uses repeated (possibly concurrent but completely independent) executions of Consensus. <p> These results and Theorem 14 imply: Corollary 5 In asynchronous point-to-point networks with crash failures, Atomic Broadcast can be implemented using randomization or failure detectors. Bibliographic Notes Fischer, Lynch and Paterson <ref> [FLP85] </ref> proved the basic result that Consensus is not solvable deterministically in asynchronous systems. Soon after this result was first published, it was shown that Consensus can be solved with randomized algorithms in asynchronous systems. Such algorithms include [Ben83,Rab83,Bra87], and are surveyed in [CD89].
Reference: [FM90] <author> Paul Feldman and Silvio Micali. </author> <title> An optimal algorithm for synchronous Byzan-tine agreement. </title> <type> Technical Report MIT/LCS/TM-425, </type> <institution> Laboratory for Computer Science, Massachusetts Institueof Technology, </institution> <month> June </month> <year> 1990. </year>
Reference-contexts: This allows us to translate both positive and negative results proven for one problem, to the other. For example, the transformation from Consensus to TRB is message- and time-efficient. In particular, it can convert any constant-time randomized Consensus algorithm (such as the one in <ref> [FM90] </ref>), into a constant-time randomized TRB algorithm. * In asynchronous systems, these two problems are not equivalent: TRB can be transformed to Consensus, but the converse does not hold (Consensus is solvable with randomization, but TRB is not). 8.2.1 Transforming Terminating Reliable Broadcast to Consensus The transformation from TRB to Consensus
Reference: [GMS91] <author> Hector Garcia-Molina and Annemarie Spauster. </author> <title> Ordered and reliable multi-cast communication. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 9(3) </volume> <pages> 242-271, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: This is the total order requirement of several Atomic Multicasts that have appeared in the literature (e.g., <ref> [GMS91] </ref>). 9.4.3 Global Atomic Multicast Pairwise Total Order is not the strongest possible message ordering requirement for Atomic Multicasts. In particular, it allows cycles in message delivery order. For example, consider three groups, G 1 = fp; qg, G 2 = fq; rg and G 3 = fr; pg.
Reference: [Gop92] <author> Ajei Gopal. </author> <title> Fault-Tolerant Broadcasts and Multicasts: The Problem of Inconsistency and Contamination. </title> <type> PhD thesis, </type> <institution> Cornell University, </institution> <month> January </month> <year> 1992. </year>
Reference-contexts: In general a broadcast algorithm is likely to amplify the severity of failures that occur at the low level. For example, there are Atomic Broadcast algorithms where the omission to receive messages causes a faulty process to deliver messages in the wrong order <ref> [Gop92] </ref>.
Reference: [Gra78] <author> James N. Gray. </author> <title> Notes on database operating systems. </title> <editor> In R. Bayer, R. M. Graham, and G. Seegmuller, editors, </editor> <booktitle> Operating Systems: An Advanced Course, volume 66 of Lecture Notes on Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1978. </year> <note> Also appears as IBM Research Laboratory Technical report RJ2188. </note>
Reference-contexts: We close this section with a word of caution against confusing the impossibility of Atomic Broadcast and Consensus in asynchronous systems with a seemingly similar but, in fact, quite different impossibility result in fault-tolerant distributed computing, sometimes known as "the generals' paradox" <ref> [Gra78] </ref>. This concerns a problem, technically known as Non-Blocking Atomic Commitment [BHG87], that cannot be solved if the communication network may partition into two or more components, so that no messages can be exchanged between processes in different components. <p> The difference in the reasons underlying these two impossibility results is reflected in their proofs, which are based on entirely different ideas (compare [FLP85] and <ref> [Gra78] </ref>). 7.2.2 Transforming Reliable Broadcast and Consensus to Atomic Broadcast In Figure 14, we show how to transform any Reliable Broadcast and Consensus algorithms into an Atomic Broadcast algorithm [CT91]. This transformation uses repeated (possibly concurrent but completely independent) executions of Consensus.
Reference: [GSTC90] <author> Ajei Gopal, Ray Strong, Sam Toueg, and Flaviu Cristian. </author> <title> Early-delivery atomic broadcast. </title> <booktitle> In Proceedings of the Ninth ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 297-310, </pages> <month> August </month> <year> 1990. </year> <month> 81 </month>
Reference: [GT91] <author> Ajei Gopal and Sam Toueg. </author> <title> Inconsistency and contamination. </title> <booktitle> In Proceedings of the Tenth ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 257-272, </pages> <month> August </month> <year> 1991. </year>
Reference: [Had84] <author> Vassos Hadzilacos. </author> <title> Issues of Fault Tolerance in Concurrent Computations. </title> <type> PhD thesis, </type> <institution> Harvard University, </institution> <month> June </month> <year> 1984. </year> <note> Department of Computer Science Technical Report 11-84. </note>
Reference-contexts: A fail-stop process fails by crashing but, in addition, all correct processes are informed of the crash, and they have access to any information written by the faulty process in its stable storage before it crashed. Send-omission failures were introduced in <ref> [Had84] </ref>. [PT86] introduced the class of general-omission failures consisting of crash, send- and receive-omission failures. Timing failures were first considered in [CASD85], and arbitrary failures in [PSL80,LSP82]. [PSL80,LSP82] also consider message authentication, a mechanism that restricts the faulty behavior of processes that are subject to arbitrary failures.
Reference: [HJT] <author> Vassos Hadzilacos, Prasad Jayanti, and Sam Toueg. </author> <title> Fundamentals of Fault-Tolerant Distributed Computing. </title> <publisher> Forthcoming. </publisher>
Reference-contexts: Given the vastness of the literature on this subject, the bibliographic references are extensive, but incomplete. A more comprehensive treatment of the subject matter of this paper, including many results that are not presented here, will be found in the forthcoming book <ref> [HJT] </ref>. 2 2 Preliminaries Several computational models of distributed computing have been studied. Such models fall into two broad categories, message-passing and shared-memory. In the former, processes communicate by exchanging messages; in the latter, they communicate by accessing shared objects, such as registers, queues, etc.
Reference: [HS93] <author> Maurice Herlihy and Nir Shavit. </author> <title> The asynchronous computability theorem for t-resilient tasks. </title> <booktitle> In Proceedings of the Twenty fifth ACM Symposium on Theory of Computing, </booktitle> <pages> pages 111-120. </pages> <publisher> ACM Press, </publisher> <month> May </month> <year> 1993. </year>
Reference: [HSSD84] <author> Joseph Y. Halpern, Barbara Simons, Ray Strong, and Danny Dolev. </author> <title> Fault-tolerant clock synchronization. </title> <booktitle> In Proceedings of the Third ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 89-102, </pages> <month> August </month> <year> 1984. </year>
Reference: [Kaa92] <author> M. Frans Kaashoek. </author> <title> Group Communication in Distributed Computer Systems. </title> <type> PhD thesis, </type> <institution> Vrije Universiteit, </institution> <month> December </month> <year> 1992. </year>
Reference-contexts: For example, processes may have to deliver all messages in the same order. Systems and applications based on fault-tolerant broadcasts include SIFT [WLG + 78], State Machines [Lam78a,Sch90], Atomic Commitment [BT93], Isis [BJ87,BCJ + 90], Psync [PBS89], Amoeba <ref> [Kaa92] </ref>, Delta-4 [VM90], Transis [ADKM92], Highly Available System [Cri87], and Advanced Automation System [CDD90]. Another paradigm that simplifies the task of designing fault-tolerant distributed applications is Consensus. <p> The result now follows from the previous theorem. 2 The impossibility of Atomic Broadcast in asynchronous systems seems paradoxical since this primitive is a basic service provided by many practical systems which, on the 58 face of it, appear to be asynchronous. (Such systems include Isis [BJ87,BCJ + 90], Amoeba <ref> [Kaa92] </ref>, Delta-4 [VM90], and Transis [ADKM92].) There is no contradiction here. What this indicates is that such systems, at some level, explicitly or implicitly use of one of the mechanisms previously mentioned for circumventing the impossibility result.
Reference: [KO87] <author> Hermann Kopetz and Wilhelm Ochsenreiter. </author> <title> Clock synchronization in distributed real-time systems. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-36(8):933-940, </volume> <month> August </month> <year> 1987. </year>
Reference: [Lam78a] <author> Leslie Lamport. </author> <title> The implementation of reliable distributed multiprocess systems. </title> <journal> Computer Networks, </journal> <volume> 2 </volume> <pages> 95-114, </pages> <year> 1978. </year>
Reference-contexts: The origins of FIFO Broadcast and Causal Broadcast are in the Isis system [BJ87], although many systems now provide such primitives, including Psync [PBS89] and Transis [ADKM92]. Atomic Broadcast goes back to the early work of Lamport on the State Machine approach to fault-tolerance <ref> [Lam78a] </ref>, and is a central mechanism in the HAS project [CASD85]. The concept of Uniformity was introduced by Neiger and Toueg in [NT87] in connection to the Agreement property.
Reference: [Lam78b] <author> Leslie Lamport. </author> <title> Time, clocks, and the ordering of events in a distributed system. </title> <journal> Communications of the ACM, </journal> <volume> 21(7) </volume> <pages> 558-565, </pages> <month> July </month> <year> 1978. </year>
Reference-contexts: A variety of models of partial synchrony are studied in [DDS87,DLS88]. The causal precedence relation, which is widely viewed as one of the most fundamental concepts in distributed computing, was introduced by Lamport in a seminal paper <ref> [Lam78b] </ref>. (The relation was called "happens-before" in [Lam78b], and was defined in terms of send and receive communication primitives, instead of the broadcast and deliver primitives we used in our definition.) In that paper Lamport also defined logical clocks and showed how to implement them. [NT87,Wel87] show that, for a large <p> A variety of models of partial synchrony are studied in [DDS87,DLS88]. The causal precedence relation, which is widely viewed as one of the most fundamental concepts in distributed computing, was introduced by Lamport in a seminal paper <ref> [Lam78b] </ref>. (The relation was called "happens-before" in [Lam78b], and was defined in terms of send and receive communication primitives, instead of the broadcast and deliver primitives we used in our definition.) In that paper Lamport also defined logical clocks and showed how to implement them. [NT87,Wel87] show that, for a large class of problems, access to logical clocks
Reference: [Lam84] <author> Leslie Lamport. </author> <title> Using time instead of timeout for fault-tolerant distributed systems. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 6(2) </volume> <pages> 254-280, </pages> <month> April </month> <year> 1984. </year>
Reference: [LF82] <author> Leslie Lamport and Michael Fischer. </author> <title> Byzantine generals and transaction commit protocols. </title> <type> Technical Report 62, </type> <institution> SRI International, </institution> <month> April </month> <year> 1982. </year>
Reference-contexts: Note that such clocks may violate the Clock Monotonicity and Logical Clock properties. It is possible, however, to implement approximately synchronized clocks that satisfy both of these properties. Bibliographic Notes Crash failures, in the context of broadcast and Consensus problems, were first considered in <ref> [LF82] </ref>. [SS83] defined a more restricted type of process failure, referred to as fail-stop. A fail-stop process fails by crashing but, in addition, all correct processes are informed of the crash, and they have access to any information written by the faulty process in its stable storage before it crashed.
Reference: [LM85] <author> Leslie Lamport and P. M. Melliar-Smith. </author> <title> Synchronizing clocks in the presence of faults. </title> <journal> Journal of the ACM, </journal> <volume> 32(1) </volume> <pages> 52-78, </pages> <month> January </month> <year> 1985. </year>
Reference: [LSP82] <author> Leslie Lamport, Robert Shostak, and Marshall Pease. </author> <title> The Byzantine generals problem. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 4(3) </volume> <pages> 382-401, </pages> <month> July </month> <year> 1982. </year>
Reference: [NT87] <author> Gil Neiger and Sam Toueg. </author> <title> Substituting for real time and common knowledge in asynchronous distributed systems (preliminary version). </title> <booktitle> In Proceedings of the Sixth ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 281-293, </pages> <month> August </month> <year> 1987. </year> <title> A revised and expanded version appears as: Simulating 82 Synchronized Clocks and Common Knowledge in Distributed Systems. </title> <journal> Journal of the ACM, </journal> <volume> 40(2) </volume> <pages> 334-367, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: Atomic Broadcast goes back to the early work of Lamport on the State Machine approach to fault-tolerance [Lam78a], and is a central mechanism in the HAS project [CASD85]. The concept of Uniformity was introduced by Neiger and Toueg in <ref> [NT87] </ref> in connection to the Agreement property.
Reference: [NT90] <author> Gil Neiger and Sam Toueg. </author> <title> Automatically increasing the fault-tolerance of distributed algorithms. </title> <journal> Journal of Algorithms, </journal> <volume> 11(3) </volume> <pages> 374-419, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: Since it is correct, p i+1 delivers m. 2 Achieving Uniform Agreement in systems with send-omission and receive-omission failures can be done using techniques described in <ref> [NT90] </ref>. 6.6 Impossibility of -Timeliness in Asynchronous Systems Consider an asynchronous point-to-point network. Clearly, no Reliable Broadcast algorithm can achieve Real-Time -Timeliness in such a system. Can it achieve Local-Time - Timeliness? If local clocks are required to satisfy the Clock Monotonicity property, the answer is negative.
Reference: [Owi93] <author> Susan S. Owicki. </author> <title> A perspective on AN2: Local area network as distributed system. </title> <booktitle> In Proceedings of the Twelfth ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 1-12, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: In such a network a process can broadcast a message to all other processes. Examples are Ethernet, Token Bus, Token Ring, and FDDI networks. Other types of networks include redundant broadcast channel networks (e.g., Delta-4 [VM90] and [Cri90b]), packet radio networks (e.g., ALOHA [Abr85]), switch-based networks (e.g., AN2 <ref> [Owi93] </ref>), etc. Many of the results in this paper are independent of the type of communication network. When we need to focus on a particular type of network we concentrate on point-to-point ones.
Reference: [PBS89] <author> Larry L. Peterson, Nick C. Bucholz, and Richard D. Schlichting. </author> <title> Preserving and using context information in interprocess communication. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 7(3) </volume> <pages> 217-246, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: For example, processes may have to deliver all messages in the same order. Systems and applications based on fault-tolerant broadcasts include SIFT [WLG + 78], State Machines [Lam78a,Sch90], Atomic Commitment [BT93], Isis [BJ87,BCJ + 90], Psync <ref> [PBS89] </ref>, Amoeba [Kaa92], Delta-4 [VM90], Transis [ADKM92], Highly Available System [Cri87], and Advanced Automation System [CDD90]. Another paradigm that simplifies the task of designing fault-tolerant distributed applications is Consensus. <p> Bibliographic Notes The specification of the various types of broadcasts given in this section was designed by the authors with the help of Ajei Gopal. The origins of FIFO Broadcast and Causal Broadcast are in the Isis system [BJ87], although many systems now provide such primitives, including Psync <ref> [PBS89] </ref> and Transis [ADKM92]. Atomic Broadcast goes back to the early work of Lamport on the State Machine approach to fault-tolerance [Lam78a], and is a central mechanism in the HAS project [CASD85]. The concept of Uniformity was introduced by Neiger and Toueg in [NT87] in connection to the Agreement property.
Reference: [PSL80] <author> Marshall Pease, Robert Shostak, and Leslie Lamport. </author> <title> Reaching agreement in the presence of faults. </title> <journal> Journal of the ACM, </journal> <volume> 27(2) </volume> <pages> 228-234, </pages> <month> April </month> <year> 1980. </year>
Reference: [PT86] <author> Kenneth J. Perry and Sam Toueg. </author> <title> Distributed agreement in the presence of processor and communication faults. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 12(3) </volume> <pages> 477-482, </pages> <month> March </month> <year> 1986. </year>
Reference-contexts: A fail-stop process fails by crashing but, in addition, all correct processes are informed of the crash, and they have access to any information written by the faulty process in its stable storage before it crashed. Send-omission failures were introduced in [Had84]. <ref> [PT86] </ref> introduced the class of general-omission failures consisting of crash, send- and receive-omission failures. Timing failures were first considered in [CASD85], and arbitrary failures in [PSL80,LSP82]. [PSL80,LSP82] also consider message authentication, a mechanism that restricts the faulty behavior of processes that are subject to arbitrary failures.
Reference: [Rab83] <author> Michael Rabin. </author> <title> Randomized Byzantine generals. </title> <booktitle> In Proceedings of the Twenty-Fourth Symposium on Foundations of Computer Science, </booktitle> <pages> pages 403-409. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1983. </year>
Reference: [RB91] <author> Aleta Ricciardi and Ken Birman. </author> <title> Using process groups to implement failure detection in asynchronous environments. </title> <booktitle> In Proceedings of the Tenth ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 341-351. </pages> <publisher> ACM Press, </publisher> <month> August </month> <year> 1991. </year>
Reference-contexts: Ricciardi and Birman consider failure detectors in the context of the group membership problem in <ref> [RB91] </ref>. Agreement-like problems that are solvable in asynchronous systems in the presence of failures are described in [DLP + 86,ABD + 87,BW87,Fek90,Fek93]. [BMZ88] gives a graph-theoretic characterization of the problems that can be solved (deterministically) in asyn 63 chronous systems with one crash failure.
Reference: [Sch90] <author> Fred B. Schneider. </author> <title> Implementing fault-tolerant services using the state machine approach: A tutorial. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(4) </volume> <pages> 299-319, </pages> <month> December </month> <year> 1990. </year>
Reference: [SS83] <author> Richard D. Schlichting and Fred B. Schneider. </author> <title> Fail-stop processors: an approach to designing fault-tolerant computing systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 1(3) </volume> <pages> 222-238, </pages> <month> August </month> <year> 1983. </year>
Reference-contexts: Note that such clocks may violate the Clock Monotonicity and Logical Clock properties. It is possible, however, to implement approximately synchronized clocks that satisfy both of these properties. Bibliographic Notes Crash failures, in the context of broadcast and Consensus problems, were first considered in [LF82]. <ref> [SS83] </ref> defined a more restricted type of process failure, referred to as fail-stop. A fail-stop process fails by crashing but, in addition, all correct processes are informed of the crash, and they have access to any information written by the faulty process in its stable storage before it crashed.
Reference: [ST87a] <author> T. K. Srikanth and Sam Toueg. </author> <title> Optimal clock synchronization. </title> <journal> Journal of the ACM, </journal> <volume> 34(3) </volume> <pages> 626-645, </pages> <month> July </month> <year> 1987. </year>
Reference: [ST87b] <author> T. K. Srikanth and Sam Toueg. </author> <title> Simulating authenticated broadcasts to derive simple fault-tolerant algorithms. </title> <journal> Distributed Computing, </journal> <volume> 2(2) </volume> <pages> 80-94, </pages> <year> 1987. </year>
Reference-contexts: A precise definition of the properties of message authentication, and a mechanism for providing them without digital signatures in point-to-point networks appears in <ref> [ST87b] </ref>. There are methods for automatically increasing the fault-tolerance of algorithms. This is achieved by translations that transform any given algorithm tolerant of a certain type of failure into an algorithm that tolerates a more severe type of failure. Such translations are given in [Bra87,Coa87,ST87b,NT90,BN91,BN92].
Reference: [SZ93] <author> Michael Saks and Fotios Zaharoglou. </author> <title> Wait-free k-set agreement is impossible: The topology of public knowledge. </title> <booktitle> In Proceedings of the Twenty fifth ACM Symposium on Theory of Computing, </booktitle> <pages> pages 101-110. </pages> <publisher> ACM Press, </publisher> <month> May </month> <year> 1993. </year>
Reference: [VM90] <author> Paulo Verissimo and Jose A. Marques. </author> <title> Reliable broadcast for fault-tolerance on local computer networks. </title> <booktitle> In Proceedings of the Ninth Symposium on Reliable Distributed Systems, </booktitle> <address> Huntsville, Alabama-USA, </address> <month> October </month> <year> 1990. </year> <journal> IEEE. </journal> <volume> 83 </volume>
Reference-contexts: For example, processes may have to deliver all messages in the same order. Systems and applications based on fault-tolerant broadcasts include SIFT [WLG + 78], State Machines [Lam78a,Sch90], Atomic Commitment [BT93], Isis [BJ87,BCJ + 90], Psync [PBS89], Amoeba [Kaa92], Delta-4 <ref> [VM90] </ref>, Transis [ADKM92], Highly Available System [Cri87], and Advanced Automation System [CDD90]. Another paradigm that simplifies the task of designing fault-tolerant distributed applications is Consensus. <p> In such a network a process can broadcast a message to all other processes. Examples are Ethernet, Token Bus, Token Ring, and FDDI networks. Other types of networks include redundant broadcast channel networks (e.g., Delta-4 <ref> [VM90] </ref> and [Cri90b]), packet radio networks (e.g., ALOHA [Abr85]), switch-based networks (e.g., AN2 [Owi93]), etc. Many of the results in this paper are independent of the type of communication network. When we need to focus on a particular type of network we concentrate on point-to-point ones. <p> now follows from the previous theorem. 2 The impossibility of Atomic Broadcast in asynchronous systems seems paradoxical since this primitive is a basic service provided by many practical systems which, on the 58 face of it, appear to be asynchronous. (Such systems include Isis [BJ87,BCJ + 90], Amoeba [Kaa92], Delta-4 <ref> [VM90] </ref>, and Transis [ADKM92].) There is no contradiction here. What this indicates is that such systems, at some level, explicitly or implicitly use of one of the mechanisms previously mentioned for circumventing the impossibility result. For example, the Isis Atomic Broadcast algorithm uses a failure detector mechanism based on timeouts.
Reference: [Wel87] <author> Jennifer Lundelius Welch. </author> <title> Simulating synchronous processors. </title> <journal> Information and Computation, </journal> <volume> 74(2) </volume> <pages> 159-171, </pages> <month> August </month> <year> 1987. </year>
Reference: [WL88] <author> Jennifer Lundelius Welch and Nancy A. Lynch. </author> <title> A new fault-tolerant algorithm for clock synchronization. </title> <journal> Information and Computation, </journal> <volume> 77(1) </volume> <pages> 1-36, </pages> <month> April </month> <year> 1988. </year>
Reference: [WLG + 78] <author> John H. Wensley, Leslie Lamport, Jack Goldberg, Milton W. Green, Karl N. Levitt, P.M. Melliar-Smith, Robert E. Shostak, and Charles B. Weinstock. SIFT: </author> <title> Design and analysis of a fault-tolerant computer for aircraft control. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 66(10) </volume> <pages> 1240-1255, </pages> <month> October </month> <year> 1978. </year> <month> 84 </month>
Reference-contexts: Stronger variants of Reliable Broadcast impose additional requirements on the order in which messages are delivered. For example, processes may have to deliver all messages in the same order. Systems and applications based on fault-tolerant broadcasts include SIFT <ref> [WLG + 78] </ref>, State Machines [Lam78a,Sch90], Atomic Commitment [BT93], Isis [BJ87,BCJ + 90], Psync [PBS89], Amoeba [Kaa92], Delta-4 [VM90], Transis [ADKM92], Highly Available System [Cri87], and Advanced Automation System [CDD90]. Another paradigm that simplifies the task of designing fault-tolerant distributed applications is Consensus.
References-found: 72

