URL: http://www.cs.ucsd.edu/~wgg/Abstracts/starobs.ps.gz
Refering-URL: http://www.cs.ucsd.edu/~wgg/Abstracts/starobs.html
Root-URL: http://www.cs.ucsd.edu
Title: How Software Engineering Tools Organize Programmer Behavior During the Task of Data Encapsulation  
Author: Robert W. Bowdidge William G. Griswold 
Keyword: Key words: restructuring, data encapsulation, empirical study, software tools  
Note: (Received Accepted in final form  
Address: P.O. Box 704, Yorktown Heights, NY 10598  San Diego, CA 92093-0114  
Affiliation: IBM T. J. Watson Research Center  Department of Computer Science and Engineering University of California,  
Abstract: Tool-assisted meaning-preserving program restructuring has been proposed to aid the evolution of large software systems. These systems are are difficult to modify because relevant information is often widely distributed. We performed an exploratory study to determine how programmers used a restructuring tool interface called the star diagram to organize their behavior for the task of encapsulating a data structure. We videotaped six pairs of programmers while they encapsulated and enhanced a data structure in an existing program. Each team used one of three environments: standard UNIX tools, a restructuring tool with textual view of the source code, or a restructuring tool using the star diagram view. We systematically analyzed the videotape transcripts to derive a model of how the programmers performed encapsulation. Each team opportunistically exploited the features of the tools (e.g., cursors) and the program representation (e.g., ordering of lines in a file) to help them track the current state of the activity. Each method of exploiting structure tracks state in a way that decreases the likelihood of some types of oversights (e.g., missing a required change), but may not address others (e.g., making a change incorrectly), hence requiring a separate check. We also observed that programmers often preferred to design and restructure in an exploratory fashion. The major challenge of restructuring, then, appears to arise from the fact that it is costly or haphazard to maintain some completeness and consistency properties with the state-maintaining tactics that programmers employ with current tools. The inherent invisibility of some information makes completeness even more costly. These insights have led us to redesign our restructuring tools to better support exploratory design and counter invisibility. 
Abstract-found: 1
Intro-found: 1
Reference: <author> L. A. Belady and M. M. Lehman. </author> <title> Programming system dynamics or the metadynamics of systems in maintenance and growth. </title> <institution> Research Report RC3546, IBM, </institution> <year> 1971. </year> <note> Reprinted in M. </note> <editor> M. Lehman, L. A. Belady, editors, </editor> <title> Program Evolution: Processes of Software Change, Ch. </title> <booktitle> 5, APIC Studies in Data Processing No. </booktitle> <volume> 27. </volume> <publisher> Academic Press, </publisher> <address> London, </address> <year> 1985. </year>
Reference-contexts: Bowdidge and William G. Griswold past <ref> (Belady & Lehman 71) </ref>. Such changes are necessitated by the need to accommodate the demands of users for new features and changes in the underlying technology. <p> If these changes have not been appropriately anticipated in the system's design, the change will span many system modules (Parnas 72), incurring high costs and likely degrading software structure <ref> (Belady & Lehman 71) </ref>. One way to lower software maintenance costs, then, is to restructure the system into a more modular form while preserving the original functionality (Opdyke & Johnson 90; Opdyke 92; Griswold 91; Griswold & Notkin 93; Johnson & Opdyke 93).
Reference: <author> J. Blomberg, J. Giacomi, A. Mosher, and P. Swenton-Wall. </author> <title> Ethnographic field methods and their relation to design. </title> <editor> In D. Schuler and A. Namioka, editors, </editor> <booktitle> Participatory Design: Principles and Practices, chapter 7, </booktitle> <pages> pages 123-155. </pages> <publisher> Lawrence Erlbaum Associates, </publisher> <address> Hillsdale, New Jersey, </address> <year> 1993. </year>
Reference-contexts: Although an anthropological approach of observation in a completely natural setting would be ideal <ref> (Blomberg et al. 93) </ref>, our desire to understand the use of prototype tools and to compare different tools in similar settings precluded such an approach for the time being. We can understand how programmers perform restructuring by observing their behavior during a restructuring task.
Reference: <author> B. W. Boehm. </author> <title> The high cost of software. </title> <editor> In E. Horowitz, editor, </editor> <booktitle> Practical Strategies for Developing Large Software Systems, </booktitle> <pages> pages 3-15. </pages> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1975. </year>
Reference-contexts: Lientz and Swanson found that software maintenance can account for 70% of the total software system's lifetime cost (Lientz & Swanson 80). Boehm cited an Air Force project in which the development cost was $30 per line, but the maintenance cost was $4,000 per line <ref> (Boehm 75) </ref>.
Reference: <author> R. W. Bowdidge and W. G. Griswold. </author> <title> Automated support for encapsulating abstract data types. </title> <booktitle> In ACM SIGSOFT '94 Symposium on the Foundations of Software Engineering, </booktitle> <pages> pages 97-110, </pages> <month> December </month> <year> 1994. </year>
Reference-contexts: A star diagram graphically and compactly presents only those computations in the program that use a chosen data structure, helping the programmer to select and create the functions to completely encapsulate it <ref> (Bowdidge & Griswold 94) </ref>. These functions and the underlying data structures collectively represent an abstraction or module that hides the data structures from the rest of the system.
Reference: <author> R. W. Bowdidge. </author> <title> Supporting the Restructuring of Data Abstractions through Manipulation of a Program Visualization. </title> <type> PhD dissertation, </type> <institution> University of California, San Diego, Department of Computer Science & Engineering, </institution> <month> November </month> <year> 1995. </year> <note> Technical Report CS95-457. </note>
Reference-contexts: Even though the current design is explicitly presented, promising solution paths may thus be invisible to the programmer. Although simple forms of non-literal uses can be exposed by building type-oriented as opposed to variable-oriented star diagrams <ref> (Bowdidge 95) </ref>, the problem in general is much more complicated. There can be many ways of coding the same calculation; for instance, individual instances of the same calculation may be optimized on a case-by-case basis, obscuring their underlying similarity.
Reference: <author> F. P. Brooks. </author> <title> No silver bullet: </title> <journal> Accidents and essenceof software engineering. IEEE Computer, </journal> <volume> 20(4) </volume> <pages> 10-19, </pages> <month> April </month> <year> 1987. </year>
Reference-contexts: Moreover, if the tool cannot conveniently store the information, the programmer will order subtasks in a way so that the information is immediately used and can then be forgotten. There is an inherent invisibility <ref> (Brooks 87) </ref> of design information in restructuring. For example, it is not always straightforward to identify all the computations in a program that correspond to a proposed function. <p> All star diagram and text restructuring tool teams used this feature. Backtracking in the other tools is more awkward, but a few teams saved an intermediate version of their programs to allow backtracking. In general, these problems point to an inherent unvisualizability of software <ref> (Brooks 87) </ref>, and we believe that interleaved planning and restructuring may be more practical than complete planning, especially on larger systems. 5.3. EVALUATING PROGRESS Teams that engaged in exploratory behavior also expended effort in evaluating how their work was progressing.
Reference: <author> M. T. H. Chi. </author> <title> Quantifying qualitative analyses of verbal data: a practical guide. </title> <note> To appear in Journal of Learning Sciences, </note> <year> 1997. </year>
Reference: <author> J. S. Collofello and S. Bortman. </author> <title> An analysis of the technical information necessary to perform effective software maintenance. </title> <booktitle> In 5th Annual International Phoenix Conference on Computers and Communications, </booktitle> <pages> pages 420-423, </pages> <year> 1986. </year>
Reference-contexts: To make the model as descriptive as possible, we chose to derive a narrow model of encapsulation by restructuring, rather than of maintenance in general <ref> (Collofello & Bortman 86) </ref>. Consequently, not all programmer activities fit within our six categories. For instance, the teams in this study frequently engaged in a general program understanding activity when first presented with the program, and later ran and debugged the modified program.
Reference: <author> L. Cousin and J. S. Collofello. </author> <title> A task-based approach to improving the software maintenance process. </title> <booktitle> In Conference on Software Maintenance, </booktitle> <pages> pages 118-126, </pages> <year> 1992. </year>
Reference-contexts: Letovsky observed programmers' program comprehension methods (Letovsky & Soloway 85) and browsing strategies (Letovsky 86). Sutcliffe and Maiden explored mental behavior of analysts during problem solving (Sutcliffe & Maiden 92). Cousin used observations of programmers to identify information that should be provided in a software engineering environment <ref> (Cousin & Collofello 92) </ref>. Lange and Rosson both documented reuse strategies in an object-oriented programming environment (Lange & Moher 89; Rosson & Carroll 93). Other studies tested the design of a database-style pro paper.tex; 28/03/1997; 15:34; no v.; p.11 12 Robert W. Bowdidge and William G.
Reference: <author> B. Curtis, H. Krasner, and N. Iscoe. </author> <title> A field study of the software design process for large systems. </title> <journal> Communications of the ACM, </journal> <volume> 31(11) </volume> <pages> 1268-1287, </pages> <year> 1988. </year>
Reference: <author> J. Dumas and P. Parsons. </author> <title> Discovering the ways programmers think about new programming environments. </title> <journal> Communications of the ACM, </journal> <volume> 38(6) </volume> <pages> 45-56, </pages> <year> 1995. </year>
Reference-contexts: Lange and Rosson both documented reuse strategies in an object-oriented programming environment (Lange & Moher 89; Rosson & Carroll 93). Other studies tested the design of a database-style pro paper.tex; 28/03/1997; 15:34; no v.; p.11 12 Robert W. Bowdidge and William G. Griswold gramming environment for the Dylan language <ref> (Dumas & Parsons 95) </ref> and listed common problems in Macintosh programming environments (Houde & Sellman 94). We chose to systematically observe programmers as they performed restructuring during a two hour restructuring exercise.
Reference: <author> K. A. Ericsson and H. A. Simon. </author> <title> Protocol Analysis: Verbal Reports as Data. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <note> revised edition, </note> <year> 1993. </year>
Reference: <author> N. V. Flor and E. L. Hutchins. </author> <title> Analyzing distributed cognition in software teams: A case study of team programming during perfective software maintenance. </title> <editor> In J. Koenemann-Belliveau, T. G. Moher, and S. P. Robertson, editors, </editor> <title> Empirical Studies of Programmers: </title> <booktitle> Fourth Workshop, </booktitle> <pages> pages 36-64. </pages> <publisher> Ablex, </publisher> <address> Norwood, NJ, </address> <year> 1991. </year>
Reference-contexts: Inferences from such descriptions can be used as guidelines for tool development or provide hypotheses that can be tested with a specific experiment at a later time. Our study is modeled on Flor's studies of organization within groups of programmers in a laboratory setting <ref> (Flor & Hutchins 91) </ref>. Flor's work differs from the other programmer studies because he used pairs of programmers working together as subjects.
Reference: <author> W. D. Gray and J. R. Anderson. </author> <title> Change episodes in coding: When and how do programmers change their code? In G. </title> <editor> M. Olson, S. Sheppard, and E. Soloway, editors, </editor> <title> Empirical Studies of Programmers: </title> <booktitle> Second Workshop, </booktitle> <pages> pages 185-197. </pages> <publisher> Ablex, </publisher> <address> Norwood, NJ, </address> <year> 1987. </year>
Reference: <author> W. G. Griswold and D. Notkin. </author> <title> Computer-aided vs. manual program restructuring. </title> <booktitle> ACM SIGSOFT Software Engineering Notes, </booktitle> <volume> 17(1) </volume> <pages> 33-41, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: Study Method 3.1. MOTIVATION FOR USING SYSTEMATIC OBSERVATIONAL TECHNIQUES Choosing a method to evaluate our tools was not easy. We know of only one study of programmers performing restructuring of any kind <ref> (Griswold & Notkin 92) </ref>, and it was ad hoc and focused on the mechanics of the change. Also, our restructuring tool is a prototype that can only be used on small Scheme programs, so a case study in an industrial setting is currently infeasible.
Reference: <author> W. G. Griswold and D. Notkin. </author> <title> Automated assistance for program restructuring. </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <volume> 2(3) </volume> <pages> 228-269, </pages> <month> July </month> <year> 1993. </year>
Reference: <author> W. G. Griswold. </author> <title> Program Restructuring as an Aid to Software Maintenance. </title> <type> PhD dissertation, </type> <institution> University of Washington, Dept. of Computer Science & Engineering, </institution> <month> August </month> <year> 1991. </year> <note> Technical Report No. 91-08-04. </note>
Reference: <author> W. G. Griswold, M. I. Chen, R. W. Bowdidge, and J. D. Morgenthaler. </author> <title> Tool support for planning the restructuring of data abstractions in large systems. </title> <booktitle> In ACM SIGSOFT '96 Symposium on the Foundations of Software Engineering, </booktitle> <month> October </month> <year> 1996. </year>
Reference-contexts: We have proposed and implemented changes to the star diagram's features to better support the bookkeeping of design information in a star diagram tool for manipulating large C programs <ref> (Griswold et al. 96) </ref>. This tool helps identify abstractions and plan an encapsulation by allowing the programmer to annotate expressions as likely functions and remove them from the star diagram, but does not actually transform the source code.
Reference: <author> R. Guindon. </author> <title> Designing the design process: Exploiting opportunistic thoughts. </title> <journal> Human-Computer Interaction, </journal> <volume> 5(2) </volume> <pages> 305-344, </pages> <year> 1990. </year>
Reference-contexts: We discuss these four influences in turn. Although programmers in industry would not be asked to restructure a program in two hours, it is common for software design problems to be solved under extreme time constraints <ref> (Guindon 90b) </ref>. Moreover, the programmers were able to complete the task in the given time. Programmers in industry would also have access to additional methods of bookkeeping, such as marking printouts of the code. Programmers in the paper.tex; 28/03/1997; 15:34; no v.; p.15 16 Robert W. Bowdidge and William G. <p> Bowdidge and William G. Griswold change. In such cases, the programmer may have to follow an exploratory process to perform a maintenance change. The use of process to minimize consistency and completeness errors is reminiscent of Guindon's theory of opportunistic design <ref> (Guindon 90a) </ref>. Guin-don suggests that a designer sometimes may order actions during design to handle related concepts sequentially and minimize the details that must be remembered throughout the design process.
Reference: <author> R. Guindon. </author> <title> Knowledge exploited by experts during software system design. </title> <journal> International Journal of Man-Machine Studies, </journal> <volume> 33(3) </volume> <pages> 279-304, </pages> <year> 1990. </year> <title> paper.tex; 28/03/1997; 15:34; no v.; p.42 How Software Engineering Tools Organize Programmer Behavior... </title> <note> 43 R. </note> <author> Guindon, H. Krasner, and B. Curtis. </author> <title> Breakdowns and processes during the early activities of software design by professionals. </title> <booktitle> In Empirical Studies of Programmers, </booktitle> <pages> pages 65-81, </pages> <year> 1987. </year>
Reference-contexts: We discuss these four influences in turn. Although programmers in industry would not be asked to restructure a program in two hours, it is common for software design problems to be solved under extreme time constraints <ref> (Guindon 90b) </ref>. Moreover, the programmers were able to complete the task in the given time. Programmers in industry would also have access to additional methods of bookkeeping, such as marking printouts of the code. Programmers in the paper.tex; 28/03/1997; 15:34; no v.; p.15 16 Robert W. Bowdidge and William G. <p> Bowdidge and William G. Griswold change. In such cases, the programmer may have to follow an exploratory process to perform a maintenance change. The use of process to minimize consistency and completeness errors is reminiscent of Guindon's theory of opportunistic design <ref> (Guindon 90a) </ref>. Guin-don suggests that a designer sometimes may order actions during design to handle related concepts sequentially and minimize the details that must be remembered throughout the design process.
Reference: <author> S. Houde and R. Sellman. </author> <title> In search of design principles for programming environments. </title> <booktitle> In Conference on Human Factors in Computing Systems (CHI '94), </booktitle> <pages> pages 424-430, </pages> <year> 1994. </year>
Reference-contexts: Other studies tested the design of a database-style pro paper.tex; 28/03/1997; 15:34; no v.; p.11 12 Robert W. Bowdidge and William G. Griswold gramming environment for the Dylan language (Dumas & Parsons 95) and listed common problems in Macintosh programming environments <ref> (Houde & Sellman 94) </ref>. We chose to systematically observe programmers as they performed restructuring during a two hour restructuring exercise. With such methods, we can analyze the behavior of a small number of subjects in a simulated setting, and produce qualitative descriptions rather than quantitative results.
Reference: <author> R. E. Johnson and W. F. Opdyke. </author> <title> Refactoring and Aggregation. </title> <booktitle> In Object Technologies for Advanced Software, volume 742 of Lecture Notes in Computer Science, </booktitle> <pages> pages 264-278. </pages> <booktitle> First JSSST International Symposium, </booktitle> <month> November </month> <year> 1993. </year>
Reference: <author> B. M. Lange and T. G. Moher. </author> <title> Some strategies of reuse in an object-oriented programming environment. </title> <booktitle> In Conference on Human Factors of Computing Systems (CHI '89), </booktitle> <pages> pages 69-73, </pages> <year> 1989. </year>
Reference: <author> S. Letovsky and E. Soloway. </author> <title> Strategies for documenting delocalized plans. </title> <booktitle> In Conference on Software Maintenance, </booktitle> <pages> pages 144-151, </pages> <year> 1985. </year>
Reference-contexts: Exploratory studies involving cognitive or problem-solving issues are often performed in a laboratory setting. The setting allows the experimenter to choose tasks and programs designed to expose specific behaviors, and to record observations easily. Letovsky observed programmers' program comprehension methods <ref> (Letovsky & Soloway 85) </ref> and browsing strategies (Letovsky 86). Sutcliffe and Maiden explored mental behavior of analysts during problem solving (Sutcliffe & Maiden 92). Cousin used observations of programmers to identify information that should be provided in a software engineering environment (Cousin & Collofello 92).
Reference: <author> S. Letovsky. </author> <title> Cognitive processes in program comprehension. </title> <booktitle> In First Workshop on Empirical Studies of Programmers, </booktitle> <pages> pages 58-79, </pages> <year> 1986. </year>
Reference-contexts: Exploratory studies involving cognitive or problem-solving issues are often performed in a laboratory setting. The setting allows the experimenter to choose tasks and programs designed to expose specific behaviors, and to record observations easily. Letovsky observed programmers' program comprehension methods (Letovsky & Soloway 85) and browsing strategies <ref> (Letovsky 86) </ref>. Sutcliffe and Maiden explored mental behavior of analysts during problem solving (Sutcliffe & Maiden 92). Cousin used observations of programmers to identify information that should be provided in a software engineering environment (Cousin & Collofello 92).
Reference: <author> B. Lientz and E. Swanson. </author> <title> Software Maintenance Management: A Study of the Maintenance of Computer Application Software in 487 Data Processing Organizations. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1980. </year>
Reference-contexts: 1. Introduction Software maintenance is the greatest contributor to the cost of useful soft ware. Lientz and Swanson found that software maintenance can account for 70% of the total software system's lifetime cost <ref> (Lientz & Swanson 80) </ref>. Boehm cited an Air Force project in which the development cost was $30 per line, but the maintenance cost was $4,000 per line (Boehm 75).
Reference: <author> N. Miyake. </author> <title> Constructive interaction and the iterative process of understanding. </title> <journal> Cognitive Science, </journal> <volume> 10(2) </volume> <pages> 151-177, </pages> <year> 1986. </year>
Reference: <author> D. A. Norman. </author> <title> Cognitive engineering. </title> <editor> In D. A. Norman and S. W. Draper, editors, </editor> <title> User Centered System Design. </title> <publisher> Lawrence Erlbaum Associates, </publisher> <address> Hillsdale, NJ, </address> <year> 1986. </year>
Reference-contexts: Norman's model for planning and performing actions describes this as perceiving system state and evaluat paper.tex; 28/03/1997; 15:34; no v.; p.35 36 Robert W. Bowdidge and William G. Griswold ing current state with respect to the goal <ref> (Norman 86) </ref>. An evaluation may result in noting a failure in prior planning, and backtracking may be undertaken to attempt another solution. As with the other issues discussed in this section, there are many ways that programmers can evaluate progress, and the tools being employed affect the evaluation process.
Reference: <author> D. A. Norman. </author> <title> The Design of Everyday Things. </title> <publisher> Doubleday, </publisher> <address> New York, </address> <year> 1989. </year>
Reference-contexts: Although time-consuming, they require few other resources and are well-suited to studies of research prototypes. 1 affordance: The perceived and actual properties of a thing, primarily those fundamental properties that determine just how the thing could possibly be used. <ref> (Norman 89) </ref> paper.tex; 28/03/1997; 15:34; no v.; p.4 How Software Engineering Tools Organize Programmer Behavior... 5 (get-line *line-storage* lineno) ... (get-line *line-storage* lineno) ... (define get-line (lambda (ls line) (list-ref ls line))) (get-line lineno) ... (get-line i) ... (define get-line (lambda (line) (list-ref *line-storage* line))) (a) Before Inline Parameter (b) After
Reference: <author> W. F. Opdyke and R. E. Johnson. </author> <title> Refactoring: An aid in designing application frameworks and evolving object-oriented systems. </title> <booktitle> In Proceedings of the 1990 Symposium on Object-Oriented Programming Emphasizing Practical Applications, </booktitle> <pages> pages 274-282, </pages> <month> September </month> <year> 1990. </year>
Reference: <author> W. F. Opdyke. </author> <title> Refactoring: A Program Restructuring Aid in Designing Object-Oriented Applications Frameworks. </title> <type> PhD dissertation, </type> <institution> University of Illinois at Urbana-Champaign, Dept. of Computer Science, </institution> <year> 1992. </year> <note> Technical Report No. 1759. </note>
Reference: <author> D. L. Parnas. </author> <title> On the criteria to be used in decomposingsystems into modules. </title> <journal> Communications of the ACM, </journal> <volume> 15(12) </volume> <pages> 1053-1058, </pages> <month> December </month> <year> 1972. </year>
Reference-contexts: Griswold past (Belady & Lehman 71). Such changes are necessitated by the need to accommodate the demands of users for new features and changes in the underlying technology. If these changes have not been appropriately anticipated in the system's design, the change will span many system modules <ref> (Parnas 72) </ref>, incurring high costs and likely degrading software structure (Belady & Lehman 71). <p> By isolating the code related to a changing design decision within a module, the change can be applied locally, and hence at lower cost <ref> (Parnas 72) </ref>. Restructuring, however, is a difficult task, requiring a global understanding of the program's structure as well as global changes to achieve the desired change in structure. <p> Interviews usually lasted about twenty minutes. The programmers were given an implementation of the KWIC indexing program <ref> (Parnas 72) </ref>, written in a functional decomposition style (Appendix B). Although short, KWIC is not a toy program. The program is about 150 lines, containing 14 functions and four major global variables used throughout the program. The program also contains nested functions.
Reference: <author> M. B. Rosson and J. M. Carroll. </author> <title> Active programming strategies in reuse. </title> <booktitle> In ECOOP '93, 7th European Conference on Object-Oriented Programming, </booktitle> <pages> pages 4-20, </pages> <year> 1993. </year>
Reference: <author> P. M. Sanderson and C. Fisher. </author> <title> Exploratory sequential data analysisfoundations. </title> <journal> Human-Computer Interaction, </journal> <volume> 9(3) </volume> <pages> 251-317, </pages> <year> 1994. </year>
Reference-contexts: These techniques, most generally called systematic observational techniques (Weick 68), are common methods for studying real-world behavior in the social sciences. When the observations are recorded on video or audio tape and then analyzed, these techniques can be referred to as exploratory sequential data analysis <ref> (Sanderson & Fisher 94) </ref>.
Reference: <author> B. Schneiderman and J. M. Carroll. </author> <title> Ecological studies of professional programmers. </title> <journal> Communications of the ACM, </journal> <volume> 31(11) </volume> <pages> 1256-1258, </pages> <year> 1988. </year>
Reference-contexts: Because little is known about how programmers use these tools, it is not possible to isolate and test a few experimental variables. Indeed, Schneider-man and others have noted that understanding the context of usage is crucial to understanding how software tools are used <ref> (Schneiderman & Carroll 88) </ref>, and so unless we understand the full context of restructuring and encapsulation tasks, we may make inappropriate decisions in the design of a restructuring tool.
Reference: <author> D. A. Schon. </author> <title> The Reflective Practitioner: How Professionals Think in Action. </title> <publisher> Basic Books, </publisher> <address> New York, </address> <year> 1982. </year>
Reference-contexts: Similarly, the restructuring tool teams' exploratory approaches to restructuring mirrors Schon's theory of reflection in action <ref> (Schon 82) </ref>. Reflection in action asserts that professionals in many disciplines cannot solve problems with cookbook answers. Instead, they must explore the design space of the problem by creating a partial solution, evaluating whether the partial solution leads towards an appropriate solution, and refining the solution.
Reference: <author> A. L. Strauss. </author> <title> Qualitative Analysis for Social Scientists. </title> <publisher> Cambridge University Press, </publisher> <address> Cam-bridge, </address> <year> 1987. </year>
Reference: <author> A. G. Sutcliffe and N. A. M. Maiden. </author> <title> Analysing the novice analyst: cognitive models in software engineering. </title> <journal> International Journal of Man-Machine Studies, </journal> <volume> 36(5) </volume> <pages> 719-740, </pages> <year> 1992. </year>
Reference-contexts: The setting allows the experimenter to choose tasks and programs designed to expose specific behaviors, and to record observations easily. Letovsky observed programmers' program comprehension methods (Letovsky & Soloway 85) and browsing strategies (Letovsky 86). Sutcliffe and Maiden explored mental behavior of analysts during problem solving <ref> (Sutcliffe & Maiden 92) </ref>. Cousin used observations of programmers to identify information that should be provided in a software engineering environment (Cousin & Collofello 92). Lange and Rosson both documented reuse strategies in an object-oriented programming environment (Lange & Moher 89; Rosson & Carroll 93).
Reference: <author> K. E. Weick. </author> <title> Systematic observational methods. </title> <editor> In G. Lindzey and E. Aronson, editors, </editor> <booktitle> The Handbook of Social Psychology, </booktitle> <pages> pages 357-451. </pages> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1968. </year>
Reference-contexts: We can understand how programmers perform restructuring by observing their behavior during a restructuring task. These techniques, most generally called systematic observational techniques <ref> (Weick 68) </ref>, are common methods for studying real-world behavior in the social sciences. When the observations are recorded on video or audio tape and then analyzed, these techniques can be referred to as exploratory sequential data analysis (Sanderson & Fisher 94).
Reference: <author> D. Wildman. </author> <title> Getting the most from paired-user testing. </title> <journal> ACM Interactions, </journal> <volume> 2(3) </volume> <pages> 21-27, </pages> <year> 1995. </year> <note> paper.tex; 28/03/1997; 15:34; no v.; </note> <author> p.43 44 Robert W. Bowdidge and William G. </author> <note> Griswold </note>
References-found: 40

