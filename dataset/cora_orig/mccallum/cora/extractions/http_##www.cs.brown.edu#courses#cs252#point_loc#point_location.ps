URL: http://www.cs.brown.edu/courses/cs252/point_loc/point_location.ps
Refering-URL: http://www.cs.brown.edu/courses/cs252/point_loc/home.html
Root-URL: http://www.cs.brown.edu/
Title: CS257 Final Project: Efficient Point Location in a Convex Spatial Cell Complex|A Tutorial  
Author: Yi-Jen Chiang 
Date: 29 May 1990  
Pubnum: SIS SISW05187  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> B. Chazelle, </author> <title> "How to Search in History," </title> <booktitle> Information and Control 64 (1985), </booktitle> <pages> 77-99. </pages>
Reference-contexts: Restriction: the cell complex is determined by an arrangement of n planes. Complexity: query time: O (log n), space O (n 3 ), pre-processing time: O (n 11 = log n). Remark: the query time is optimal. Canal Tree Technique Discoverer: Chazelle, 1985 <ref> [1] </ref>. Restriction: the cell complex is determined by an arrangement of n planes Complexity: query time: O (log 2 n), space: O (n 3 ), pre-processing time: O (n 3 log n).
Reference: [2] <author> B. Chazelle & J. Friedman, </author> <title> "A Deterministic View of Random Sampling and its use in Geometry," </title> <booktitle> Proc. 29th IEEE Symp. on Foundations of Computer Science (1988), </booktitle> <pages> 539-548. </pages>
Reference-contexts: Complexity: query time: O (log n), space: O (n 4 = log n), pre-processing time: O (n 4 ). Remark: the query time is optimal. 3 Random Sampling Technique Discoverer: Chazelle-Friedman, 1988 <ref> [2] </ref>. Restriction: the cell complex is determined by an arrangement of n planes. Complexity: query time: O (log n), space O (n 3 ), pre-processing time: O (n 11 = log n). Remark: the query time is optimal. Canal Tree Technique Discoverer: Chazelle, 1985 [1]. <p> The numbers 1 through 6 on the top horizontal line denote the "entry point array" A. Here each node has 1 extra field (i.e., e = 1). Suppose we want to traverse the version 2. Following the pointer in A <ref> [2] </ref>, we enter the node E with version stamp 1. It has two pointers to its left child, with different version stamps; we take the one with the largest version stamp not exceeding 2. <p> To see which subtree of contains the searching interval, we walk up 26 from the lower (or upper) bound of the searching interval to . This is best demonstrated by an example, see Fig 14. Notice especially step (2) to step (3): to fall into the searching interval <ref> [ 1 ; 2 ] </ref>, we must move left. This is decided by walking up from 1 (or 2 ) to 2 , so that we know [ 1 ; 2 ] is in the left subtree of 2 . <p> Notice especially step (2) to step (3): to fall into the searching interval <ref> [ 1 ; 2 ] </ref>, we must move left. This is decided by walking up from 1 (or 2 ) to 2 , so that we know [ 1 ; 2 ] is in the left subtree of 2 . The height of the primary structure of T fl is O (log n), so the walking-up step just described takes O (log n) time.
Reference: [3] <author> R. Cole, </author> <title> "Searching and Storing Similar Lists," </title> <editor> J. </editor> <booktitle> of Algorithms 7 (1986), </booktitle> <pages> 202-220. </pages>
Reference-contexts: In all reported research, the cell complex should satisfy some restrictive condition. Here we discuss briefly three of them. The discussion is mainly on their restrictions and results, without actually describing the methods, since our focus is on the method of this paper. Similar List Method Discoverer: Cole, 1986 <ref> [3] </ref>. Restriction: the cell complex is determined by an arrangement of n planes. Note that under this restriction, the cell complex is always convex, thus this is a stronger condition than that of convexity.
Reference: [4] <author> J.R. Dricsoll, N. Sarnak, D.D. Sleator & R.E. Tarjan, </author> <title> "Making Data Structures Persistent," </title> <editor> J. </editor> <booktitle> Computer and System Sciences 38 (1989), </booktitle> <pages> 86-124. </pages>
Reference-contexts: The method proposed in this paper is mainly by combining two recent results: 1 Please see Computational Geometry: An Introduction by Preparata and Shamos, p.41 1 1. The persistence-addition technique of Driscoll et al. <ref> [4] </ref>, and 2. The dynamic planar point location technique of Preparata-Tamassia [6, 7]. <p> In contrast, a persistent data structure allows access to any version, old or new, at any time. The general technique of <ref> [4] </ref> can be applied to any ephemeral structure to make it persistent, if the ephemeral structure satisfies the weak condition that its nodes have bounded in-degree. <p> This is somewhat a strong condition; see Fig 1 for an example that violates the restriction. 3 The Technique for Adding Persistence: Node Copying|a Building Block We now begin to discuss the method proposed in this paper. We start by demonstrating the technique of Driscoll et al <ref> [4] </ref> for adding persistence to a dynamic linked data structure. Ordinary dynamic linked data structure is called ephemeral, in the sense that making a change to the structure destroys the old version, leaving only 4 (looking down along the z-axis). the new one.
Reference: [5] <author> F. Preparata & R. Tamassia, </author> <title> "Efficient Point Location in a Convex Spa--tial Cell Complex", </title> <institution> Brown University Technical Report No. CS-89-47, </institution> <year> 1989. </year>
Reference-contexts: 1 Introduction This report is a tutorial for the paper "Efficient Point Location in a Convex Spatial Cell Complex" by F. Preparata and R. Tamassia <ref> [5] </ref>. Point location in three-dimensional space, called spatial point location, is a natural generalization of the well-known planar point location 1 . <p> Regions r 1 and r 2 are those formerly to the left and right of e, respectively. In the papers [6, 7], only Insert and Delete are presented; this paper <ref> [5] </ref> extends the repertory of update operations to include Expand and Contract. We summarize its performance in the following theorem: Theorem 3 Let R be a monotone planar subdivision with n vertices.
Reference: [6] <author> F. Preparata & R. Tamassia, </author> <title> "Fully Dynamic Techniques for Point Location and Transitive Closure in Planar Structures," </title> <booktitle> Proc. 29th IEEE Symp. on Foundations of Computer Science (1988). </booktitle> <pages> 558-567. </pages>
Reference-contexts: The method proposed in this paper is mainly by combining two recent results: 1 Please see Computational Geometry: An Introduction by Preparata and Shamos, p.41 1 1. The persistence-addition technique of Driscoll et al. [4], and 2. The dynamic planar point location technique of Preparata-Tamassia <ref> [6, 7] </ref>. The resulting method has the following worst-case complexity: query time: O (log 2 N ), space: O (N log 2 N ), and preprocessing time: O (N log 2 N ), where N is the number of facets in the given convex spatial cell complex. <p> Until recently, the main obstacle to the 3-dimensional point-location was the lack of a suitable ephemeral data structure for the dynamic planar point-location. The recent discovery <ref> [6, 7] </ref> of an efficient such structure for monotone planar subdivisions provides the missing component, which, combined 2 That is, the cell complex is given in advance and will not be altered. 3 By dynamic, we mean that the 2-dimensional subdivision can be altered by adding or deleting vertices or edges. <p> that each subdivision P (z) (-1 &lt; z &lt; +1) is connected and monotone. 5 Dynamic Data Structure for Planar Point Location in a Monotone Subdivision|Another Building Block Motivated by the need of a dynamic (ephemeral) data structure for planar point-location, we describe in this section the technique of Preparata-Tamassia <ref> [6, 7] </ref>. The planar subdivision R is required to be monotone, and update operations are also restricted to the condition that the resulting subdivision still be monotone. <p> Contract (e; r 1 ; r 2 ; v 1 ; v 2 ; v): Contract edge e between vertices v 1 and v 2 into vertex v. Regions r 1 and r 2 are those formerly to the left and right of e, respectively. In the papers <ref> [6, 7] </ref>, only Insert and Delete are presented; this paper [5] extends the repertory of update operations to include Expand and Contract. We summarize its performance in the following theorem: Theorem 3 Let R be a monotone planar subdivision with n vertices. <p> t (e 2 ) = r 2 2 result: q to the left of e 2 q (3) visit 1 ) searching interval:[ 1 ; 2 ] move left ) searching interval:unchanged result: q is below LOW (proper ( 2 )) (2) visit 2 (1) visit 4 (0) searching interval <ref> [ 1 ; 6 ] </ref> (c) (r 2 r 3 ) e 2 ; e 6 ; e 10 ; e 11 ; e 12 4 ; e 8 4 ; e 5 4 2 6 5 4 3 2 1 r 7 r 4 r 2 e 12 e 10 <p> Instead of performing such expansion/contraction by the elementary updates, we consider directly its effect on the ordering of the regions of P (z). We extend "" to be an order on E [ V [ F introduced in <ref> [6] </ref>, where E, V , and F are the set of edges, vertices and regions 34 of P (z), respectively. We maintain an "extended-sequence" obtained from sorting all elements in E [ V [ F according to the extended order.
Reference: [7] <author> F. Preparata & R. Tamassia, </author> <title> "Fully Dynamic Point Location in a Monotone Subdivision," </title> <journal> SIAM J. Computing 18 (1989), </journal> <pages> 811-830. </pages>
Reference-contexts: The method proposed in this paper is mainly by combining two recent results: 1 Please see Computational Geometry: An Introduction by Preparata and Shamos, p.41 1 1. The persistence-addition technique of Driscoll et al. [4], and 2. The dynamic planar point location technique of Preparata-Tamassia <ref> [6, 7] </ref>. The resulting method has the following worst-case complexity: query time: O (log 2 N ), space: O (N log 2 N ), and preprocessing time: O (N log 2 N ), where N is the number of facets in the given convex spatial cell complex. <p> Until recently, the main obstacle to the 3-dimensional point-location was the lack of a suitable ephemeral data structure for the dynamic planar point-location. The recent discovery <ref> [6, 7] </ref> of an efficient such structure for monotone planar subdivisions provides the missing component, which, combined 2 That is, the cell complex is given in advance and will not be altered. 3 By dynamic, we mean that the 2-dimensional subdivision can be altered by adding or deleting vertices or edges. <p> that each subdivision P (z) (-1 &lt; z &lt; +1) is connected and monotone. 5 Dynamic Data Structure for Planar Point Location in a Monotone Subdivision|Another Building Block Motivated by the need of a dynamic (ephemeral) data structure for planar point-location, we describe in this section the technique of Preparata-Tamassia <ref> [6, 7] </ref>. The planar subdivision R is required to be monotone, and update operations are also restricted to the condition that the resulting subdivision still be monotone. <p> Contract (e; r 1 ; r 2 ; v 1 ; v 2 ; v): Contract edge e between vertices v 1 and v 2 into vertex v. Regions r 1 and r 2 are those formerly to the left and right of e, respectively. In the papers <ref> [6, 7] </ref>, only Insert and Delete are presented; this paper [5] extends the repertory of update operations to include Expand and Contract. We summarize its performance in the following theorem: Theorem 3 Let R be a monotone planar subdivision with n vertices.
Reference: [8] <author> R.E. Tarjan, </author> <title> "Data Structures and Network Algorithms," </title> <booktitle> CBMS-NSF Regional Conference Series in Applied Mathematics, 44, Society for Industrial and Applied Mathematics, </booktitle> <year> (1983), </year> <pages> 48-53. 39 </pages>
Reference-contexts: We conclude that every monotone subdivision R can be transformed into a regular subdivision R fl . 5.2 Data Structure In the following description, we assume that all sorted lists are stored as red-black trees <ref> [8] </ref>, which have the following nice properties: 1. The tree is balanced, thus the height is O (log n). 2. Only O (1) rotations are needed to rebalance the tree after an inser tion/deletion. 3. The data structure can be used to implement concatenable queues.
References-found: 8

