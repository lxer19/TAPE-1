URL: ftp://ftp.cs.huji.ac.il/users/transis/TR96-3.ps.gz
Refering-URL: http://www.cs.huji.ac.il/~grishac/grishac.html
Root-URL: http://www.cs.huji.ac.il
Email: Email: fgrishac,nabil,idish,dolevg@cs.huji.ac.il  
Title: Supporting Multiple Quality of Service Options with High Performance Groupware  
Author: Gregory V. Chockler Nabil Huleihel Idit Keidar Danny Dolev 
Note: This work was supported by Ministry of Science of Israel, grant number 032-7658  
Address: Jerusalem, Israel  
Affiliation: Institute of Computer Science The Hebrew University of Jerusalem  
Web: Url: http://www.cs.huji.ac.il/f~grishac,~nabil,~idish,~dolevg  
Abstract: Technical Report CS96-3 March 1996 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Communications of the ACM 39(4), </institution> <note> special issue on Group Communications Systems, April 1996. To appear. </note>
Reference-contexts: This allows us to selectively impose order guarantees relative to a subset of the messages, independently of other messages. As a test case, we describe the implementation of QoS channels in two GCSs: Transis and Horus <ref> [1] </ref>. Our approach is most suitable for applications that require high bandwidth fast multicast, with different QoS requirements for different messages, e.g. where most of the multicast has weak order and reliability constraints, but for a small portion of "critical" messages reliability and strong order constraints are vital. <p> Some of the leading GCSs today are: Transis, Totem, ISIS, Horus, Psync, Relacs, RMP, and Newtop; A survey of GCSs may be found in <ref> [1] </ref>. A GCS usually runs in an environment in which processes and communication links can fail, and in which messages may be lost or arbitrarily delayed. <p> A detailed description of FC implementation using the network sliding window approach can be found in [4]. 5 QMC Incorporation in Transis and Horus We now present the incorporation of QMC in the Transis and in the Horus <ref> [1] </ref> GCSs. QMC could be similarly implemented in other GCSs. 5.1 Incorporation of QMC in Transis Transis provides three types of multicast services: Causal, Agreed k and Safe.
Reference: [2] <author> M. Ahuja. </author> <title> Assertionas about Past and Future in Highways: Global Flush Broadcast and Flush-vector-time. </title> <journal> Information Processing Letters, </journal> <volume> 48(1) </volume> <pages> 21-28, </pages> <month> Octo-ber </month> <year> 1993. </year>
Reference-contexts: It is possible to extend Horus so that more than one semantics will be supported in the same connection fl . A similar approach was taken in other systems, e.g. Highways <ref> [2] </ref>, where messages with weak order constraints interleave with messages with higher constraints. However, such an approach is inadequate for the applications mentioned above. This approach suffers from one main drawback: There's no possibility to selectively enforce order guarantees relative to a subset of the messages, independently of other messages.
Reference: [3] <author> Y. Amir, D. Breitgand, G. Chockler, and D. Dolev. </author> <title> Group Communication as an Infrastructure for Distributed System Management. </title> <booktitle> In International Workshop on Services in Distributed and Networked Environment, number 3rd, </booktitle> <month> June </month> <year> 1996. </year> <note> To appear. </note>
Reference-contexts: The GCS also reports to the application which processes are reachable at any given time. For example, the Virtual Synchrony [7], Strong Virtual Synchrony [9] and Extended Virtual Synchrony [14] models provide powerful semantics, that greatly facilitate application design <ref> [7, 3, 10, 5] </ref>. GCSs today have begun to exploit new technologies, and to run over fast networks e.g. <p> Prioritized channels are most suitable for video transmission [11, 20]. Audio transmission uses an unreliable fifo channel. Other applications (e.g. cooperative editing) manage shared data, that has to be consistently replicated. GCS semantics provide a powerful tool for replication, as demonstrated in <ref> [10, 5, 3] </ref>. Floor Control: The agent allows input for a certain application to come from one conferee, who is currently authorized to provide input. This is analogous to passing the pen for the board in a meeting. <p> The servers can consistently share information while each is serving clients. If one server crashes or detaches from a client, the other servers get an indication, and can smoothly take over. This is similar to the approach taken in the implementation of [11] in Horus. Our experience in <ref> [3] </ref> shows that a distributed system management application can greatly benefit from the semantics of GCS. Distributed software installation and upgrade application uses GCS to group target machines with the same installation requirements into a single multicast group.
Reference: [4] <author> Y. Amir, D. Dolev, S. Kramer, and D. Malki. Transis: </author> <title> A Communication SubSystem for High Availability. </title> <booktitle> In FTCS conference, </booktitle> <volume> number 22, </volume> <month> July </month> <year> 1992. </year>
Reference-contexts: The role of FC is to slow down the transmission rate if there are many messages the reception of which is not acknowledged by all the members of the current membership. A detailed description of FC implementation using the network sliding window approach can be found in <ref> [4] </ref>. 5 QMC Incorporation in Transis and Horus We now present the incorporation of QMC in the Transis and in the Horus [1] GCSs. QMC could be similarly implemented in other GCSs. 5.1 Incorporation of QMC in Transis Transis provides three types of multicast services: Causal, Agreed k and Safe. <p> The acks are used by the k The Causal and Agreed services are defined in Section 2.1. 12 target processes in order to detect lost messages and reconstruct the causal relations between messages (for details see <ref> [8, 4] </ref>). Notice that the DAG reflects the causal relationship among messages. Since all Transis services preserve the causal order, a message does not become deliverable until it causally follows only delivered messages. All the deliverable messages in the DAG form the set of candidates.
Reference: [5] <author> Y. Amir, D. Dolev, P. M. Melliar-Smith, and L. E. Moser. </author> <title> Robust and Efficient Replication using Group Communication. </title> <type> Technical Report CS94-20, </type> <institution> Institute of Computer Science, The Hebrew University of Jerusalem, Jerusalem, Israel, </institution> <year> 1994. </year>
Reference-contexts: The GCS also reports to the application which processes are reachable at any given time. For example, the Virtual Synchrony [7], Strong Virtual Synchrony [9] and Extended Virtual Synchrony [14] models provide powerful semantics, that greatly facilitate application design <ref> [7, 3, 10, 5] </ref>. GCSs today have begun to exploit new technologies, and to run over fast networks e.g. <p> Prioritized channels are most suitable for video transmission [11, 20]. Audio transmission uses an unreliable fifo channel. Other applications (e.g. cooperative editing) manage shared data, that has to be consistently replicated. GCS semantics provide a powerful tool for replication, as demonstrated in <ref> [10, 5, 3] </ref>. Floor Control: The agent allows input for a certain application to come from one conferee, who is currently authorized to provide input. This is analogous to passing the pen for the board in a meeting.
Reference: [6] <author> T. Anker, D. Breitgand, D. Dolev, and Z. Levy. </author> <note> The WAN according to GARP. In preparation. </note>
Reference-contexts: For example, the Virtual Synchrony [7], Strong Virtual Synchrony [9] and Extended Virtual Synchrony [14] models provide powerful semantics, that greatly facilitate application design [7, 3, 10, 5]. GCSs today have begun to exploit new technologies, and to run over fast networks e.g. ATM <ref> [6] </ref> in WAN environments. 1.2 Currently, Groupware is Problematic In spite of its strengths, groupware is rarely used for applications that utilize high throughput fast multicast, and require reliability for only a small portion of their multicasts. Many multimedia applications are in this category, e.g.
Reference: [7] <author> K. Birman and T. Joseph. </author> <title> Exploiting Virtual Synchrony in Distributed Systems. </title> <booktitle> In Symp. Operating Systems Principles, </booktitle> <volume> number 11, </volume> <pages> pages 123-138. </pages> <publisher> ACM, </publisher> <month> Nov 87. </month>
Reference-contexts: In such "inconvenient" environments, the GCS simulates to its application a "benign" world in which message delivery is reliable within the set of reachable (live and connected) 1 processes. The GCS also reports to the application which processes are reachable at any given time. For example, the Virtual Synchrony <ref> [7] </ref>, Strong Virtual Synchrony [9] and Extended Virtual Synchrony [14] models provide powerful semantics, that greatly facilitate application design [7, 3, 10, 5]. GCSs today have begun to exploit new technologies, and to run over fast networks e.g. <p> The GCS also reports to the application which processes are reachable at any given time. For example, the Virtual Synchrony [7], Strong Virtual Synchrony [9] and Extended Virtual Synchrony [14] models provide powerful semantics, that greatly facilitate application design <ref> [7, 3, 10, 5] </ref>. GCSs today have begun to exploit new technologies, and to run over fast networks e.g. <p> The task of the GCS is to simulate to the application an environment in which message delivery is reliable within the set of reachable (live and connected) processes, and give the application an indication which processes are reachable at any given time. The Virtual Synchrony <ref> [7] </ref>, Strong Virtual Synchrony [9] and Extended Virtual Synchrony [14] models provide powerful semantics.
Reference: [8] <author> G. Chockler, N. Huleihel, and D. Dolev. ARTOP: </author> <title> An Adaptive Randomized Total Ordering Protocol. </title> <note> In preparation. </note>
Reference-contexts: The acks are used by the k The Causal and Agreed services are defined in Section 2.1. 12 target processes in order to detect lost messages and reconstruct the causal relations between messages (for details see <ref> [8, 4] </ref>). Notice that the DAG reflects the causal relationship among messages. Since all Transis services preserve the causal order, a message does not become deliverable until it causally follows only delivered messages. All the deliverable messages in the DAG form the set of candidates. <p> Transis employs sophisticated algorithms for the Agreed and Safe delivery. These algorithms are based solely on the DAG structure without exchange of additional messages <ref> [8] </ref>. (a) The QMC 3-D DAG in Transis (b) QMC in Horus We extend the DAG data structure of the Transis RMM to incorporate QoS mul-ticast channels. The begin-channel and end-channel messages are multicast using the DAG.
Reference: [9] <author> R. Friedman and R. V. Renesse. </author> <title> Strong and Weak Virtual Synchrony in Horus. </title> <type> TR 95-1537, </type> <institution> dept. of Computer Science, Cornell University, </institution> <month> August </month> <year> 1995. </year>
Reference-contexts: The GCS also reports to the application which processes are reachable at any given time. For example, the Virtual Synchrony [7], Strong Virtual Synchrony <ref> [9] </ref> and Extended Virtual Synchrony [14] models provide powerful semantics, that greatly facilitate application design [7, 3, 10, 5]. GCSs today have begun to exploit new technologies, and to run over fast networks e.g. <p> The task of the GCS is to simulate to the application an environment in which message delivery is reliable within the set of reachable (live and connected) processes, and give the application an indication which processes are reachable at any given time. The Virtual Synchrony [7], Strong Virtual Synchrony <ref> [9] </ref> and Extended Virtual Synchrony [14] models provide powerful semantics.
Reference: [10] <author> I. Keidar and D. Dolev. </author> <title> Efficient Message Ordering in Dynamic Networks. </title> <booktitle> In ACM Symp. on Prin. of Distributed Computing (PODC), </booktitle> <year> 1996. </year> <note> To appear. </note>
Reference-contexts: The GCS also reports to the application which processes are reachable at any given time. For example, the Virtual Synchrony [7], Strong Virtual Synchrony [9] and Extended Virtual Synchrony [14] models provide powerful semantics, that greatly facilitate application design <ref> [7, 3, 10, 5] </ref>. GCSs today have begun to exploit new technologies, and to run over fast networks e.g. <p> Prioritized channels are most suitable for video transmission [11, 20]. Audio transmission uses an unreliable fifo channel. Other applications (e.g. cooperative editing) manage shared data, that has to be consistently replicated. GCS semantics provide a powerful tool for replication, as demonstrated in <ref> [10, 5, 3] </ref>. Floor Control: The agent allows input for a certain application to come from one conferee, who is currently authorized to provide input. This is analogous to passing the pen for the board in a meeting.
Reference: [11] <author> D. Kozen, Y. Minsky, and B. Smith. </author> <title> Efficient Algorithms for Optimal Video Transmission. </title> <type> TR 95-1517, </type> <institution> Computer Science Department, Cornell University, </institution> <month> May </month> <year> 1995. </year>
Reference-contexts: The first extension deals with prioritized channels. This service is based on the cyclic-UDP [20] protocol, which is a best-effort priority-driven network protocol especially designed for video transmission <ref> [11] </ref>. The prioritized channel is unreliable, but it does use retransmissions in order to increase the probability of successful delivery. The messages are multicast via the channel sorted according to their priority: the first multicast message has the highest priority, and the last message the lowest. <p> Video and audio are multicast independently in separate channels [18]. Prioritized channels are most suitable for video transmission <ref> [11, 20] </ref>. Audio transmission uses an unreliable fifo channel. Other applications (e.g. cooperative editing) manage shared data, that has to be consistently replicated. GCS semantics provide a powerful tool for replication, as demonstrated in [10, 5, 3]. <p> The servers can consistently share information while each is serving clients. If one server crashes or detaches from a client, the other servers get an indication, and can smoothly take over. This is similar to the approach taken in the implementation of <ref> [11] </ref> in Horus. Our experience in [3] shows that a distributed system management application can greatly benefit from the semantics of GCS. Distributed software installation and upgrade application uses GCS to group target machines with the same installation requirements into a single multicast group.
Reference: [12] <author> L. Lamport. </author> <title> Time, Clocks, and the Ordering of Events in a Distributed System. </title> <journal> Communications of the ACM, </journal> <volume> 21(7) </volume> <pages> 558-565, </pages> <month> July 78. </month>
Reference-contexts: Typical examples of order constraints are: None no order constraints. FIFO messages from a single source are delivered in the order of their trans mission. Causal messages are delivered in an order preserving the "happened before" (causal) partial order defined by Lamport <ref> [12] </ref>. The causal order is defined as the transitive closure of: m cause ! m 0 if deliver q (m) ! send q (m 0 ) or if send q (m) ! send q (m 0 ). Agreed messages are delivered in the same order at all targets.
Reference: [13] <author> P. M. Melliar-Smith, L. E. Moser, and V. Agrawala. </author> <title> Broadcast Protocols for Distributed Systems. </title> <journal> IEEE Trans. Parallel & Distributed Syst., </journal> <volume> (1), </volume> <month> Jan </month> <year> 1990. </year> <month> 16 </month>
Reference-contexts: The main data structure of the Transis reliable multicast module (RMM) is a directed acyclic graph, DAG, (see Figure 6) based on Trans <ref> [13] </ref> and on Psync [15]. The DAG contains only messages that have no missing causal predecessors.
Reference: [14] <author> L. E. Moser, Y. Amir, P. M. Melliar-Smith, and D. A. Agarwal. </author> <title> Extended Vir--tual Synchrony. </title> <booktitle> In International Conference on Distributed Computing Systems, number 14th, </booktitle> <month> June </month> <year> 1994. </year>
Reference-contexts: The GCS also reports to the application which processes are reachable at any given time. For example, the Virtual Synchrony [7], Strong Virtual Synchrony [9] and Extended Virtual Synchrony <ref> [14] </ref> models provide powerful semantics, that greatly facilitate application design [7, 3, 10, 5]. GCSs today have begun to exploit new technologies, and to run over fast networks e.g. <p> The Virtual Synchrony [7], Strong Virtual Synchrony [9] and Extended Virtual Synchrony <ref> [14] </ref> models provide powerful semantics.
Reference: [15] <author> L. L. Peterson, N. C. Buchholz, and R. D. Schlichting. </author> <title> Preserving and Using Context Information in Interprocess Communication. </title> <journal> ACM Trans. Comput. Syst., </journal> <volume> 7(3) </volume> <pages> 217-246, </pages> <month> August 89. </month>
Reference-contexts: The main data structure of the Transis reliable multicast module (RMM) is a directed acyclic graph, DAG, (see Figure 6) based on Trans [13] and on Psync <ref> [15] </ref>. The DAG contains only messages that have no missing causal predecessors.
Reference: [16] <author> T. Rodden. </author> <title> A survey of CSCW systems. </title> <journal> Interacting with Computers, </journal> <volume> 3(3) </volume> <pages> 319-353, </pages> <year> 1991. </year>
Reference-contexts: 1 Introduction In this paper we present a novel communication paradigm that provides multiple quality of service (QoS) options for multi-media and Computer Supported Cooperative Work (CSCW) <ref> [16] </ref> applications, e.g. video conferencing. We incorporate different QoS multicast channels within the groupware framework; the channels are an extension of group communication systems (GCSs) that provide reliable multicast services with strong order constraints as well as group membership services. <p> Figure 1 depicts a video conferencing application, with a new party wishing to join the discussion. In Section 6 we describe several examples of applications that can benefit from our services among which is a multi-media and desktop conferencing application <ref> [16] </ref>. 1.1 The Benefits of Groupware Groupware is a powerful tool for the development of fault-tolerant distributed applications and CSCW services: GCSs provide the application builder with reliable multicast services with several message ordering paradigms, and with group membership services that guarantee strong semantics. <p> Below we describe a few applications that may exploit QoS multicast channels within GCSs. Multi-media and desktop conferencing systems are described in the survey of CSCW systems <ref> [16] </ref>. Such a system consists of several conferees (users), that cooperatively use a variety of application such as a meeting room (video and audio), shared work space (e.g. cooperative editing or drawing on a board), etc. The conference agent controls the communication among the conferees and the applications. <p> The conference agent controls the communication among the conferees and the applications. We now describe how a distributed agent can exploit GCS with QMC to provide the services listed in <ref> [16] </ref>: Multicast Application Inputs and Outputs: A typical application is a meeting room which requires video and audio multicast. Video and audio are multicast independently in separate channels [18]. Prioritized channels are most suitable for video transmission [11, 20]. Audio transmission uses an unreliable fifo channel.
Reference: [17] <author> L. A. Rowe, K. D. Patel, B. C. Smith, and K. Liu. </author> <title> MPEG Video in Software: Representation, Transmission, and Playback. In High Speed Networking and Multimedia Computing, </title> <booktitle> IS&T/SPIE Symp. </booktitle> <institution> on Elec. Imaging Sci. & Tech., </institution> <month> February </month> <year> 1994. </year>
Reference-contexts: Many multimedia applications are in this category, e.g. MPEG video transmission consists of a few full images, which must be reliably delivered, followed by incremental update frames which can be sent unreliably <ref> [17] </ref>. The loss of these incremental frames will not seriously damage the video image. Such applications often exploit fast networks, e.g. ATM, and do not recover lost packets (unless they result in the loss of full image frames).
Reference: [18] <author> L. A. Rowe and B. C. Smith. </author> <title> A Continous Media Player. In Int. Workshop on Network and OS Support for Digital Audio and Video, number 3, </title> <month> November </month> <year> 1992. </year>
Reference-contexts: Often, neither solution is appropriate: e.g. in an MPEG application, incremental update frames must follow the corresponding full picture frame only, and have no restrictions w.r.t. other messages. In a typical multi-media application, several types of data streams (e.g. video, audio, translation subtitles) are each multicast independently <ref> [18] </ref>, as shown in Figure 2, and are synchronized at the receiving server. fl This idea was suggested by the Horus group. 3 1.3 QoS Multicast Channels within Groupware We propose to incorporate several QoS channels into a groupware framework. <p> We now describe how a distributed agent can exploit GCS with QMC to provide the services listed in [16]: Multicast Application Inputs and Outputs: A typical application is a meeting room which requires video and audio multicast. Video and audio are multicast independently in separate channels <ref> [18] </ref>. Prioritized channels are most suitable for video transmission [11, 20]. Audio transmission uses an unreliable fifo channel. Other applications (e.g. cooperative editing) manage shared data, that has to be consistently replicated. GCS semantics provide a powerful tool for replication, as demonstrated in [10, 5, 3].
Reference: [19] <author> B. C. Smith. RIVL: </author> <title> A Resolution Independant Video Language. </title> <note> Submitted for publication. Available in http://www.cs.cornell.edu/Info/Faculty/bsmith/rvl-tcl.ps. </note>
Reference-contexts: Picture frames can be multicast via a reliable fifo channel, and increments in nested unreliable channels. This implementation imposes the order relationship between pictures and increments, and imposes no order constraints w.r.t. other messages or channels. Video representation languages (e.g. Rivl <ref> [19] </ref>) can be naturally extended to "compile" into this form of representation (for video transmission). 3.3 QMC in Presence of Membership Changes The membership messages of the GCS have an important role in providing strong semantics such as virtual synchrony.
Reference: [20] <author> B. C. Smith. </author> <title> Implementation Techniques for Continous Media Systems and Applications. </title> <type> PhD thesis, </type> <institution> University of California at Berkeley, </institution> <year> 1994. </year> <month> 17 </month>
Reference-contexts: If m was previously delivered it is discarded, and otherwise m is buffered. 3.2 Extensions In this section we propose possible extensions to QMC. The first extension deals with prioritized channels. This service is based on the cyclic-UDP <ref> [20] </ref> protocol, which is a best-effort priority-driven network protocol especially designed for video transmission [11]. The prioritized channel is unreliable, but it does use retransmissions in order to increase the probability of successful delivery. <p> The probability of successful delivery of a message is proportional to its priority. The implementation of the prioritized channel is similar to that of <ref> [20] </ref>: The prioritized channel C retransmits messages as long as end-channel C was not delivered. Messages from M C are stored in a queue, and are multicast in bursts of a fixed size. Each target sends a list of negative acknowledgments (nacks) for each burst, requesting retransmission of lost messages. <p> Video and audio are multicast independently in separate channels [18]. Prioritized channels are most suitable for video transmission <ref> [11, 20] </ref>. Audio transmission uses an unreliable fifo channel. Other applications (e.g. cooperative editing) manage shared data, that has to be consistently replicated. GCS semantics provide a powerful tool for replication, as demonstrated in [10, 5, 3].
References-found: 20

