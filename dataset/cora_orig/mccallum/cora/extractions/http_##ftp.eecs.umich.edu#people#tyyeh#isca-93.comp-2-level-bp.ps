URL: http://ftp.eecs.umich.edu/people/tyyeh/isca-93.comp-2-level-bp.ps
Refering-URL: http://ftp.eecs.umich.edu/people/tyyeh/
Root-URL: http://www.eecs.umich.edu
Title: A Comparison of Dynamic Branch Predictors that use Two Levels of Branch History  
Author: Tse-Yu Yeh and Yale N. Patt 
Address: Ann Arbor, Michigan 48109-2122  
Affiliation: San Diego, California.  Department of Electrical Engineering and Computer Science The University of Michigan  
Date: 257 266, May 16 19, 1993,  
Note: The 20th Annual International Symposium on Computer Architecture pp.  
Abstract: Recent attention to speculative execution as a mechanism for increasing performance of single instruction streams has demanded substantially better branch prediction than what has been previously available. We [1, 2] and Pan, So, and Rahmeh [4] have both proposed variations of the same aggressive dynamic branch predictor for handling those needs. We call the basic model Two-Level Adaptive Branch Prediction; Pan, So, and Rahmeh call it Correlation Branch Prediction. In this paper, we adopt the terminology of [2] and show that there are really nine variations of the same basic model. We compare the nine variations with respect to the amount of history information kept. We study the effects of different branch history lengths and pattern history table configurations. Finally, we evaluate the cost effectiveness of the nine variations. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T-Y Yeh and Y.N. Patt, </author> <title> "Two-Level Adaptive Branch Prediction", </title> <booktitle> Proceedings of the 24th Annual ACM/IEEE International Symposium and Workshop on Microarchitecture, </booktitle> <month> (Nov. </month> <year> 1991), </year> <pages> pp. 51-61. </pages>
Reference-contexts: To improve branch prediction, several authors have suggested basing predictions on two levels of branch history information. Lee and Smith [7] proposed collecting these two levels of history information statically. We <ref> [1] </ref> introduced the idea of dynamically collecting two levels of branch history, branch execution history and pattern history, to achieve substantially higher accuracy than any other scheme reported in the literature. We call our algorithm Two-level Adaptive Branch Prediction. <p> Variation & Description Reference GAg [2] Global Adaptive Branch Prediction using one global pattern history table. GAs [4] Global Adaptive Branch Prediction using per-set pattern history tables. GAp [4] Global Adaptive Branch Prediction using per-address pattern history tables. PAg <ref> [1] </ref> Per-address Adaptive Branch Prediction using one global pattern history table. PAs - Per-address Adaptive Branch Prediction using per-set pattern history tables. PAp [2] Per-address Adaptive Branch Prediction using per-address pattern history tables. SAg Per-Set Adaptive Branch Prediction using one global pattern history table.
Reference: [2] <author> T-Y Yeh and Y.N. </author> <title> Patt "Alternative Implementations of Two-Level Adaptive Branch Prediction," </title> <booktitle> Proceedings of the 19th International Symposium on Computer Architecture, </booktitle> <month> (May. </month> <year> 1992), </year> <pages> pp. 124-134. </pages>
Reference-contexts: The first-level branch execution history and the second-level pattern history are collected at run-time, eliminating the disadvantages inherent in Lee and Smith's method, that is, the differences in the branch behavior of the profiling data set and the run-time data sets. In <ref> [2] </ref> we described three variations of Two-level Adaptive Branch Prediction, differentiating them by the manner in which the first-level of branch history information is kept (G, for global, or P, for per-address) and the manner in which the second-level pattern history tables are associated with this history information (g, for global, <p> Pan, So and Rahmeh [4] proposed a model they called Correlation Branch Prediction, because the prediction of a branch depends on the history of other branches. In the terminology introduced in <ref> [2] </ref>, this would be called GAp. They also introduced another variation, which we could label GAs, where the addresses that contain branch instructions are partitioned into subsets, each subset sharing the same second-level pattern table. <p> This yields nine variations of the model: GAg, GAs, GAp, PAg, PAs, PAp, SAg, SAs, and SAp. They are summarized, along with the reference to where they were first introduced, in Table 1. Variation & Description Reference GAg <ref> [2] </ref> Global Adaptive Branch Prediction using one global pattern history table. GAs [4] Global Adaptive Branch Prediction using per-set pattern history tables. GAp [4] Global Adaptive Branch Prediction using per-address pattern history tables. PAg [1] Per-address Adaptive Branch Prediction using one global pattern history table. <p> GAs [4] Global Adaptive Branch Prediction using per-set pattern history tables. GAp [4] Global Adaptive Branch Prediction using per-address pattern history tables. PAg [1] Per-address Adaptive Branch Prediction using one global pattern history table. PAs - Per-address Adaptive Branch Prediction using per-set pattern history tables. PAp <ref> [2] </ref> Per-address Adaptive Branch Prediction using per-address pattern history tables. SAg Per-Set Adaptive Branch Prediction using one global pattern history table. SAs Per-Set Adaptive Branch Prediction using per-set pattern history tables. SAp Per-Set Adaptive Branch Prediction using per-address pattern history tables. <p> The second level of the predictor records the branch behavior for the last j occurrences of the specific pattern of the k branches. Prediction is based on the branch behavior for the last j occurrences of the history pattern in question by using an automaton. Our previous study <ref> [2] </ref> has shown that a 2-bit counter is the most effective automaton among four-state automata. Since the history register has k bits, at most 2 k different patterns appear in the history register. <p> When an incorrect branch prediction is made, the branch history register should be restored with correct branch history. More details of the Two-Level Adaptive Branch Predictors are contained in <ref> [2] </ref> and [4]. 2.2 Variations The nine variations of Two-Level Adaptive Branch Prediction ( Table 1) can be classified into three classes according to the way the first-level branch history is collected. These three classes are shown in Figures 1, 2, and 3. <p> We simplified the hardware cost estimate functions described in <ref> [2] </ref> and expanded them to all the variations of Two-Level Adaptive Branch Prediction. The revised estimate functions are shown in Table 3. These functions do not consider the costs for target address fields in the branch history table because all the variations need those fields to store fetch addresses.
Reference: [3] <author> T-Y Yeh and Y.N. </author> <title> Patt "A Comprehensive Instruction Fetch Mechanism for a Processor Supporting Speculative Execution," </title> <booktitle> Proceedings of the 25th Annual ACM/IEEE International Symposium on Computer Microarchitecture, </booktitle> <month> (Dec. </month> <year> 1992), </year> <pages> pp. 129-139. </pages>
Reference-contexts: We also tried classifying branches by opcode; however, the prediction accuracy is lower than using the branch address. * Every scheme is configured with a branch history table for storing the instruction fetch addresses <ref> [3] </ref> of both conditional and unconditional branches. The branch history table is accessed by using the low-order bits of the branch address. For per-address history schemes, each branch history table entry also records branch history. Unless otherwise stated, the default configuration of the branch history table is 1024-entry, 4-way set-associative. <p> However, we have shown that various reasonable pipeline delays in the pattern history update have negligible effects on predic tion accuracy in <ref> [3] </ref>. * For the per-address history schemes, a backward taken, forward not-taken scheme is used for mak ing predictions on branch history table misses. We simplified the hardware cost estimate functions described in [2] and expanded them to all the variations of Two-Level Adaptive Branch Prediction. <p> Therefore, there is no penalty for a correctly-predicted fall-through branch on a BHT miss. When a prediction is incorrect, the processor discards the instructions which are fetched after the branch. Details of the instruction fetch mechanism are contained in <ref> [3] </ref>. The translation from prediction accuracy to machine performance is not direct [5].
Reference: [4] <author> S-T Pan, K. So, and J.T. Rahmeh, </author> <title> "Improving the Accuracy of Dynamic Branch Prediction Using Branch Correlation," </title> <booktitle> Proceedings of the 5th International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <month> (Oct. </month> <year> 1992), </year> <pages> pp. 76-84. </pages>
Reference-contexts: We identified the three schemes as GAg, PAg, and PAp and showed that PAg is the most cost-effective variation. Pan, So and Rahmeh <ref> [4] </ref> proposed a model they called Correlation Branch Prediction, because the prediction of a branch depends on the history of other branches. In the terminology introduced in [2], this would be called GAp. <p> They are summarized, along with the reference to where they were first introduced, in Table 1. Variation & Description Reference GAg [2] Global Adaptive Branch Prediction using one global pattern history table. GAs <ref> [4] </ref> Global Adaptive Branch Prediction using per-set pattern history tables. GAp [4] Global Adaptive Branch Prediction using per-address pattern history tables. PAg [1] Per-address Adaptive Branch Prediction using one global pattern history table. PAs - Per-address Adaptive Branch Prediction using per-set pattern history tables. <p> They are summarized, along with the reference to where they were first introduced, in Table 1. Variation & Description Reference GAg [2] Global Adaptive Branch Prediction using one global pattern history table. GAs <ref> [4] </ref> Global Adaptive Branch Prediction using per-set pattern history tables. GAp [4] Global Adaptive Branch Prediction using per-address pattern history tables. PAg [1] Per-address Adaptive Branch Prediction using one global pattern history table. PAs - Per-address Adaptive Branch Prediction using per-set pattern history tables. PAp [2] Per-address Adaptive Branch Prediction using per-address pattern history tables. <p> When an incorrect branch prediction is made, the branch history register should be restored with correct branch history. More details of the Two-Level Adaptive Branch Predictors are contained in [2] and <ref> [4] </ref>. 2.2 Variations The nine variations of Two-Level Adaptive Branch Prediction ( Table 1) can be classified into three classes according to the way the first-level branch history is collected. These three classes are shown in Figures 1, 2, and 3. <p> These three classes are shown in Figures 1, 2, and 3. They are characterized as follows: Global History Schemes In the global history schemes (shown in Figure 1) (also called Correlation Branch Prediction by Pan et al. <ref> [4] </ref>), the first-level branch history means the actual last k branches encountered; therefore, only a single global history register (GHR) is used. The global history reg ister is updated with the results from all the branches.
Reference: [5] <author> J.A. Fisher and S.M. Freudenberger, </author> <title> "Predicting Conditional Branch Directions From Previous Runs of a Program," </title> <booktitle> Proceedings of the 5th International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <month> (Oct. </month> <year> 1992), </year> <pages> pp. 85-95. </pages>
Reference-contexts: When a prediction is incorrect, the processor discards the instructions which are fetched after the branch. Details of the instruction fetch mechanism are contained in [3]. The translation from prediction accuracy to machine performance is not direct <ref> [5] </ref>.
Reference: [6] <author> J.E. Smith, </author> <title> "A Study of Branch Prediction Strategies", </title> <booktitle> Proceedings of the 8th International Symposium on Computer Architecture, </booktitle> <month> (May. </month> <year> 1981), </year> <month> pp.135-148. </month>
Reference: [7] <author> J. Lee and A. J. Smith, </author> <title> "Branch Prediction Strategies and Branch Target Buffer Design", </title> <booktitle> IEEE Computer, </booktitle> <month> (January </month> <year> 1984), </year> <month> pp.6-22. </month>
Reference-contexts: To improve branch prediction, several authors have suggested basing predictions on two levels of branch history information. Lee and Smith <ref> [7] </ref> proposed collecting these two levels of history information statically. We [1] introduced the idea of dynamically collecting two levels of branch history, branch execution history and pattern history, to achieve substantially higher accuracy than any other scheme reported in the literature. We call our algorithm Two-level Adaptive Branch Prediction.
References-found: 7

