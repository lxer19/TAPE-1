URL: http://www.idt.unit.no/~epos/Papers/scm5-tidl.ps
Refering-URL: http://www.idt.unit.no/~epos/bibliografia.html
Root-URL: 
Title: Transaction Planning to support Coordination  
Author: Patricia Lago Reidar Conradi 
Date: November 15, 1994  
Note: Submitted to SCM'95  
Address: Torino, I-10129 Torino, Italy  N-7034 Trondheim, Norway  
Affiliation: Dipartimento di Automatica e Informatica, Politecnico di  Department of Computer Systems and Telematics, Norwegian Institute of Technology,  
Abstract: Non-serializable and loosely coordinated transactions for software engineering relax ACID properties of traditional transactions to obtain flexibility. To maintain data consistency, a commonly adopted approach is to keep temporary parallel version histories, and then execute merge and negotiation procedures. We propose an alternative approach based on transaction planning. Its effect is to reduce or even avoid conflictual modification to product configurations. Transaction intention (version- and product- space) is first planned in textual descriptions expressed in TiDL (Transaction-intention Description Language), and stored in EPOSDB entities and relationships. Before execution, re-planning based on impact analysis is performed: plans are checked against currently running transactions and a reorganisation of transaction work context may be needed. Communication protocols are then chosen to suit cooperation needs. The result is to maintain flexibility and at the same time to reach optimised data accesses, thus reducing the need for later merge of overlapping updates done by simultaneous transac tions.
Abstract-found: 1
Intro-found: 1
Reference: [CHL94] <author> Reidar Conradi, Marianne Hagaseth, and Chunnian Liu. </author> <title> Planning Support for Cooperating Transactions in EPOS. </title> <booktitle> In Proc. CAISE'94, Utrecht, </booktitle> <pages> pages 2-13, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: The planning process can be refined into three main steps: partition, schedule, and cooperation protocol definition <ref> [CHL94] </ref>. Partition, after an initial breakdown of a project into sub-activities, performs impact analysis based on data ownership and access. Depending on results, project breakdown is re-organised. Schedule states when activities are to be executed. Cooperation is defined by a set of high-level communication patterns, refined into low-level cooperation protocols. <p> TiDL specifications are then stored in EPOSDB. Schema entities and relationships represent information needed to perform automatic impact analysis. I.e., build impact sets and possible solutions. The complete planning process has been deeply described in <ref> [CHL94] </ref>. 3 Partition and TiDL A transaction model is characterised by a hierarchy of transactions, a data model on which transaction operate, and a set of execution mechanisms that constrain transaction behaviour.
Reference: [Fel93] <editor> Stuart Feldman, editor. </editor> <booktitle> Proceedings of the Fourth International Workshop on Software Configuration Management (SCM-4), </booktitle> <address> Baltimore, Maryland, </address> <month> May 21-22, </month> <year> 1993. </year>
Reference: [God93] <author> Claude Godart. COO: </author> <title> A transaction model to support COOperating software developers COOrdination. </title> <booktitle> In [SP93], </booktitle> <pages> pages 361-379, </pages> <year> 1993. </year>
Reference-contexts: Cooperation support means to allow consistent visibility of intermediate results <ref> [God93] </ref>. Nevertheless, intermediate results are of some interest if they have some impact to components accessed by other (overlapping) transactions. Transaction pre-commit enables visibility, while ad-hoc cooperation protocols make impacted transactions aware of changes.
Reference: [MLG + 93] <author> Bjtrn P. Munch, Jens-Otto Larsen, Bjtrn Gulla, Reidar Conradi, and Even-Andre Karlsson. </author> <title> Uniform versioning: The change-oriented model. </title> <booktitle> In [Fel93], </booktitle> <pages> pages 188-196, </pages> <year> 1993. </year>
Reference-contexts: Other properties are related to time schedule. Then, the position in the transaction hierarchy is given: in the example, transaction t1 is a child of transaction develop. The rest of transaction specification regards required data (i.e., the transaction work context): EPOSDB implements Change-oriented Versioning (CoV) <ref> [MLG + 93] </ref> for software configuration management: ambition and choice define the version space, and are described by a set of boolean options. Option values may be set to true, false, or unset.
Reference: [SP93] <author> Ian Sommerville and Manfred Paul, </author> <title> editors. </title> <booktitle> Proc. 4th European Software Engineering Conference (Garmisch-Partenkirchen, </booktitle> <address> FRG), </address> <publisher> Springer Verlag LNCS 717., </publisher> <month> September </month> <year> 1993. </year>
References-found: 5

