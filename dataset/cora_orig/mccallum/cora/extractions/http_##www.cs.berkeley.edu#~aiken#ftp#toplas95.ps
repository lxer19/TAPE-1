URL: http://www.cs.berkeley.edu/~aiken/ftp/toplas95.ps
Refering-URL: http://www.cs.berkeley.edu/~aiken/pubs.html
Root-URL: http://www.cs.berkeley.edu
Title: Safe|A Semantic Technique for Transforming Programs in the Presence of Errors  
Author: ALEXANDER AIKEN JOHN H. WILLIAMS and EDWARD L. WIMMERS 
Keyword: Categories and Subject Descriptors: D.3.4 [Processors]: Optimization General Terms: Languages,Theory Additional Key Words and Phrases: equational reasoning,exceptions, program optimization, program transformation  
Affiliation: University of California, Berkeley and  IBM Almaden Research Center  
Abstract: Language designers and implementors have avoided specifying and preserving the meaning of programs that produce errors. This is apparently because being forced to preserve error behavior severely limits the scope of program optimization, even for correct programs. However, preserving error behavior is desirable for debugging, and error behavior must be preserved in any language that permits user-generated errors (i.e., exceptions). This paper presents a technique for expressing general program transformations for languages that possess a rich collection of distinguishable error values. This is accomplished by defining a higher-order function called "Safe", which can be used to annotate those portions of a program that are guaranteed not to produce errors. It is shown that this facilitates the expression of very general program transformations, effectively giving program transformations in a language with many error values the same power and generality as program transformations in a language with only a single error value. Using the semantic properties of Safe, it is possible to provide some useful sufficient conditions for establishing the correctness of transformations in the presence of errors. In particular, a Substitutability Theorem is proven, which can be used to justify "in-context" optimizations| transformations that alter the meanings of subexpressions without changing the meaning of the whole program. Finally, the effectiveness of the technique is demonstrated by some examples of its use in an optimizing compiler. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Aho, A. V., Sethi, R., and Ullman, J. D. </author> <year> 1986. </year> <title> Compilers: Principles, Techniques, and Tools. </title> <publisher> Addison-Wesley. </publisher>
Reference: <author> Aiken, A., Williams, J. H., and Wimmers, E. L. </author> <year> 1990. </year> <title> Program transformation in the presence of errors. </title> <booktitle> In Seventeenth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pp. 210-217. </pages>
Reference: <author> Aiken, A. and Wimmers, E. </author> <year> 1993. </year> <title> Type inclusion constraints and type inference. </title> <booktitle> In Proceedings of the 1993 Conference on Functional Programming Languages and Computer Architecture, Copenhagen, Denmark, </booktitle> <pages> pp. 31-41. </pages>
Reference: <author> Aiken, A., Wimmers, E., and Lakshman, T. </author> <year> 1994. </year> <title> Soft typing with conditional types. </title> <booktitle> In Twenty-First Annual ACM Symposium on Principles of Programming Languages, Port-land, Oregon, </booktitle> <pages> pp. 163-173. </pages>
Reference: <author> Backus, J. </author> <year> 1978. </year> <title> Can programming be liberated from the von Neumann style? A functional style and its algebra of programs. </title> <journal> Commun. ACM 21, </journal> <volume> 8 (Aug.), </volume> <pages> 613-641. </pages>
Reference: <author> Backus, J., Williams, J. H., and Wimmers, E. L. </author> <year> 1986. </year> <title> The FL language manual. </title> <type> Tech. Rep. RJ 5339 (54809), </type> <institution> IBM. </institution>
Reference: <author> Cartwright, R. and Felleisen, M. </author> <year> 1989. </year> <title> The semantics of program dependence. </title> <booktitle> In Proceedings of the 1989 Conference on Programming Language Design and Implementation. </booktitle>
Reference: <author> Damas, L. and Milner, R. </author> <year> 1982. </year> <title> Principle type-schemes for functional programs. </title> <booktitle> In Ninth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pp. 207-212. </pages>
Reference: <author> Harper, R., Milner, R., and Tofte, M. </author> <year> 1989. </year> <title> The definition of standard ML|version 3. </title> <type> Tech. Rep. </type> <institution> ECFS-LFCS-89-81, Laboratory for Foundations of Computer Science, University of Edinburgh. </institution>
Reference: <author> Hennessy, J. </author> <year> 1981. </year> <title> Program optimization and exception handling. </title> <booktitle> In Proceedings of the 1981 Symposium on Principles of Programming Languages. </booktitle>
Reference: <author> Hudak, P., Wadler, P., Arvind, Boutel, B., Fairbairn, J., Fasel, J., Hughes, J., Johns-son, T., Kieburtz, D., Jones, S. P., Nikhil, R., Reeve, M., Wise, D., and Young, J. </author> <year> 1988. </year> <title> Report on the functional programming language Haskell. </title> <type> Tech. Rep. </type> <institution> DCS/RR-666 (Dec.), Yale University. </institution>
Reference: <author> Hunt, S. and Sands, D. </author> <year> 1991. </year> <title> Binding time analysis: A new PERspective. </title> <booktitle> In Symposium on Partial Evaluation and Semantics-Based Program Manipulation, </booktitle> <pages> pp. 154-165. </pages> <note> 20 Alexander Aiken, et al. </note>
Reference: <author> MacQueen, D., Plotkin, G., and Sethi, R. </author> <year> 1984. </year> <title> An ideal model for recursive polymophic types. </title> <booktitle> In Eleventh Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pp. 165-174. </pages>
Reference: <author> Steele, G. L. </author> <year> 1984. </year> <title> Common Lisp: The Language. </title> <publisher> Digital Press. </publisher>
Reference: <author> Turner, D. A. </author> <year> 1985. </year> <title> Miranda: A non-strict functional language with polymorphic types. </title> <booktitle> In Proceedings of the IFIP International Conference on Functional Programming and Computer Architecture. Springer Verlag Lecture Notes in Computer Science no. </booktitle> <pages> 201. </pages>
Reference: <author> Wadler, P. and Hughes, R. J. M. </author> <year> 1987. </year> <title> Projections for strictness analysis. </title> <booktitle> In Proceedings of the Symposium on Functional Programming Languages and Computer Architecture, </booktitle> <pages> pp. 385-407. </pages> <publisher> Springer Verlag Lecture Notes in Computer Science no. </publisher> <pages> 274. </pages>
References-found: 16

