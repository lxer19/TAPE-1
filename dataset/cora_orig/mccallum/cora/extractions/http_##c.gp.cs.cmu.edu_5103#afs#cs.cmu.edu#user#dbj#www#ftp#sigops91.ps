URL: http://c.gp.cs.cmu.edu:5103/afs/cs.cmu.edu/user/dbj/www/ftp/sigops91.ps
Refering-URL: http://c.gp.cs.cmu.edu:5103/afs/cs.cmu.edu/user/dbj/www/ft.html
Root-URL: http://www.cs.cmu.edu
Email: dbj@rice.edu, willy@rice.edu  
Title: Transparent Optimistic Rollback Recovery  
Author: David B. Johnson Willy Zwaenepoel 
Address: P.O. Box 1892 Houston, Texas 77251-1892  
Affiliation: Department of Computer Science Rice University  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> John K. Bennett, John B. Carter, and Willy Zwaenepoel. Munin: </author> <title> Distributed shared memory based on type-specific memory coherence. </title> <booktitle> In Proceedings of the Second ACM SIGPLAN Symposium on Principles & Practice of Parallel Programming, </booktitle> <pages> pages 168-176. </pages> <publisher> ACM, </publisher> <month> March </month> <year> 1990. </year>
Reference-contexts: In a separate project, we are currently developing a distributed shared memory system using a variety of memory coherence mechanisms that are specific to the particular access pattern of each object <ref> [1] </ref>. As a simple example, if the shared memory system knows that a particular object is "read-only," accesses to it need not be logged.
Reference: [2] <author> Bharat Bhargava and Shy-Renn Lian. </author> <title> Independent checkpointing and concurrent rollback for recovery|An optimistic approach. </title> <booktitle> In Proceedings of the Seventh Symposium on Reliable Distributed Systems, </booktitle> <pages> pages 3-12. </pages> <publisher> IEEE Computer Society, </publisher> <month> October </month> <year> 1988. </year>
Reference-contexts: With rollback recovery, information saved on stable storage during failure-free execution allows certain states of each process to be recovered after a failure. Examples of such methods include the use of message logging and checkpointing [12, 8, 3, 15, 14, 9, 13], and the use of checkpointing alone <ref> [11, 4, 2] </ref>. Optimistic methods in general allow unrecoverable states of one process to be seen by other processes, and optimistically assume that these states will become recoverable before a failure occurs. This allows the needed recovery information to be saved on stable storage asynchronously, reducing failure-free overhead.
Reference: [3] <author> Anita Borg, Wolfgang Blau, Wolfgang Graetsch, Ferdinand Herrmann, and Wolfgang Oberle. </author> <title> Fault tolerance under UNIX. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 7(1) </volume> <pages> 1-24, </pages> <month> February </month> <year> 1989. </year>
Reference-contexts: With rollback recovery, information saved on stable storage during failure-free execution allows certain states of each process to be recovered after a failure. Examples of such methods include the use of message logging and checkpointing <ref> [12, 8, 3, 15, 14, 9, 13] </ref>, and the use of checkpointing alone [11, 4, 2]. Optimistic methods in general allow unrecoverable states of one process to be seen by other processes, and optimistically assume that these states will become recoverable before a failure occurs.
Reference: [4] <author> K. Mani Chandy and Leslie Lamport. </author> <title> Distributed snapshots: Determining global states of distributed systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 3(1) </volume> <pages> 63-75, </pages> <month> February </month> <year> 1985. </year>
Reference-contexts: With rollback recovery, information saved on stable storage during failure-free execution allows certain states of each process to be recovered after a failure. Examples of such methods include the use of message logging and checkpointing [12, 8, 3, 15, 14, 9, 13], and the use of checkpointing alone <ref> [11, 4, 2] </ref>. Optimistic methods in general allow unrecoverable states of one process to be seen by other processes, and optimistically assume that these states will become recoverable before a failure occurs. This allows the needed recovery information to be saved on stable storage asynchronously, reducing failure-free overhead.
Reference: [5] <author> David R. Cheriton and Willy Zwaenepoel. </author> <title> The distributed V kernel and its performance for diskless workstations. </title> <booktitle> In Proceedings of the Ninth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 129-140. </pages> <publisher> ACM, </publisher> <month> October </month> <year> 1983. </year>
Reference-contexts: We have completed an implementation of optimistic message logging and checkpointing using this first algorithm, running under the V-System <ref> [5] </ref>. <p> This algorithm can be viewed as unifying the spectrum of methods between checkpointing alone and message logging and checkpointing. We are currently implementing output-driven optimistic message logging and checkpointing in a system of diskless SUN workstations running the V-System <ref> [5] </ref> on an Ethernet network, using a shared network file server. Each node in the system runs a separate recovery server process, which executes the algorithm to commit process state intervals.
Reference: [6] <author> David B. Johnson. </author> <title> Distributed System Fault Tolerance Using Message Logging and Check-pointing. </title> <type> PhD thesis, </type> <institution> Rice University, Houston, Texas, </institution> <month> December </month> <year> 1989. </year>
Reference-contexts: This work was supported in part by the National Science Foundation under Grants CDA-8619893 and CCR-8716914, and by the Office of Naval Research under Contract ONR N00014-88-K-0140. logging and checkpointing on a network on SUN workstations under the V-System, and performance measurements from it demonstrate the efficiency of this method <ref> [6] </ref>. The overhead on individual communication operations averaged only 10 percent, and the total overhead on distributed application programs ranged from a maximum of under 4 percent to much less than 1 percent. This paper briefly describes the current status of our research.
Reference: [7] <author> David B. Johnson, Peter J. Keleher, and Willy Zwaenepoel. </author> <title> A simple algorithm for finding the maximum recoverable system state in optimistic rollback recovery methods. </title> <institution> Technical Report Rice COMP TR90-125, Department of Computer Science, Rice University, Houston, Texas, </institution> <month> July </month> <year> 1990. </year>
Reference-contexts: However, if after a failure, these states are not recoverable, processes other than those that failed may also be required to roll back in order to restore the system to a consistent state. We have developed a theoretical model for reasoning about optimistic rollback recovery methods <ref> [9, 7] </ref>, and have shown that, in any system using optimistic rollback recovery, there always exists a unique maximum recoverable system state. We have also developed two algorithms for finding this maximum recoverable system state.
Reference: [8] <author> David B. Johnson and Willy Zwaenepoel. </author> <title> Sender-based message logging. </title> <booktitle> In The Seventeenth Annual International Symposium on Fault-Tolerant Computing: Digest of Papers, </booktitle> <pages> pages 14-19. </pages> <publisher> IEEE Computer Society, </publisher> <month> June </month> <year> 1987. </year>
Reference-contexts: With rollback recovery, information saved on stable storage during failure-free execution allows certain states of each process to be recovered after a failure. Examples of such methods include the use of message logging and checkpointing <ref> [12, 8, 3, 15, 14, 9, 13] </ref>, and the use of checkpointing alone [11, 4, 2]. Optimistic methods in general allow unrecoverable states of one process to be seen by other processes, and optimistically assume that these states will become recoverable before a failure occurs.
Reference: [9] <author> David B. Johnson and Willy Zwaenepoel. </author> <title> Recovery in distributed systems using optimistic message logging and checkpointing. </title> <booktitle> In Proceedings of the Seventh Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 171-181. </pages> <publisher> ACM, </publisher> <month> August </month> <year> 1988. </year> <note> To appear in Journal of Algorithms, </note> <month> September </month> <year> 1990. </year>
Reference-contexts: With rollback recovery, information saved on stable storage during failure-free execution allows certain states of each process to be recovered after a failure. Examples of such methods include the use of message logging and checkpointing <ref> [12, 8, 3, 15, 14, 9, 13] </ref>, and the use of checkpointing alone [11, 4, 2]. Optimistic methods in general allow unrecoverable states of one process to be seen by other processes, and optimistically assume that these states will become recoverable before a failure occurs. <p> However, if after a failure, these states are not recoverable, processes other than those that failed may also be required to roll back in order to restore the system to a consistent state. We have developed a theoretical model for reasoning about optimistic rollback recovery methods <ref> [9, 7] </ref>, and have shown that, in any system using optimistic rollback recovery, there always exists a unique maximum recoverable system state. We have also developed two algorithms for finding this maximum recoverable system state.
Reference: [10] <author> David B. Johnson and Willy Zwaenepoel. </author> <title> Output-driven distributed optimistic message logging and checkpointing. </title> <institution> Technical Report Rice COMP TR90-118, Department of Computer Science, Rice University, Houston, Texas, </institution> <month> May </month> <year> 1990. </year>
Reference-contexts: This paper briefly describes the current status of our research. We also discuss some of its limitations and present a new algorithm that addresses these limitations <ref> [10] </ref>. This algorithm dynamically supports both deterministic and nondeterministic processes, and allows processes to individually switch between using message logging and checkpointing or using checkpointing alone. 2 Current Status Our model concisely captures the dependencies that exist within the system that result from communication between processes. <p> These delays can be reduced by logging or checkpointing more frequently, but this can significantly increase the failure-free overhead of the system. 4 Future Directions These observations lead us to a new algorithm called output-driven optimistic message logging and check-pointing <ref> [10] </ref>, in which recording the needed recovery information on stable storage and determining the current maximum recoverable system state are both driven by the need to commit output from the system to the outside world.
Reference: [11] <author> Richard Koo and Sam Toueg. </author> <title> Checkpoint-ing and rollback-recovery for distributed systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-13(1):23-31, </volume> <month> January </month> <year> 1987. </year>
Reference-contexts: With rollback recovery, information saved on stable storage during failure-free execution allows certain states of each process to be recovered after a failure. Examples of such methods include the use of message logging and checkpointing [12, 8, 3, 15, 14, 9, 13], and the use of checkpointing alone <ref> [11, 4, 2] </ref>. Optimistic methods in general allow unrecoverable states of one process to be seen by other processes, and optimistically assume that these states will become recoverable before a failure occurs. This allows the needed recovery information to be saved on stable storage asynchronously, reducing failure-free overhead.
Reference: [12] <author> Michael L. Powell and David L. Presotto. </author> <title> Publishing: A reliable broadcast communication mechanism. </title> <booktitle> In Proceedings of the Ninth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 100-109. </pages> <publisher> ACM, </publisher> <month> October </month> <year> 1983. </year>
Reference-contexts: With rollback recovery, information saved on stable storage during failure-free execution allows certain states of each process to be recovered after a failure. Examples of such methods include the use of message logging and checkpointing <ref> [12, 8, 3, 15, 14, 9, 13] </ref>, and the use of checkpointing alone [11, 4, 2]. Optimistic methods in general allow unrecoverable states of one process to be seen by other processes, and optimistically assume that these states will become recoverable before a failure occurs.
Reference: [13] <author> A. Prasad Sistla and Jennifer L. Welch. </author> <title> Efficient distributed recovery using message logging. </title> <booktitle> In Proceedings of the Eighth Annual ACM Symposium on Principles of Distributed Computing. ACM, </booktitle> <month> August </month> <year> 1989. </year>
Reference-contexts: With rollback recovery, information saved on stable storage during failure-free execution allows certain states of each process to be recovered after a failure. Examples of such methods include the use of message logging and checkpointing <ref> [12, 8, 3, 15, 14, 9, 13] </ref>, and the use of checkpointing alone [11, 4, 2]. Optimistic methods in general allow unrecoverable states of one process to be seen by other processes, and optimistically assume that these states will become recoverable before a failure occurs.
Reference: [14] <author> Robert E. Strom, David F. Bacon, and Shaula A. Yemini. </author> <title> Volatile logging in n-fault-tolerant distributed systems. </title> <booktitle> In The Eighteenth Annual International Symposium on Fault-Tolerant Computing: Digest of Papers, </booktitle> <pages> pages 44-49. </pages> <publisher> IEEE Computer Society, </publisher> <month> June </month> <year> 1988. </year>
Reference-contexts: With rollback recovery, information saved on stable storage during failure-free execution allows certain states of each process to be recovered after a failure. Examples of such methods include the use of message logging and checkpointing <ref> [12, 8, 3, 15, 14, 9, 13] </ref>, and the use of checkpointing alone [11, 4, 2]. Optimistic methods in general allow unrecoverable states of one process to be seen by other processes, and optimistically assume that these states will become recoverable before a failure occurs.
Reference: [15] <author> Robert E. Strom and Shaula Yemini. </author> <title> Optimistic recovery in distributed systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 3(3) </volume> <pages> 204-226, </pages> <month> August </month> <year> 1985. </year>
Reference-contexts: With rollback recovery, information saved on stable storage during failure-free execution allows certain states of each process to be recovered after a failure. Examples of such methods include the use of message logging and checkpointing <ref> [12, 8, 3, 15, 14, 9, 13] </ref>, and the use of checkpointing alone [11, 4, 2]. Optimistic methods in general allow unrecoverable states of one process to be seen by other processes, and optimistically assume that these states will become recoverable before a failure occurs.
Reference: [16] <author> Kun-Lung Wu and W. Kent Fuchs. </author> <title> Recoverable distributed shared virtual memory. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39(4) </volume> <pages> 460-469, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: As a simple example, if the shared memory system knows that a particular object is "read-only," accesses to it need not be logged. Wu and Fuchs <ref> [16] </ref> have recently proposed a pessimistic method for providing fault tolerance in a distributed shared virtual memory system, which in general requires processes to checkpoint on each interaction. We are interested in pursuing a more optimistic approach that reduces the number of checkpoints required.
References-found: 16

