URL: http://www.cs.wisc.edu/~fischer/course/html/submissions/125.ps.gz
Refering-URL: http://www.cs.wisc.edu/~fischer/course/html/submissions/
Root-URL: http://www.cs.wisc.edu
Title: Critical Reference Counting  
Author: P.A. Jones 
Keyword: Storage Management, Runtime Systems, Optimizations, Reference Counting.  
Address: Toernooiveld 1, 6525 ED Nijmegen, The Netherlands,  
Affiliation: Computing Science Institute, Catholic University of Nijmegen,  
Email: E-mail: paulj@cs.kun.nl  
Phone: Tel: +31-024-3653362,  
Date: October 20, 1995  
Abstract: The automatic management of allocation and deallocation of memory, also known as garbage collection, is left to the programmer in traditional languages such as (Pascal,C,C++,etc). Leaving such a task to the programmer is error prone and cumbersome. In many recent programming languages the compiler performs this task for the programmer. However many compiler-writers implement automatic memory management as an add-on, going out of their way to minimize the effect on the normal logic of the compiler. Many authors have found that garbage collection can be improved on by compile-time analysis. Automatic memory management may be treated as yet another optimization, trading memory for speed, much like the traditional optimizations that can be done for stack based values. These include lifetime analysis, data flow analysis and sharing of identical values. We shall discuss Critical Reference Counting in combination with compile time analysis to reduce garbage collection overhead. 
Abstract-found: 1
Intro-found: 1
Reference: [App89] <author> Andrew W. Appel. </author> <title> Simple generational garbage collection and fast allocation. </title> <journal> Software Practice and Experience, </journal> <volume> 19(2) </volume> <pages> 171-183, </pages> <month> February </month> <year> 1989. </year>
Reference-contexts: For an overview of the types of garbage collectors see [Knu69, App91, Wil92], further details on discontinuous garbage collectors can be found in <ref> [McC60, FY60, Che70, App89, App91, LH83] </ref>. Both types of memory management systems have their advantages and disadvantages. A continuous system uses the smallest possible amount of memory, but usually incurs a high cost due to the overhead at each assignment.
Reference: [App91] <author> Andrew W. </author> <title> Appel Garbage collection. </title> <booktitle> Topics in Advanced Language Implementations, </booktitle> <pages> pages 89-100, </pages> <publisher> MIT press, </publisher> <address> Cambridge, Mas-sachusetts, </address> <year> 1991. </year>
Reference-contexts: A discontinuous system typically examines all memory when an allocation request would fail, while a continuous system updates its administration at each assignment, therefore detecting values becoming inacces 3 sible immediately. For an overview of the types of garbage collectors see <ref> [Knu69, App91, Wil92] </ref>, further details on discontinuous garbage collectors can be found in [McC60, FY60, Che70, App89, App91, LH83]. Both types of memory management systems have their advantages and disadvantages. <p> For an overview of the types of garbage collectors see [Knu69, App91, Wil92], further details on discontinuous garbage collectors can be found in <ref> [McC60, FY60, Che70, App89, App91, LH83] </ref>. Both types of memory management systems have their advantages and disadvantages. A continuous system uses the smallest possible amount of memory, but usually incurs a high cost due to the overhead at each assignment.
Reference: [Axf90] <author> T. H. Axford. </author> <title> Reference Counting of Cyclic Graphs for Functional Programs. </title> <journal> The Computer Journal, </journal> <volume> Vol 33, No. 5, </volume> <pages> pages 466-470, </pages> <year> 1990 </year>
Reference-contexts: Note that the assumptions made in this paper prevent circular data structures from being constructed. This is important because the classical reference count algorithm can not reclaim circular data structures. Dealing with circular data structures requires additional work, see <ref> [Kop85, Axf90] </ref>. Due to the complexity and the recursive nature of the detach operation, it is common to create particular detach functions for each type. Usually the attach operation is not implemented by a separate function.
Reference: [Barth77] <author> J. M. </author> <title> Barth Shifting Garbage Collection Overhead to Compile Time. </title> <journal> Communication of the ACM, </journal> <volume> 20(7) </volume> <pages> 513-518, </pages> <month> July </month> <year> 1977. </year>
Reference-contexts: to: LIST function intersect (x:LIST,y:LIST) var t:LIST; h:INT; begin if [x-&gt;h t] then return intersect'(t,remove (h,y)); else begin attach (y); 10 return y end 3 Critical vs Deferred Reference Counting In the literature one can find other attempts at reducing the overhead of reference counting, known as Deferred Reference Counting <ref> [Barth77] </ref>. Deferred Reference Counting is based on the observation that most references either exist for a very short or for a very long time. Especially references contained in local variables usually have a very short lifetime.
Reference: [Boehm91] <author> H. </author> <title> Boehm Space Efficient Conservative Garbage Collection ACM SIGPLAN Notices, </title> <address> 28(6):197:206, </address> <month> June </month> <year> 1993 </year>
Reference-contexts: A version with a conservative discontinuous garbage collector was created using a library from Hans-J. Boehm see <ref> [BW88, BDS91, Boehm91] </ref>. This provided an opportunity to compare the effects of using different garbage collectors. The measurements were done by executing several programs generated with the CDL3 compiler. Using a modified runtime system, activity of the memory management system was reported.
Reference: [BDS91] <author> H. Boehm, A. Demers and S. </author> <booktitle> Shenker Mostly Parallel Garbage Collection ACM SIGPLAN Notices, </booktitle> <volume> 26(6) </volume> <pages> 157-164, </pages> <month> June </month> <year> 1991 </year>
Reference-contexts: A version with a conservative discontinuous garbage collector was created using a library from Hans-J. Boehm see <ref> [BW88, BDS91, Boehm91] </ref>. This provided an opportunity to compare the effects of using different garbage collectors. The measurements were done by executing several programs generated with the CDL3 compiler. Using a modified runtime system, activity of the memory management system was reported.
Reference: [BW88] <author> H. Boehm and M. </author> <title> Weiser Garbage Collection in an Uncooperative Environment Software Practice & Experience, </title> <type> pp 807-820, </type> <month> September </month> <year> 1988 </year>
Reference-contexts: A version with a conservative discontinuous garbage collector was created using a library from Hans-J. Boehm see <ref> [BW88, BDS91, Boehm91] </ref>. This provided an opportunity to compare the effects of using different garbage collectors. The measurements were done by executing several programs generated with the CDL3 compiler. Using a modified runtime system, activity of the memory management system was reported.
Reference: [Che70] <author> C. J. </author> <title> Cheney. A non-recursive list compactification algorithm. </title> <journal> Communications of the ACM, </journal> <volume> 13(11) </volume> <pages> 677-678, </pages> <month> November </month> <year> 1970. </year>
Reference-contexts: For an overview of the types of garbage collectors see [Knu69, App91, Wil92], further details on discontinuous garbage collectors can be found in <ref> [McC60, FY60, Che70, App89, App91, LH83] </ref>. Both types of memory management systems have their advantages and disadvantages. A continuous system uses the smallest possible amount of memory, but usually incurs a high cost due to the overhead at each assignment.
Reference: [Col60] <author> George E. Collins. </author> <title> A method for overlapping and erasure of lists. </title> <journal> Communications of the ACM, </journal> <volume> 2(12) </volume> <pages> 655-657, </pages> <month> December </month> <year> 1960. </year>
Reference-contexts: In such programs halting the program for a longer period in order to do memory management is not acceptable. 1.2 Reference Counting Most continuous memory management systems employ a form of reference counting <ref> [Col60] </ref>. The main idea is to keep for each value a count of the number of references to that value. As long as this reference count is larger than zero, the value is deemed to be accessible .
Reference: [DB76] <author> L. P. Deutsch and D. G. </author> <title> Bobrow An Efficient, Incremental, Automatic Garbage Collector. </title> <journal> Communication of the ACM, </journal> <volume> 19(9) </volume> <pages> 522-526, </pages> <month> September </month> <year> 1976 </year>
Reference: [FY60] <author> Robert R. Fenichel and Jerome C. Yochelson. </author> <title> A LISP garbage collector for virtual-memory computer systems. </title> <journal> Communications of the ACM, </journal> <volume> 12(11) </volume> <pages> 611-612, </pages> <month> November </month> <year> 1969. </year>
Reference-contexts: For an overview of the types of garbage collectors see [Knu69, App91, Wil92], further details on discontinuous garbage collectors can be found in <ref> [McC60, FY60, Che70, App89, App91, LH83] </ref>. Both types of memory management systems have their advantages and disadvantages. A continuous system uses the smallest possible amount of memory, but usually incurs a high cost due to the overhead at each assignment.
Reference: [Knu69] <author> Donald E. Knuth. </author> <booktitle> The Art of Computer Programming, Volume 1: Fundamental Algorithms, chapter 2.3.5, </booktitle> <pages> pages 406-422. </pages> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1969. </year> <month> 13 </month>
Reference-contexts: A discontinuous system typically examines all memory when an allocation request would fail, while a continuous system updates its administration at each assignment, therefore detecting values becoming inacces 3 sible immediately. For an overview of the types of garbage collectors see <ref> [Knu69, App91, Wil92] </ref>, further details on discontinuous garbage collectors can be found in [McC60, FY60, Che70, App89, App91, LH83]. Both types of memory management systems have their advantages and disadvantages.
Reference: [Kop85] <author> Joost van Koppen. </author> <title> A Reference Mechanism for ELAN. </title> <type> Master's Thesis no. 8, </type> <institution> University of Nijmegen, </institution> <address> The Netherlands, </address> <month> September </month> <year> 1985. </year>
Reference-contexts: Note that the assumptions made in this paper prevent circular data structures from being constructed. This is important because the classical reference count algorithm can not reclaim circular data structures. Dealing with circular data structures requires additional work, see <ref> [Kop85, Axf90] </ref>. Due to the complexity and the recursive nature of the detach operation, it is common to create particular detach functions for each type. Usually the attach operation is not implemented by a separate function.
Reference: [Kos91] <author> C. H. A. Koster. </author> <title> On the Borderline between Grammars and Programs. </title> <booktitle> Proceedings PLILP'1992, </booktitle> <address> Passau, </address> <year> 1991. </year>
Reference-contexts: The detach is slighty more complex but can be done with a load address, a substraction (in memory), and a conditional jump to the appropriate reclaim function. 11 4 Results As part of an ongoing research project involving a programming language called CDL3 (Compiler Description Language see <ref> [Kos91] </ref>), a classical Reference Counting as well as a Critical Reference Counting garbage collector were implemented. A version with a conservative discontinuous garbage collector was created using a library from Hans-J. Boehm see [BW88, BDS91, Boehm91]. This provided an opportunity to compare the effects of using different garbage collectors.
Reference: [LH83] <author> Henry Lieberman and Carl Hewitt. </author> <title> A real-time garbage collector based on the lifetimes of objects. </title> <journal> Communications of the ACM, </journal> <volume> 26(6) </volume> <pages> 419-429, </pages> <month> June </month> <year> 1983. </year>
Reference-contexts: For an overview of the types of garbage collectors see [Knu69, App91, Wil92], further details on discontinuous garbage collectors can be found in <ref> [McC60, FY60, Che70, App89, App91, LH83] </ref>. Both types of memory management systems have their advantages and disadvantages. A continuous system uses the smallest possible amount of memory, but usually incurs a high cost due to the overhead at each assignment.
Reference: [McC60] <author> John McCarthy. </author> <title> Recursive functions of symbolic expressions and their computation by machine. </title> <journal> Communications of the ACM, </journal> <volume> 3(4) </volume> <pages> 184-195, </pages> <month> April </month> <year> 1960. </year>
Reference-contexts: For an overview of the types of garbage collectors see [Knu69, App91, Wil92], further details on discontinuous garbage collectors can be found in <ref> [McC60, FY60, Che70, App89, App91, LH83] </ref>. Both types of memory management systems have their advantages and disadvantages. A continuous system uses the smallest possible amount of memory, but usually incurs a high cost due to the overhead at each assignment.
Reference: [Wil92] <author> Paul R. Wilson. </author> <title> Uniprocessor Garbage Collection Techniques. </title> <booktitle> International Workshop on Memory Management, Springer Verlag Lecture Notes in Computer Science, </booktitle> <address> St. Malo, France, </address> <month> September </month> <year> 1992. </year> <month> 14 </month>
Reference-contexts: A discontinuous system typically examines all memory when an allocation request would fail, while a continuous system updates its administration at each assignment, therefore detecting values becoming inacces 3 sible immediately. For an overview of the types of garbage collectors see <ref> [Knu69, App91, Wil92] </ref>, further details on discontinuous garbage collectors can be found in [McC60, FY60, Che70, App89, App91, LH83]. Both types of memory management systems have their advantages and disadvantages.
References-found: 17

