URL: http://www.cs.twsu.edu/~haynes/sac95.ps
Refering-URL: http://adept.cs.twsu.edu/~thomas/publications.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: A Simulation of Adaptive Agents in a Hostile Environment  
Author: Thomas D. Haynes and Roger L. Wainwright 
Keyword: Genetic Programming Variable Fitness Function Parallel Evaluation of Fitness  
Affiliation: Department of Mathematical and Computer Sciences, The University of Tulsa  
Abstract: In this paper we use the genetic programming technique to evolve programs to control an autonomous agent capable of learning how to survive in a hostile environment. In order to facilitate this goal, agents are run through random environment configurations. Randomly generated programs, which control the interaction of the agent with its environment, are recombined to form better programs. Each generation of the population of agents is placed into the Simulator with the ultimate goal of producing an agent capable of surviving any environment. The environment that an agent is presented consists of other agents, mines, and energy. The goal of this research is to construct a program which when executed will allow an agent (or agents) to correctly sense, and mark, the presence of items (energy and mines) in any environment. The Simulator determines the raw fitness of each agent by interpreting the associated program. General programs are evolved to solve this problem. Different environmental setups are presented to show the generality of the solution. These environments include one agent in a fixed environment, one agent in a fluctuating environment, and multiple agents in a fluctuating environment cooperating together. The genetic programming technique was extremely successful. The average fitness per generation in all three environments tested showed steady improvement. Programs were successfully generated that enabled an agent to handle any possible environment. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Angeline, Peter J., and Pollack, Jordan B., </author> <title> Competitive Environments Evolve Better Solutions for Complex Tasks, </title> <booktitle> Proceedings of the Fifth International Conference on Genetic Algorithms, </booktitle> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <pages> pages 264 - 278, </pages> <year> 1993. </year>
Reference-contexts: Thus, each generation can not be compared to any other, unless the environments happen to be fixed. This concept is a relatively new area of research with regard to genetic programming. Other researchers using genetic programming to solve complex tasks include An--geline et al. <ref> [1] </ref>, Husbands [3], Kinner [4], Koza [5], [6], [7], and Tackett [9]. The rest of this paper is organized as follows. Section 2 introduces the Simulator. Section 3 discusses the problem of one agent in a fixed environment and the problem of one agent in a fluctuating environment.
Reference: [2] <author> Haynes, Thomas D., </author> <title> "A Simulation of Adaptive Agents in a Hostile Environment", </title> <type> Master's Thesis, </type> <institution> Department of Mathematical and Computer Sciences, University of Tulsa, Tulsa, OK., </institution> <month> April, </month> <year> 1994. </year>
Reference-contexts: This problem and several other subtle problems has made the development of the Simulator and interesting project to work on. As a result, we developed several "tricks" to solve these issues. These and other issues are explained in more detail in <ref> [2] </ref>. Fitness Function The Function and Terminal sets for this problem are described in [2]. In the Simulator, the fitness function does change from generation to generation. Indeed, the Simulator can be thought of as the fitness function. <p> As a result, we developed several "tricks" to solve these issues. These and other issues are explained in more detail in <ref> [2] </ref>. Fitness Function The Function and Terminal sets for this problem are described in [2]. In the Simulator, the fitness function does change from generation to generation. Indeed, the Simulator can be thought of as the fitness function.
Reference: [3] <author> Husbands, Philip, </author> <title> Genetic Algorithms in Optimisation and Adaptation, Advances in Parallel Algorithms, Kronsjo, </title> <editor> Ly-dia and Shumsheruddin, Dean, ed., </editor> <publisher> Halstead Press, </publisher> <address> New York, </address> <year> 1992, </year> <pages> pages 227-276. </pages>
Reference-contexts: Thus, each generation can not be compared to any other, unless the environments happen to be fixed. This concept is a relatively new area of research with regard to genetic programming. Other researchers using genetic programming to solve complex tasks include An--geline et al. [1], Husbands <ref> [3] </ref>, Kinner [4], Koza [5], [6], [7], and Tackett [9]. The rest of this paper is organized as follows. Section 2 introduces the Simulator. Section 3 discusses the problem of one agent in a fixed environment and the problem of one agent in a fluctuating environment.
Reference: [4] <author> Kinnear, Kenneth E. Jr., </author> <title> Generality and Difficulty in Genetic Programming: Evolving a Sort, </title> <booktitle> Proceedings of the Fifth International Conference on Genetic Algorithms, </booktitle> <publisher> Morgan Kaufmann Publishers, </publisher> <pages> pages 287 - 294, </pages> <publisher> Inc., </publisher> <year> 1993. </year>
Reference-contexts: Thus, each generation can not be compared to any other, unless the environments happen to be fixed. This concept is a relatively new area of research with regard to genetic programming. Other researchers using genetic programming to solve complex tasks include An--geline et al. [1], Husbands [3], Kinner <ref> [4] </ref>, Koza [5], [6], [7], and Tackett [9]. The rest of this paper is organized as follows. Section 2 introduces the Simulator. Section 3 discusses the problem of one agent in a fixed environment and the problem of one agent in a fluctuating environment.
Reference: [5] <author> Koza, John R., </author> <title> Evolving a Computer Program to Generate Random Numbers Using the Genetic Programming Paradigm, </title> <booktitle> Proceedings of the Fourth International Conference on Genetic Algorithms, </booktitle> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <pages> pages 37 - 44, </pages> <year> 1991. </year>
Reference-contexts: This concept is a relatively new area of research with regard to genetic programming. Other researchers using genetic programming to solve complex tasks include An--geline et al. [1], Husbands [3], Kinner [4], Koza <ref> [5] </ref>, [6], [7], and Tackett [9]. The rest of this paper is organized as follows. Section 2 introduces the Simulator. Section 3 discusses the problem of one agent in a fixed environment and the problem of one agent in a fluctuating environment.
Reference: [6] <author> Koza, John R., </author> <title> Simultaneous Discovery of Reusable Detectors and Subroutines Using Genetic Programming, </title> <booktitle> Proceedings of the Fifth International Conference on Genetic Algorithms, </booktitle> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <pages> pages 295 - 302, </pages> <year> 1993. </year>
Reference-contexts: This concept is a relatively new area of research with regard to genetic programming. Other researchers using genetic programming to solve complex tasks include An--geline et al. [1], Husbands [3], Kinner [4], Koza [5], <ref> [6] </ref>, [7], and Tackett [9]. The rest of this paper is organized as follows. Section 2 introduces the Simulator. Section 3 discusses the problem of one agent in a fixed environment and the problem of one agent in a fluctuating environment. Section 4 discusses multiple agents in a fluctuating environment.
Reference: [7] <author> Koza, John R., </author> <title> Genetic Programming, On the Programming of Computers by Means of Natural Selection, </title> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: After the population converges, or after a preset number of generations, the individual program with the best fitness is selected to be the solution. It is assumed that the reader is familiar with the fundamentals of genetic programming. Koza <ref> [7] </ref> provides an excellent overview of the fundamentals of genetic programming. In this research, genetic programming is used as the foundation of a simulation of the interactions of autonomous agents in a hostile environment. <p> In nearly all of the research to date in genetic programming, static fitness functions were used to calculate the fitness of candidate programs. An example of this is the Autonomous Ant problem <ref> [7] </ref>, in which programs are constructed to navigate through a fixed environment in search of energy. Every generation of this problem is presented with the same trail of energy. In contrast, our Simulator randomly generates a new environment in which to judge each generation. <p> This concept is a relatively new area of research with regard to genetic programming. Other researchers using genetic programming to solve complex tasks include An--geline et al. [1], Husbands [3], Kinner [4], Koza [5], [6], <ref> [7] </ref>, and Tackett [9]. The rest of this paper is organized as follows. Section 2 introduces the Simulator. Section 3 discusses the problem of one agent in a fixed environment and the problem of one agent in a fluctuating environment. Section 4 discusses multiple agents in a fluctuating environment.
Reference: [8] <author> Montana, David J., </author> <title> BBN Technical Report No. 7866: Strongly Typed Genetic Programming, </title> <institution> Bolt Beranek and Newman, Inc., </institution> <month> May 7, </month> <year> 1993. </year>
Reference-contexts: Each agent consists of an S-expression, a supply of energy, and a structure used to hold state information, or memory, for each run through the Simulator. The S-expression is stored as a parse tree, and is generated following the rule of initial tree generation with types. See Montana <ref> [8] </ref> for an excellent discussion on strongly typed genetic programming. The energy supply is the agents store of energy, and is initially randomly generated.
Reference: [9] <author> Tackett, Walter A., </author> <title> Genetic Programming for Feature Discovery and Image Discrimination, </title> <booktitle> Proceedings of the Fifth International Conference on Genetic Algorithms, </booktitle> <publisher> Morgan Kaufmann Publishers, </publisher> <pages> pages 303 - 309, </pages> <publisher> Inc., </publisher> <year> 1993. </year> <month> 6 </month>
Reference-contexts: This concept is a relatively new area of research with regard to genetic programming. Other researchers using genetic programming to solve complex tasks include An--geline et al. [1], Husbands [3], Kinner [4], Koza [5], [6], [7], and Tackett <ref> [9] </ref>. The rest of this paper is organized as follows. Section 2 introduces the Simulator. Section 3 discusses the problem of one agent in a fixed environment and the problem of one agent in a fluctuating environment. Section 4 discusses multiple agents in a fluctuating environment.
References-found: 9

