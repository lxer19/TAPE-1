URL: http://www.cs.kuleuven.ac.be/~kristof/papers/ICLPpaper-macro.ps
Refering-URL: http://www.cs.kuleuven.ac.be/~kristof/publications.html
Root-URL: 
Email: fkristof, marcd, dannydg@cs.kuleuven.ac.be  
Title: Representing Continuous Change in the Abductive Event Calculus  
Author: Kristof Van Belleghem, Marc Denecker, Danny De Schreye 
Address: Celestijnenlaan 200A, B-3001 Heverlee, Belgium.  
Affiliation: Department of Computer Science, K.U.Leuven,  
Abstract: In this paper we extend the Abductive Event Calculus, a variant and extension of the Event Calculus of Kowalski and Sergot, with a representation for continuous change. We assume the change is not exactly known and use constraints to represent the available knowledge. The resulting logic program can be executed by the SLDNFA abductive procedure of Denecker and De Schreye. We show how our representation of continuous change combines with solutions to other problems in temporal reasoning, like indeterministic effects of actions, and how it can be used not only for temporal projection, but also to solve planning and diagnosis problems or any combination thereof. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. F. Allen. </author> <title> Towards a General Theory of Action and Time. </title> <booktitle> Artifical Intelligence, </booktitle> <address> 23(11):123, </address> <year> 1984. </year>
Reference-contexts: This distinction is necessary if we want to model any but the most simple problem domains. A few other authors have addressed the problem of representing continuous change in a temporal reasoning formalism. Allen's theory of time ( <ref> [ 1 ] </ref> ) was modified in [ 11 ] to fix certain problems arising when continuous change was considered in the original theory. Sandewall ( [ 17 ] , [ 18 ] ) describes a framework that uses differential equations combined with logic and a form of chronological minimisation.
Reference: [2] <author> K. Clark. </author> <title> Negation as failure. </title> <editor> In H. Gallaire and J. Minker, editors, </editor> <booktitle> Logic and databases, </booktitle> <pages> pages 293-322. </pages> <publisher> Plenum Press, </publisher> <year> 1978. </year>
Reference-contexts: This event initiates all properties that are true in the initial state: happens (start): initiates (start; P ) initially (P ): No events are allowed to occur before start. 3 SLDNFA in the Event Calculus The Event Calculus can be used as a logic program under Clark completion semantics ( <ref> [ 2 ] </ref> ) to solve temporal projection (prediction) problems. This can be done deductively using the well-known SLDNF procedure. However, Clark completion semantics assumes complete knowledge about the problem domain. Any form of incomplete knowledge | like actions with indeterministic effects | can not be dealt with.
Reference: [3] <author> L. Console, D. Theseider Dupre, and P. Torasso. </author> <title> On the relationship between abduction and deduction. </title> <journal> Journal of Logic and Computation, </journal> <volume> 1(5) </volume> <pages> 661-690, </pages> <year> 1991. </year>
Reference-contexts: Furthermore, postdiction (diagnosis) and planning problems can not be solved using deduction in this form of the Event Calculus. These problems can be overcome in the following way: on the representational level, we use the Console completion semantics for abductive logic programs of <ref> [ 3 ] </ref> , augmented with general first order logic constraints. This semantics allows for the use of undefined predicates: predicates with an unknown truth value. Thus, incomplete knowledge can be represented.
Reference: [4] <author> J. de Kleer and J. S. Brown. </author> <title> A qualitative physics based on confluences. </title> <editor> In J. Hobbs and R. Moore, editors, </editor> <booktitle> Formal Theories of the Commonsense World, </booktitle> <pages> pages 109-183. </pages> <publisher> Ablex, </publisher> <year> 1985. </year>
Reference-contexts: This approach assumes that each trajectory is exactly known. To avoid this, in [ 20 ] a qualitative version of trajectories is proposed, based on the naive physics theory of confluences described in <ref> [ 4 ] </ref> . Confluences are, simply stated, a form of qualitative differential equations. They can be used to describe the world in terms of the signs of certain quantities and the signs of their derivatives, without knowing any exact values. Shanahan combines these confluences with trajectories.
Reference: [5] <author> M. Denecker. </author> <title> Knowledge Representation and Reasoning in Incomplete Logic Programming. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, K.U.Leuven, </institution> <year> 1993. </year>
Reference-contexts: Extensions were introduced to improve the expressive power in several ways. One of the most important of these was the introduction of abduction, for example in [ 8 ] , [ 15 ] and <ref> [ 5 ] </ref> , which made it possible to use the Event Calculus for planning and for diagnosis ( [ 7 ] ) as well as for temporal projection. In the original Event Calculus, as in most other versions, all change is supposed to be discrete.
Reference: [6] <author> M. Denecker and D. De Schreye. </author> <title> SLDNFA; an abductive procedure for normal abductive programs. </title> <editor> In K. Apt, editor, </editor> <booktitle> Proceedings of the International Joint Conference and Symposium on Logic Programming, </booktitle> <address> Wash-ington, </address> <year> 1992. </year>
Reference-contexts: In a similar way postdiction problems and indeterminism can be modeled. For our experiments we have used an implementation of the SLDNFA (SLD resolution with Negation as Failure and Abduction) procedure described in <ref> [ 6 ] </ref> and [ 7 ] . This procedure allows for a better treatment of abducible atoms containing variables compared to other procedures. A proof of the soundness and completeness of the procedure with respect to Console completion semantics can be found in the aforementioned papers.
Reference: [7] <author> M. Denecker, L. Missiaen, and M. Bruynooghe. </author> <title> Temporal reasoning with abductive event calculus. </title> <booktitle> In Proceedings of ECAI 92, </booktitle> <address> Vienna, </address> <year> 1992. </year>
Reference-contexts: One of the most important of these was the introduction of abduction, for example in [ 8 ] , [ 15 ] and [ 5 ] , which made it possible to use the Event Calculus for planning and for diagnosis ( <ref> [ 7 ] </ref> ) as well as for temporal projection. In the original Event Calculus, as in most other versions, all change is supposed to be discrete. <p> In a similar way postdiction problems and indeterminism can be modeled. For our experiments we have used an implementation of the SLDNFA (SLD resolution with Negation as Failure and Abduction) procedure described in [ 6 ] and <ref> [ 7 ] </ref> . This procedure allows for a better treatment of abducible atoms containing variables compared to other procedures. A proof of the soundness and completeness of the procedure with respect to Console completion semantics can be found in the aforementioned papers. <p> At the same time we add an indeterministic aspect, by making it possible for the bell to be broken. We do not know whether the bell is broken or not, so we declare broken bell to be an abducible predicate, as in <ref> [ 7 ] </ref> . We only have to add the rule initiates (E; ring bell) holds at (level (half ); E); not broken bell: With the bell and the indeterminism added, we can demonstrate how diagnosis problems are handled.
Reference: [8] <author> K. Eshghi. </author> <title> Abductive planning with event calculus. </title> <editor> In R. Kowalski and K. Bowen, editors, </editor> <booktitle> Proceedings of the 5th ICLP, </booktitle> <year> 1988. </year>
Reference-contexts: Extensions were introduced to improve the expressive power in several ways. One of the most important of these was the introduction of abduction, for example in <ref> [ 8 ] </ref> , [ 15 ] and [ 5 ] , which made it possible to use the Event Calculus for planning and for diagnosis ( [ 7 ] ) as well as for temporal projection.
Reference: [9] <author> C. Evans. </author> <title> The Macro-Event Calculus: Representing Temporal Granularity. </title> <booktitle> In Proceedings of PRICAI, </booktitle> <address> Tokyo, </address> <year> 1990. </year>
Reference-contexts: The basic concepts are events and properties, events initiating and terminating periods of time during which properties hold. Several modified versions of the Event Calculus have been used, for example in [ 19 ] , <ref> [ 9 ] </ref> and [ 15 ] , mostly to simplify the ontology and to eliminate problems occuring because of bidirectional persistence of properties (forward as well as backward in time). Extensions were introduced to improve the expressive power in several ways.
Reference: [10] <author> K. Forbus. </author> <title> Qualitative Process Theory. </title> <journal> Artifical Intelligence, </journal> <volume> 24 </volume> <pages> 85-168, </pages> <year> 1984. </year>
Reference-contexts: A lot of work on this topic of making useful and adequate abstractions exists in the qualitative physics community (see for example <ref> [ 10 ] </ref> and [ 13 ] ). One simple and obvious abstraction, which is often used in qualitative physics, is the distinction between positive and negative change.
Reference: [11] <author> A. Galton. </author> <title> A critical examination of allen's theory of action and time. </title> <journal> Artifical Intelligence, </journal> <volume> 42 </volume> <pages> 109-188, </pages> <year> 1990. </year>
Reference-contexts: This distinction is necessary if we want to model any but the most simple problem domains. A few other authors have addressed the problem of representing continuous change in a temporal reasoning formalism. Allen's theory of time ( [ 1 ] ) was modified in <ref> [ 11 ] </ref> to fix certain problems arising when continuous change was considered in the original theory. Sandewall ( [ 17 ] , [ 18 ] ) describes a framework that uses differential equations combined with logic and a form of chronological minimisation.
Reference: [12] <author> R. A. Kowalski and M. Sergot. </author> <title> A logic-based calculus of events. </title> <journal> New Generation Computing, </journal> <volume> 4(4) </volume> <pages> 319-340, </pages> <year> 1986. </year>
Reference-contexts: 1 Introduction The Event Calculus (see <ref> [ 12 ] </ref> ) is one of the many formalisms used for representing a changing world. The basic concepts are events and properties, events initiating and terminating periods of time during which properties hold.
Reference: [13] <author> B. Kuipers. </author> <title> Qualitative Simulation. </title> <journal> Artifical Intelligence, </journal> <volume> 29 </volume> <pages> 289-338, </pages> <year> 1986. </year>
Reference-contexts: A lot of work on this topic of making useful and adequate abstractions exists in the qualitative physics community (see for example [ 10 ] and <ref> [ 13 ] </ref> ). One simple and obvious abstraction, which is often used in qualitative physics, is the distinction between positive and negative change.
Reference: [14] <author> J. Lloyd and R. Topor. </author> <title> Making prolog more expressive. </title> <journal> Journal of logic programming, </journal> <volume> 1(3) </volume> <pages> 225-240, </pages> <year> 1984. </year>
Reference-contexts: The use of this kind of constraints proved very helpful in many situations, not in the least in our proposal for modeling continuous change. In general we can transform any logic formula into one or more rules of this form ( <ref> [ 14 ] </ref> ), thereby extending the expressiveness of the formalism considerably.
Reference: [15] <author> L. Missiaen. </author> <title> Localized abductive planning with the event calculus. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, K.U.Leuven, </institution> <year> 1991. </year>
Reference-contexts: The basic concepts are events and properties, events initiating and terminating periods of time during which properties hold. Several modified versions of the Event Calculus have been used, for example in [ 19 ] , [ 9 ] and <ref> [ 15 ] </ref> , mostly to simplify the ontology and to eliminate problems occuring because of bidirectional persistence of properties (forward as well as backward in time). Extensions were introduced to improve the expressive power in several ways. <p> Extensions were introduced to improve the expressive power in several ways. One of the most important of these was the introduction of abduction, for example in [ 8 ] , <ref> [ 15 ] </ref> and [ 5 ] , which made it possible to use the Event Calculus for planning and for diagnosis ( [ 7 ] ) as well as for temporal projection. In the original Event Calculus, as in most other versions, all change is supposed to be discrete.
Reference: [16] <author> A. Montanari, E. Maim, E. Ciapessoni, and E. Ratto. </author> <title> Dealing with Time Granularity in the Event Calculus. </title> <booktitle> In Proceedings of FGCS, Tokyo, </booktitle> <pages> pages 702-712, </pages> <year> 1992. </year>
Reference-contexts: In the original Event Calculus, as in most other versions, all change is supposed to be discrete. Recently there have been proposals ( [ 19 ] , <ref> [ 16 ] </ref> ) to incorporate continuous change in the Event Calculus, describing changing quantities as exactly known functions of time. <p> This approach is taken by most authors, for example in [ 17 ] , [ 19 ] and <ref> [ 16 ] </ref> . But in the case of continuous change | even more than in other cases | it seems necessary to allow for incomplete knowledge. <p> The extension fits in nicely with the Event Calculus, as periods of rest | described by the basic Event Calculus axioms | and periods of motion | described by the axioms for trajectories | interact without a problem. This solution is further refined in <ref> [ 16 ] </ref> to make reasoning at different levels of time granularity possible, and to allow for the parameters of the change to be modified while the change is in effect. This approach assumes that each trajectory is exactly known.
Reference: [17] <author> E. Sandewall. </author> <title> Combining logic and differential equations for describing real-world systems. </title> <booktitle> In Proceedings 1989 Knowledge Representation Conference, </booktitle> <pages> page 412, </pages> <year> 1989. </year>
Reference-contexts: The first one assumes complete knowledge about the change: the changing quantity is exactly known as a function of time, or can be calculated from other data (like the flow through a certain tap). This approach is taken by most authors, for example in <ref> [ 17 ] </ref> , [ 19 ] and [ 16 ] . But in the case of continuous change | even more than in other cases | it seems necessary to allow for incomplete knowledge. <p> A few other authors have addressed the problem of representing continuous change in a temporal reasoning formalism. Allen's theory of time ( [ 1 ] ) was modified in [ 11 ] to fix certain problems arising when continuous change was considered in the original theory. Sandewall ( <ref> [ 17 ] </ref> , [ 18 ] ) describes a framework that uses differential equations combined with logic and a form of chronological minimisation. In an approach based like ours on the Event Calculus, Shanahan extends the formalism with trajectories ( [ 19 ] ).
Reference: [18] <author> E. Sandewall. </author> <title> Filter preferential entailment for the logic of action in almost continuous worlds. </title> <booktitle> In Proceedings of IJCAI 89, </booktitle> <pages> page 894, </pages> <year> 1989. </year>
Reference-contexts: Allen's theory of time ( [ 1 ] ) was modified in [ 11 ] to fix certain problems arising when continuous change was considered in the original theory. Sandewall ( [ 17 ] , <ref> [ 18 ] </ref> ) describes a framework that uses differential equations combined with logic and a form of chronological minimisation. In an approach based like ours on the Event Calculus, Shanahan extends the formalism with trajectories ( [ 19 ] ).
Reference: [19] <author> M. Shanahan. </author> <title> Representing continuous change in the event calculus. </title> <booktitle> In Proceedings of the 9th ECAI, </booktitle> <pages> page 598, </pages> <year> 1990. </year>
Reference-contexts: The basic concepts are events and properties, events initiating and terminating periods of time during which properties hold. Several modified versions of the Event Calculus have been used, for example in <ref> [ 19 ] </ref> , [ 9 ] and [ 15 ] , mostly to simplify the ontology and to eliminate problems occuring because of bidirectional persistence of properties (forward as well as backward in time). Extensions were introduced to improve the expressive power in several ways. <p> In the original Event Calculus, as in most other versions, all change is supposed to be discrete. Recently there have been proposals ( <ref> [ 19 ] </ref> , [ 16 ] ) to incorporate continuous change in the Event Calculus, describing changing quantities as exactly known functions of time. <p> An example where we need to model continuous change is the problem of a tank that can be filled with water, as introduced in <ref> [ 19 ] </ref> . This is a simple problem, yet it shows many of the complications that arise when continuous change occurs. The most important of these is the problem of autotermination, also introduced in [ 19 ] . <p> is the problem of a tank that can be filled with water, as introduced in <ref> [ 19 ] </ref> . This is a simple problem, yet it shows many of the complications that arise when continuous change occurs. The most important of these is the problem of autotermination, also introduced in [ 19 ] . It is possible that the change of a property over time gets terminated by itself, without the occurrence of any external event. This happens for example when the rising water in a tank reaches its rim. <p> The first one assumes complete knowledge about the change: the changing quantity is exactly known as a function of time, or can be calculated from other data (like the flow through a certain tap). This approach is taken by most authors, for example in [ 17 ] , <ref> [ 19 ] </ref> and [ 16 ] . But in the case of continuous change | even more than in other cases | it seems necessary to allow for incomplete knowledge. <p> During periods of change, the state in change function determines the value of properties. This approach is similar to the definition of trajectories in <ref> [ 19 ] </ref> , but where trajectories are defined as exactly known functions, we leave state in change undefined (abducible). Instead we define constraints on the state in change function to represent the available knowledge, for example monotonicity or continuity of the change. These constraints will be described later on. <p> Sandewall ( [ 17 ] , [ 18 ] ) describes a framework that uses differential equations combined with logic and a form of chronological minimisation. In an approach based like ours on the Event Calculus, Shanahan extends the formalism with trajectories ( <ref> [ 19 ] </ref> ). These trajectories describe periods of continuous change, assuming the change is exactly known as a function of time.
Reference: [20] <author> M. Shanahan. </author> <title> Towards a calculus for temporal and qualitative reasoning. </title> <booktitle> In Proceedings of AAAI Symposium, </booktitle> <address> Stanford, </address> <year> 1991, 1991. </year>
Reference-contexts: In this paper we propose an extension of the Abductive Event Calculus that does not require such complete knowledge about the change, and which is closer to the qualitative reasoning point of view. One other qualitative approach to representating continuous change in the Event Calculus is described in <ref> [ 20 ] </ref> , but as the author points out, that work was never really completed. <p> This approach assumes that each trajectory is exactly known. To avoid this, in <ref> [ 20 ] </ref> a qualitative version of trajectories is proposed, based on the naive physics theory of confluences described in [ 4 ] . Confluences are, simply stated, a form of qualitative differential equations.
References-found: 20

