URL: http://www.iro.umontreal.ca/~demers/Predoc.ps.gz
Refering-URL: http://www.iro.umontreal.ca/~demers/
Root-URL: http://www.iro.umontreal.ca
Title: Classification de la reflexion de comportement basee sur les monades Examen Predoc deuxieme partie Table
Author: Francois-Nicola Demers 
Date: Juillet 1996  
Abstract-found: 0
Intro-found: 1
Reference: [AL91] <author> Asperti (Andrea) et Longo (Guiseppe). </author> <title> Categories, Types, and Structures : An Introduction to Category Theory for the Working Computer Scientist. </title> - <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: C'est pour cette raison qu'au-jourd'hui, on denombre une grande quantite de rapports de recherche vul-garisant le sujet pour les informaticiens en general [Hoa88a] [RB88] [Pie90] [Fok92b] [Bou93], les theoriciens de l'informatique [GS89] [BW90] [Pie91] [Ten91] <ref> [AL91] </ref> [Poi92] [Spi93] ou les mathematiciens interesses aux langages [LS86] [LS91] [Gog91] [vO95]. Mais pourquoi cette volonte d'unir la theorie la plus generale et la plus abstraite des mathematiques [Hoa88b] avec la programmation ? Une reponse est clairement expliquee dans le livre de Rydeheard & Burstall [RB88].
Reference: [AMY93] <author> Asai (K.), Matsuoka (S.) et Yonezawa (A.). </author> <title> Duplication and Partial Evaluation to Implement Reflective Languages. </title> <booktitle> In : Informal Proceedings of the Third Workshop on Reflection and Metalevel Architectures in Object-Oriented Programming, </booktitle> <address> OOPSLA'93. </address>
Reference-contexts: Par exemple, Danvy & Filinski se sont interesses a des problemes de controle et de contexte d'evaluation en developpant l'idee de la meta-continuation hors du monde de la reflexion [DF90, DF92]. Les recherches sur les langages a la 3-Lisp se sont vues delaissees [DM95] sauf pour quelques unes [JF92] <ref> [AMY93] </ref> [Dem94]. Cela s'explique en partie par le fait que presque aucune application de cette reflexion n'a ete montree.
Reference: [BH94] <author> Bellegarde (Francoise) et Hook (James). </author> - <title> Monads, Indexes, and Transformations. Rapport technique nN o CS-94-008, </title> <institution> Oregon Graduate Institute CS, </institution> <month> 94. </month>
Reference-contexts: L'aspect horizontal des monades a ete exploite pour l'implantation du compilateur Glasgow Haskell 3 PROGRAMMATION MONADIQUE 23 [Jon96], pour l'implantation d'etat modifiable ("updatable state") [Wad90], pour les entrees/sorties [PJW93], l'interaction [Wad95], l'analyse semantique [HM96], la substitution <ref> [BH94] </ref>, l'impression de bonnes qualites ("pretty printing") [Hug95], la reflexion [MF96] et bien d'autres. Du cote de l'aspect vertical des monades, il est reconnu que les systemes d'inference de type "classiques" (comme celui des langages Haskell et ML) ne suffisent pas a la modelisation methodologique des monades.
Reference: [Bir87] <author> Bird (R. S.). </author> <title> An introduction to the theory of lists. In : Logic of Programming and Calculi of Discrete Design, </title> <editor> ed. par Broy (M.), </editor> <booktitle> pp. </booktitle> <pages> 3-42. </pages> - <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: Il est facile de se convraincre que les equations precedentes sont vraies pour M = fl. Dans ce cas, ces equations sont exactement celle de la theorie des liste de Bird <ref> [Bir87] </ref>. Nous nommerons la monade liste M l = (fl; map l ; unit l ; join l ) ou M = fl, le constructeur de liste. Deux ans plus tard, Wadler [Wad92] adopte la definition plus appropriee suivante. <p> En d'autres mots, nous obtenons une forme normale pour les homomorphismes de listes. Pour montrer que deux homomorphismes sont egaux, il suffit de montrer qu'ils agissent de m^emes facons sur les singletons. Cela correspond au theoreme d'homomorphisme de Bird <ref> [Bir87] </ref>. Ce theoreme est en fait, une autre facon de voir l'adjonction reliee aux transformations naturelles [] et =. Encore une fois, il est possible de generaliser a un constructeur de type quelconque.
Reference: [Bou93] <author> Boucher (Dominique). </author> - <title> Theorie des categories en informa-tique : notions de base et application. </title> <institution> These, Universite de Montreal, </institution> <year> 1993. </year>
Reference-contexts: Au cours de la derniere decennie, plusieurs mathematiciens et informa-ticiens ont tente d'expliquer cette theorie. C'est pour cette raison qu'au-jourd'hui, on denombre une grande quantite de rapports de recherche vul-garisant le sujet pour les informaticiens en general [Hoa88a] [RB88] [Pie90] [Fok92b] <ref> [Bou93] </ref>, les theoriciens de l'informatique [GS89] [BW90] [Pie91] [Ten91] [AL91] [Poi92] [Spi93] ou les mathematiciens interesses aux langages [LS86] [LS91] [Gog91] [vO95]. <p> Dans les termes de la theorie des categories, nous dirons que si les types et fonctions d'un langage respectent les proprietes precedentes, alors ils forment une categorie. Une categorie est donc une sorte de graphe oriente <ref> [Bou93] </ref> dans lequel il y a des noeuds appele objets et des arcs appeles fleches ou morphismes. Pour la comprehension de notre exemple, il faut nous rappeler quelques fonctions d'ordre superieur de base de la programmation fonctionnelle typee.
Reference: [BW85] <author> Barr (M.) et Wells (C.). </author> <title> Toposes, Triples and Theories. </title> - <publisher> Berlin, Springer-Verlag, </publisher> <address> 1985. R EF ERENCES 52 </address>
Reference-contexts: Le probleme de la combinaison des monades est complexe. La composition des monades en tant que telle a ete montree impossible dans le cas general [JD93]. Aucune theorie solide n'existe pour solutionner ce probleme [Wad94]. Wadler [KW92], Steele [Ste94], Es-pinosa [Esp95], Barr & Wells <ref> [BW85] </ref> et Liang et al. [LHJ95] ont travaille sur le developpement de solutions sans aboutir a un consensus. Du cote des langages types, les solutions proposees par Liang et al. [LHJ95, LH96] sont remarquables. Ils utilisent le concept de transformateur de monades de Moggi [Mog89a] pour composer les monades.
Reference: [BW90] <author> Barr (Michael) et Wells (Charles). </author> <booktitle> Category Theory for Computing Science. - London, Prentice-Hall International, </booktitle> <year> 1990, </year> <month> xv+432p. </month>
Reference-contexts: Au cours de la derniere decennie, plusieurs mathematiciens et informa-ticiens ont tente d'expliquer cette theorie. C'est pour cette raison qu'au-jourd'hui, on denombre une grande quantite de rapports de recherche vul-garisant le sujet pour les informaticiens en general [Hoa88a] [RB88] [Pie90] [Fok92b] [Bou93], les theoriciens de l'informatique [GS89] <ref> [BW90] </ref> [Pie91] [Ten91] [AL91] [Poi92] [Spi93] ou les mathematiciens interesses aux langages [LS86] [LS91] [Gog91] [vO95]. Mais pourquoi cette volonte d'unir la theorie la plus generale et la plus abstraite des mathematiques [Hoa88b] avec la programmation ? Une reponse est clairement expliquee dans le livre de Rydeheard & Burstall [RB88].
Reference: [BW96] <author> Benton (Nick) et Wadler (Philip). </author> <title> Linear logic, monads, and the lambda calculus. </title> <booktitle> In : 11'th IEEE Symposium on Logic in Computer Science. </booktitle> <address> New Brunswick, New Jersey, </address> <month> Juillet </month> <year> 1996. </year>
Reference-contexts: Il est considere comme un des developpements semantiques les plus significatifs de la derniere decennie <ref> [BW96] </ref>. 5 TH EORIE DES CAT EGORIES ET MONADES 33 Le meta-langage de Moggi est un langage type qui met en evidence la distinction entre calcul et valeur (comme l'avait deja fait Reynolds [Rey72] avec les termes serieux et triviaux). <p> La relation entre le style monadique et les continuations composables a aussi ete reconnue par Wadler [Wad94] et Kieburtz, Agapiev & Hook [KAH92]. Enfin, Benton & Wadler <ref> [BW96] </ref> montrent que les transformations des 17 Cette notation met en evidence le fait que la monade est reconnue par plusieurs comme une construction du premier ordre et non pas d'ordre superieur comme cela semble ^etre sous-entendu dans sa definition [Mog89b] [Wad95].
Reference: [C +86] <author> Constable (R. L.) et al. </author> <title> Implementing Mathematics with the Nuprl Proof Development System. </title> - <publisher> Prentice-Hall, </publisher> <year> 1986. </year>
Reference-contexts: Les theoremes qui affirment l'existence de certaines entites categoriques sont prouves par construction explicite de celles-ci. De ce fait, plusieurs ont developpe des methodes pour extraire les aspects mecaniques du raison-nement categorique [Hue86] [RB88] [Fok92a]. Aujourd'hui, on retrouve plu-sieurs langages utiles ou specialises a cette theorie : Nuprl <ref> [C +86] </ref>, Mizar [Rud92], LEGO [Pol94], Coq [DFH +93], HOL [MT93] et beaucoup d'autres. D'ailleurs, on peut voir la theorie des categories comme une collection d'al-gorithmes. Par contre, ces algorithmes ont un degre de generalite depassant les niveaux rencontres normalement en programmation.
Reference: [Car91] <author> Cardelli (Luca). </author> - <title> Typeful programming. In : Formal Description of Programming Concepts, </title> <editor> ed. par Neuhold (E. J.) et Paul (M.). </editor> - <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: Des langages comme CLEAR [GB84a], un langage de specification algebrique qui peut ^etre vu comme un langage de description de monades [RB85], Quest <ref> [Car91] </ref> de Cardelli propose par Espinosa [Esp95] ou Gofer [Jon94] utilise par Liang [LHJ95] sont plus adequats parce qu'ils offrent un systeme de type plus riche (par exemple, les types dependants de Quest et le polymorphisme sur les types de Gofer).
Reference: [CCM85] <editor> Cousineau (G.), Curien (P. L.) et Mauny (M.). </editor> <booktitle> The categorical abstract machine. In : Functional Programming Languages and Computer Architecture, </booktitle> <editor> ed. </editor> <booktitle> par Jouannaud (J.-P.), </booktitle> <pages> pp. 50-64. </pages> - <address> Berlin, </address> <publisher> DE, Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: la suite, il y a eu plusieurs re-cherches pour formaliser l'informatique en theorie des categories, comme la theorie du -calcul [Has95], la semantique denotationnelle [Mog89b, Mog91] et la specification algebrique [GB84a, GB84b, TBG91], mais aussi dans les aspects pratiques de l'informatique comme la conception de langages [Wad92], les techniques d'implementation <ref> [CCM85] </ref> [JHHP93], la derivation de programmes [Spi93] et d'autres. Malheureusement, cette theorie est difficile a comprendre et demande une grande patience a celui qui veut l'utiliser, car elle offre des concepts tres abstraits qui n'ont pas, pour le profane, de significations naturelles autres que pour des exemples plutot simplistes.
Reference: [CDL95] <author> Consel (Charles), Danvy (Olivier) et Lee (Peter). </author> - <title> CMU Summer School on Partial Evaluation. </title> - <address> Pittsburgh, PA 15213-3890, </address> <institution> Carnegie Mellon University, </institution> <month> 5-9 juillet </month> <year> 1995. </year>
Reference-contexts: Neanmoins, l'implantation des monades en Scheme apporte des avantages pratiques comparativement aux langages paresseux car, dans ce langage, il y a moyen d'optimiser le code monadique par evaluation partielle <ref> [DKM91, CDL95] </ref>, une technique tres performante dans le cas des monades et encore aujourd'hui tres rare dans les langages paresseux. Espinosa [Esp94, Esp95] resout le probleme de la combinaison des mo-nades en utilisant, lui aussi, des sortes de constructeurs de monades qui transforment les monades en d'autres monades plus complexes.
Reference: [CF94] <author> Cartwright (R.) et Felleisen (M.). </author> <title> Extensible Denotational language specifications. </title> <booktitle> In : Proceedings of TACS'94. </booktitle> <pages> pp. 244-272. </pages> - <publisher> Springer-Verlag, LNSC. </publisher>
Reference-contexts: Les langages extensibles decoulent souvent de travaux formels sur la semantique. Il existe une bonne quantite de resultats theoriques sur les lan-gages extensibles. Nous retrouvons entre autres la semantique des actions de Mosses [Mos92], la semantique directe extensible <ref> [CF94] </ref>, les continuations composables [DF90], la semantique des moniteurs [KHC91] et la semantique monadique [Mog89b]. Nous discuterons plus en details de ces semantiques dans les sections 4 et 6. <p> Ce langage de specification est interessant pour la description de langages du premier ordre, mais la notation devient lourde quand il est question de decrire des langages d'ordre superieur ayant des mecanismes de controle manipulant la continuation, comme call/cc de Scheme. La semantique directe extensible <ref> [CF94] </ref> est une facon d'etendre la definition denotationnelle d'un langage sans en changer les definitions deja etablies. Elle permet de construire des -interpretes et de les composer entre eux pour former des -interpretes de langages fonctionnels complets. La semantique des moniteurs [KHC91] est aussi une extension de la semantique denotationnelle.
Reference: [CM96] <author> Clavel (Manuel G.) et Meseguer (Jose). </author> - <title> Axiomatizing reflective logics and languages. </title> <booktitle> In : Proceedings of Reflection'96. </booktitle>
Reference-contexts: Ils ont utilise un systeme de reecriture pour definir la semantique du langage. De plus, les travaux de Clavel & Meseguer sur la theorie generale de la reflexion ont ete inspires du developpement d'un langage logique de reecriture <ref> [CM96] </ref>. Cela fait suite, entre autres, a un article de Goguen & 2 R EFLEXION 12 Meseguer [GM87] dans lequel ils unifient differents paradigmes de program-mation a l'aide d'une base logique. <p> Il y en trois qui sont particulierement interessantes. Un premier article de Demers & Malenfant [DM95] montre par une approche historique les relations conceptuelles et terminologiques entre les differents developpements de la reflexion en programmation fonc-tionnelle, par objets et logique. Clavel & Meseguer <ref> [CM96] </ref> utilisent une approche logique pour developper une theorie generale de la reflexion. Ils 6 MISE EN PERSPECTIVE 35 decrivent les aspects essentiels des systemes reflexifs, mais la classification en tant que telle est encore preliminaire.
Reference: [Dem94] <institution> Demers (F.-N.). - Reflexion de comportement et evaluation par-tielle en Prolog. These, Departement d'informatique et de recherche operationnelle, Universite de Montreal, </institution> <year> 1994. </year> <note> Rapport technique #956. </note>
Reference-contexts: Les recherches sur les langages a la 3-Lisp se sont vues delaissees [DM95] sauf pour quelques unes [JF92] [AMY93] <ref> [Dem94] </ref>. Cela s'explique en partie par le fait que presque aucune application de cette reflexion n'a ete montree.
Reference: [DF90] <author> Danvy (Olivier) et Filinski (Andrzej). </author> <title> Abstracting control. </title> <booktitle> In : 1990 ACM Conference on Lisp and Functional Programming. ACM, </booktitle> <pages> pp. 151-160. </pages> <publisher> ACM Press. </publisher>
Reference-contexts: Par la suite, certains chercheurs du domaine ont migre vers d'autres aspects des langages. Par exemple, Danvy & Filinski se sont interesses a des problemes de controle et de contexte d'evaluation en developpant l'idee de la meta-continuation hors du monde de la reflexion <ref> [DF90, DF92] </ref>. Les recherches sur les langages a la 3-Lisp se sont vues delaissees [DM95] sauf pour quelques unes [JF92] [AMY93] [Dem94]. Cela s'explique en partie par le fait que presque aucune application de cette reflexion n'a ete montree. <p> Les langages extensibles decoulent souvent de travaux formels sur la semantique. Il existe une bonne quantite de resultats theoriques sur les lan-gages extensibles. Nous retrouvons entre autres la semantique des actions de Mosses [Mos92], la semantique directe extensible [CF94], les continuations composables <ref> [DF90] </ref>, la semantique des moniteurs [KHC91] et la semantique monadique [Mog89b]. Nous discuterons plus en details de ces semantiques dans les sections 4 et 6. <p> Cela permet de mieux comprendre la relation etroite entre le style passage a la continuation et le style monadique. Filinski a montre de son cote que le style monadique est de m^eme puissance que le v -calcul avec "continuation composable" <ref> [DF90] </ref> (continuations de plein droit, etat et operateurs shift et reset). Pour ce faire, il montre une transformation d'un meta-langage a l'autre et vice versa.
Reference: [DF92] <author> Danvy (Olivier) et Filinski (Andrzej). </author> <title> Representing control : A study of the CPS transformation. </title> <note> Mathematical Structures in Computer Science, vol. 2, nN o 4, </note> <year> 1992, </year> <pages> pp. 361-391. </pages>
Reference-contexts: Par la suite, certains chercheurs du domaine ont migre vers d'autres aspects des langages. Par exemple, Danvy & Filinski se sont interesses a des problemes de controle et de contexte d'evaluation en developpant l'idee de la meta-continuation hors du monde de la reflexion <ref> [DF90, DF92] </ref>. Les recherches sur les langages a la 3-Lisp se sont vues delaissees [DM95] sauf pour quelques unes [JF92] [AMY93] [Dem94]. Cela s'explique en partie par le fait que presque aucune application de cette reflexion n'a ete montree. <p> Cela s'explique 4 PROBL EMATIQUE ET CADRE DU TRAVAIL 24 par le fait que les resultats de la programmation monadique peuvent s'obte-nir aussi a l'aide des structures de controle "impurs" (comme call/cc, shift et reset) des langages fonctionnels stricts [Fil94] <ref> [DF92] </ref>. Des constructions explicites par interpretation des mecanismes de controle "impurs" comme cela est fait en programmation monadique ne sont donc pas necessaires dans ces langages.
Reference: [DFH +93] <author> Dowek (Gilles), Felty (Amy), Herbelin (Hugo), Huet (Gerard), Murthy (Chet), Parent (Catherine), Paulin-Mohring (Christine) et Werner (Benjamin). </author> <title> The Coq Proof Assistant User's Guide. Rapport Techniques nN o 154, </title> <institution> Rocquencourt, France, INRIA, </institution> <year> 1993. </year> <note> Version 5.8. R EF ERENCES 53 </note>
Reference-contexts: De ce fait, plusieurs ont developpe des methodes pour extraire les aspects mecaniques du raison-nement categorique [Hue86] [RB88] [Fok92a]. Aujourd'hui, on retrouve plu-sieurs langages utiles ou specialises a cette theorie : Nuprl [C +86], Mizar [Rud92], LEGO [Pol94], Coq <ref> [DFH +93] </ref>, HOL [MT93] et beaucoup d'autres. D'ailleurs, on peut voir la theorie des categories comme une collection d'al-gorithmes. Par contre, ces algorithmes ont un degre de generalite depassant les niveaux rencontres normalement en programmation. C'est une raison de plus qui justifie l'effort de comprehension de cette theorie.
Reference: [DKM91] <author> Danvy (O.), Koslowski (J.) et Malmkjaer (K.). </author> <title> Compiling Monads. </title> <type> Technical Report nN o CIS-92-3, </type> <institution> Manhattan, Kansas, Kansas State University, </institution> <year> 1991. </year>
Reference-contexts: Neanmoins, l'implantation des monades en Scheme apporte des avantages pratiques comparativement aux langages paresseux car, dans ce langage, il y a moyen d'optimiser le code monadique par evaluation partielle <ref> [DKM91, CDL95] </ref>, une technique tres performante dans le cas des monades et encore aujourd'hui tres rare dans les langages paresseux. Espinosa [Esp94, Esp95] resout le probleme de la combinaison des mo-nades en utilisant, lui aussi, des sortes de constructeurs de monades qui transforment les monades en d'autres monades plus complexes. <p> Par exemple, des theories sur le raisonnement ont ete elaborees en relation aux continuations [SF92], aux etats modifiables [SF93] et aux exceptions [Spi90]. 6.1 Monades et reflexion : les origines Concernant le raisonnement et les monades, dans un article de Danvy et al. <ref> [DKM91] </ref>, il est mentionne brievement qu'il existe une ressemblance etrange entre la relation entre un terme de type ff et sa "representation monadique" T ff 18 , et la reconstruction de Lisp operee par Smith [Smi82].
Reference: [DM88] <author> Danvy (O.) et Malmkjaer (K.). </author> <title> Intensions and Extensions in a Reflective Tower. </title> <booktitle> In : Proceedings of the 1988 ACM Symposium on Lisp and Functional Programming, </booktitle> <pages> pp. 327-341. </pages>
Reference-contexts: En somme, comme ils l'ont mentionne eux-m^emes, ils ont decrit une specification non-reflexive (ou non-circulaire) de la tour reflexive. Danvy & Malmkjaer ont approfondi les travaux de Wand & Firedman et ils ont developpe leur langage fonctionnel reflexif Blond <ref> [DM88] </ref>. Ils arrivent tant bien que mal a presenter une semantique denotationnelle moins puis-sante que leur langage Blond mais plus approfondie que celle dans les articles de Wand & Friedman. <p> Nous les expliquons en details avant de decrire le cadre du travail. 4.1 Algebre de la reflexion Mendhekar & Friedman ont approfondi la notion de reflexion mona-dique creee originellement par Filinski [Fil94] (voir section 6.1). Ils se sont interesses, comme pour les travaux de Danvy & Malmkjaer <ref> [DM88] </ref>, a la for-malisation de la relation entre niveau de base et meta-niveau. Contrairement a ces derniers (qui ont fonde leur raisonnement sur une base denotationnelle), ils ont fonde leur raisonnement sur une base logique. <p> Cette ap-proche avait deja ete reconnue informellement par Smith lui-m^eme [Smi84]. Wand & Friedman [WF88] avait ensuite parle de l'algebre des operateurs de la reflexion. Danvy & Malmkjaer ont tente, par la suite, de caracteriser cette algebre par une approche denotationnelle <ref> [DM88] </ref>. Comme nous l'avons montre, Mendhekar & Friedman tentent eux aussi de la definir, mais cette fois-ci par une approche logique et monadique. Rien ne dit que l'algebre qu'ils decrivent est celle qui convient le mieux a la reflexion.
Reference: [DM95] <author> Demers (F.-N.) et Malenfant (J.). </author> <title> Reflection in logic, functional and object-oriented programming : a short comparative study. </title> <booktitle> In : Proceedings of the IJCAI'95 Workshop on Reflection and Metalevel Architectures and their Applications in AI, </booktitle> <pages> pp. 29-38. </pages> <editor> [dRS84] des Rivieres (J.) et Smith (B. C.). </editor> <booktitle> The implementation of procedurally reflective languages. In : Proceedings of the 1984 ACM Symposium on Lisp and Functional Programming, </booktitle> <pages> pp. 331-347. </pages>
Reference-contexts: Par exemple, Danvy & Filinski se sont interesses a des problemes de controle et de contexte d'evaluation en developpant l'idee de la meta-continuation hors du monde de la reflexion [DF90, DF92]. Les recherches sur les langages a la 3-Lisp se sont vues delaissees <ref> [DM95] </ref> sauf pour quelques unes [JF92] [AMY93] [Dem94]. Cela s'explique en partie par le fait que presque aucune application de cette reflexion n'a ete montree. <p> Jefferson & Friedman ont donc ete des precurseurs des resultats actuels en reflexion. En somme, au niveau theorique, l'echec de la formalisation des langages a la 3-Lisp est d^u au fait qu'aucun des modeles denotationnels proposes n'a respecte l'hypothese de compositionnalite sans restriction forte sur les langages etudies <ref> [DM95] </ref> [MDC96]. La violation de cette hypothese rend l'induction structurelle impossible. Ces insertions dynamiques dans les meta-niveaux de la tour par des operateurs qui ont acces a l'etat de calcul constitue une facon de modifier le code de l'interprete d'evaluation du programme (le comportement du pro-gramme). <p> Il y en trois qui sont particulierement interessantes. Un premier article de Demers & Malenfant <ref> [DM95] </ref> montre par une approche historique les relations conceptuelles et terminologiques entre les differents developpements de la reflexion en programmation fonc-tionnelle, par objets et logique. Clavel & Meseguer [CM96] utilisent une approche logique pour developper une theorie generale de la reflexion.
Reference: [Esp94] <author> Espinosa (David). </author> <title> Building Interpreters by transforming stratified monads. Rapport technique, </title> <address> New York, NY 10027, </address> <institution> Co-lumbia University, Departement of Computer Science, </institution> <month> juin </month> <year> 1994. </year> <month> espinosacs.columbia.edu. </month>
Reference-contexts: Espinosa <ref> [Esp94, Esp95] </ref> resout le probleme de la combinaison des mo-nades en utilisant, lui aussi, des sortes de constructeurs de monades qui transforment les monades en d'autres monades plus complexes. Malheureu-sement, sa methode est plus compliquee a utiliser pour l'implantation de certaines fonctionnalites comme call/cc.
Reference: [Esp95] <author> Espinosa (David A.). </author> - <title> "Semantic Lego". </title> <type> These de PhD, </type> <institution> Columbia University, </institution> <year> 1995. </year>
Reference-contexts: Des langages comme CLEAR [GB84a], un langage de specification algebrique qui peut ^etre vu comme un langage de description de monades [RB85], Quest [Car91] de Cardelli propose par Espinosa <ref> [Esp95] </ref> ou Gofer [Jon94] utilise par Liang [LHJ95] sont plus adequats parce qu'ils offrent un systeme de type plus riche (par exemple, les types dependants de Quest et le polymorphisme sur les types de Gofer). <p> Le probleme de la combinaison des monades est complexe. La composition des monades en tant que telle a ete montree impossible dans le cas general [JD93]. Aucune theorie solide n'existe pour solutionner ce probleme [Wad94]. Wadler [KW92], Steele [Ste94], Es-pinosa <ref> [Esp95] </ref>, Barr & Wells [BW85] et Liang et al. [LHJ95] ont travaille sur le developpement de solutions sans aboutir a un consensus. Du cote des langages types, les solutions proposees par Liang et al. [LHJ95, LH96] sont remarquables. <p> Ils implementent leurs modeles en Gofer en exploitant a fond les avantages du systeme de type etendu de ce langage. Du cote des langages fonctionnels stricts, Scheme a servi de base d'experimentation pour l'implantation de programmes monadiques <ref> [Esp95] </ref>. Par contre, relativement peu d'experimentations ont ete realisees dans ce langage populaire comparativement aux langages paresseux. <p> Espinosa <ref> [Esp94, Esp95] </ref> resout le probleme de la combinaison des mo-nades en utilisant, lui aussi, des sortes de constructeurs de monades qui transforment les monades en d'autres monades plus complexes. Malheureu-sement, sa methode est plus compliquee a utiliser pour l'implantation de certaines fonctionnalites comme call/cc. <p> Malheureu-sement, sa methode est plus compliquee a utiliser pour l'implantation de certaines fonctionnalites comme call/cc. Il a aussi examine le probleme de l'ordre de composition des constructeurs de monades <ref> [Esp95] </ref>. 4 Problematique et cadre du travail La problematique que nous voulons explorer se situe dans le prolonge-ment des travaux de Mendhekar & Friedman [MF96].
Reference: [Fil94] <author> Filinski (Andrzej). </author> <title> Representing monads. </title> <booktitle> In : Conference Record of the Twenty-First Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages. </booktitle>
Reference-contexts: Cela s'explique 4 PROBL EMATIQUE ET CADRE DU TRAVAIL 24 par le fait que les resultats de la programmation monadique peuvent s'obte-nir aussi a l'aide des structures de controle "impurs" (comme call/cc, shift et reset) des langages fonctionnels stricts <ref> [Fil94] </ref> [DF92]. Des constructions explicites par interpretation des mecanismes de controle "impurs" comme cela est fait en programmation monadique ne sont donc pas necessaires dans ces langages. <p> Nous les expliquons en details avant de decrire le cadre du travail. 4.1 Algebre de la reflexion Mendhekar & Friedman ont approfondi la notion de reflexion mona-dique creee originellement par Filinski <ref> [Fil94] </ref> (voir section 6.1). Ils se sont interesses, comme pour les travaux de Danvy & Malmkjaer [DM88], a la for-malisation de la relation entre niveau de base et meta-niveau. <p> Dans l'article de Mendhekar & Friedman, on montre que la propriete de reification n'est pas respectee 15 . La reflexion de monade est d'abord attribuee a Moggi [Mog89b] puis a Filinski <ref> [Fil94] </ref>. La reflexion de monade a la Moggi est l'association entre * avec un operateur [ ] et + avec un operateur de la forme Let in (voir section 5.2 pour plus de details sur ces operateurs). <p> Il est dit que durant un certain calcul, un interprete n'accede pas precisement aux valeurs (de type ff) a calculer mais plutot a des representations de ces valeurs (de type T ff). C'est un article de Filinski <ref> [Fil94] </ref> qui etablit les premiers liens serieux 18 T est un constructeur de types d'une monade quelconque. 6 MISE EN PERSPECTIVE 36 entre la reflexion et les monades. Filinski developpe alors la notion de reflexion monadique par analogie a la reflexion comportementale. <p> De facon contraire, si nous avons un calcul v : ff, alors [v] represente la reification de v vers une valeur "sans effet" de type T ff <ref> [Fil94] </ref>.
Reference: [FM94] <author> Fokkinga (M. M.) et Meertens (L.). </author> <type> Adjunctions. </type> <institution> Memoranda informatica, University of Twente, </institution> <month> Juin </month> <year> 1994. </year>
Reference: [Fok92a] <author> Fokkinga (M. M.). </author> <title> Calculate categorically ! Formal Aspects of Computing, </title> <journal> vol. </journal> <volume> 4, </volume> <year> 1992, </year> <pages> pp. 673-692. </pages>
Reference-contexts: C'est qu'elle est en grande partie constructive [RB85, RB88]. Les theoremes qui affirment l'existence de certaines entites categoriques sont prouves par construction explicite de celles-ci. De ce fait, plusieurs ont developpe des methodes pour extraire les aspects mecaniques du raison-nement categorique [Hue86] [RB88] <ref> [Fok92a] </ref>. Aujourd'hui, on retrouve plu-sieurs langages utiles ou specialises a cette theorie : Nuprl [C +86], Mizar [Rud92], LEGO [Pol94], Coq [DFH +93], HOL [MT93] et beaucoup d'autres. D'ailleurs, on peut voir la theorie des categories comme une collection d'al-gorithmes.
Reference: [Fok92b] <author> Fokkinga (M. M.). </author> <title> Lecture Notes of the STOP 1992 Sum-merschool on Constructive Algorithmics, chap. A Gentle Introduction to Category Theory | the calculational approach. </title> - <institution> University of Utrecht, </institution> <year> 1992. </year>
Reference-contexts: Au cours de la derniere decennie, plusieurs mathematiciens et informa-ticiens ont tente d'expliquer cette theorie. C'est pour cette raison qu'au-jourd'hui, on denombre une grande quantite de rapports de recherche vul-garisant le sujet pour les informaticiens en general [Hoa88a] [RB88] [Pie90] <ref> [Fok92b] </ref> [Bou93], les theoriciens de l'informatique [GS89] [BW90] [Pie91] [Ten91] [AL91] [Poi92] [Spi93] ou les mathematiciens interesses aux langages [LS86] [LS91] [Gog91] [vO95].
Reference: [Fok94] <author> Fokkinga (M. M.). </author> <title> Monadic Maps and Folds for Arbitrary Datatypes. </title> <institution> Memoranda Informatica nN o 94-28, University of Twente, </institution> <month> Juin </month> <year> 1994. </year>
Reference-contexts: Nous obtenons que (M; U; return; f old) : Ens * M ono forme aussi une adjonction ou f old est notre fonction = mais generalisee au constructeur M . Cette fonction f old est appelee un catamorphisme <ref> [Fok94] </ref>. Son type est f old : (ff ! ff ! ff) ! M (ff) ! ff. En quelque sorte, cette fonction prend en parametre l'operateur binaire du monoide sous-jacent a la monade M (s'il existe) [KW92] pour y construire la fonction join de la monade M .
Reference: [GB84a] <author> Goguen (J. A.) et Burstall (R. M.). </author> <title> Some fundamental algebraic tools for the semantics of computation (i). </title> <journal> Theoretical Computer Science, </journal> <volume> vol. 31, </volume> <year> 1984, </year> <pages> pp. 175-209. </pages> <address> R EF ERENCES 54 </address>
Reference-contexts: Du cote de l'aspect vertical des monades, il est reconnu que les systemes d'inference de type "classiques" (comme celui des langages Haskell et ML) ne suffisent pas a la modelisation methodologique des monades. Des langages comme CLEAR <ref> [GB84a] </ref>, un langage de specification algebrique qui peut ^etre vu comme un langage de description de monades [RB85], Quest [Car91] de Cardelli propose par Espinosa [Esp95] ou Gofer [Jon94] utilise par Liang [LHJ95] sont plus adequats parce qu'ils offrent un systeme de type plus riche (par exemple, les types dependants de <p> Par la suite, il y a eu plusieurs re-cherches pour formaliser l'informatique en theorie des categories, comme la theorie du -calcul [Has95], la semantique denotationnelle [Mog89b, Mog91] et la specification algebrique <ref> [GB84a, GB84b, TBG91] </ref>, mais aussi dans les aspects pratiques de l'informatique comme la conception de langages [Wad92], les techniques d'implementation [CCM85] [JHHP93], la derivation de programmes [Spi93] et d'autres.
Reference: [GB84b] <author> Goguen (J. A.) et Burstall (R. M.). </author> <title> Some fundamental algebraic tools for the semantics of computation (ii). </title> <journal> Theoretical Computer Science, </journal> <volume> vol. 31, </volume> <year> 1984, </year> <pages> pp. 263-295. </pages>
Reference-contexts: Par la suite, il y a eu plusieurs re-cherches pour formaliser l'informatique en theorie des categories, comme la theorie du -calcul [Has95], la semantique denotationnelle [Mog89b, Mog91] et la specification algebrique <ref> [GB84a, GB84b, TBG91] </ref>, mais aussi dans les aspects pratiques de l'informatique comme la conception de langages [Wad92], les techniques d'implementation [CCM85] [JHHP93], la derivation de programmes [Spi93] et d'autres.
Reference: [Gir87] <author> Girard (Jean-Yves). </author> <title> Linear logic. </title> <journal> Theoretical Computer Science, </journal> <volume> vol. 50, </volume> <year> 1987, </year> <pages> pp. 1-102. </pages>
Reference-contexts: que, par nature, la monade est limitee theoriquement [RB85] et pratiquement [Wad94] a un certain pouvoir d'expression. 6 MISE EN PERSPECTIVE 34 -calculs (direct, par valeur et par nom) vers le meta-langage de Moggi correspondent exactement a trois transformations de la logique intuition-niste vers la logique lineaire intuitionniste de Girard <ref> [Gir87] </ref>. Pour ce faire, ils utilisent la notion generale d'adjonction (voir section A). Leurs travaux montrent un lien interessant entre logique monadique de Moggi et logique lineaire de Girard.
Reference: [GM87] <author> Goguen (J. A.) et Meseguer (J.). </author> <title> Unifying functional, object-oriented and relational programming with logical semantics. In : Research Directions in Object-Oriented Programming, </title> <editor> ed. par Shriver (B.) et Wegner (P.). </editor> <booktitle> pp. </booktitle> <pages> 417-477. </pages> <address> Cambridge, MA, </address> <year> 1987. </year>
Reference-contexts: De plus, les travaux de Clavel & Meseguer sur la theorie generale de la reflexion ont ete inspires du developpement d'un langage logique de reecriture [CM96]. Cela fait suite, entre autres, a un article de Goguen & 2 R EFLEXION 12 Meseguer <ref> [GM87] </ref> dans lequel ils unifient differents paradigmes de program-mation a l'aide d'une base logique. Les travaux de Watanabe [Wat95] ont aussi mis en evidence encore d'autres resultats interessants montrant que la reflexion et les systemes de reecriture font bon menage.
Reference: [Gog91] <author> Goguen (Joseph). </author> <title> A categorical manifesto. </title> <booktitle> Mathematical Structures in Computer Science, </booktitle> <volume> vol. 1, </volume> <booktitle> nN o 1, Mars 1991, </booktitle> <pages> pp. 49-67. </pages>
Reference-contexts: C'est pour cette raison qu'au-jourd'hui, on denombre une grande quantite de rapports de recherche vul-garisant le sujet pour les informaticiens en general [Hoa88a] [RB88] [Pie90] [Fok92b] [Bou93], les theoriciens de l'informatique [GS89] [BW90] [Pie91] [Ten91] [AL91] [Poi92] [Spi93] ou les mathematiciens interesses aux langages [LS86] [LS91] <ref> [Gog91] </ref> [vO95]. Mais pourquoi cette volonte d'unir la theorie la plus generale et la plus abstraite des mathematiques [Hoa88b] avec la programmation ? Une reponse est clairement expliquee dans le livre de Rydeheard & Burstall [RB88].
Reference: [GS89] <editor> Gray (John W.) et Scedrov (Andre) (edite par). </editor> <booktitle> Categories in Computer Science and Logic. </booktitle> <address> Providence, Rhode Island, </address> <publisher> American Mathematical Society, </publisher> <year> 1989, </year> <journal> Contemporary Mathematics, </journal> <volume> volume 92. </volume>
Reference-contexts: Au cours de la derniere decennie, plusieurs mathematiciens et informa-ticiens ont tente d'expliquer cette theorie. C'est pour cette raison qu'au-jourd'hui, on denombre une grande quantite de rapports de recherche vul-garisant le sujet pour les informaticiens en general [Hoa88a] [RB88] [Pie90] [Fok92b] [Bou93], les theoriciens de l'informatique <ref> [GS89] </ref> [BW90] [Pie91] [Ten91] [AL91] [Poi92] [Spi93] ou les mathematiciens interesses aux langages [LS86] [LS91] [Gog91] [vO95].
Reference: [Has95] <author> Hasegawa (M.). </author> <title> Decomposing typed lambda calculus into a couple of categorical programming languages. </title> <booktitle> In : Proceedings of the 6th International Conference on Category Theory and Computer Science (CTCS'95), </booktitle> <editor> ed. par Pitt (D.), Rydeheard (D. E.) et Johnstone (P.). </editor> <booktitle> pp. </booktitle> <pages> 200-219. </pages> - <publisher> LNCS 953. Springer. </publisher>
Reference-contexts: Par la suite, il y a eu plusieurs re-cherches pour formaliser l'informatique en theorie des categories, comme la theorie du -calcul <ref> [Has95] </ref>, la semantique denotationnelle [Mog89b, Mog91] et la specification algebrique [GB84a, GB84b, TBG91], mais aussi dans les aspects pratiques de l'informatique comme la conception de langages [Wad92], les techniques d'implementation [CCM85] [JHHP93], la derivation de programmes [Spi93] et d'autres.
Reference: [HC94] <author> Hill (Jonathan M. D.) et Clarke (Keith). </author> <title> An introduction to category theory, category theory monads, and their relationship to functional programming. Rapport technique nN o QMW-DCS-681, </title> <institution> Department of Computer Science, Queen Mary and Westfield College, </institution> <month> Aug 94. </month>
Reference-contexts: Pour une introduction aux 7 Cette conjecture dit que toute structure de controle peut ^etre modelisee par une monade. 8 Traduction libre de "internally", venant d'un article de Wadler [Wad95]. 3 PROGRAMMATION MONADIQUE 16 monades dans leur contexte theorique, le lecteur peut consulter l'article de Hill & Clark <ref> [HC94] </ref> ou encore le cours de Moggi [Mog89a]. Nous allons illustrer la programmation monadique par la presentation de la semantique monadique d'un langage fonctionnel minimal applicatif dont la syntaxe est definie par l'equation BNF suivante 9 : e ::= v j v ! e j (e 1 e 2 ).
Reference: [HD94] <author> Hatcliff (John) et Danvy (Olivier). </author> <title> A generic account of continuation-passing styles. </title> <booktitle> In : Conference Record of the 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL'94). </booktitle> <pages> pp. 458-471. </pages> - <address> Portland, Ore-gon, janvier 17-21, </address> <year> 1994. </year>
Reference-contexts: Le meta-langage de Moggi a ete reconnu "semblable" a plusieurs autres meta-langages. En voici quelques uns. Dans un article de Hatcliff & Danvy <ref> [HD94] </ref>, il est montre qu'il existe une correspondance biunivoque entre la transformation de differents -calcul vers le meta-langage de Moggi et une transformation "generique" vers le style passage a la continuation. Cela permet de mieux comprendre la relation etroite entre le style passage a la continuation et le style monadique.
Reference: [HM96] <author> Hutton (Graham) et Meijer (Erik). </author> <title> Monadic parser combi-nators. </title> - <note> 1996. Soumis pour publication. </note>
Reference-contexts: Pour certains, il peut m^eme para^itre simpliste et insignifiant. Pour une bonne introduction a la programmation monadique, il faut consulter les articles de Wadler [Wad92] et de Hutton & Meijer <ref> [HM96] </ref>. <p> L'aspect horizontal des monades a ete exploite pour l'implantation du compilateur Glasgow Haskell 3 PROGRAMMATION MONADIQUE 23 [Jon96], pour l'implantation d'etat modifiable ("updatable state") [Wad90], pour les entrees/sorties [PJW93], l'interaction [Wad95], l'analyse semantique <ref> [HM96] </ref>, la substitution [BH94], l'impression de bonnes qualites ("pretty printing") [Hug95], la reflexion [MF96] et bien d'autres. Du cote de l'aspect vertical des monades, il est reconnu que les systemes d'inference de type "classiques" (comme celui des langages Haskell et ML) ne suffisent pas a la modelisation methodologique des monades.
Reference: [Hoa88a] <author> Hoare (C. A. R.). </author> <title> Approach to category theory for computer scientists. </title> - <booktitle> 1988. Lecture Notes, International Summer School on Constructive Methods in Computing Science, Marktoberdorf 1988. R EF ERENCES 55 </booktitle>
Reference-contexts: Au cours de la derniere decennie, plusieurs mathematiciens et informa-ticiens ont tente d'expliquer cette theorie. C'est pour cette raison qu'au-jourd'hui, on denombre une grande quantite de rapports de recherche vul-garisant le sujet pour les informaticiens en general <ref> [Hoa88a] </ref> [RB88] [Pie90] [Fok92b] [Bou93], les theoriciens de l'informatique [GS89] [BW90] [Pie91] [Ten91] [AL91] [Poi92] [Spi93] ou les mathematiciens interesses aux langages [LS86] [LS91] [Gog91] [vO95].
Reference: [Hoa88b] <author> Hoare (C. A. R.). </author> <title> Notes on an approach to category theory for computer scientists. </title> - <booktitle> 1988. International Summer School on Constructive Methods in Computing Science, Marktoberdorf. </booktitle>
Reference-contexts: Mais pourquoi cette volonte d'unir la theorie la plus generale et la plus abstraite des mathematiques <ref> [Hoa88b] </ref> avec la programmation ? Une reponse est clairement expliquee dans le livre de Rydeheard & Burstall [RB88].
Reference: [How80] <author> Howard (W.). </author> <title> The formulas-as-types notion of construction. In : To H.B. </title> <booktitle> Curry : Essays on Combinatory Logic, Lambda-Calculus and Formalism, </booktitle> <pages> pp. 479-490. </pages> <publisher> Academic Press, </publisher> <year> 1980. </year>
Reference-contexts: Les auteurs uti-lisent l'isomorphisme de Curry-Howard <ref> [How80] </ref> pour associer les formules logiques aux types, les preuves de ces formules aux programmes de ces types et les reductions sur les preuves a des executions de programmes.
Reference: [Hue86] <author> Huet (G. P.). </author> <title> Cartesian closed categories and lambda-calculus. In : Combinators and Functional Programming Languages, </title> <editor> ed. par Cousineau (G.), Curien (P.-L.) et Robinet (B.), </editor> <booktitle> pp. </booktitle> <pages> 123-135. </pages> - <address> Berlin, </address> <publisher> DE, Springer-Verlag, </publisher> <year> 1986. </year> <note> Lecture Notes in Computer Science 242. </note>
Reference-contexts: C'est qu'elle est en grande partie constructive [RB85, RB88]. Les theoremes qui affirment l'existence de certaines entites categoriques sont prouves par construction explicite de celles-ci. De ce fait, plusieurs ont developpe des methodes pour extraire les aspects mecaniques du raison-nement categorique <ref> [Hue86] </ref> [RB88] [Fok92a]. Aujourd'hui, on retrouve plu-sieurs langages utiles ou specialises a cette theorie : Nuprl [C +86], Mizar [Rud92], LEGO [Pol94], Coq [DFH +93], HOL [MT93] et beaucoup d'autres. D'ailleurs, on peut voir la theorie des categories comme une collection d'al-gorithmes.
Reference: [Hug95] <author> Hughes (John). </author> <title> The design of a pretty-printing library. In : Advanced Functional Programming, </title> <editor> ed. par Jeuring (J.) et Mei-jer (E.). </editor> <publisher> Springer Verlag, </publisher> <year> 1995. </year>
Reference-contexts: D'ailleurs, Hughes <ref> [Hug95] </ref> utilise les monades de ce point de vue. La fonction then se comprend mieux sous la forme "infixe". Intuiti-vement, "c 1 then v ! c 2 " correspond a l'evaluation qui, d'abord, evalue c 1 , lie le resultat a v et evalue ensuite ("then") c 2 . <p> L'aspect horizontal des monades a ete exploite pour l'implantation du compilateur Glasgow Haskell 3 PROGRAMMATION MONADIQUE 23 [Jon96], pour l'implantation d'etat modifiable ("updatable state") [Wad90], pour les entrees/sorties [PJW93], l'interaction [Wad95], l'analyse semantique [HM96], la substitution [BH94], l'impression de bonnes qualites ("pretty printing") <ref> [Hug95] </ref>, la reflexion [MF96] et bien d'autres. Du cote de l'aspect vertical des monades, il est reconnu que les systemes d'inference de type "classiques" (comme celui des langages Haskell et ML) ne suffisent pas a la modelisation methodologique des monades.
Reference: [Jac94] <author> Jacques (M.). </author> <title> Implantation d'un langage a prototypes avec reflexion de comportement. </title> <institution> These, Departement d'informa-tique et de recherche operationnelle, Universite de Montreal, </institution> <year> 1994. </year> <note> Rapport technique #955. </note>
Reference-contexts: Malenfant et al. [MDC96] ont deja fait l'experience d'integrer "manuellement" des mecanismes de controle de la continuation. Pour ce faire, ils ont d^u repenser completement leur premier modele sans continuation [MDC92] pour y integrer les continuations et ensuite, l'implanter <ref> [Jac94] </ref>. Nous aimerions developper un modele plus general qui ne demanderait au programmeur qu'un minimum d'ajouts syntaxiques a son implantation pour obtenir les fonctionnalites voulues.
Reference: [Jac96] <author> Jacques (Marco). </author> <title> Compilation de la reflexion de comporte-ment statique dans un langage a objets, </title> <institution> Rapport pre-doctoral. - Rapport technique, Universite de Montreal, </institution> <year> 1996. </year>
Reference-contexts: Nous nous interesserons dans notre projet es-sentiellement a la methodologie. Les aspects d'implantation de la reflexion seront approfondis par Marco Jacques <ref> [Jac96] </ref>. Les langages extensibles decoulent souvent de travaux formels sur la semantique. Il existe une bonne quantite de resultats theoriques sur les lan-gages extensibles. <p> Bien s^ur, dans ce modele, il est toujours possible d'effectuer dynamiquement les changements comme en 3-Lisp, mais cela est plutot rare. Dans un programme, plus il y a de ce type de changements dy-namiques, plus la compilation de ce programme s'en ressent <ref> [MJD96, Jac96] </ref>. Il est donc preferable de restreindre le plus possible les changements dyna-miques. Evidemment, pour obtenir un systeme de reecriture operationnel pour l'evaluation d'envois de messages, il faut ajouter d'autres regles de reecriture de moindre importance et determiner un ordre d'application des regles (pour les machines sequentielles). <p> L'unite de base de cette semantique est le moniteur, sorte de demon qui "surveille" l'execution d'un programme. Cette semantique est particulierement interessante pour decrire la reflexion. Cela sera etudie par Marco Jacques dans les prochaines annees <ref> [Jac96] </ref>. 7 Conclusion Le but de ce doctorat est d'explorer l'espace des langages reflexifs dont on peut donner une semantique monadique et une theorie du raisonnement equationnel. 7 CONCLUSION 38 7.1 Contributions Les contributions au domaine se composent de plusieurs volets : - L'elaboration de semantiques formelles monadiques pour differentes fa-milles
Reference: [JD93] <author> Jones (Mark P.) et Duponcheel (Luc). </author> <title> Composing Monads. Rapport technique nN o YALEU/DCS/RR-1004, </title> <institution> Department of Computer Science, Yale University, </institution> <year> 1993. </year>
Reference-contexts: Ces deux aspects des monades vont nous servir a la classification de la reflexion. Les monades viennent de la theorie des categories mais elles ne de-mandent aucune notion de celle-ci pour les comprendre et les utiliser en programmation <ref> [JD93] </ref>. Pour ce faire, il suffit de voir la monade comme une structure algebrique ou un type abstrait qui s'exprime dans un langage fonctionnel type. <p> Le probleme de la combinaison des monades est complexe. La composition des monades en tant que telle a ete montree impossible dans le cas general <ref> [JD93] </ref>. Aucune theorie solide n'existe pour solutionner ce probleme [Wad94]. Wadler [KW92], Steele [Ste94], Es-pinosa [Esp95], Barr & Wells [BW85] et Liang et al. [LHJ95] ont travaille sur le developpement de solutions sans aboutir a un consensus.
Reference: [JF92] <author> Jefferson (S.) et Friedman (D.P.). </author> <title> A Simple Reflective Interpreter. </title> <booktitle> In : Proceedings of the International Workshop on New Models for Software Architecture '92, Reflection and Meta-Level Architecture, </booktitle> <editor> ed. par Yonezawa (A.) et Smith (B.). </editor> <booktitle> RISE (Japan), ACM Sigplan, JSSST, IPSJ, </booktitle> <pages> pp. 48-58. </pages>
Reference-contexts: Par exemple, Danvy & Filinski se sont interesses a des problemes de controle et de contexte d'evaluation en developpant l'idee de la meta-continuation hors du monde de la reflexion [DF90, DF92]. Les recherches sur les langages a la 3-Lisp se sont vues delaissees [DM95] sauf pour quelques unes <ref> [JF92] </ref> [AMY93] [Dem94]. Cela s'explique en partie par le fait que presque aucune application de cette reflexion n'a ete montree. Parmi ceux qui ont continue a s'y interesser, Jefferson & Friedman [JF92] ont presente un langage a la 3-Lisp appele I R , plus simple que les autres et se voulant <p> Les recherches sur les langages a la 3-Lisp se sont vues delaissees [DM95] sauf pour quelques unes <ref> [JF92] </ref> [AMY93] [Dem94]. Cela s'explique en partie par le fait que presque aucune application de cette reflexion n'a ete montree. Parmi ceux qui ont continue a s'y interesser, Jefferson & Friedman [JF92] ont presente un langage a la 3-Lisp appele I R , plus simple que les autres et se voulant adequat pour l'experimentation. Le modele de ce langage est une tour reflexive finie et bornee, contrairement a 3-Lisp et les autres.
Reference: [JHHP93] <author> Jones (S. L. P.), Hall (C.), Hammond (K.) et Partain (W.). </author> - <title> The glasgow haskell compiler : a technical overview. </title> <booktitle> In : Proceedings of the UK Joint Framework for Information Technology (JFIT) Technical Conference. </booktitle> - <address> Keele, </address> <year> 1993. </year>
Reference-contexts: suite, il y a eu plusieurs re-cherches pour formaliser l'informatique en theorie des categories, comme la theorie du -calcul [Has95], la semantique denotationnelle [Mog89b, Mog91] et la specification algebrique [GB84a, GB84b, TBG91], mais aussi dans les aspects pratiques de l'informatique comme la conception de langages [Wad92], les techniques d'implementation [CCM85] <ref> [JHHP93] </ref>, la derivation de programmes [Spi93] et d'autres. Malheureusement, cette theorie est difficile a comprendre et demande une grande patience a celui qui veut l'utiliser, car elle offre des concepts tres abstraits qui n'ont pas, pour le profane, de significations naturelles autres que pour des exemples plutot simplistes.
Reference: [Jon96] <author> Jones (Simon L. Peyton). </author> <title> Compiling haskell by program transformation : a report from the trenches. </title> <booktitle> In : Proceedings of the European Symposium on Programming. </booktitle> <address> Linkoping, </address> <month> avril </month> <year> 1996. </year>
Reference-contexts: L'aspect horizontal des monades a ete exploite pour l'implantation du compilateur Glasgow Haskell 3 PROGRAMMATION MONADIQUE 23 <ref> [Jon96] </ref>, pour l'implantation d'etat modifiable ("updatable state") [Wad90], pour les entrees/sorties [PJW93], l'interaction [Wad95], l'analyse semantique [HM96], la substitution [BH94], l'impression de bonnes qualites ("pretty printing") [Hug95], la reflexion [MF96] et bien d'autres.
Reference: [Jon94] <author> Jones (Mark P.). </author> <title> The implementation of the Gofer functional programming system. Rapport technique nN o R EF ERENCES 56 YALEU/DCS/RR-1030, </title> <address> New Haven, Connecticut, USA, </address> <institution> Department of Computer Science, Yale University, </institution> <note> mai 94. </note>
Reference-contexts: Des langages comme CLEAR [GB84a], un langage de specification algebrique qui peut ^etre vu comme un langage de description de monades [RB85], Quest [Car91] de Cardelli propose par Espinosa [Esp95] ou Gofer <ref> [Jon94] </ref> utilise par Liang [LHJ95] sont plus adequats parce qu'ils offrent un systeme de type plus riche (par exemple, les types dependants de Quest et le polymorphisme sur les types de Gofer).
Reference: [KAH92] <author> Kieburtz (R.), Agapiev (B.) et Hook (J.). </author> <title> Three monads for continuations. </title> <booktitle> In : ACM SIGPLAN Workshop on Continuations. </booktitle> - <institution> Stanford University, </institution> <note> juin 1992. Report STAN-CS-92-1426. </note>
Reference-contexts: La relation entre le style monadique et les continuations composables a aussi ete reconnue par Wadler [Wad94] et Kieburtz, Agapiev & Hook <ref> [KAH92] </ref>. Enfin, Benton & Wadler [BW96] montrent que les transformations des 17 Cette notation met en evidence le fait que la monade est reconnue par plusieurs comme une construction du premier ordre et non pas d'ordre superieur comme cela semble ^etre sous-entendu dans sa definition [Mog89b] [Wad95].
Reference: [KHC91] <author> Kishon (A.), Hudak (P.) et Consel (C.). </author> <title> Monitoring Semantics : A Formal Framework for Specifying, Implementing and Reasoning about Execution Monitors. </title> <journal> Proceedings of PLDI'91, ACM Sigplan Notices, </journal> <volume> vol. 26, </volume> <booktitle> nN o 6, juin 1991, </booktitle> <pages> pp. 338-352. </pages>
Reference-contexts: Les langages extensibles decoulent souvent de travaux formels sur la semantique. Il existe une bonne quantite de resultats theoriques sur les lan-gages extensibles. Nous retrouvons entre autres la semantique des actions de Mosses [Mos92], la semantique directe extensible [CF94], les continuations composables [DF90], la semantique des moniteurs <ref> [KHC91] </ref> et la semantique monadique [Mog89b]. Nous discuterons plus en details de ces semantiques dans les sections 4 et 6. Concernant la semantique monadique, Mendhekar & Friedman [MF96] ont montre qu'il est possible de lier cette semantique et la reflexion pour former ce qu'ils ont appele la reflexion monadique. <p> La semantique directe extensible [CF94] est une facon d'etendre la definition denotationnelle d'un langage sans en changer les definitions deja etablies. Elle permet de construire des -interpretes et de les composer entre eux pour former des -interpretes de langages fonctionnels complets. La semantique des moniteurs <ref> [KHC91] </ref> est aussi une extension de la semantique denotationnelle. Elle a pour but d'offrir un cadre adequat pour decrire les mecanismes de controle qu'on retrouve dans les programmes de deverminage, de "profilage", de trace d'execution, etc.
Reference: [Kre68] <author> Kreisel (G.). </author> <title> Reflection principles and their use for establishing the complexity of axiomatic systems. </title> <journal> In : Zeitschrift Fur Mathematische Logik und Grundlagen der Mathematik, </journal> <pages> pp. 97-142. </pages> - <year> 1968. </year>
Reference: [KW92] <author> King (D.) et Wadler (P.). </author> <title> Combining monads. </title> <booktitle> In : Proceedings of the 1992 Glasgow Workshop on Functional Programming, Ayr, Scotland. </booktitle> <pages> pp. 134-143. </pages> <publisher> Springer Verlag. </publisher>
Reference-contexts: Le probleme de la combinaison des monades est complexe. La composition des monades en tant que telle a ete montree impossible dans le cas general [JD93]. Aucune theorie solide n'existe pour solutionner ce probleme [Wad94]. Wadler <ref> [KW92] </ref>, Steele [Ste94], Es-pinosa [Esp95], Barr & Wells [BW85] et Liang et al. [LHJ95] ont travaille sur le developpement de solutions sans aboutir a un consensus. Du cote des langages types, les solutions proposees par Liang et al. [LHJ95, LH96] sont remarquables. <p> Les auteurs montrent alors que le v - calcul reflexif obtenu par l'introduction des monades reflexives est une extension conservatrice du v -calcul en definissant une transformation du lan 16 L'etude d'une telle combinaison de monades a ete realisee auparavant avec la monade liste <ref> [KW92] </ref> avec certains succes. <p> Saunders Mac Lane Pour illustrer la theorie des categories, nous presenterons une application des adjonctions dans un langage fonctionnel type. Nous nous sommes base A UN EXEMPLE EN PROGRAMMATION : LES ADJONCTIONS 40 sur les travaux de Spivey [Spi89][Spi93], Fokkinga [FM94][Fok92b] et Wadler <ref> [Wad90, KW92] </ref>. L'adjonction est sans aucun doute un des concepts des plus importants des categories. De plus, les adjonctions apparaissent souvent en mathematiques et en programmation. Les adjonctions sont intimement liees aux monades. En effet, a chaque adjonction, on peut induire une monade. <p> Cette fonction f old est appelee un catamorphisme [Fok94]. Son type est f old : (ff ! ff ! ff) ! M (ff) ! ff. En quelque sorte, cette fonction prend en parametre l'operateur binaire du monoide sous-jacent a la monade M (s'il existe) <ref> [KW92] </ref> pour y construire la fonction join de la monade M . Remarquons aussi que, dans la definition d'adjonction, il est affirme qu'il existe un unique morphisme respectant le triangle commutatif. <p> Cette monade est le triplet (F G; j; F *G) [Lan71]. Si nous construisons la monade associee a l'adjonction (fl; U; [] ; =) : Ens * M ono, nous retrouvons (fl; [] ; ++=) qui est la monade liste bien connue <ref> [KW92] </ref> (ou (fl; map l ; unit l ; join l ) correspondant a la definition par comprehension donnee par Wadler). Plus generalement encore, pour chaque adjonction (M; U; unit; f old) : Ens * M ono, nous formons directement la monade generale (M; map; unit; join).
Reference: [Lan71] <author> Lane (Saunders Mac). </author> <title> Categories for the Working Mathematician. </title> <address> New York, </address> <publisher> Springer-Verlag, </publisher> <year> 1971, </year> <title> Graduate Texts in Mathematics, </title> <booktitle> volume 5, </booktitle> <address> ix+262p. </address>
Reference-contexts: Intuiti-vement, il est possible que l'ensemble de ces monades composent une base pour engendrer l'espace de conception des langages reflexifs monadiques. 5 Theorie des categories et monades Category theory comes, logically, before the -calculus. [Mog91] Eugenio Moggi La theorie des categories <ref> [Lan71] </ref> est une branche des mathematiques qui a ete developpee dans les annees 40. Tout a commence par un article 5 TH EORIE DES CAT EGORIES ET MONADES 31 de Eilenberg et Mac Lane qui repondait au besoin de ce temps de relier des branches disparates des mathematiques pures. <p> En effet, toute adjonction (F; G; j; *) : A * B met en evidence une monade sur A. Cette monade est le triplet (F G; j; F *G) <ref> [Lan71] </ref>. <p> Comme nous le voyons, les deux definitions precedentes se ressemblent beaucoup, car toutes deux contiennent 3 equations algebriques similaires. En fait, le triplet de Kleisli peut ^etre vu comme une presentation syntaxi-quement differente d'une monade puisqu'il existe une correspondance biuni-voque entre le triplet et la monade <ref> [Lan71] </ref>. Le triplet de Kleisli est une presentation qui s'avere tres utile pour la reflexion car, comme nous l'ex-pliquons en section 4, l'operateur d'inclusion s'apparente a l'operateur de reification.
Reference: [LH96] <author> Liang (Sheng) et Hudak (Paul). </author> <title> Modular denotational semantics for compiler construction. </title> <booktitle> In : European Symposium on Programming. </booktitle> <address> Linkoping, Sweden, </address> <month> avril </month> <year> 1996. </year> <note> Dispo-nible par ftp : nebula.cs.yale.edu :/pub/yale-fp/papers/mod-sem-draft.ps.Z. </note>
Reference-contexts: Nous nous sommes inspire des travaux de Liang & Hudak <ref> [LHJ95, LH96] </ref>. En semantique denotationnelle, la semantique est une fonction qui as-socie un terme abstrait et quelques donnees representant l'etat de cal-cul (ou d'autres elements comme l'environnement, la continuation, etc.) a une reponse. <p> Aucune theorie solide n'existe pour solutionner ce probleme [Wad94]. Wadler [KW92], Steele [Ste94], Es-pinosa [Esp95], Barr & Wells [BW85] et Liang et al. [LHJ95] ont travaille sur le developpement de solutions sans aboutir a un consensus. Du cote des langages types, les solutions proposees par Liang et al. <ref> [LHJ95, LH96] </ref> sont remarquables. Ils utilisent le concept de transformateur de monades de Moggi [Mog89a] pour composer les monades. Un transformateur de mo-nades est une sorte de monade contenant un "trou" pour accueillir un autre transformateur de monades ou une monade.
Reference: [LHJ95] <author> Liang (Sheng), Hudak (Paul) et Jones (Mark). </author> <title> Monad transformers and modular interpreters. </title> <booktitle> In : Conference Record of POPL '95 : 22nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, </booktitle> <pages> pp. 333-343. </pages> - <address> San Fran-cisco, California, </address> <year> 1995. </year>
Reference-contexts: Dans la section suivante, nous discuterons des langages extensibles, sortes de langages reflexifs qui regroupent en bonne partie les langages a reflexion structurale et a reflexion comportementale. 2.2 Langages extensibles Les langages extensibles d'autrefois [SY74] et d'aujourd'hui <ref> [LHJ95] </ref> sont, par definition, des langages pour lesquels il est possible de modifier la semantique par ajout ou retrait de blocs syntaxiques qui representent certaines fonctionnalites utiles aux programmeurs. <p> Nous nous sommes inspire des travaux de Liang & Hudak <ref> [LHJ95, LH96] </ref>. En semantique denotationnelle, la semantique est une fonction qui as-socie un terme abstrait et quelques donnees representant l'etat de cal-cul (ou d'autres elements comme l'environnement, la continuation, etc.) a une reponse. <p> Des langages comme CLEAR [GB84a], un langage de specification algebrique qui peut ^etre vu comme un langage de description de monades [RB85], Quest [Car91] de Cardelli propose par Espinosa [Esp95] ou Gofer [Jon94] utilise par Liang <ref> [LHJ95] </ref> sont plus adequats parce qu'ils offrent un systeme de type plus riche (par exemple, les types dependants de Quest et le polymorphisme sur les types de Gofer). <p> Le probleme de la combinaison des monades est complexe. La composition des monades en tant que telle a ete montree impossible dans le cas general [JD93]. Aucune theorie solide n'existe pour solutionner ce probleme [Wad94]. Wadler [KW92], Steele [Ste94], Es-pinosa [Esp95], Barr & Wells [BW85] et Liang et al. <ref> [LHJ95] </ref> ont travaille sur le developpement de solutions sans aboutir a un consensus. Du cote des langages types, les solutions proposees par Liang et al. [LHJ95, LH96] sont remarquables. Ils utilisent le concept de transformateur de monades de Moggi [Mog89a] pour composer les monades. <p> Aucune theorie solide n'existe pour solutionner ce probleme [Wad94]. Wadler [KW92], Steele [Ste94], Es-pinosa [Esp95], Barr & Wells [BW85] et Liang et al. [LHJ95] ont travaille sur le developpement de solutions sans aboutir a un consensus. Du cote des langages types, les solutions proposees par Liang et al. <ref> [LHJ95, LH96] </ref> sont remarquables. Ils utilisent le concept de transformateur de monades de Moggi [Mog89a] pour composer les monades. Un transformateur de mo-nades est une sorte de monade contenant un "trou" pour accueillir un autre transformateur de monades ou une monade. <p> En consequence, il est possible de definir plus uniformement cette reflexion de monade en considerant la "combinaison" de deux monades : la monade continuation (au-dessus) et la monade generale M (en dessous). A l'aide de la methode de combinaison des monades de Liang et al. <ref> [LHJ95] </ref>, la monade resultante, combinaison des deux precedentes, peut ^etre 15 Voici un exemple : (x ! x) 3 = fi 3 semantiquement mais (quote ((x ! x) 3)) 6= fi (quote 3). 4 PROBL EMATIQUE ET CADRE DU TRAVAIL 27 etudiee independamment pour y decouvrir ses proprietes propres. 16 Les
Reference: [LS86] <author> Lambek (J.) et Scott (P. J.). </author> <title> Introduction to Higher Order Categorical Logic. CUP, </title> <booktitle> 1986, Cambridge studies in advanced mathematics. </booktitle>
Reference-contexts: C'est pour cette raison qu'au-jourd'hui, on denombre une grande quantite de rapports de recherche vul-garisant le sujet pour les informaticiens en general [Hoa88a] [RB88] [Pie90] [Fok92b] [Bou93], les theoriciens de l'informatique [GS89] [BW90] [Pie91] [Ten91] [AL91] [Poi92] [Spi93] ou les mathematiciens interesses aux langages <ref> [LS86] </ref> [LS91] [Gog91] [vO95]. Mais pourquoi cette volonte d'unir la theorie la plus generale et la plus abstraite des mathematiques [Hoa88b] avec la programmation ? Une reponse est clairement expliquee dans le livre de Rydeheard & Burstall [RB88].
Reference: [LS91] <author> Lawvere (F. William) et Schanuel (Stephen H.). </author> - <title> Conceptual Mathematics : A first Introduction to Categories. </title> <booktitle> Buffalo Workshop Press, </booktitle> <year> 1991. </year>
Reference-contexts: C'est pour cette raison qu'au-jourd'hui, on denombre une grande quantite de rapports de recherche vul-garisant le sujet pour les informaticiens en general [Hoa88a] [RB88] [Pie90] [Fok92b] [Bou93], les theoriciens de l'informatique [GS89] [BW90] [Pie91] [Ten91] [AL91] [Poi92] [Spi93] ou les mathematiciens interesses aux langages [LS86] <ref> [LS91] </ref> [Gog91] [vO95]. Mais pourquoi cette volonte d'unir la theorie la plus generale et la plus abstraite des mathematiques [Hoa88b] avec la programmation ? Une reponse est clairement expliquee dans le livre de Rydeheard & Burstall [RB88].
Reference: [Man76] <author> Manes (E.). </author> <title> Algebraic Theories. </title> - <publisher> Springer-Verlag, </publisher> <year> 1976, </year> <title> Graduate Texts in Mathematics, </title> <booktitle> volume 26. R EF ERENCES 57 </booktitle>
Reference-contexts: Ce concept a une grande importance, car il est reconnu qu'une bonne part de l'algebre universelle peut ^etre reformulee sous forme de mo-nades <ref> [Man76] </ref>. Voici sa definition categorique. C.1 Definition.
Reference: [MDC92] <author> Malenfant (J.), Dony (C.) et Cointe (P.). </author> <title> Behavioral Reflection in a Prototype-Based Language. </title> <booktitle> In : Proceedings of the International Workshop on New Models for Software Architectures, Reflection and Metalevel Architectures, </booktitle> <address> Tokyo, Japan, </address> <pages> pp. 143-153. </pages>
Reference-contexts: Les travaux de Watanabe [Wat95] ont aussi mis en evidence encore d'autres resultats interessants montrant que la reflexion et les systemes de reecriture font bon menage. Nous allons, dans cette section, expliquer brievement le modele reflexif base sur le systeme de reecriture de Malenfant, Dony & Cointe <ref> [MDC92, MDC96] </ref>. A l'aide de ce modele, nous pourrons plus tard illustrer un exemple avantageux de l'utilisation des monades pour la reflexion. <p> Mises ensemble, ces trois phases se lisent sous la forme d'une regle de reecriture : o:s (a 1 ; : : : ; a n ) ) (o):fl (s; o):ff (o; [a 1 ; : : : ; a n ]) Nous appelons cette regle l'introspection reflexive <ref> [MDC92] </ref>. Cette regle fait partie d'un ensemble de regles appele les hypotheses du modele. Ces regles constituent les fondements m^emes du mecanisme de la reflexion dans ce langage. <p> car on obtient le deuxieme a partir du premier, mais l'inverse n'est pas possible (sans ajouter de nouvelles fonctions de controle comme call/cc de Scheme). 3.2 Retour a l'exemple Dans cette section, nous montrerons comment il serait possible d'in-corporer les monades dans le systeme de reecriture de Malenfant et al. <ref> [MDC92, MDC96] </ref> dont nous avons montre les regles principales en section 2.3. Cet amalgame a un but interessant. <p> Malenfant et al. [MDC96] ont deja fait l'experience d'integrer "manuellement" des mecanismes de controle de la continuation. Pour ce faire, ils ont d^u repenser completement leur premier modele sans continuation <ref> [MDC92] </ref> pour y integrer les continuations et ensuite, l'implanter [Jac94]. Nous aimerions developper un modele plus general qui ne demanderait au programmeur qu'un minimum d'ajouts syntaxiques a son implantation pour obtenir les fonctionnalites voulues. <p> Il est donc possible que l'abstraction du systeme de reecriture de certaines informations utiles mais non-essentielles au modele mette en evidence une separation des entites de la reflexion offertes aux programmeurs. Il y aurait, d'une part, un modele monadique de base (comparable au premier modele <ref> [MDC92] </ref> comme nous venons de l'experimenter) qui incarne la tour reflexive du langage et, d'autre part, les extensions comportementales comme la continuation expli-cite. 3.3 Implantations, methodologie et applications Haskell a servi aux premieres applications de la correspondance entre le comportement computationnel et les monades.
Reference: [MDC96] <author> Malenfant (J.), Dony (C.) et Cointe (P.). </author> <title> A semantics of introspection in a reflective prototype-based language. In : Lisp and Symbolic Computation, </title> <editor> ed. </editor> <publisher> par Publishers (Kluwer Academic). </publisher> - <address> Boston, </address> <year> 1996. </year>
Reference-contexts: Jefferson & Friedman ont donc ete des precurseurs des resultats actuels en reflexion. En somme, au niveau theorique, l'echec de la formalisation des langages a la 3-Lisp est d^u au fait qu'aucun des modeles denotationnels proposes n'a respecte l'hypothese de compositionnalite sans restriction forte sur les langages etudies [DM95] <ref> [MDC96] </ref>. La violation de cette hypothese rend l'induction structurelle impossible. Ces insertions dynamiques dans les meta-niveaux de la tour par des operateurs qui ont acces a l'etat de calcul constitue une facon de modifier le code de l'interprete d'evaluation du programme (le comportement du pro-gramme). <p> Les travaux de Watanabe [Wat95] ont aussi mis en evidence encore d'autres resultats interessants montrant que la reflexion et les systemes de reecriture font bon menage. Nous allons, dans cette section, expliquer brievement le modele reflexif base sur le systeme de reecriture de Malenfant, Dony & Cointe <ref> [MDC92, MDC96] </ref>. A l'aide de ce modele, nous pourrons plus tard illustrer un exemple avantageux de l'utilisation des monades pour la reflexion. <p> Nous ne presentons que les regles les plus importantes, car elles nous permettront de voir dans la section suivante comment elles peuvent ^etre facilement agencees aux monades. Pour ceux qui aimeraient des details d'implantation, ils peuvent consulter l'article de Malenfant et al. <ref> [MDC96] </ref> dans lequel ils presentent un systeme de reecriture a priorite. Enfin, la modelisation de la reflexion par un systeme de reecriture per-met de separer le processus de reflexion du processus d'evaluation du lan-gage rendant la comprehension et la maintenance du langage plus faciles [MDC96]. <p> consulter l'article de Malenfant et al. <ref> [MDC96] </ref> dans lequel ils presentent un systeme de reecriture a priorite. Enfin, la modelisation de la reflexion par un systeme de reecriture per-met de separer le processus de reflexion du processus d'evaluation du lan-gage rendant la comprehension et la maintenance du langage plus faciles [MDC96]. <p> car on obtient le deuxieme a partir du premier, mais l'inverse n'est pas possible (sans ajouter de nouvelles fonctions de controle comme call/cc de Scheme). 3.2 Retour a l'exemple Dans cette section, nous montrerons comment il serait possible d'in-corporer les monades dans le systeme de reecriture de Malenfant et al. <ref> [MDC92, MDC96] </ref> dont nous avons montre les regles principales en section 2.3. Cet amalgame a un but interessant. <p> Cet amalgame a un but interessant. En bout de ligne, nous aimerions obtenir une implantation generique du systeme de reecriture a priorite developpe par Malenfant et al. <ref> [MDC96] </ref> de facon a pouvoir integrer fa-cilement certaines fonctionnalites utiles comme la manipulation d'un etat global, des mecanismes de non-determinisme, la manipulation de la continuation du calcul, etc. Malenfant et al. [MDC96] ont deja fait l'experience d'integrer "manuellement" des mecanismes de controle de la continuation. <p> de ligne, nous aimerions obtenir une implantation generique du systeme de reecriture a priorite developpe par Malenfant et al. <ref> [MDC96] </ref> de facon a pouvoir integrer fa-cilement certaines fonctionnalites utiles comme la manipulation d'un etat global, des mecanismes de non-determinisme, la manipulation de la continuation du calcul, etc. Malenfant et al. [MDC96] ont deja fait l'experience d'integrer "manuellement" des mecanismes de controle de la continuation. Pour ce faire, ils ont d^u repenser completement leur premier modele sans continuation [MDC92] pour y integrer les continuations et ensuite, l'implanter [Jac94]. <p> Par exemple, il suffi-rait d'utiliser la monade M "passage a la continuation" (deja presentee) et d'ajouter quelques objets et meta-objets de base au modele pour obtenir le m^eme resultat que pour le modele de Malenfant et al. <ref> [MDC96] </ref>. Voici les regles de reecriture de notre systeme generique. <p> En effet, il faut remar-quer que nous avons obtenu un systeme de reecriture plus general au sens ou il generalise un style d'interpretation voulu qui est le style passage par continuation deja introduit par Malenfant et al. <ref> [MDC96] </ref> dans le modele de base. Il est plus general aussi parce qu'il fait abstraction de certaines informations de comportement. Nous savons deja que ces informations, en general, sont utiles aux programmeurs qui veulent appliquer des methodes reflexives pour changer la semantique de leurs programmes.
Reference: [MF93] <author> Mendhekar (A.) et Friedman (D.P.). </author> <title> Towards a Theory of Reflective Programming Languages. </title> <booktitle> In : Informal Proceedings of the Third Workshop on Reflection and Metalevel Architectures in Object-Oriented Programming, </booktitle> <address> OOPSLA'93. </address>
Reference-contexts: Entre autres, Mendhekar & Friedman <ref> [MF93] </ref> ont developpe une logique de programmation basee sur le -calcul type pour les langages 3-Lisp, Brown et I R . Ils ont utilise un systeme de reecriture pour definir la semantique du langage. <p> Nous allons approfondir cette approche dans nos recherches ulterieures. La derniere classe se compose des langages avec reflexion compor-tementale (a la 3-Lisp). Mendhekar & Friedman en disent peu de choses sauf pour mentionner leurs travaux precedents <ref> [MF93] </ref> sur la caracterisation de la reflexion par un systeme de reecriture. Ils recon-naissent par contre que leurs proprietes de reflexion n'ont plus de sens dans ce contexte. Ils echouent donc a caracteriser les proprietes du raisonnement pour la reflexion comportementale. <p> De ce point de vue, sans aboutir a une classification, certains cher-cheurs ont travaille sur le raisonnement de la reflexion, mais se restreignant a certains langages reflexifs precis. Par exemple, Mendhekar & Friedman <ref> [MF93] </ref> se sont interesses au raisonnement equationnel possible dans les lan-gages reflexifs a la 3-Lisp. Comme nous l'avons explique precedemment, ils ont poursuivi leurs travaux du raisonnement en utilisant une approche mo-nadique [MF96]. De son cote, Moggi [Mog91] s'est interesse aux langages extensibles et au raisonnement equationnel sur ceux-ci.
Reference: [MF96] <author> Mendhekar (A.) et Friedman (D. P.). </author> <title> An exploration of relationships between reflective theories. </title> <booktitle> In : Proceedings of Reflection'96. </booktitle>
Reference-contexts: La section 2 presente la ter-minologie de la reflexion et les tendances de recherche d'hier et d'aujour-d'hui. La section 3 presente la programmation monadique. Dans la section 4, il sera question de la problematique de notre projet de doctorat. En par-tant d'un article de Mendhekar & Friedman <ref> [MF96] </ref>, nous elaborerons des strategies de recherche pour decrire la reflexion dans un cadre monadique et, plus generalement, dans le langage de la theorie des categories. Nous poursuivrons par la section 5 dans laquelle nous introduirons la theorie des categories et son importante implication en semantique des langages de pro-grammation. <p> Nous discuterons plus en details de ces semantiques dans les sections 4 et 6. Concernant la semantique monadique, Mendhekar & Friedman <ref> [MF96] </ref> ont montre qu'il est possible de lier cette semantique et la reflexion pour former ce qu'ils ont appele la reflexion monadique. Nous ne rentrerons pas dans les details maintenant. <p> Enfin, la modelisation de la reflexion par un systeme de reecriture per-met de separer le processus de reflexion du processus d'evaluation du lan-gage rendant la comprehension et la maintenance du langage plus faciles [MDC96]. Par ailleurs, Mendhekar & Friedman <ref> [MF96] </ref> ont montre que le 6 Il est possible de determiner le nombre maximal de niveaux d'une tour seulement en examinant le programme avant son execution. 3 PROGRAMMATION MONADIQUE 15 phenomene de traitement distinctif ("separation of concerns") est important pour le raisonnement equationnel sur les programmes. <p> L'aspect horizontal des monades a ete exploite pour l'implantation du compilateur Glasgow Haskell 3 PROGRAMMATION MONADIQUE 23 [Jon96], pour l'implantation d'etat modifiable ("updatable state") [Wad90], pour les entrees/sorties [PJW93], l'interaction [Wad95], l'analyse semantique [HM96], la substitution [BH94], l'impression de bonnes qualites ("pretty printing") [Hug95], la reflexion <ref> [MF96] </ref> et bien d'autres. Du cote de l'aspect vertical des monades, il est reconnu que les systemes d'inference de type "classiques" (comme celui des langages Haskell et ML) ne suffisent pas a la modelisation methodologique des monades. <p> Il a aussi examine le probleme de l'ordre de composition des constructeurs de monades [Esp95]. 4 Problematique et cadre du travail La problematique que nous voulons explorer se situe dans le prolonge-ment des travaux de Mendhekar & Friedman <ref> [MF96] </ref>. Nous les expliquons en details avant de decrire le cadre du travail. 4.1 Algebre de la reflexion Mendhekar & Friedman ont approfondi la notion de reflexion mona-dique creee originellement par Filinski [Fil94] (voir section 6.1). <p> Les operateurs [ ] et Let in appartiennent au meta-langage de Moggi (voir section 5.2) et servent a donner une semantique categorique (sorte de semantique abstraite) a un -calcul abstrait de certains comportements computationnels. Mendhekar & Friedman <ref> [MF96] </ref> ne verifient pas si ces operateurs suivent leurs pro-prietes. La reflexion de monade a la Filinski se rapproche beaucoup de la reflexion a la 3-Lisp. En effet, dans ce cas, les operateurs * et + sont definis a l'aide des operateurs shift et reset (voir section 6.1). <p> Ils recon-naissent par contre que leurs proprietes de reflexion n'ont plus de sens dans ce contexte. Ils echouent donc a caracteriser les proprietes du raisonnement pour la reflexion comportementale. Mendhekar & Friedman <ref> [MF96] </ref> elaborent plus tard dans leur article la notion de monades reflexives. C'est une reflexion de monade a la Filinski avec des contraintes supplementaires. Elles sont les suivantes. Le program-meur definit l'operateur d'extension ( fl , voir la definition C.2) sans utiliser les operateurs de reflexion (* et +). <p> Si nous nous rappelons de la terminologie de la section 3, cela est relie a l'aspect vertical du pouvoir des monades : le pouvoir d'augmenter la puissance des langages monadiques. Nous avons vu que la combinaison de monades semble donc ^etre une approche prometteuse pour ce probleme <ref> [MF96] </ref>. Apres avoir elabore une serie de nouveaux langages reflexifs avec leur semantique monadique respective, nous classifierons ces langages en fonction de plusieurs criteres : La capacite a tenir des raisonnements equationnels. <p> Par exemple, Mendhekar & Friedman [MF93] se sont interesses au raisonnement equationnel possible dans les lan-gages reflexifs a la 3-Lisp. Comme nous l'avons explique precedemment, ils ont poursuivi leurs travaux du raisonnement en utilisant une approche mo-nadique <ref> [MF96] </ref>. De son cote, Moggi [Mog91] s'est interesse aux langages extensibles et au raisonnement equationnel sur ceux-ci. Il utilise une ap-proche formelle basee sur la logique categorique et les monades (voir section 5.2). <p> Il prend la continuation du calcul jusqu'au premier indicateur (place par shift), la convertit en une procedure et passe l'argument a la continuation "reifiee". 7 CONCLUSION 37 + e = "(e) = ( shift (k ! (k fl e)) Par la suite, comme nous l'avons vu, Mendhekar & Friedman <ref> [MF96] </ref> reutilisent ces definitions pour montrer que * et + respectent bien leurs lois de la reflexion. 6.2 Autres formalismes semantiques La semantique des actions a ete creee par Mosses et Watt [Mos92] pour remedier au manque de modularite et d'extensibilite de la semantique denotationnelle. <p> Dans cette derniere, nous allons effectuer la recherche proprement dite. Elle se decompose en quatre phases : A UN EXEMPLE EN PROGRAMMATION : LES ADJONCTIONS 39 Reformulation de la semantique de Mendhekar & Friedman <ref> [MF96] </ref>. Exploration des variantes de cette semantique et l'elaboration d'une premiere classification des langages reflexifs basee sur le pouvoir d'ex pression de la semantique monadique. Exploration des techniques de raisonnement equationnel sur les classes de langages reflexifs auxquels une semantique monadique a pu ^etre developpee gr^ace a la premiere phase.
Reference: [MJD96] <author> Malenfant (J.), Jacques (M.) et Demers (F.-N.). </author> <title> A tutorial on beharioral reflection and its implementation. </title> <booktitle> In : Proceedings of Reflection'96. </booktitle>
Reference-contexts: Ces procedures ont acces aux m^emes structures de donnees de l'etat de calcul que l'interprete dans lequel elles ont ete inserees. De plus, ce type de reflexion est dit ponctuelle <ref> [MJD96] </ref>, car les changements de comportement ne sont que temporaires c'est-a-dire que durant l'evaluation des procedures reflexives. Apres sa these, Brian Smith s'est interesse aux problemes d'implantation de son langage 3-Lisp. <p> Il est possible d'ajouter une nouvelle contrainte a la reflexion comportementale en encourageant les changements de com-portement realises avant l'execution et non pas pendant. Dans ce cas, nous avons affaire a des modifications permanentes sur la definition du langage. Ce type de reflexion est dit continue <ref> [MJD96] </ref> (en opposition a la reflexion ponctuelle des langages a la 3-Lisp). <p> Cela permet de comprendre pourquoi ces chercheurs ne disent pas faire de la recherche sur la reflexion et souvent, ne connaissent pas la terminologie et les questions de la reflexion. Dans un article de Malenfant, Jacques & Demers <ref> [MJD96] </ref>, la notion de reflexion comportementale statique a ete mise en evidence (en opposition a la reflexion dynamique). La reflexion comportementale statique est une forme restreinte de reflexion ou une quantite "suffisante" d'information est connue statiquement (avant m^eme l'execution du programme) pour permettre la compilation efficace du langage. <p> Remarquons que ces termes ne s'utilisent pas dans les m^emes contextes. La terminologie de langage extensible vient du domaine de la methodologie de programmation, tandis que la terminologie de langage avec reflexion sta-tique se retrouve dans le contexte de l'implantation et la compilation de langages reflexifs <ref> [MJD96] </ref>. Nous nous interesserons dans notre projet es-sentiellement a la methodologie. Les aspects d'implantation de la reflexion seront approfondis par Marco Jacques [Jac96]. Les langages extensibles decoulent souvent de travaux formels sur la semantique. Il existe une bonne quantite de resultats theoriques sur les lan-gages extensibles. <p> Bien s^ur, dans ce modele, il est toujours possible d'effectuer dynamiquement les changements comme en 3-Lisp, mais cela est plutot rare. Dans un programme, plus il y a de ce type de changements dy-namiques, plus la compilation de ce programme s'en ressent <ref> [MJD96, Jac96] </ref>. Il est donc preferable de restreindre le plus possible les changements dyna-miques. Evidemment, pour obtenir un systeme de reecriture operationnel pour l'evaluation d'envois de messages, il faut ajouter d'autres regles de reecriture de moindre importance et determiner un ordre d'application des regles (pour les machines sequentielles). <p> Elles induisent de mauvaises interpretations des definitions qui vont suivre. Possiblement, il faudrait les reconsiderer pour verifier leur consistance. 14 A ne pas confondre avec la notion du m^eme nom developpee par Malenfant et al. <ref> [MJD96] </ref> qui n'a aucun lien avec la reflexion statique discutee ici. 4 PROBL EMATIQUE ET CADRE DU TRAVAIL 26 Lisp qui represente les programmes reifies sous forme de listes polymor-phiques. L'operateur eval represente l'interprete d'evaluation de pro-grammes du langage. <p> Que se passe-t'il si nous obtenons un langage reflexif monadique dans lequel il y a une tour reflexive ? Quel est l'impact de la tour reflexive sur le raisonnement equationnel ? La capacite a ^etre implante efficacement. Les travaux de Malenfant et al. <ref> [MJD96] </ref> ont elabore des criteres pour determiner si un langage reflexif est apte a ^etre compile efficacement ou non. Nous utiliserons ces criteres aussi pour notre classification. Par la suite, il sera necessaire de valider la classification en relation avec les langages reflexifs existants. <p> Clavel & Meseguer [CM96] utilisent une approche logique pour developper une theorie generale de la reflexion. Ils 6 MISE EN PERSPECTIVE 35 decrivent les aspects essentiels des systemes reflexifs, mais la classification en tant que telle est encore preliminaire. Malenfant, Jacques & Demers <ref> [MJD96] </ref> decrivent une classification basee sur la compilation pour discriminer les lan-gages reflexifs aptes a ^etre compiles efficacement de ceux qui ne peuvent pas l'^etre. Leur discrimination est basee principalement sur la notion de reflexion statique (explique en section 2.3).
Reference: [Mog89a] <author> Moggi (E.). </author> <title> AnAbstract View of Programming Languages. Rapport technique nN o ECS-LFCS-90-113, </title> <institution> Edinburgh Univ., Dept. of Comp. Sci., 1989. Notes pour le cours CS 359, Stanford Univ. </institution>
Reference-contexts: Cette conjecture dit que toute structure de controle peut ^etre modelisee par une monade. 8 Traduction libre de "internally", venant d'un article de Wadler [Wad95]. 3 PROGRAMMATION MONADIQUE 16 monades dans leur contexte theorique, le lecteur peut consulter l'article de Hill & Clark [HC94] ou encore le cours de Moggi <ref> [Mog89a] </ref>. Nous allons illustrer la programmation monadique par la presentation de la semantique monadique d'un langage fonctionnel minimal applicatif dont la syntaxe est definie par l'equation BNF suivante 9 : e ::= v j v ! e j (e 1 e 2 ). <p> Du cote des langages types, les solutions proposees par Liang et al. [LHJ95, LH96] sont remarquables. Ils utilisent le concept de transformateur de monades de Moggi <ref> [Mog89a] </ref> pour composer les monades. Un transformateur de mo-nades est une sorte de monade contenant un "trou" pour accueillir un autre transformateur de monades ou une monade. Quand les "trous" sont remplis, l'entite resultante est une monade au m^eme titre que les monades simples.
Reference: [Mog89b] <author> Moggi (E.). </author> <title> Computational lambda-calculus and monads. </title> <booktitle> In : 4th LICS Conference. IEEE. </booktitle>
Reference-contexts: Il existe une bonne quantite de resultats theoriques sur les lan-gages extensibles. Nous retrouvons entre autres la semantique des actions de Mosses [Mos92], la semantique directe extensible [CF94], les continuations composables [DF90], la semantique des moniteurs [KHC91] et la semantique monadique <ref> [Mog89b] </ref>. Nous discuterons plus en details de ces semantiques dans les sections 4 et 6. Concernant la semantique monadique, Mendhekar & Friedman [MF96] ont montre qu'il est possible de lier cette semantique et la reflexion pour former ce qu'ils ont appele la reflexion monadique. <p> La modelisation de la reflexion par un systeme de reecriture aide possiblement au respect du traitement distinctif. Par contre, cela reste a ^etre approfondi. Nous approfondirons cette question. 3 Programmation monadique Monads are everywhere. [Wad94] 7 Hypothese de Moggi En 1989, Moggi <ref> [Mog89b, Mog91] </ref> et independamment Spivey [Spi89, Spi90] ont introduit les monades en conception de langages de program-mation pour structurer leur semantique denotationnelle. Plusieurs aspects semantiques des langages peuvent ^etre vus en tant que monades incluant les etats, les exceptions, les continuations, le non-determinisme et m^eme l'interaction. <p> Dans l'article de Mendhekar & Friedman, on montre que la propriete de reification n'est pas respectee 15 . La reflexion de monade est d'abord attribuee a Moggi <ref> [Mog89b] </ref> puis a Filinski [Fil94]. La reflexion de monade a la Moggi est l'association entre * avec un operateur [ ] et + avec un operateur de la forme Let in (voir section 5.2 pour plus de details sur ces operateurs). <p> Par la suite, il y a eu plusieurs re-cherches pour formaliser l'informatique en theorie des categories, comme la theorie du -calcul [Has95], la semantique denotationnelle <ref> [Mog89b, Mog91] </ref> et la specification algebrique [GB84a, GB84b, TBG91], mais aussi dans les aspects pratiques de l'informatique comme la conception de langages [Wad92], les techniques d'implementation [CCM85] [JHHP93], la derivation de programmes [Spi93] et d'autres. <p> Enfin, Benton & Wadler [BW96] montrent que les transformations des 17 Cette notation met en evidence le fait que la monade est reconnue par plusieurs comme une construction du premier ordre et non pas d'ordre superieur comme cela semble ^etre sous-entendu dans sa definition <ref> [Mog89b] </ref> [Wad95]. Il est donc possible d'implanter la programmation monadique dans un langage du premier ordre. Dans un article recent de Wadler [Wad95], une premiere implantation du premier ordre est esquissee.
Reference: [Mog91] <author> Moggi (E.). </author> <title> Notions of computation and monads. </title> <journal> Information and Computation, </journal> <volume> vol. </volume> <pages> 93, </pages> <note> nN o 1, </note> <year> 1991. </year>
Reference-contexts: La modelisation de la reflexion par un systeme de reecriture aide possiblement au respect du traitement distinctif. Par contre, cela reste a ^etre approfondi. Nous approfondirons cette question. 3 Programmation monadique Monads are everywhere. [Wad94] 7 Hypothese de Moggi En 1989, Moggi <ref> [Mog89b, Mog91] </ref> et independamment Spivey [Spi89, Spi90] ont introduit les monades en conception de langages de program-mation pour structurer leur semantique denotationnelle. Plusieurs aspects semantiques des langages peuvent ^etre vus en tant que monades incluant les etats, les exceptions, les continuations, le non-determinisme et m^eme l'interaction. <p> Intuiti-vement, il est possible que l'ensemble de ces monades composent une base pour engendrer l'espace de conception des langages reflexifs monadiques. 5 Theorie des categories et monades Category theory comes, logically, before the -calculus. <ref> [Mog91] </ref> Eugenio Moggi La theorie des categories [Lan71] est une branche des mathematiques qui a ete developpee dans les annees 40. <p> Par la suite, il y a eu plusieurs re-cherches pour formaliser l'informatique en theorie des categories, comme la theorie du -calcul [Has95], la semantique denotationnelle <ref> [Mog89b, Mog91] </ref> et la specification algebrique [GB84a, GB84b, TBG91], mais aussi dans les aspects pratiques de l'informatique comme la conception de langages [Wad92], les techniques d'implementation [CCM85] [JHHP93], la derivation de programmes [Spi93] et d'autres. <p> Les monades compu-tationnelles en sont un exemple patent. La sous-section suivante presente l'origine des monades en programmation et leur relation a la reflexion. 5.2 Theorie du calcul de Moggi Le meta-langage computationnel de Moggi <ref> [Mog91] </ref> est a l'origine m^eme de la programmation monadique [Wad90]. <p> Leurs travaux montrent un lien interessant entre logique monadique de Moggi et logique lineaire de Girard. Toutes ces correspondances laissent penser que la logique monadique, la logique lineaire, les "logiques" avec continuations de plein droit, la logique modale (reconnue par Moggi <ref> [Mog91] </ref>) et la logique de la reflexion sont inter-reliees. <p> De plus, en logique modale, les operateurs de possibilite et de necessite sont souvent modelises par des monades <ref> [Mog91] </ref>. En logique lineaire, les operateurs pourquoi pas ("why not") et bien s^ur ("of course") sont modelises eux aussi par des monades [Mog91]. Nous avons vu que les operateurs de reification et de reflexion peuvent ^etre modelises par des monades. <p> De plus, en logique modale, les operateurs de possibilite et de necessite sont souvent modelises par des monades <ref> [Mog91] </ref>. En logique lineaire, les operateurs pourquoi pas ("why not") et bien s^ur ("of course") sont modelises eux aussi par des monades [Mog91]. Nous avons vu que les operateurs de reification et de reflexion peuvent ^etre modelises par des monades. Il y a encore beaucoup de travail a faire de ce point de vue, comme nous l'avons men-tionne. Nous allons tenter de contribuer a augmenter la comprehension de tout cela. <p> Par exemple, Mendhekar & Friedman [MF93] se sont interesses au raisonnement equationnel possible dans les lan-gages reflexifs a la 3-Lisp. Comme nous l'avons explique precedemment, ils ont poursuivi leurs travaux du raisonnement en utilisant une approche mo-nadique [MF96]. De son cote, Moggi <ref> [Mog91] </ref> s'est interesse aux langages extensibles et au raisonnement equationnel sur ceux-ci. Il utilise une ap-proche formelle basee sur la logique categorique et les monades (voir section 5.2).
Reference: [Mos92] <author> Mosses (P.D.). </author> <title> Action Semantics. </title> <publisher> Cambridge University Press, </publisher> <year> 1992, </year> <booktitle> Cambridge Tracts in Theoretical Computer Science, </booktitle> <volume> volume 26. </volume>
Reference-contexts: Les aspects d'implantation de la reflexion seront approfondis par Marco Jacques [Jac96]. Les langages extensibles decoulent souvent de travaux formels sur la semantique. Il existe une bonne quantite de resultats theoriques sur les lan-gages extensibles. Nous retrouvons entre autres la semantique des actions de Mosses <ref> [Mos92] </ref>, la semantique directe extensible [CF94], les continuations composables [DF90], la semantique des moniteurs [KHC91] et la semantique monadique [Mog89b]. Nous discuterons plus en details de ces semantiques dans les sections 4 et 6. <p> = ( shift (k ! (k fl e)) Par la suite, comme nous l'avons vu, Mendhekar & Friedman [MF96] reutilisent ces definitions pour montrer que * et + respectent bien leurs lois de la reflexion. 6.2 Autres formalismes semantiques La semantique des actions a ete creee par Mosses et Watt <ref> [Mos92] </ref> pour remedier au manque de modularite et d'extensibilite de la semantique denotationnelle. L'unite fondamentale de la semantique est l'action qui permet de decrire des comportements computationnels precis. Ces actions peuvent ^etre composees ensemble pour former des mecanismes de controle plus importants.
Reference: [MT93] <author> M.J.C. Gordon et T.F. Melham. </author> <title> Introduction to HOL : A Theorem Proving Environment for Higher Order Logic. </title> <publisher> Cam-bridge University Press, </publisher> <year> 1993. </year>
Reference-contexts: De ce fait, plusieurs ont developpe des methodes pour extraire les aspects mecaniques du raison-nement categorique [Hue86] [RB88] [Fok92a]. Aujourd'hui, on retrouve plu-sieurs langages utiles ou specialises a cette theorie : Nuprl [C +86], Mizar [Rud92], LEGO [Pol94], Coq [DFH +93], HOL <ref> [MT93] </ref> et beaucoup d'autres. D'ailleurs, on peut voir la theorie des categories comme une collection d'al-gorithmes. Par contre, ces algorithmes ont un degre de generalite depassant les niveaux rencontres normalement en programmation. C'est une raison de plus qui justifie l'effort de comprehension de cette theorie.
Reference: [Pie90] <author> Pierce (Benjamin C.). </author> <title> ATaste of Category Theory for Computer Scientists. Report nN o CMU-CS-90-113, </title> <institution> Carnegie Mellon University, </institution> <month> Mars 6 </month> <year> 1990. </year>
Reference-contexts: Au cours de la derniere decennie, plusieurs mathematiciens et informa-ticiens ont tente d'expliquer cette theorie. C'est pour cette raison qu'au-jourd'hui, on denombre une grande quantite de rapports de recherche vul-garisant le sujet pour les informaticiens en general [Hoa88a] [RB88] <ref> [Pie90] </ref> [Fok92b] [Bou93], les theoriciens de l'informatique [GS89] [BW90] [Pie91] [Ten91] [AL91] [Poi92] [Spi93] ou les mathematiciens interesses aux langages [LS86] [LS91] [Gog91] [vO95].
Reference: [Pie91] <author> Pierce (Benjamin C.). </author> <title> Basic Category Theory for Computer Scientists. </title> <publisher> The MIT Press, </publisher> <year> 1991, </year> <booktitle> Foundations of Computing. R EF ERENCES 58 </booktitle>
Reference-contexts: Au cours de la derniere decennie, plusieurs mathematiciens et informa-ticiens ont tente d'expliquer cette theorie. C'est pour cette raison qu'au-jourd'hui, on denombre une grande quantite de rapports de recherche vul-garisant le sujet pour les informaticiens en general [Hoa88a] [RB88] [Pie90] [Fok92b] [Bou93], les theoriciens de l'informatique [GS89] [BW90] <ref> [Pie91] </ref> [Ten91] [AL91] [Poi92] [Spi93] ou les mathematiciens interesses aux langages [LS86] [LS91] [Gog91] [vO95]. Mais pourquoi cette volonte d'unir la theorie la plus generale et la plus abstraite des mathematiques [Hoa88b] avec la programmation ? Une reponse est clairement expliquee dans le livre de Rydeheard & Burstall [RB88].
Reference: [PJW93] <editor> Peyton Jones (Simon L.) et Wadler (Philip). </editor> <title> Imperative functional programming. </title> <booktitle> In : Conference Record of the Twentieth ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages. </booktitle> <pages> pp. 71-84. </pages> - <address> Charleston, South Carolina, janvier 10-13, </address> <year> 1993. </year>
Reference-contexts: L'aspect horizontal des monades a ete exploite pour l'implantation du compilateur Glasgow Haskell 3 PROGRAMMATION MONADIQUE 23 [Jon96], pour l'implantation d'etat modifiable ("updatable state") [Wad90], pour les entrees/sorties <ref> [PJW93] </ref>, l'interaction [Wad95], l'analyse semantique [HM96], la substitution [BH94], l'impression de bonnes qualites ("pretty printing") [Hug95], la reflexion [MF96] et bien d'autres.
Reference: [Plo75] <author> Plotkin (Gordon D.). </author> - <title> Call-by-name, call-by-value and the -calculus. </title> <journal> Theoretical Computer Science, </journal> <volume> vol. 1, </volume> <year> 1975, </year> <pages> pp. 125-159. </pages>
Reference-contexts: Cet operateur est le m^eme que notre then. Il existe des transformations standards du v -calcul (passage par va-leur) et du n -calcul (passage par nom) vers le style passage a la continuation <ref> [Plo75] </ref>. Moggi a generalise ces transformations en developpant une semantique du calcul (qui est une traduction des differents -calculs (style direct, appel par valeur, appel par nom, etc.) vers son meta-langage logique. Le meta-langage de Moggi a ete reconnu "semblable" a plusieurs autres meta-langages. En voici quelques uns.
Reference: [Poi92] <author> Poigne. </author> <title> Basic category theory. In : Handbook of Logic in Computer Science, Volumes 1 (Background : Mathematical Structures) and 2 (Background : Computational Structures), </title> <editor> Abramsky & Gabbay & Maibaum (Eds.), </editor> <publisher> Clarendon. </publisher> - <year> 1992. </year>
Reference-contexts: C'est pour cette raison qu'au-jourd'hui, on denombre une grande quantite de rapports de recherche vul-garisant le sujet pour les informaticiens en general [Hoa88a] [RB88] [Pie90] [Fok92b] [Bou93], les theoriciens de l'informatique [GS89] [BW90] [Pie91] [Ten91] [AL91] <ref> [Poi92] </ref> [Spi93] ou les mathematiciens interesses aux langages [LS86] [LS91] [Gog91] [vO95]. Mais pourquoi cette volonte d'unir la theorie la plus generale et la plus abstraite des mathematiques [Hoa88b] avec la programmation ? Une reponse est clairement expliquee dans le livre de Rydeheard & Burstall [RB88].
Reference: [Pol94] <author> Pollack (Robert). </author> <title> The Theory of LEGO : A Proof Checker for the Extended Calculus of Constructions. </title> <type> These de PhD, </type> <institution> University of Edinburgh, </institution> <year> 1994. </year>
Reference-contexts: De ce fait, plusieurs ont developpe des methodes pour extraire les aspects mecaniques du raison-nement categorique [Hue86] [RB88] [Fok92a]. Aujourd'hui, on retrouve plu-sieurs langages utiles ou specialises a cette theorie : Nuprl [C +86], Mizar [Rud92], LEGO <ref> [Pol94] </ref>, Coq [DFH +93], HOL [MT93] et beaucoup d'autres. D'ailleurs, on peut voir la theorie des categories comme une collection d'al-gorithmes. Par contre, ces algorithmes ont un degre de generalite depassant les niveaux rencontres normalement en programmation. C'est une raison de plus qui justifie l'effort de comprehension de cette theorie.
Reference: [RB85] <author> Rydeheard (D.E.) et Burstall (R.M.). </author> - <title> Monads and theories : a survey for computation, </title> <journal> chap. </journal> <volume> 16, </volume> <pages> pp. 575-605. </pages> <address> Cambridge, Cambridge Universy Press, </address> <booktitle> 1985volume Algebraic methods in semantics. </booktitle>
Reference-contexts: Des langages comme CLEAR [GB84a], un langage de specification algebrique qui peut ^etre vu comme un langage de description de monades <ref> [RB85] </ref>, Quest [Car91] de Cardelli propose par Espinosa [Esp95] ou Gofer [Jon94] utilise par Liang [LHJ95] sont plus adequats parce qu'ils offrent un systeme de type plus riche (par exemple, les types dependants de Quest et le polymorphisme sur les types de Gofer). <p> La fonction essentielle de cette theorie est de definir et construire des definitions. Ce sont justement les t^aches principales de l'informaticien. Il y a une autre raison qui motive l'informaticien a apprendre cette theorie. C'est qu'elle est en grande partie constructive <ref> [RB85, RB88] </ref>. Les theoremes qui affirment l'existence de certaines entites categoriques sont prouves par construction explicite de celles-ci. De ce fait, plusieurs ont developpe des methodes pour extraire les aspects mecaniques du raison-nement categorique [Hue86] [RB88] [Fok92a]. <p> Il est donc possible d'implanter la programmation monadique dans un langage du premier ordre. Dans un article recent de Wadler [Wad95], une premiere implantation du premier ordre est esquissee. De plus, il est montre que, par nature, la monade est limitee theoriquement <ref> [RB85] </ref> et pratiquement [Wad94] a un certain pouvoir d'expression. 6 MISE EN PERSPECTIVE 34 -calculs (direct, par valeur et par nom) vers le meta-langage de Moggi correspondent exactement a trois transformations de la logique intuition-niste vers la logique lineaire intuitionniste de Girard [Gir87]. <p> Les equations precedentes sont les proprietes homomorphiques. On ecrira alors h : (ff; ; e) ! (fi; ; d). Une monade ressemble beaucoup a un monoide <ref> [RB85] </ref>. En effet, il est possible de voir un monoide comme une monade et vice et versa. Par exemple, la monade liste M l = (fl; map l ; unit l ; join l ) correspond au monoide liste (fl; ++; [ ]) (ou le type n'est pas specifie).
Reference: [RB88] <author> Rydeheard (D. E.) et Burstall (R. M.). </author> <title> Computational Category Theory. </title> - <publisher> Hertfordshire, Prentice Hall, </publisher> <year> 1988. </year>
Reference-contexts: Au cours de la derniere decennie, plusieurs mathematiciens et informa-ticiens ont tente d'expliquer cette theorie. C'est pour cette raison qu'au-jourd'hui, on denombre une grande quantite de rapports de recherche vul-garisant le sujet pour les informaticiens en general [Hoa88a] <ref> [RB88] </ref> [Pie90] [Fok92b] [Bou93], les theoriciens de l'informatique [GS89] [BW90] [Pie91] [Ten91] [AL91] [Poi92] [Spi93] ou les mathematiciens interesses aux langages [LS86] [LS91] [Gog91] [vO95]. <p> Mais pourquoi cette volonte d'unir la theorie la plus generale et la plus abstraite des mathematiques [Hoa88b] avec la programmation ? Une reponse est clairement expliquee dans le livre de Rydeheard & Burstall <ref> [RB88] </ref>. En 5 TH EORIE DES CAT EGORIES ET MONADES 32 effet, il est dit que la theorie des categories peut ^etre d'un grand inter^et pour les informaticiens, car elle opere sur le m^eme niveau de generalite que la logique et la programmation. <p> La fonction essentielle de cette theorie est de definir et construire des definitions. Ce sont justement les t^aches principales de l'informaticien. Il y a une autre raison qui motive l'informaticien a apprendre cette theorie. C'est qu'elle est en grande partie constructive <ref> [RB85, RB88] </ref>. Les theoremes qui affirment l'existence de certaines entites categoriques sont prouves par construction explicite de celles-ci. De ce fait, plusieurs ont developpe des methodes pour extraire les aspects mecaniques du raison-nement categorique [Hue86] [RB88] [Fok92a]. <p> C'est qu'elle est en grande partie constructive [RB85, RB88]. Les theoremes qui affirment l'existence de certaines entites categoriques sont prouves par construction explicite de celles-ci. De ce fait, plusieurs ont developpe des methodes pour extraire les aspects mecaniques du raison-nement categorique [Hue86] <ref> [RB88] </ref> [Fok92a]. Aujourd'hui, on retrouve plu-sieurs langages utiles ou specialises a cette theorie : Nuprl [C +86], Mizar [Rud92], LEGO [Pol94], Coq [DFH +93], HOL [MT93] et beaucoup d'autres. D'ailleurs, on peut voir la theorie des categories comme une collection d'al-gorithmes.
Reference: [Rey72] <author> Reynolds (John C.). </author> <title> Definitional interpreters for higher-order programming languages. </title> <booktitle> In : Proceedings ACM National Conference, </booktitle> <pages> pp. 717-740. </pages>
Reference-contexts: Il est considere comme un des developpements semantiques les plus significatifs de la derniere decennie [BW96]. 5 TH EORIE DES CAT EGORIES ET MONADES 33 Le meta-langage de Moggi est un langage type qui met en evidence la distinction entre calcul et valeur (comme l'avait deja fait Reynolds <ref> [Rey72] </ref> avec les termes serieux et triviaux). En particulier, il utilise les monades pour rendre explicites certaines informations computationnelles. Si e est une expression calcul (ou un terme serieux) alors [e] retourne la valeur abstraite de e.
Reference: [Rey80] <author> Reynolds (J. C.). </author> <title> Using category theory to design implicit conversions and generic operators. In : Semantics-Directed Compiler Generation, </title> <editor> ed. par Jones (N. </editor> <address> D.), </address> <pages> pp. 211-2580. </pages> - <address> Berlin, </address> <publisher> Springer LNCS 94, </publisher> <year> 1980. </year>
Reference-contexts: Dans cette section, nous discuterons d'abord de la theorie des categories en informatique et ensuite de l'application originelle des monades en semantique des langages. 5.1 Introduction John Reynolds a ete le premier a appliquer cette theorie en conception de langages de programmation <ref> [Rey80] </ref>.
Reference: [Rud92] <author> Rudnicki (Piotr). </author> <title> An overview of the Mizar project. </title> - <month> Juin </month> <year> 1992. </year>
Reference-contexts: De ce fait, plusieurs ont developpe des methodes pour extraire les aspects mecaniques du raison-nement categorique [Hue86] [RB88] [Fok92a]. Aujourd'hui, on retrouve plu-sieurs langages utiles ou specialises a cette theorie : Nuprl [C +86], Mizar <ref> [Rud92] </ref>, LEGO [Pol94], Coq [DFH +93], HOL [MT93] et beaucoup d'autres. D'ailleurs, on peut voir la theorie des categories comme une collection d'al-gorithmes. Par contre, ces algorithmes ont un degre de generalite depassant les niveaux rencontres normalement en programmation.
Reference: [SF92] <author> Sabry (Amr) et Felleisen (Matthias). </author> <title> Reasoning about programs in continuation-passing style. </title> <booktitle> In : Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, </booktitle> <pages> pp. 288-298. </pages> - <address> San Francisco, USA, </address> <month> Juin </month> <year> 1992. </year>
Reference-contexts: Du cote des langages extensibles, beaucoup d'etudes sur le raisonne-ment ont ete menees alors que pour les langages a la 3-Lisp, on en retrouve peu. Plusieurs extensions possibles de ces langages ont ete etudiees parti-culierement. Par exemple, des theories sur le raisonnement ont ete elaborees en relation aux continuations <ref> [SF92] </ref>, aux etats modifiables [SF93] et aux exceptions [Spi90]. 6.1 Monades et reflexion : les origines Concernant le raisonnement et les monades, dans un article de Danvy et al. [DKM91], il est mentionne brievement qu'il existe une ressemblance etrange entre la relation entre un terme de type ff et sa "representation
Reference: [SF93] <author> Sabry (A.) et Field (J.). </author> <title> Reasoning about explicit and implicit representations of state. </title> <booktitle> In : Proceedings of the ACM SIGPLAN Workshop on State in Programming Languages, Co-penhagen, DK, </booktitle> <volume> SIPL '93, </volume> <pages> pp. 17-30. </pages> <address> R EF ERENCES 59 </address>
Reference-contexts: Plusieurs extensions possibles de ces langages ont ete etudiees parti-culierement. Par exemple, des theories sur le raisonnement ont ete elaborees en relation aux continuations [SF92], aux etats modifiables <ref> [SF93] </ref> et aux exceptions [Spi90]. 6.1 Monades et reflexion : les origines Concernant le raisonnement et les monades, dans un article de Danvy et al. [DKM91], il est mentionne brievement qu'il existe une ressemblance etrange entre la relation entre un terme de type ff et sa "representation monadique" T ff 18
Reference: [Smi82] <author> Smith (B.C.). </author> <title> Reflection and Semantics in a Procedural Language. Rapport technique nN o 272, </title> <institution> MIT Laboratory for Computer Science, </institution> <year> 1982. </year>
Reference-contexts: les origines Concernant le raisonnement et les monades, dans un article de Danvy et al. [DKM91], il est mentionne brievement qu'il existe une ressemblance etrange entre la relation entre un terme de type ff et sa "representation monadique" T ff 18 , et la reconstruction de Lisp operee par Smith <ref> [Smi82] </ref>. Il est dit que durant un certain calcul, un interprete n'accede pas precisement aux valeurs (de type ff) a calculer mais plutot a des representations de ces valeurs (de type T ff).
Reference: [Smi84] <author> Smith (B.C.). </author> <title> Reflection and Semantics in Lisp. </title> <booktitle> In : Proceedings of the 14th Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pp. 23-35. </pages>
Reference-contexts: Enfin, une mise en perspective (section 6) et une conclusion (section 7) suivront. 2 R EFLEXION 6 2 Reflexion Semantics can be a tool with which to judge systems, not merely a method of describing them. <ref> [Smi84] </ref> Brian C. Smith Dans cette section, nous expliquons brievement la reflexion telle que pensee par Brian Smith et par d'autres depuis plus de 15 ans. Nous verrons entre autres que nous distinguons deux classes de langages reflexifs : les lan-gages a la 3-Lisp et les langages extensibles. <p> Il est probable que de nouvelles techniques de raisonnement se manifestent si nous adoptons une approche algebrique (serie d'equations decrivant le rapport entre les operateurs de reflexion et les aspects non-reflexifs du langage). Cette ap-proche avait deja ete reconnue informellement par Smith lui-m^eme <ref> [Smi84] </ref>. Wand & Friedman [WF88] avait ensuite parle de l'algebre des operateurs de la reflexion. Danvy & Malmkjaer ont tente, par la suite, de caracteriser cette algebre par une approche denotationnelle [DM88].
Reference: [Spi89] <author> Spivey (M.). </author> <title> A categorical approach to the theory of lists. </title> <booktitle> In : Conference on the Mathematics of Program Construction, </booktitle> <editor> ed. par van de Snepscheut (J. L. </editor> <publisher> A.). </publisher> <pages> pp. 399-408. </pages> <publisher> Springer-Verlag, LNCS 375. </publisher>
Reference-contexts: La modelisation de la reflexion par un systeme de reecriture aide possiblement au respect du traitement distinctif. Par contre, cela reste a ^etre approfondi. Nous approfondirons cette question. 3 Programmation monadique Monads are everywhere. [Wad94] 7 Hypothese de Moggi En 1989, Moggi [Mog89b, Mog91] et independamment Spivey <ref> [Spi89, Spi90] </ref> ont introduit les monades en conception de langages de program-mation pour structurer leur semantique denotationnelle. Plusieurs aspects semantiques des langages peuvent ^etre vus en tant que monades incluant les etats, les exceptions, les continuations, le non-determinisme et m^eme l'interaction. <p> Ici, Id represente le foncteur identite (qui n'a aucun effet sur les objets et les morphismes). La fonction ++ peut aussi ^etre vue comme une transformation naturelle. Nous retrouvons une preuve de cette relation dans un article de Spivey <ref> [Spi89] </ref>. Nous avons besoin d'une derniere transformation naturelle. C'est la fonction [ ] ffi . Nous savons que, pour un type ff, la liste vide [ ] ff est un terme de type fffl. <p> Ce processus auquel nous associons a certains termes des entites categoriques constitue une etape importante du processus d'abstraction que la theorie des categories enseigne. Pour plus de details sur cette transformation naturelle, il faut consulter aussi l'article de Spivey <ref> [Spi89] </ref>. C Monades et triplets de Kleisli Les monades ont ete inventees dans les annees cinquantes (sous le nom de constructions standards) et le concept est devenu populaire dans les annees soixantes.
Reference: [Spi90] <author> Spivey (Mike). </author> <title> A functional theory of exceptions. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> vol. 14, </volume> <booktitle> nN o 1, Juin 1990, </booktitle> <pages> pp. 25-42. </pages>
Reference-contexts: La modelisation de la reflexion par un systeme de reecriture aide possiblement au respect du traitement distinctif. Par contre, cela reste a ^etre approfondi. Nous approfondirons cette question. 3 Programmation monadique Monads are everywhere. [Wad94] 7 Hypothese de Moggi En 1989, Moggi [Mog89b, Mog91] et independamment Spivey <ref> [Spi89, Spi90] </ref> ont introduit les monades en conception de langages de program-mation pour structurer leur semantique denotationnelle. Plusieurs aspects semantiques des langages peuvent ^etre vus en tant que monades incluant les etats, les exceptions, les continuations, le non-determinisme et m^eme l'interaction. <p> Plusieurs extensions possibles de ces langages ont ete etudiees parti-culierement. Par exemple, des theories sur le raisonnement ont ete elaborees en relation aux continuations [SF92], aux etats modifiables [SF93] et aux exceptions <ref> [Spi90] </ref>. 6.1 Monades et reflexion : les origines Concernant le raisonnement et les monades, dans un article de Danvy et al. [DKM91], il est mentionne brievement qu'il existe une ressemblance etrange entre la relation entre un terme de type ff et sa "representation monadique" T ff 18 , et la reconstruction
Reference: [Spi93] <author> Spivey (Mike). </author> <title> Category Theory for Functional Programming. Rapport technique nN o PRG-TR-7-93, PRG, </title> <publisher> Oxford, </publisher> <year> 1993. </year>
Reference-contexts: plusieurs re-cherches pour formaliser l'informatique en theorie des categories, comme la theorie du -calcul [Has95], la semantique denotationnelle [Mog89b, Mog91] et la specification algebrique [GB84a, GB84b, TBG91], mais aussi dans les aspects pratiques de l'informatique comme la conception de langages [Wad92], les techniques d'implementation [CCM85] [JHHP93], la derivation de programmes <ref> [Spi93] </ref> et d'autres. Malheureusement, cette theorie est difficile a comprendre et demande une grande patience a celui qui veut l'utiliser, car elle offre des concepts tres abstraits qui n'ont pas, pour le profane, de significations naturelles autres que pour des exemples plutot simplistes. <p> C'est pour cette raison qu'au-jourd'hui, on denombre une grande quantite de rapports de recherche vul-garisant le sujet pour les informaticiens en general [Hoa88a] [RB88] [Pie90] [Fok92b] [Bou93], les theoriciens de l'informatique [GS89] [BW90] [Pie91] [Ten91] [AL91] [Poi92] <ref> [Spi93] </ref> ou les mathematiciens interesses aux langages [LS86] [LS91] [Gog91] [vO95]. Mais pourquoi cette volonte d'unir la theorie la plus generale et la plus abstraite des mathematiques [Hoa88b] avec la programmation ? Une reponse est clairement expliquee dans le livre de Rydeheard & Burstall [RB88].
Reference: [Ste94] <author> Steele, Jr. (Guy L.). </author> <title> Building interpreters by composing monads. </title> <booktitle> In : Conference Record of POPL '94 : 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, </booktitle> <pages> pp. 472-492. </pages> - <address> Portland, Oregon, </address> <year> 1994. </year>
Reference-contexts: Le probleme de la combinaison des monades est complexe. La composition des monades en tant que telle a ete montree impossible dans le cas general [JD93]. Aucune theorie solide n'existe pour solutionner ce probleme [Wad94]. Wadler [KW92], Steele <ref> [Ste94] </ref>, Es-pinosa [Esp95], Barr & Wells [BW85] et Liang et al. [LHJ95] ont travaille sur le developpement de solutions sans aboutir a un consensus. Du cote des langages types, les solutions proposees par Liang et al. [LHJ95, LH96] sont remarquables.
Reference: [SY74] <author> Solntseff (N.) et Yezerski (A.). </author> <title> A survey of extensible languages. </title> <booktitle> Annual Review in automatic Programming, </booktitle> <volume> vol. </volume> <pages> 7, </pages> <note> nN o 4, </note> <year> 1974, </year> <pages> pp. 267-307. </pages>
Reference-contexts: Dans la section suivante, nous discuterons des langages extensibles, sortes de langages reflexifs qui regroupent en bonne partie les langages a reflexion structurale et a reflexion comportementale. 2.2 Langages extensibles Les langages extensibles d'autrefois <ref> [SY74] </ref> et d'aujourd'hui [LHJ95] sont, par definition, des langages pour lesquels il est possible de modifier la semantique par ajout ou retrait de blocs syntaxiques qui representent certaines fonctionnalites utiles aux programmeurs.
Reference: [Tar44] <author> Tarski (Alfred). </author> <title> The semantic conception of truth. </title> <journal> Philos. Phenomenological Research, </journal> <volume> vol. 4, </volume> <year> 1944, </year> <pages> pp. 13-47. </pages>
Reference-contexts: Contrairement a ces derniers (qui ont fonde leur raisonnement sur une base denotationnelle), ils ont fonde leur raisonnement sur une base logique. En effet, ils se sont inspires des bi-conditions de Tarski <ref> [Tar44] </ref> qui definit precisement le predicat de verite T .
Reference: [TBG91] <author> Tarlecki, Burstall et Goguen. </author> <title> Some fundamental algebraic tools for the semantics of computation : Part 3. indexed categories. </title> <journal> Theoretical Computer Science, </journal> <volume> vol. 91, </volume> <year> 1991. </year>
Reference-contexts: Par la suite, il y a eu plusieurs re-cherches pour formaliser l'informatique en theorie des categories, comme la theorie du -calcul [Has95], la semantique denotationnelle [Mog89b, Mog91] et la specification algebrique <ref> [GB84a, GB84b, TBG91] </ref>, mais aussi dans les aspects pratiques de l'informatique comme la conception de langages [Wad92], les techniques d'implementation [CCM85] [JHHP93], la derivation de programmes [Spi93] et d'autres.
Reference: [Ten91] <author> Tennent (Robert D.). </author> <title> Semantics of Programming Languages. </title> <address> New York, </address> <publisher> Prentice Hall, </publisher> <year> 1991, </year> <editor> xxi+236p. [vO95] van Oosten (Jaap). </editor> <title> Basic Category Theory. Rapport technique nN o ISSN 1395-2048, </title> <booktitle> BRICS Lecture Series, </booktitle> <institution> Dept. of C.S. University of Ashus, </institution> <year> 1995. </year>
Reference-contexts: Au cours de la derniere decennie, plusieurs mathematiciens et informa-ticiens ont tente d'expliquer cette theorie. C'est pour cette raison qu'au-jourd'hui, on denombre une grande quantite de rapports de recherche vul-garisant le sujet pour les informaticiens en general [Hoa88a] [RB88] [Pie90] [Fok92b] [Bou93], les theoriciens de l'informatique [GS89] [BW90] [Pie91] <ref> [Ten91] </ref> [AL91] [Poi92] [Spi93] ou les mathematiciens interesses aux langages [LS86] [LS91] [Gog91] [vO95]. Mais pourquoi cette volonte d'unir la theorie la plus generale et la plus abstraite des mathematiques [Hoa88b] avec la programmation ? Une reponse est clairement expliquee dans le livre de Rydeheard & Burstall [RB88].
Reference: [Wad90] <author> Wadler (P.). </author> <title> Comprehending monads. </title> <booktitle> In : ACM Conference on Lisp and Functional Programming. </booktitle>
Reference-contexts: Plusieurs aspects semantiques des langages peuvent ^etre vus en tant que monades incluant les etats, les exceptions, les continuations, le non-determinisme et m^eme l'interaction. En 1990, Wadler <ref> [Wad90] </ref> a montre que les monades peuvent ^etre utiles de deux facons : horizontalement 8 , comme une technique de struc-turation des programmes d'un langage et verticalement, pour etendre la puissance d'un langage. Ces deux aspects des monades vont nous servir a la classification de la reflexion. <p> Dans la section suivante, nous discuterons de la monade computation-nelle et, par la suite, de deux monades qui nous permettent d'obtenir les semantiques style par etat et style par passage a la continuation. 3.1 Monades computationnelles Les monades computationnelles ont ete presentees pour la premiere fois par Wadler <ref> [Wad90] </ref> pour montrer comment la notation des listes par comprehension de la programmation fonctionnelle peut ^etre generalisee a une monade arbitraire. Dans son premier article sur le sujet, il generalise le constructeur de listes fl 11 a la monade ou M est un construc-teur de type quelconque. <p> L'aspect horizontal des monades a ete exploite pour l'implantation du compilateur Glasgow Haskell 3 PROGRAMMATION MONADIQUE 23 [Jon96], pour l'implantation d'etat modifiable ("updatable state") <ref> [Wad90] </ref>, pour les entrees/sorties [PJW93], l'interaction [Wad95], l'analyse semantique [HM96], la substitution [BH94], l'impression de bonnes qualites ("pretty printing") [Hug95], la reflexion [MF96] et bien d'autres. <p> Les monades compu-tationnelles en sont un exemple patent. La sous-section suivante presente l'origine des monades en programmation et leur relation a la reflexion. 5.2 Theorie du calcul de Moggi Le meta-langage computationnel de Moggi [Mog91] est a l'origine m^eme de la programmation monadique <ref> [Wad90] </ref>. <p> Saunders Mac Lane Pour illustrer la theorie des categories, nous presenterons une application des adjonctions dans un langage fonctionnel type. Nous nous sommes base A UN EXEMPLE EN PROGRAMMATION : LES ADJONCTIONS 40 sur les travaux de Spivey [Spi89][Spi93], Fokkinga [FM94][Fok92b] et Wadler <ref> [Wad90, KW92] </ref>. L'adjonction est sans aucun doute un des concepts des plus importants des categories. De plus, les adjonctions apparaissent souvent en mathematiques et en programmation. Les adjonctions sont intimement liees aux monades. En effet, a chaque adjonction, on peut induire une monade. <p> En fait, elle est plus generale que fold (prendre ff = fifl pour obtenir fold). Par contre, A UN EXEMPLE EN PROGRAMMATION : LES ADJONCTIONS 44 [] correspond precisement a la fonction unite de la premiere definition de la monade liste. Nous pouvons generaliser comme l'a fait Wadler <ref> [Wad90] </ref> (voir la section 3.1) et remplacer le constructeur de liste par un constructeur quelconque M . Nous obtenons que (M; U; return; f old) : Ens * M ono forme aussi une adjonction ou f old est notre fonction = mais generalisee au constructeur M .
Reference: [Wad92] <author> Wadler (P. L.). </author> <title> The essence of functional programming. </title> <booktitle> In : Proceedings of the 19th Annual ACM Symposium on Principles of Programming Languages, </booktitle> <address> Albuquerque, NM, </address> <pages> pp. 1-14. </pages> <address> R EF ERENCES 60 </address>
Reference-contexts: Par contre, sorti de son contexte, le concept de mo-nade est ampute de toute sa richesse et de son importance theorique. Pour certains, il peut m^eme para^itre simpliste et insignifiant. Pour une bonne introduction a la programmation monadique, il faut consulter les articles de Wadler <ref> [Wad92] </ref> et de Hutton & Meijer [HM96]. <p> Dans ce cas, ces equations sont exactement celle de la theorie des liste de Bird [Bir87]. Nous nommerons la monade liste M l = (fl; map l ; unit l ; join l ) ou M = fl, le constructeur de liste. Deux ans plus tard, Wadler <ref> [Wad92] </ref> adopte la definition plus appropriee suivante. Celle-ci est plus courte, mais beaucoup moins conforme a la notion de monade categorique. En fait, elle se rapproche plus de la notion de triplet de Kleisli (voir l'annexe C pour les details categoriques). 3.2 Definition. <p> Par la suite, il y a eu plusieurs re-cherches pour formaliser l'informatique en theorie des categories, comme la theorie du -calcul [Has95], la semantique denotationnelle [Mog89b, Mog91] et la specification algebrique [GB84a, GB84b, TBG91], mais aussi dans les aspects pratiques de l'informatique comme la conception de langages <ref> [Wad92] </ref>, les techniques d'implementation [CCM85] [JHHP93], la derivation de programmes [Spi93] et d'autres.
Reference: [Wad94] <author> Wadler (Philip). </author> - <title> Monads and composable continuations. </title> <journal> Lisp and Symbolic Computation, </journal> <volume> vol. </volume> <pages> 7, </pages> <note> nN o 1, </note> <year> 1994, </year> <pages> pp. 39-55. </pages>
Reference-contexts: La modelisation de la reflexion par un systeme de reecriture aide possiblement au respect du traitement distinctif. Par contre, cela reste a ^etre approfondi. Nous approfondirons cette question. 3 Programmation monadique Monads are everywhere. <ref> [Wad94] </ref> 7 Hypothese de Moggi En 1989, Moggi [Mog89b, Mog91] et independamment Spivey [Spi89, Spi90] ont introduit les monades en conception de langages de program-mation pour structurer leur semantique denotationnelle. <p> Le probleme de la combinaison des monades est complexe. La composition des monades en tant que telle a ete montree impossible dans le cas general [JD93]. Aucune theorie solide n'existe pour solutionner ce probleme <ref> [Wad94] </ref>. Wadler [KW92], Steele [Ste94], Es-pinosa [Esp95], Barr & Wells [BW85] et Liang et al. [LHJ95] ont travaille sur le developpement de solutions sans aboutir a un consensus. Du cote des langages types, les solutions proposees par Liang et al. [LHJ95, LH96] sont remarquables. <p> La relation entre le style monadique et les continuations composables a aussi ete reconnue par Wadler <ref> [Wad94] </ref> et Kieburtz, Agapiev & Hook [KAH92]. <p> Il est donc possible d'implanter la programmation monadique dans un langage du premier ordre. Dans un article recent de Wadler [Wad95], une premiere implantation du premier ordre est esquissee. De plus, il est montre que, par nature, la monade est limitee theoriquement [RB85] et pratiquement <ref> [Wad94] </ref> a un certain pouvoir d'expression. 6 MISE EN PERSPECTIVE 34 -calculs (direct, par valeur et par nom) vers le meta-langage de Moggi correspondent exactement a trois transformations de la logique intuition-niste vers la logique lineaire intuitionniste de Girard [Gir87].
Reference: [Wad95] <author> Wadler (Philip). </author> <title> How to declare an imperative. </title> <booktitle> In : ILPS'95 : International Logic Programming Symposium, </booktitle> <editor> ed. par Lloyd (John). </editor> - <publisher> MIT Press. </publisher>
Reference-contexts: Pour une introduction aux 7 Cette conjecture dit que toute structure de controle peut ^etre modelisee par une monade. 8 Traduction libre de "internally", venant d'un article de Wadler <ref> [Wad95] </ref>. 3 PROGRAMMATION MONADIQUE 16 monades dans leur contexte theorique, le lecteur peut consulter l'article de Hill & Clark [HC94] ou encore le cours de Moggi [Mog89a]. <p> L'aspect horizontal des monades a ete exploite pour l'implantation du compilateur Glasgow Haskell 3 PROGRAMMATION MONADIQUE 23 [Jon96], pour l'implantation d'etat modifiable ("updatable state") [Wad90], pour les entrees/sorties [PJW93], l'interaction <ref> [Wad95] </ref>, l'analyse semantique [HM96], la substitution [BH94], l'impression de bonnes qualites ("pretty printing") [Hug95], la reflexion [MF96] et bien d'autres. <p> Enfin, Benton & Wadler [BW96] montrent que les transformations des 17 Cette notation met en evidence le fait que la monade est reconnue par plusieurs comme une construction du premier ordre et non pas d'ordre superieur comme cela semble ^etre sous-entendu dans sa definition [Mog89b] <ref> [Wad95] </ref>. Il est donc possible d'implanter la programmation monadique dans un langage du premier ordre. Dans un article recent de Wadler [Wad95], une premiere implantation du premier ordre est esquissee. <p> le fait que la monade est reconnue par plusieurs comme une construction du premier ordre et non pas d'ordre superieur comme cela semble ^etre sous-entendu dans sa definition [Mog89b] <ref> [Wad95] </ref>. Il est donc possible d'implanter la programmation monadique dans un langage du premier ordre. Dans un article recent de Wadler [Wad95], une premiere implantation du premier ordre est esquissee.
Reference: [Wad92] <author> Wadler (Philip). </author> - <title> Monads for functional programming. </title> <booktitle> Lecture notes for Marktoberdorf Summer School on Program Design Calculi, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Ao~ut 92. </address>
Reference-contexts: Par contre, sorti de son contexte, le concept de mo-nade est ampute de toute sa richesse et de son importance theorique. Pour certains, il peut m^eme para^itre simpliste et insignifiant. Pour une bonne introduction a la programmation monadique, il faut consulter les articles de Wadler <ref> [Wad92] </ref> et de Hutton & Meijer [HM96]. <p> Dans ce cas, ces equations sont exactement celle de la theorie des liste de Bird [Bir87]. Nous nommerons la monade liste M l = (fl; map l ; unit l ; join l ) ou M = fl, le constructeur de liste. Deux ans plus tard, Wadler <ref> [Wad92] </ref> adopte la definition plus appropriee suivante. Celle-ci est plus courte, mais beaucoup moins conforme a la notion de monade categorique. En fait, elle se rapproche plus de la notion de triplet de Kleisli (voir l'annexe C pour les details categoriques). 3.2 Definition. <p> Par la suite, il y a eu plusieurs re-cherches pour formaliser l'informatique en theorie des categories, comme la theorie du -calcul [Has95], la semantique denotationnelle [Mog89b, Mog91] et la specification algebrique [GB84a, GB84b, TBG91], mais aussi dans les aspects pratiques de l'informatique comme la conception de langages <ref> [Wad92] </ref>, les techniques d'implementation [CCM85] [JHHP93], la derivation de programmes [Spi93] et d'autres.
Reference: [Wat95] <author> Watanabe (Takuo). </author> <title> Towards a foundation of computational reflection based on abstract rewriting. </title> <booktitle> In : IMSA'95. Information-Technology Promotion Agency, </booktitle> <pages> pp. 143-145. </pages> <address> Japan, </address> <year> 1995. </year>
Reference-contexts: Cela fait suite, entre autres, a un article de Goguen & 2 R EFLEXION 12 Meseguer [GM87] dans lequel ils unifient differents paradigmes de program-mation a l'aide d'une base logique. Les travaux de Watanabe <ref> [Wat95] </ref> ont aussi mis en evidence encore d'autres resultats interessants montrant que la reflexion et les systemes de reecriture font bon menage. Nous allons, dans cette section, expliquer brievement le modele reflexif base sur le systeme de reecriture de Malenfant, Dony & Cointe [MDC92, MDC96].
Reference: [WF88] <author> Wand (M.) et Friedman (D. P.). </author> <title> The Mystery of the Tower Revealed : A Nonreflective Description of the Reflective Tower. </title> <journal> Lisp and Symbolic Computation, </journal> <volume> vol. </volume> <pages> 1, </pages> <note> nN o 1, </note> <year> 1988, </year> <pages> pp. 11-37. </pages>
Reference-contexts: Seul l'etat de calcul au dessus de la pile est actif a tout moment (contrairement a la tour reflexive ou tous les niveaux sont actifs en m^eme temps). Pour illustrer leur modele, ils ont developpe un langage fonctionnel reflexif appele Brown <ref> [WF88] </ref>. Leurs travaux sont bases sur une decomposition de la reflexion en deux actions distinctes : reification et reflexion. La reification est l'action de passer les structures reifiees de l'interprete d'evaluation au niveau du programme. <p> Il est probable que de nouvelles techniques de raisonnement se manifestent si nous adoptons une approche algebrique (serie d'equations decrivant le rapport entre les operateurs de reflexion et les aspects non-reflexifs du langage). Cette ap-proche avait deja ete reconnue informellement par Smith lui-m^eme [Smi84]. Wand & Friedman <ref> [WF88] </ref> avait ensuite parle de l'algebre des operateurs de la reflexion. Danvy & Malmkjaer ont tente, par la suite, de caracteriser cette algebre par une approche denotationnelle [DM88]. Comme nous l'avons montre, Mendhekar & Friedman tentent eux aussi de la definir, mais cette fois-ci par une approche logique et monadique.
References-found: 100

