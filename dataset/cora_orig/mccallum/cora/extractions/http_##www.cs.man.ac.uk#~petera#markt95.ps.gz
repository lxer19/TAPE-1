URL: http://www.cs.man.ac.uk/~petera/markt95.ps.gz
Refering-URL: http://www.cs.man.ac.uk/~petera/
Root-URL: http://www.cs.man.ac.uk
Title: Lectures on Semantics: The initial algebra and final coalgebra perspectives  
Author: Peter Aczel 
Keyword: semantics, formal language, category theory, category, functor, initial algebra, final coalgebra, operational semantics, CCS  
Address: Manchester, M13 9PL, UK  
Affiliation: Departments of Mathematics and Computer Science Manchester University,  
Abstract: These lectures give a non-standard introduction, for computer science students, to the mathematical semantics of formal languages. We do not attempt to give a balanced treatment, but instead focus on some key general ideas, illustrated with simple examples. The ideas are formulated using some elementary category theoretic notions. All the required category theory is introduced in the lectures. In addition to the familiar initial algebra approach to syntax and semantics we examine the less familiar final coalgebra approach to operational semantics. Our treatment of formal semantics is intended to complement a more standard introduction. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Aczel, P.: </author> <title> Non-Well-Founded Sets. </title> <booktitle> CSLI Lecture Notes, Number 14, </booktitle> <address> Stanford University 1988. </address>
Reference-contexts: But the proof of the result is NOT at all dual. Theorem: 3.8 (Final Coalgebra Theorem) Every bounded standard functor has a final coalgebra. The final coalgebra theorem will not be proved here, even in the finitary case. Ideas for a proof may be found in <ref> [1] </ref>, [2] and [4], the first two references taking a somewhat set-theoretical approach while the last reference uses more advanced category theory ideas than are covered here. Instead here we will give final coalgebras for the four example finitary functors that we have been using. <p> The construction of a `final coalgebra' would give a proper class of elements. The approach taken in <ref> [2, 1, 3] </ref> is to work with an extension of the endo functor to the category of classes and use the class version of the Final Coalgebra Theorem. Here we shall instead reformulate F by imposing a cardinality bound that constrains the amount of non-determinacy we allow. <p> In the fourth lecture there is a very brief look at CCS. There is now a voluminous literature on CCS and other approaches to process algebra and concurrency. The original book on CCS is [6]. The final universe approach to CCS described here was first presented in <ref> [1] </ref> and developed further in [3]. Final coalgebra theorems appear in [1, 2, 3]. <p> There is now a voluminous literature on CCS and other approaches to process algebra and concurrency. The original book on CCS is [6]. The final universe approach to CCS described here was first presented in [1] and developed further in [3]. Final coalgebra theorems appear in <ref> [1, 2, 3] </ref>.
Reference: [2] <author> Aczel, P., Mendler, P.: </author> <title> A Final Coalgebra Theorem. </title> <booktitle> in: Proceedings of the 1989 Summer Conference on Category Theory and Computer Science, Springer Lecture Notes in Computer Science vol.389, </booktitle> <month> September, </month> <year> 1989, </year> <pages> pp. 357-365. </pages>
Reference-contexts: But the proof of the result is NOT at all dual. Theorem: 3.8 (Final Coalgebra Theorem) Every bounded standard functor has a final coalgebra. The final coalgebra theorem will not be proved here, even in the finitary case. Ideas for a proof may be found in [1], <ref> [2] </ref> and [4], the first two references taking a somewhat set-theoretical approach while the last reference uses more advanced category theory ideas than are covered here. Instead here we will give final coalgebras for the four example finitary functors that we have been using. <p> The construction of a `final coalgebra' would give a proper class of elements. The approach taken in <ref> [2, 1, 3] </ref> is to work with an extension of the endo functor to the category of classes and use the class version of the Final Coalgebra Theorem. Here we shall instead reformulate F by imposing a cardinality bound that constrains the amount of non-determinacy we allow. <p> There is now a voluminous literature on CCS and other approaches to process algebra and concurrency. The original book on CCS is [6]. The final universe approach to CCS described here was first presented in [1] and developed further in [3]. Final coalgebra theorems appear in <ref> [1, 2, 3] </ref>.
Reference: [3] <author> Aczel, P.: </author> <booktitle> Final Universes of Processes. Springer Lecture Notes in Computer Science, </booktitle> <volume> Vol. 802, </volume> <booktitle> 9th MFPS Conference proceedings, edited by S. </booktitle> <institution> Brookes et al, </institution> <note> 1994 pp 1-28. </note>
Reference-contexts: The construction of a `final coalgebra' would give a proper class of elements. The approach taken in <ref> [2, 1, 3] </ref> is to work with an extension of the endo functor to the category of classes and use the class version of the Final Coalgebra Theorem. Here we shall instead reformulate F by imposing a cardinality bound that constrains the amount of non-determinacy we allow. <p> For each e 2 E let (e) = f (; e 0 ) j e ! e 0 g: Exercise 4.10 Show that (e) is always a small set. 3 See <ref> [3] </ref> for a way to make this precise Strong Bisimulation: The transition relations on E give us the compu-tation steps for a notion of computation where the states of the computation are the agents in E. <p> There is now a voluminous literature on CCS and other approaches to process algebra and concurrency. The original book on CCS is [6]. The final universe approach to CCS described here was first presented in [1] and developed further in <ref> [3] </ref>. Final coalgebra theorems appear in [1, 2, 3]. <p> There is now a voluminous literature on CCS and other approaches to process algebra and concurrency. The original book on CCS is [6]. The final universe approach to CCS described here was first presented in [1] and developed further in [3]. Final coalgebra theorems appear in <ref> [1, 2, 3] </ref>.
Reference: [4] <author> Barr, M., Wells, C.: </author> <title> Category Theory for Computing Science. </title> <publisher> Prentice Hall, </publisher> <year> 1990, </year> <note> 2nd edition 1995. </note>
Reference-contexts: But the proof of the result is NOT at all dual. Theorem: 3.8 (Final Coalgebra Theorem) Every bounded standard functor has a final coalgebra. The final coalgebra theorem will not be proved here, even in the finitary case. Ideas for a proof may be found in [1], [2] and <ref> [4] </ref>, the first two references taking a somewhat set-theoretical approach while the last reference uses more advanced category theory ideas than are covered here. Instead here we will give final coalgebras for the four example finitary functors that we have been using. <p> In fact this construction can be taken to be the prototype for the general construction of a final coalgebra for a bounded standard endo functor needed to prove the Final Coalgebra Theorem. Further Reading The book <ref> [4] </ref> is a useful introduction to category theory . The first 59 pages cover the category theory needed in these lectures. The book [5] is one of several that will give a good general introduction to the topic of the semantics of programming languages.
Reference: [5] <author> Winskell, G.: </author> <title> The Formal Semantics of Programming Languages. </title> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: Further Reading The book [4] is a useful introduction to category theory . The first 59 pages cover the category theory needed in these lectures. The book <ref> [5] </ref> is one of several that will give a good general introduction to the topic of the semantics of programming languages. In the fourth lecture there is a very brief look at CCS. There is now a voluminous literature on CCS and other approaches to process algebra and concurrency.
Reference: [6] <author> Milner, R.: </author> <title> Communication and Concurrency. </title> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference-contexts: In the fourth lecture there is a very brief look at CCS. There is now a voluminous literature on CCS and other approaches to process algebra and concurrency. The original book on CCS is <ref> [6] </ref>. The final universe approach to CCS described here was first presented in [1] and developed further in [3]. Final coalgebra theorems appear in [1, 2, 3].
References-found: 6

