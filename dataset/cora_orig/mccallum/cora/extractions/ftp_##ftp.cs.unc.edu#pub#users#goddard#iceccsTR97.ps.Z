URL: ftp://ftp.cs.unc.edu/pub/users/goddard/iceccsTR97.ps.Z
Refering-URL: http://www.cs.unc.edu/~goddard/DissertationSummary.html
Root-URL: http://www.cs.unc.edu
Email: Email: sanjoy@cs.uvm.edu  Email: fgoddard,jeffayg@cs.unc.edu  
Title: Feasibility concerns in PGM graphs with bounded buffers  
Author: Sanjoy Baruah Steve Goddard Kevin Jeffay 
Keyword: Data-flow, real-time, scheduling theory, embedded systems, software architecture.  
Note: In submission  
Address: Votey 351/ Burlington, VT 05405.  Chapel Hill, NC 27599-3175.  
Affiliation: University of Vermont/ Department of Computer Science,  Department of Computer Science/ University of North Carolina/  
Date: March 1997  
Abstract: The Processing Graph Method (PGM) | a dataflow model widely used in the design and analysis of embedded signal-processing applications | is studied from a real-time scheduling perspective. It is shown that the problem of deciding if instances of the general model are feasible on a single processor is intractable (co-NP-complete in the strong sense); however, a useful special case is sometimes more tractable. An efficient feasibility test and an optimal preemptive scheduling algorithm are derived for this special case, and a procedure is presented which permits system architects to make efficient use of computational resources and memory requirements for buffers while constructing real-time dataflow applications that offer hard service guarantees. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Leung and M. Merrill. </author> <title> A note on the preemptive scheduling of periodic, real-time tasks. </title> <journal> Information Processing Letters, </journal> <volume> 11 </volume> <pages> 115-118, </pages> <year> 1980. </year>
Reference-contexts: Each source node is indicated by a double incoming arrow which is labelled by the source node's period, in parentheses.) Proof: The proof is by reduction from the Simultaneous Congruences Problem (SCP). This problem was introduced by Leung and Merrill <ref> [1] </ref>, and shown to be NP-hard. Subsequently, it was proven [3] that the problem is NP-hard in the strong sense.
Reference: [2] <author> Buck, J., Ha, S., Lee, E.A., Messerschmitt, D.G., "Ptolemy: </author> <title> A Framework For Simulating and Prototyping Heterogeneous Systems", </title> <journal> International Journal of computer Simulation, special issue on Simulation Software Development , Vol. </journal> <volume> 4, </volume> <year> 1994. </year>
Reference: [3] <author> S. Baruah, R. Howell, and L. Rosier. </author> <title> Feasibility problems for recurring tasks on one processor. </title> <journal> Theoretical Computer Science, </journal> <volume> 118 </volume> <pages> 3-20, </pages> <year> 1993. </year>
Reference-contexts: This problem was introduced by Leung and Merrill [1], and shown to be NP-hard. Subsequently, it was proven <ref> [3] </ref> that the problem is NP-hard in the strong sense. The Simultaneous Congruences Problem is defined as follows: Given n ordered pairs of positive integers (a 1 ; b 1 ), (a 2 ; b 2 ), : : : , (a n ; b n ).
Reference: [4] <author> Goddard, S., Jeffay, K. </author> <title> "Analyzing the Real-Time Properties of a Dataflow Execution Paradigm using a Synthetic Aperture Radar Application", </title> <month> January </month> <year> 1997, </year> <note> in submission to RTAS '97. </note>
Reference-contexts: Navy systems including airborne, surface, and sub-surface platforms. Millions of dollars have been invested in developing the AN/UYS-2A and applications for it, yet the U.S. Navy has no way to guarantee that the hard real-time processing requirements of these ASW applications can be met. Prior to <ref> [4] </ref>, none of the dataflow models or real-time execution paradigms documented in the research literature were able to correctly model the execution of PGM applications. In [4], we identified inherent real-time properties of nodes in a PGM dataflow graph, and demonstrated how these properties can be exploited to perform useful and <p> Navy has no way to guarantee that the hard real-time processing requirements of these ASW applications can be met. Prior to <ref> [4] </ref>, none of the dataflow models or real-time execution paradigms documented in the research literature were able to correctly model the execution of PGM applications. In [4], we identified inherent real-time properties of nodes in a PGM dataflow graph, and demonstrated how these properties can be exploited to perform useful and important system-level 1 analyses such as schedulability anaysis, end-to-end latency analysis, and memory require-ments analysis in single processor systems. A primary focus in [4] was to <p> In <ref> [4] </ref>, we identified inherent real-time properties of nodes in a PGM dataflow graph, and demonstrated how these properties can be exploited to perform useful and important system-level 1 analyses such as schedulability anaysis, end-to-end latency analysis, and memory require-ments analysis in single processor systems. A primary focus in [4] was to bound latency and buffer requirements of a graph by assigning response times (relative deadlines) to nodes based on latency constraints and then bounding buffer requirements of the graph. We explore the complement of that problem in this paper. <p> time available over [0; t] is t units, we obtain the desired condition. 5.2 An optimal scheduling algorithm Let fi i denote the number of tokens initially in the buffer at node N i , at time t = 0. 2 For a more precise treatment of execution rates, see <ref> [4] </ref>. 8 Definition 1 (Deadlines) For each k 2 N and for each node N i , we define a deadline (N i ; k) that denotes the latest time at which node N i must complete execution for the k'th time, if buffer overflow is not to occur. <p> In conjunction with the results in <ref> [4] </ref>, the research presented here represents a comprehensive scheduling-theoretic analysis of a popular software engineering methodology; it is hoped that this analysis will (i) be useful to the system architect by extending this methodology for use in constructing systems with hard-real-time guarantees, and (ii) serve as a concrete "proof-of-concept" example to
Reference: [5] <author> Lee, E.A., Messerschmitt, D.G., </author> <title> "Static Scheduling of Synchronous Data Flow Programs for Digital Signal Processing", </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol. C-36, No. 1, </volume> <month> Jan-uary </month> <year> 1987, </year> <pages> pp. 24-35. </pages>
Reference-contexts: 1 Introduction Signal processing algorithms are often defined in the literature using large grain dataflow graphs <ref> [5] </ref>: directed graphs in which a node is a sequential program that executes from start to finish in isolation (i.e., without synchronization), and the graph edges depict the flow of data from one node to the next. Thus, an edge represents a producer/consumer relationship between two nodes.
Reference: [6] <editor> Processing Graph Method Specification, </editor> <title> prepared by the Naval Research Laboratory for use by the Navy Standard Signal Processing Program Office (PMS-412), </title> <note> Version 1.0, </note> <month> December </month> <year> 1987. </year>
Reference-contexts: Even the U.S. Navy's own dataflow methodology, Processing Graph Method (PGM) <ref> [6] </ref>, lacks real-time analysis techniques to support making cost tradeoffs or to verify schedulability requirements. PGM is a U.S. Navy standard for developing real-time, embedded, anti-submarine warfare (ASW) applications for the AN/UYS-2A (the U.S. Navy's standard signal processor). The AN/UYS-2A is used in a number of U.S. <p> We conclude in Section 6 with a summary of the major ideas presented herein. 2 PGM dataflow graphs This section provides a formal description of the specification of a PGM dataflow graph we require to perform our analysis. See <ref> [6] </ref> for the actual PGM specification.
Reference: [7] <author> Zuerndorfer, B., Shaw, </author> <title> G.A., "SAR Processing for RASSP Application", </title> <booktitle> Proceedings of 1 st Annual RASSP Conference, </booktitle> <address> Arlington, VA, </address> <month> August 15-18, </month> <year> 1994. </year> <month> 13 </month>
Reference-contexts: The only essential properties of the SAR graph are those that influence node execution (i.e., the produce, consume, and threshold values for each node). For a more detailed description of the processing performed by the SAR benchmark, see <ref> [7] </ref>. The top row of nodes in the SAR graph each operate on one pulse of data at a time. The pulse delivered by the external source, labeledYRange, has already been converted to complex-valued data and consists of 118 range gate samples.
References-found: 7

