URL: http://www-cad.eecs.berkeley.edu:80/Respep/Research/seminar/cad-seminar/fall97/papers/iyer-paper1.ps
Refering-URL: http://www-cad.eecs.berkeley.edu:80/Respep/Research/seminar/cad-seminar/fall97/abstract/iyer.html
Root-URL: 
Title: Identifying Sequential Redundancies Without Search  
Author: Mahesh A. Iyer David E. Long and Miron Abramovici 
Address: Mountain View, CA 94043.  Murray Hill, NJ 07974.  
Affiliation: Synopsys, Inc.,  Lucent Technologies Bell Labs.,  
Abstract: Previous solutions to the difficult problem of identifying sequential redundancy are either based on incorrect theoretical results, or rely on unrealistic simplifying assumptions, or are applicable only to small circuits. In this paper, we show the limitations of the existing definitions of sequential redundancy and introduce a new concept of c-cycle redundancy as a generalization of the conventional notion of sequential redundancy. We present an efficient algorithm, FIRES, to identify c-cycle redundancies without search. FIRES does not assume the existence of a global reset nor does it require any state transition information. FIRES has provably polynomial-time complexity and is practical for large circuits. Experimental results on benchmark circuits indicate that FIRES identifies a large number of redundancies. We show that, in general, the redundant faults identified by FIRES are not easy targets for state-of-the-art sequential test generators. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Abramovici and M. A. Breuer, </author> <title> ``On Redundancy and Fault Detection in Sequential Circuits,'' </title> <journal> IEEE Trans. on Computers, </journal> <volume> vol. C-28, </volume> <pages> pp. 864-865, </pages> <month> Nov. </month> <year> 1979. </year>
Reference-contexts: Redundancy identification (RID) is very useful in synthesis, since every redundant fault defines a region that can be eliminated from the circuit. In a combinational circuit, an untestable stuck-at fault is always caused by a redundancy. In a sequential circuit, however, untestability and redundancy are not equivalent concepts <ref> [1] </ref> . Any practical state-of-the-art sequential test generator cannot distinguish between untestable and redundant faults. The presence of untestable and redundant faults complicates automatic test generation (ATG). In addition to complicating ATG, redundancies have many other detrimental effects.
Reference: [2] <author> A. D. Friedman, </author> <title> ``Fault Detection in Redundant Circuits,'' </title> <journal> IEEE Tr ans. on Electronic Computers, </journal> <volume> vol. EC-16, </volume> <pages> pp. 99-100, </pages> <month> Feb. </month> <year> 1967. </year>
Reference-contexts: The presence of untestable and redundant faults complicates automatic test generation (ATG). In addition to complicating ATG, redundancies have many other detrimental effects. The presence of a redundant fault may preclude the detection of other faults in the circuit <ref> [2] </ref> . Redundancies increase the chip area, the power consumption, and often the propagation delays in the circuit. Redundancies may unnecessarily reduce the yield of the IC manufacturing process [3] .
Reference: [3] <author> S. Davidson, </author> <title> ``Is I DDQ Yield Loss Inevitable ?'' Proc. </title> <booktitle> Intn'l. Test Conf., </booktitle> <pages> pp. 572-579, </pages> <month> Oct. </month> <year> 1994. </year>
Reference-contexts: The presence of a redundant fault may preclude the detection of other faults in the circuit [2] . Redundancies increase the chip area, the power consumption, and often the propagation delays in the circuit. Redundancies may unnecessarily reduce the yield of the IC manufacturing process <ref> [3] </ref> . Many sequentially redundant faults become detectable with full-scan testing, and many sequentially and combinationally redundant faults become detectable with I DDQ testing.
Reference: [4] <author> K. T. Cheng, </author> <title> ``On Removing Redundancy in Sequential Circuits,'' </title> <booktitle> Proc. 28th. Design Automation Conf., </booktitle> <pages> pp. 164-169, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: Although the circuit remains fully operational in the presence of a redundant fault, full-scan testing or I DDQ testing will reject that faulty circuit and result in a yield loss. Most of the previous work on the identification of sequentially untestable and redundant faults <ref> [4] </ref> [5] [6] [7] [8] [9] [10] [11] [12] [13] is based on ATG. Cheng proposed a procedure for identifying and removing a subset of sequential redundancies (called feedback-free sequential redundancies) [4] [5] [6] . <p> Most of the previous work on the identification of sequentially untestable and redundant faults <ref> [4] </ref> [5] [6] [7] [8] [9] [10] [11] [12] [13] is based on ATG. Cheng proposed a procedure for identifying and removing a subset of sequential redundancies (called feedback-free sequential redundancies) [4] [5] [6] . The method relies on converting a sequential circuit into a feedback-free model and uses a modified sequential test generator to identify sequentially untestable and redundant faults [4] [6] . The procedure used to verify whether an untestable fault is indeed redundant was highly complex. <p> Cheng proposed a procedure for identifying and removing a subset of sequential redundancies (called feedback-free sequential redundancies) <ref> [4] </ref> [5] [6] . The method relies on converting a sequential circuit into a feedback-free model and uses a modified sequential test generator to identify sequentially untestable and redundant faults [4] [6] . The procedure used to verify whether an untestable fault is indeed redundant was highly complex. Later, special classes of untestable faults that are guaranteed to be redundant were identified [5] [6] . <p> The distribution of the number of c-cycle redundancies found for different values of c varies widely from circuit to circuit and can be found in [14] . Unfortunately, we cannot make a fair comparison of our results with any of the previously published ones. The results of <ref> [4] </ref> [5] [6] [7] [11] are for redundancy removal, those of [5] [6] [12] [13] are based on incorrect theoretical results, those of [7] are not relevant for the original benchmark circuits without a global reset, those of [8] [9] are only for untestability, those of [16] deal with a restricted
Reference: [5] <author> K. T. Cheng, </author> <title> ``An ATPG-Based Approach to Sequential Logic Optimization,'' </title> <booktitle> Proc. Intn'l. Conf. on CAD, </booktitle> <pages> pp. 372-375, </pages> <year> 1991. </year>
Reference-contexts: Although the circuit remains fully operational in the presence of a redundant fault, full-scan testing or I DDQ testing will reject that faulty circuit and result in a yield loss. Most of the previous work on the identification of sequentially untestable and redundant faults [4] <ref> [5] </ref> [6] [7] [8] [9] [10] [11] [12] [13] is based on ATG. Cheng proposed a procedure for identifying and removing a subset of sequential redundancies (called feedback-free sequential redundancies) [4] [5] [6] . <p> Most of the previous work on the identification of sequentially untestable and redundant faults [4] <ref> [5] </ref> [6] [7] [8] [9] [10] [11] [12] [13] is based on ATG. Cheng proposed a procedure for identifying and removing a subset of sequential redundancies (called feedback-free sequential redundancies) [4] [5] [6] . The method relies on converting a sequential circuit into a feedback-free model and uses a modified sequential test generator to identify sequentially untestable and redundant faults [4] [6] . The procedure used to verify whether an untestable fault is indeed redundant was highly complex. <p> The procedure used to verify whether an untestable fault is indeed redundant was highly complex. Later, special classes of untestable faults that are guaranteed to be redundant were identified <ref> [5] </ref> [6] . It was shown that in a balanced pipeline circuit, ev ery untestable fault is redundant, and that in a general sequential circuit, unactivatable and unpropagatable faults are redundant [5] [6] . Special procedures were devised to identify these subsets of redundant faults. <p> Later, special classes of untestable faults that are guaranteed to be redundant were identified <ref> [5] </ref> [6] . It was shown that in a balanced pipeline circuit, ev ery untestable fault is redundant, and that in a general sequential circuit, unactivatable and unpropagatable faults are redundant [5] [6] . Special procedures were devised to identify these subsets of redundant faults. Recently, it has been shown that the particular solutions proposed in [5] [6] are incorrect [14] [15] . Sequential RID based on implicit state enumeration was proposed in [7] . <p> that in a balanced pipeline circuit, ev ery untestable fault is redundant, and that in a general sequential circuit, unactivatable and unpropagatable faults are redundant <ref> [5] </ref> [6] . Special procedures were devised to identify these subsets of redundant faults. Recently, it has been shown that the particular solutions proposed in [5] [6] are incorrect [14] [15] . Sequential RID based on implicit state enumeration was proposed in [7] . This method uses ATG and relies on the simplifying assumption that the circuit has a fault-free global reset. <p> The distribution of the number of c-cycle redundancies found for different values of c varies widely from circuit to circuit and can be found in [14] . Unfortunately, we cannot make a fair comparison of our results with any of the previously published ones. The results of [4] <ref> [5] </ref> [6] [7] [11] are for redundancy removal, those of [5] [6] [12] [13] are based on incorrect theoretical results, those of [7] are not relevant for the original benchmark circuits without a global reset, those of [8] [9] are only for untestability, those of [16] deal with a restricted definition <p> Unfortunately, we cannot make a fair comparison of our results with any of the previously published ones. The results of [4] <ref> [5] </ref> [6] [7] [11] are for redundancy removal, those of [5] [6] [12] [13] are based on incorrect theoretical results, those of [7] are not relevant for the original benchmark circuits without a global reset, those of [8] [9] are only for untestability, those of [16] deal with a restricted definition of redundancy, those of [21] are for sequential optimization and
Reference: [6] <author> K. T. Cheng, </author> <title> ``Redundancy Removal for Sequential Circuits Without Reset States,'' </title> <journal> IEEE Trans. on CAD, </journal> <volume> vol. 12, no. 1, </volume> <pages> pp. 13-24, </pages> <month> Jan. </month> <year> 1993. </year>
Reference-contexts: Although the circuit remains fully operational in the presence of a redundant fault, full-scan testing or I DDQ testing will reject that faulty circuit and result in a yield loss. Most of the previous work on the identification of sequentially untestable and redundant faults [4] [5] <ref> [6] </ref> [7] [8] [9] [10] [11] [12] [13] is based on ATG. Cheng proposed a procedure for identifying and removing a subset of sequential redundancies (called feedback-free sequential redundancies) [4] [5] [6] . <p> Most of the previous work on the identification of sequentially untestable and redundant faults [4] [5] <ref> [6] </ref> [7] [8] [9] [10] [11] [12] [13] is based on ATG. Cheng proposed a procedure for identifying and removing a subset of sequential redundancies (called feedback-free sequential redundancies) [4] [5] [6] . The method relies on converting a sequential circuit into a feedback-free model and uses a modified sequential test generator to identify sequentially untestable and redundant faults [4] [6] . The procedure used to verify whether an untestable fault is indeed redundant was highly complex. <p> Cheng proposed a procedure for identifying and removing a subset of sequential redundancies (called feedback-free sequential redundancies) [4] [5] <ref> [6] </ref> . The method relies on converting a sequential circuit into a feedback-free model and uses a modified sequential test generator to identify sequentially untestable and redundant faults [4] [6] . The procedure used to verify whether an untestable fault is indeed redundant was highly complex. Later, special classes of untestable faults that are guaranteed to be redundant were identified [5] [6] . <p> a feedback-free model and uses a modified sequential test generator to identify sequentially untestable and redundant faults [4] <ref> [6] </ref> . The procedure used to verify whether an untestable fault is indeed redundant was highly complex. Later, special classes of untestable faults that are guaranteed to be redundant were identified [5] [6] . It was shown that in a balanced pipeline circuit, ev ery untestable fault is redundant, and that in a general sequential circuit, unactivatable and unpropagatable faults are redundant [5] [6] . Special procedures were devised to identify these subsets of redundant faults. <p> Later, special classes of untestable faults that are guaranteed to be redundant were identified [5] <ref> [6] </ref> . It was shown that in a balanced pipeline circuit, ev ery untestable fault is redundant, and that in a general sequential circuit, unactivatable and unpropagatable faults are redundant [5] [6] . Special procedures were devised to identify these subsets of redundant faults. Recently, it has been shown that the particular solutions proposed in [5] [6] are incorrect [14] [15] . Sequential RID based on implicit state enumeration was proposed in [7] . <p> in a balanced pipeline circuit, ev ery untestable fault is redundant, and that in a general sequential circuit, unactivatable and unpropagatable faults are redundant [5] <ref> [6] </ref> . Special procedures were devised to identify these subsets of redundant faults. Recently, it has been shown that the particular solutions proposed in [5] [6] are incorrect [14] [15] . Sequential RID based on implicit state enumeration was proposed in [7] . This method uses ATG and relies on the simplifying assumption that the circuit has a fault-free global reset. <p> The distribution of the number of c-cycle redundancies found for different values of c varies widely from circuit to circuit and can be found in [14] . Unfortunately, we cannot make a fair comparison of our results with any of the previously published ones. The results of [4] [5] <ref> [6] </ref> [7] [11] are for redundancy removal, those of [5] [6] [12] [13] are based on incorrect theoretical results, those of [7] are not relevant for the original benchmark circuits without a global reset, those of [8] [9] are only for untestability, those of [16] deal with a restricted definition of <p> Unfortunately, we cannot make a fair comparison of our results with any of the previously published ones. The results of [4] [5] <ref> [6] </ref> [7] [11] are for redundancy removal, those of [5] [6] [12] [13] are based on incorrect theoretical results, those of [7] are not relevant for the original benchmark circuits without a global reset, those of [8] [9] are only for untestability, those of [16] deal with a restricted definition of redundancy, those of [21] are for sequential optimization and include
Reference: [7] <author> H. Cho, G. D. Hachtel and F. Somenzi, </author> <title> ``Redundancy Identification/Removal and Test Generation for Sequential Circuits Using Implicit State Enumeration,'' </title> <journal> IEEE Trans. on CAD, </journal> <volume> vol. 12, no. 7, </volume> <pages> pp. 935-945, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: Although the circuit remains fully operational in the presence of a redundant fault, full-scan testing or I DDQ testing will reject that faulty circuit and result in a yield loss. Most of the previous work on the identification of sequentially untestable and redundant faults [4] [5] [6] <ref> [7] </ref> [8] [9] [10] [11] [12] [13] is based on ATG. Cheng proposed a procedure for identifying and removing a subset of sequential redundancies (called feedback-free sequential redundancies) [4] [5] [6] . <p> Special procedures were devised to identify these subsets of redundant faults. Recently, it has been shown that the particular solutions proposed in [5] [6] are incorrect [14] [15] . Sequential RID based on implicit state enumeration was proposed in <ref> [7] </ref> . This method uses ATG and relies on the simplifying assumption that the circuit has a fault-free global reset. The approach uses binary decision diagrams (BDDs) as a platform to deal with the reachability information of sequential circuits. <p> We present the sequential FIRE algorithm (FIRES) that identifies c-cycle redundancies without search. Our important result is that a fault which requires a conict as a necessary condition for its detection is c-cycle redundant. We assume that all ip-ops (FFs) are controlled by a single implicit clock. Unlike <ref> [7] </ref> , FIRES can be used for circuits without a global reset. FIRES is a direct method to identify redundancies and can be used efficiently in synthesis to remove sequential redundancies. (None of the currently available synthesis tools have such a feature). <p> Unfortunately, we cannot make a fair comparison of our results with any of the previously published ones. The results of [4] [5] [6] <ref> [7] </ref> [11] are for redundancy removal, those of [5] [6] [12] [13] are based on incorrect theoretical results, those of [7] are not relevant for the original benchmark circuits without a global reset, those of [8] [9] are only for untestability, those of [16] deal with a restricted definition of redundancy, <p> Unfortunately, we cannot make a fair comparison of our results with any of the previously published ones. The results of [4] [5] [6] <ref> [7] </ref> [11] are for redundancy removal, those of [5] [6] [12] [13] are based on incorrect theoretical results, those of [7] are not relevant for the original benchmark circuits without a global reset, those of [8] [9] are only for untestability, those of [16] deal with a restricted definition of redundancy, those of [21] are for sequential optimization and include only the smaller benchmark circuits, and those of [10] and [11]
Reference: [8] <author> V. D. Agrawal and S. T. Chakradhar, </author> <title> ``Combinational ATPG Theorems for Identifying Untestable Faults in Sequential Circuits,'' </title> <booktitle> Proc. European Test Conf., </booktitle> <pages> pp. 249-253, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: Although the circuit remains fully operational in the presence of a redundant fault, full-scan testing or I DDQ testing will reject that faulty circuit and result in a yield loss. Most of the previous work on the identification of sequentially untestable and redundant faults [4] [5] [6] [7] <ref> [8] </ref> [9] [10] [11] [12] [13] is based on ATG. Cheng proposed a procedure for identifying and removing a subset of sequential redundancies (called feedback-free sequential redundancies) [4] [5] [6] . <p> Because of the limitations of BDDs, it cannot handle some large circuits. In addition, the method is not applicable to circuits without a global reset mechanism [14] [15] . The method of Agrawal and Chakradhar <ref> [8] </ref> [9] uses combinational ATG to target certain faults in an iterative array model of finite length derived from a sequential circuit. <p> Pomeranz and Reddy proposed a method to identify sequential redundancy, based on combinational ATG for multiple faults, which is not practical for large circuits [10] . Their method is an extension of the multi-fault theorem for sequential untestability that was presented in <ref> [8] </ref> [9] . More recently, they proposed a method to determine whether a sequentially untestable fault prevents the initialization of the circuit [11] . They argue that faults which do not exhibit this behavior can be considered as redundant. <p> The key advantage is that FIRE accomplishes RID without any search. More recently, we proposed an algorithm to Find UNTESTable faults (FUNTEST) in sequential circuits [19] . FUNTEST extends the concept of [17] [18] to sequential circuits using the single-fault theorem from <ref> [8] </ref> [9] and identifies sequentially untestable faults without search. However, the use of the single-fault theorem to identify sequentially untestable faults precludes identifying redundancy [10] . The FUNI algorithm [20] Finds UNtestable faults without search using Illegal states. FUNI cannot distinguish between untestable and redundant faults. <p> The example also shows that FIRES can find faults that are beyond the scope of the combinational ATG theorems <ref> [8] </ref> [9] ( f 0 , e 1 , d 0 , d 1 , a 0 , and b 0 ). 6. Results We used a prototype implementation of FIRES in C++ to identify redundancies in the ISCAS89 sequential benchmark circuits [26] . <p> The results of [4] [5] [6] [7] [11] are for redundancy removal, those of [5] [6] [12] [13] are based on incorrect theoretical results, those of [7] are not relevant for the original benchmark circuits without a global reset, those of <ref> [8] </ref> [9] are only for untestability, those of [16] deal with a restricted definition of redundancy, those of [21] are for sequential optimization and include only the smaller benchmark circuits, and those of [10] and [11] do not deal with benchmark circuits.
Reference: [9] <author> V. D. Agrawal and S. T. Chakradhar, </author> <title> ``Combinational ATPG Theorems for Identifying Untestable Faults in Sequential Circuits,'' </title> <journal> IEEE Trans. on CAD, </journal> <volume> vol. 14, no. 9, </volume> <pages> pp. 1155-1160, </pages> <month> Sept. </month> <year> 1995. </year>
Reference-contexts: Although the circuit remains fully operational in the presence of a redundant fault, full-scan testing or I DDQ testing will reject that faulty circuit and result in a yield loss. Most of the previous work on the identification of sequentially untestable and redundant faults [4] [5] [6] [7] [8] <ref> [9] </ref> [10] [11] [12] [13] is based on ATG. Cheng proposed a procedure for identifying and removing a subset of sequential redundancies (called feedback-free sequential redundancies) [4] [5] [6] . <p> Because of the limitations of BDDs, it cannot handle some large circuits. In addition, the method is not applicable to circuits without a global reset mechanism [14] [15] . The method of Agrawal and Chakradhar [8] <ref> [9] </ref> uses combinational ATG to target certain faults in an iterative array model of finite length derived from a sequential circuit. <p> Pomeranz and Reddy proposed a method to identify sequential redundancy, based on combinational ATG for multiple faults, which is not practical for large circuits [10] . Their method is an extension of the multi-fault theorem for sequential untestability that was presented in [8] <ref> [9] </ref> . More recently, they proposed a method to determine whether a sequentially untestable fault prevents the initialization of the circuit [11] . They argue that faults which do not exhibit this behavior can be considered as redundant. <p> The key advantage is that FIRE accomplishes RID without any search. More recently, we proposed an algorithm to Find UNTESTable faults (FUNTEST) in sequential circuits [19] . FUNTEST extends the concept of [17] [18] to sequential circuits using the single-fault theorem from [8] <ref> [9] </ref> and identifies sequentially untestable faults without search. However, the use of the single-fault theorem to identify sequentially untestable faults precludes identifying redundancy [10] . The FUNI algorithm [20] Finds UNtestable faults without search using Illegal states. FUNI cannot distinguish between untestable and redundant faults. <p> The example also shows that FIRES can find faults that are beyond the scope of the combinational ATG theorems [8] <ref> [9] </ref> ( f 0 , e 1 , d 0 , d 1 , a 0 , and b 0 ). 6. Results We used a prototype implementation of FIRES in C++ to identify redundancies in the ISCAS89 sequential benchmark circuits [26] . <p> The results of [4] [5] [6] [7] [11] are for redundancy removal, those of [5] [6] [12] [13] are based on incorrect theoretical results, those of [7] are not relevant for the original benchmark circuits without a global reset, those of [8] <ref> [9] </ref> are only for untestability, those of [16] deal with a restricted definition of redundancy, those of [21] are for sequential optimization and include only the smaller benchmark circuits, and those of [10] and [11] do not deal with benchmark circuits.
Reference: [10] <author> I. Pomeranz and S. M. Reddy, </author> <title> ``On Identifying Undetectable and Redundant Faults in Synchronous Sequential Circuits,'' </title> <booktitle> 12th. IEEE VLSI Test Symp., </booktitle> <pages> pp. 8-14, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: Most of the previous work on the identification of sequentially untestable and redundant faults [4] [5] [6] [7] [8] [9] <ref> [10] </ref> [11] [12] [13] is based on ATG. Cheng proposed a procedure for identifying and removing a subset of sequential redundancies (called feedback-free sequential redundancies) [4] [5] [6] . <p> Their method, however, still requires exhaustive search to identify untestability, and it is not applicable to sequential RID. Pomeranz and Reddy proposed a method to identify sequential redundancy, based on combinational ATG for multiple faults, which is not practical for large circuits <ref> [10] </ref> . Their method is an extension of the multi-fault theorem for sequential untestability that was presented in [8] [9] . More recently, they proposed a method to determine whether a sequentially untestable fault prevents the initialization of the circuit [11] . <p> FUNTEST extends the concept of [17] [18] to sequential circuits using the single-fault theorem from [8] [9] and identifies sequentially untestable faults without search. However, the use of the single-fault theorem to identify sequentially untestable faults precludes identifying redundancy <ref> [10] </ref> . The FUNI algorithm [20] Finds UNtestable faults without search using Illegal states. FUNI cannot distinguish between untestable and redundant faults. Main Contributions In this paper, we first discuss the existing definitions of sequential redundancy and show their limitations. <p> those of [7] are not relevant for the original benchmark circuits without a global reset, those of [8] [9] are only for untestability, those of [16] deal with a restricted definition of redundancy, those of [21] are for sequential optimization and include only the smaller benchmark circuits, and those of <ref> [10] </ref> and [11] do not deal with benchmark circuits. A deterministic sequential test generator performing exhaustive search can identify all faults found by FIRES as untestable, if given enough time. However, the test generator cannot identify these faults as redundant.
Reference: [11] <author> I. Pomeranz and S. M. Reddy, </author> <title> ``On Achieving Complete Testability of Synchronous Sequential Circuits with Synchronizing Sequences,'' </title> <booktitle> Proc. Intn'l. Test Conf., </booktitle> <pages> pp. 1007-1016, </pages> <month> Oct. </month> <year> 1994. </year>
Reference-contexts: Most of the previous work on the identification of sequentially untestable and redundant faults [4] [5] [6] [7] [8] [9] [10] <ref> [11] </ref> [12] [13] is based on ATG. Cheng proposed a procedure for identifying and removing a subset of sequential redundancies (called feedback-free sequential redundancies) [4] [5] [6] . <p> Their method is an extension of the multi-fault theorem for sequential untestability that was presented in [8] [9] . More recently, they proposed a method to determine whether a sequentially untestable fault prevents the initialization of the circuit <ref> [11] </ref> . They argue that faults which do not exhibit this behavior can be considered as redundant. The method relies on verifying that the faulty circuit has an initialization sequence and requires knowledge of state transition information; thus this method does not seem practical for large circuits. <p> Both these claims were -- -- shown to be incorrect [14] [15] <ref> [11] </ref> . Formal verification techniques were used for sequential RID by Moondanos and Abraham [16] . Their method uses a restrictive definition of redundancy and relies on verifying that the good and the faulty circuits (for a redundant fault) have equivalent state tables. <p> A circuit with a c-cycle redundant fault can be simplified by removing the redundant region associated with that fault. A c-cycle redundant fault is not the same as an untestable fault that does not prevent initialization <ref> [11] </ref> . Removing a c-cycle redundant fault only requires the application of c arbitrary input vectors before the existing initialization sequence. <p> It can also be shown that c-cycle redundancy also has the nice property of being compositional [14] [15] . (A property of a subcircuit is compositional if that property still holds when the subcircuit is embedded in any larger circuit.) In contrast, with methods such as <ref> [11] </ref> , it is not safe to remove a fault in a subcircuit without first analyzing the full circuit to see whether the whole system will still have a reset sequence. <p> Unfortunately, we cannot make a fair comparison of our results with any of the previously published ones. The results of [4] [5] [6] [7] <ref> [11] </ref> are for redundancy removal, those of [5] [6] [12] [13] are based on incorrect theoretical results, those of [7] are not relevant for the original benchmark circuits without a global reset, those of [8] [9] are only for untestability, those of [16] deal with a restricted definition of redundancy, those <p> [7] are not relevant for the original benchmark circuits without a global reset, those of [8] [9] are only for untestability, those of [16] deal with a restricted definition of redundancy, those of [21] are for sequential optimization and include only the smaller benchmark circuits, and those of [10] and <ref> [11] </ref> do not deal with benchmark circuits. A deterministic sequential test generator performing exhaustive search can identify all faults found by FIRES as untestable, if given enough time. However, the test generator cannot identify these faults as redundant.
Reference: [12] <author> L. A. Entrena and K. T. Cheng, </author> <title> ``Sequential Logic Optimization By Redundancy Addition and Removal,'' </title> <booktitle> Proc. Intn'l. Conf. on CAD, </booktitle> <pages> pp. 310-315, </pages> <month> Nov. </month> <year> 1993. </year>
Reference-contexts: Most of the previous work on the identification of sequentially untestable and redundant faults [4] [5] [6] [7] [8] [9] [10] [11] <ref> [12] </ref> [13] is based on ATG. Cheng proposed a procedure for identifying and removing a subset of sequential redundancies (called feedback-free sequential redundancies) [4] [5] [6] . <p> More importantly, their method assumes that the initialization sequence of the circuit can be altered. From a designer's viewpoint this assumption may be unacceptable, since the reset sequence is considered part of the behavior of the circuit. The sequential optimization method of Entrena and Cheng <ref> [12] </ref> [13] identifies a redundant fault when the mandatory assignments required to detect it cannot be consistently justified. <p> Unfortunately, we cannot make a fair comparison of our results with any of the previously published ones. The results of [4] [5] [6] [7] [11] are for redundancy removal, those of [5] [6] <ref> [12] </ref> [13] are based on incorrect theoretical results, those of [7] are not relevant for the original benchmark circuits without a global reset, those of [8] [9] are only for untestability, those of [16] deal with a restricted definition of redundancy, those of [21] are for sequential optimization and include only
Reference: [13] <author> L. A. Entrena and K. T. Cheng, </author> <title> ``Combinational and Sequential Logic Optimization By Redundancy Addition and Removal,'' </title> <journal> IEEE Trans. on CAD, </journal> <volume> vol. 14, no. 7, </volume> <pages> pp. 909-916, </pages> <month> July </month> <year> 1995. </year>
Reference-contexts: Most of the previous work on the identification of sequentially untestable and redundant faults [4] [5] [6] [7] [8] [9] [10] [11] [12] <ref> [13] </ref> is based on ATG. Cheng proposed a procedure for identifying and removing a subset of sequential redundancies (called feedback-free sequential redundancies) [4] [5] [6] . <p> More importantly, their method assumes that the initialization sequence of the circuit can be altered. From a designer's viewpoint this assumption may be unacceptable, since the reset sequence is considered part of the behavior of the circuit. The sequential optimization method of Entrena and Cheng [12] <ref> [13] </ref> identifies a redundant fault when the mandatory assignments required to detect it cannot be consistently justified. <p> Unfortunately, we cannot make a fair comparison of our results with any of the previously published ones. The results of [4] [5] [6] [7] [11] are for redundancy removal, those of [5] [6] [12] <ref> [13] </ref> are based on incorrect theoretical results, those of [7] are not relevant for the original benchmark circuits without a global reset, those of [8] [9] are only for untestability, those of [16] deal with a restricted definition of redundancy, those of [21] are for sequential optimization and include only the
Reference: [14] <author> M. A. Iyer, </author> <title> ``On Redundancy and Untestability in Sequential Circuits,'' </title> <type> Ph.D. Thesis, </type> <institution> ECE Department, Illinois Institute of Technology, </institution> <address> Chicago, IL - 60616, </address> <month> July </month> <year> 1995. </year>
Reference-contexts: Special procedures were devised to identify these subsets of redundant faults. Recently, it has been shown that the particular solutions proposed in [5] [6] are incorrect <ref> [14] </ref> [15] . Sequential RID based on implicit state enumeration was proposed in [7] . This method uses ATG and relies on the simplifying assumption that the circuit has a fault-free global reset. <p> The approach uses binary decision diagrams (BDDs) as a platform to deal with the reachability information of sequential circuits. Because of the limitations of BDDs, it cannot handle some large circuits. In addition, the method is not applicable to circuits without a global reset mechanism <ref> [14] </ref> [15] . The method of Agrawal and Chakradhar [8] [9] uses combinational ATG to target certain faults in an iterative array model of finite length derived from a sequential circuit. <p> Their analysis is performed only in the fault-free circuit and they claim a fault as redundant if the mandatory assignments to detect it end up with conicts or if the state justification procedure starts looping over previously unjustified states. Both these claims were -- -- shown to be incorrect <ref> [14] </ref> [15] [11] . Formal verification techniques were used for sequential RID by Moondanos and Abraham [16] . Their method uses a restrictive definition of redundancy and relies on verifying that the good and the faulty circuits (for a redundant fault) have equivalent state tables. <p> Section 4 establishes the theoretical framework for the FIRES algorithm and Section 5 presents the algorithm. Section 6 presents our experimental results and Section 7 concludes the paper. 2. The Combinational FIRE Algorithm This section briey reviews the FIRE algorithm for combinational RID [17] [18] <ref> [14] </ref> . For every stem s, FIRE determines the sets of faults S 0 and S 1 , which require, respectively, s = 0 and s = 1 as necessary conditions for their detection. <p> When all fanout branches (FOBs) of a stem s are marked unobservable, FIRE uses special rules to decide whether s should also be marked as unobservable (to avoid marking faults that can be detected using multiple-path sensitization) [17] [18] <ref> [14] </ref> . During its analysis, FIRE identifies as untestable, faults that cannot be activated (s-a-0 on 1 lines and sa-1 on 0 lines) and faults that cannot be propagated (both faults on unobservable lines). 3. Sequential Untestability and Redundancy Redundancy is a property of a circuit. <p> In fact, other sequential optimizations may require the same sort of delay before initialization. For example, in recent work, Singhal et al. [24] have shown that forward retiming [25] has this same property. It can also be shown that c-cycle redundancy also has the nice property of being compositional <ref> [14] </ref> [15] . (A property of a subcircuit is compositional if that property still holds when the subcircuit is embedded in any larger circuit.) In contrast, with methods such as [11] , it is not safe to remove a fault in a subcircuit without first analyzing the full circuit to see <p> We use the following rule to associate a c f with every fault f identified by FIRES. c f = 0, if l i It can be shown that a fault f identified by FIRES is c f -cycle redundant <ref> [14] </ref> . Clocking the faulty circuit c f times ensures that the time frames required for the conict to occur really exist. <p> Our program performs the validation step outlined in Section 5 as an option. It can be shown that all the faults identified by FIRES without the validation step are untestable <ref> [14] </ref> , and those found with the validation step are c-cycle redundant. In general, without validation, FIRES runs faster and finds more faults. Table 2. Results for benchmark circuits FIRES Without FIRES With Validation Validation Circuit # Fr. # CPU # CPU 0-cycle Max. Unt. secs. <p> None of them were 0-cycle and the maximum c was found to be 7. The run with the validation step took about 14 seconds. The distribution of the number of c-cycle redundancies found for different values of c varies widely from circuit to circuit and can be found in <ref> [14] </ref> . Unfortunately, we cannot make a fair comparison of our results with any of the previously published ones.
Reference: [15] <author> M. A. Iyer, D. E. Long, and M. Abramovici, </author> <title> ``Surprises in Sequential Redundancy Identification,'' </title> <booktitle> Proc. European Design and Test Conference, </booktitle> <month> March </month> <year> 1996. </year>
Reference-contexts: Special procedures were devised to identify these subsets of redundant faults. Recently, it has been shown that the particular solutions proposed in [5] [6] are incorrect [14] <ref> [15] </ref> . Sequential RID based on implicit state enumeration was proposed in [7] . This method uses ATG and relies on the simplifying assumption that the circuit has a fault-free global reset. <p> The approach uses binary decision diagrams (BDDs) as a platform to deal with the reachability information of sequential circuits. Because of the limitations of BDDs, it cannot handle some large circuits. In addition, the method is not applicable to circuits without a global reset mechanism [14] <ref> [15] </ref> . The method of Agrawal and Chakradhar [8] [9] uses combinational ATG to target certain faults in an iterative array model of finite length derived from a sequential circuit. <p> Both these claims were -- -- shown to be incorrect [14] <ref> [15] </ref> [11] . Formal verification techniques were used for sequential RID by Moondanos and Abraham [16] . Their method uses a restrictive definition of redundancy and relies on verifying that the good and the faulty circuits (for a redundant fault) have equivalent state tables. <p> It can be shown that the fault in this example remains irredundant under this restricted definition as well <ref> [15] </ref> . 4. c-Cycle Redundancy In this section, we introduce the concept of a c-cycle redundancy, which is a generalization of the conventional notion of sequential redundancy. Consider any arbitrary input sequence I . <p> For example, in recent work, Singhal et al. [24] have shown that forward retiming [25] has this same property. It can also be shown that c-cycle redundancy also has the nice property of being compositional [14] <ref> [15] </ref> . (A property of a subcircuit is compositional if that property still holds when the subcircuit is embedded in any larger circuit.) In contrast, with methods such as [11] , it is not safe to remove a fault in a subcircuit without first analyzing the full circuit to see whether
Reference: [16] <author> J. Moondanos and J. A. Abraham, </author> <title> ``Sequential Redundancy Identification using Verification Techniques,'' </title> <booktitle> Proc. Intn'l. Test Conf., </booktitle> <pages> pp. 197-205, </pages> <month> Sept. </month> <year> 1992. </year>
Reference-contexts: Both these claims were -- -- shown to be incorrect [14] [15] [11] . Formal verification techniques were used for sequential RID by Moondanos and Abraham <ref> [16] </ref> . Their method uses a restrictive definition of redundancy and relies on verifying that the good and the faulty circuits (for a redundant fault) have equivalent state tables. <p> The results of [4] [5] [6] [7] [11] are for redundancy removal, those of [5] [6] [12] [13] are based on incorrect theoretical results, those of [7] are not relevant for the original benchmark circuits without a global reset, those of [8] [9] are only for untestability, those of <ref> [16] </ref> deal with a restricted definition of redundancy, those of [21] are for sequential optimization and include only the smaller benchmark circuits, and those of [10] and [11] do not deal with benchmark circuits.
Reference: [17] <author> M. A. Iyer and M. Abramovici, </author> <title> ``Low-Cost Redundancy Identification for Combinational Circuits,'' </title> <booktitle> Proc. 7th. Intn'l. Conf. on VLSI Design, India, </booktitle> <pages> pp. 315-318, </pages> <month> Jan. </month> <year> 1994. </year>
Reference-contexts: Moreover, their method is not practical for large circuits, because it relies on building the state transition tables for the good and faulty circuits for each modeled fault. In earlier work <ref> [17] </ref> [18] , we proposed a Fault-Independent algorithm for REdundancy identification (FIRE) in combinational circuits. FIRE is radically different from any ATG-based approach for combinational RID, which finds a fault to be redundant when all possible ways to detect that fault end up with conicts. <p> In addition to being untestable, these faults are also redundant. The key advantage is that FIRE accomplishes RID without any search. More recently, we proposed an algorithm to Find UNTESTable faults (FUNTEST) in sequential circuits [19] . FUNTEST extends the concept of <ref> [17] </ref> [18] to sequential circuits using the single-fault theorem from [8] [9] and identifies sequentially untestable faults without search. However, the use of the single-fault theorem to identify sequentially untestable faults precludes identifying redundancy [10] . The FUNI algorithm [20] Finds UNtestable faults without search using Illegal states. <p> Section 4 establishes the theoretical framework for the FIRES algorithm and Section 5 presents the algorithm. Section 6 presents our experimental results and Section 7 concludes the paper. 2. The Combinational FIRE Algorithm This section briey reviews the FIRE algorithm for combinational RID <ref> [17] </ref> [18] [14] . For every stem s, FIRE determines the sets of faults S 0 and S 1 , which require, respectively, s = 0 and s = 1 as necessary conditions for their detection. <p> When all fanout branches (FOBs) of a stem s are marked unobservable, FIRE uses special rules to decide whether s should also be marked as unobservable (to avoid marking faults that can be detected using multiple-path sensitization) <ref> [17] </ref> [18] [14] . During its analysis, FIRE identifies as untestable, faults that cannot be activated (s-a-0 on 1 lines and sa-1 on 0 lines) and faults that cannot be propagated (both faults on unobservable lines). 3. Sequential Untestability and Redundancy Redundancy is a property of a circuit.
Reference: [18] <author> M. A. Iyer and M. Abramovici, </author> <title> ``FIRE: A Fault-Independent Combinational Redundancy Identification Algorithm,'' </title> <journal> IEEE Tr ans. on VLSI Systems, </journal> <note> June 1996 (to appear). </note>
Reference-contexts: Moreover, their method is not practical for large circuits, because it relies on building the state transition tables for the good and faulty circuits for each modeled fault. In earlier work [17] <ref> [18] </ref> , we proposed a Fault-Independent algorithm for REdundancy identification (FIRE) in combinational circuits. FIRE is radically different from any ATG-based approach for combinational RID, which finds a fault to be redundant when all possible ways to detect that fault end up with conicts. <p> In addition to being untestable, these faults are also redundant. The key advantage is that FIRE accomplishes RID without any search. More recently, we proposed an algorithm to Find UNTESTable faults (FUNTEST) in sequential circuits [19] . FUNTEST extends the concept of [17] <ref> [18] </ref> to sequential circuits using the single-fault theorem from [8] [9] and identifies sequentially untestable faults without search. However, the use of the single-fault theorem to identify sequentially untestable faults precludes identifying redundancy [10] . The FUNI algorithm [20] Finds UNtestable faults without search using Illegal states. <p> Section 4 establishes the theoretical framework for the FIRES algorithm and Section 5 presents the algorithm. Section 6 presents our experimental results and Section 7 concludes the paper. 2. The Combinational FIRE Algorithm This section briey reviews the FIRE algorithm for combinational RID [17] <ref> [18] </ref> [14] . For every stem s, FIRE determines the sets of faults S 0 and S 1 , which require, respectively, s = 0 and s = 1 as necessary conditions for their detection. <p> When all fanout branches (FOBs) of a stem s are marked unobservable, FIRE uses special rules to decide whether s should also be marked as unobservable (to avoid marking faults that can be detected using multiple-path sensitization) [17] <ref> [18] </ref> [14] . During its analysis, FIRE identifies as untestable, faults that cannot be activated (s-a-0 on 1 lines and sa-1 on 0 lines) and faults that cannot be propagated (both faults on unobservable lines). 3. Sequential Untestability and Redundancy Redundancy is a property of a circuit.
Reference: [19] <author> M. A. Iyer and M. Abramovici, </author> <title> ``Sequentially Untestable Faults Identified Without Search (Simple Implications Beat Exhaustive Search!),'' </title> <booktitle> Proc. Intn'l. Test Conf., </booktitle> <pages> pp. 259-266, </pages> <month> Oct. </month> <year> 1994. </year>
Reference-contexts: In addition to being untestable, these faults are also redundant. The key advantage is that FIRE accomplishes RID without any search. More recently, we proposed an algorithm to Find UNTESTable faults (FUNTEST) in sequential circuits <ref> [19] </ref> . FUNTEST extends the concept of [17] [18] to sequential circuits using the single-fault theorem from [8] [9] and identifies sequentially untestable faults without search. However, the use of the single-fault theorem to identify sequentially untestable faults precludes identifying redundancy [10] . <p> By the rules of computing c f , all the faults except g 0 are 0-cycle redundant. Fault g 0 is 1-cycle redundant. Among the seven c-cycle redundant faults identified by FIRES in the above example, FUNTEST <ref> [19] </ref> will report only one (g 0 ) as untestable, and FUNI [20] will identify two (g 0 and f 0 ) as untestable by processing the illegal state -g, h- = -1, 0-.
Reference: [20] <author> D. E. Long, M. A. Iyer and M. Abramovici, </author> <title> ``Identifying Sequentially Untestable Faults Using Illegal States,'' </title> <booktitle> 13th. IEEE VLSI Test Symp., </booktitle> <pages> pp. 4-11, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: FUNTEST extends the concept of [17] [18] to sequential circuits using the single-fault theorem from [8] [9] and identifies sequentially untestable faults without search. However, the use of the single-fault theorem to identify sequentially untestable faults precludes identifying redundancy [10] . The FUNI algorithm <ref> [20] </ref> Finds UNtestable faults without search using Illegal states. FUNI cannot distinguish between untestable and redundant faults. Main Contributions In this paper, we first discuss the existing definitions of sequential redundancy and show their limitations. <p> By the rules of computing c f , all the faults except g 0 are 0-cycle redundant. Fault g 0 is 1-cycle redundant. Among the seven c-cycle redundant faults identified by FIRES in the above example, FUNTEST [19] will report only one (g 0 ) as untestable, and FUNI <ref> [20] </ref> will identify two (g 0 and f 0 ) as untestable by processing the illegal state -g, h- = -1, 0-.
Reference: [21] <author> V. Singhal, C. Pixley, A. Aziz and R. K. Brayton, </author> <title> ``Exploiting Power-up Delay for Sequential Optimization,'' </title> <booktitle> Proc. European Design Automation Conf., </booktitle> <pages> pp. 54-59, </pages> <month> Sept. </month> <year> 1995. </year>
Reference-contexts: It can be used as a preprocessor to any ATG program, which can avoid targeting the faults identified as redundant and thus save the large computational effort associated with them. The notion of a c-cycle delayed replacement of a circuit <ref> [21] </ref> is an equivalent concept, in the sense that a c-cycle redundant circuit is a c-cycle delayed replacement of the original circuit. A resynthesis procedure for c-cycle delay replaceability was also proposed in [21] . Their procedure is based on BDDs and allows more exibility during sequential optimization. <p> The notion of a c-cycle delayed replacement of a circuit <ref> [21] </ref> is an equivalent concept, in the sense that a c-cycle redundant circuit is a c-cycle delayed replacement of the original circuit. A resynthesis procedure for c-cycle delay replaceability was also proposed in [21] . Their procedure is based on BDDs and allows more exibility during sequential optimization. The rest of this paper is organized as follows. Section 2 reviews our earlier work on RID for combinational circuits. Section 3 discusses the relation between untestability and redundancy in sequential circuits. <p> for redundancy removal, those of [5] [6] [12] [13] are based on incorrect theoretical results, those of [7] are not relevant for the original benchmark circuits without a global reset, those of [8] [9] are only for untestability, those of [16] deal with a restricted definition of redundancy, those of <ref> [21] </ref> are for sequential optimization and include only the smaller benchmark circuits, and those of [10] and [11] do not deal with benchmark circuits. A deterministic sequential test generator performing exhaustive search can identify all faults found by FIRES as untestable, if given enough time.
Reference: [22] <author> M. Abramovici, J.J. Kulikowski, and R.K. Roy, </author> <title> ``The Best Flip-Flops to Scan,'' </title> <booktitle> Proc. Intn'l. Test Conf., </booktitle> <pages> pp. 166-173, </pages> <month> Oct. </month> <year> 1991. </year>
Reference-contexts: For every stem s, FIRE determines the sets of faults S 0 and S 1 , which require, respectively, s = 0 and s = 1 as necessary conditions for their detection. This is accomplished using an improved version of the uncontrollability and unobservability analysis proposed in <ref> [22] </ref> . In this analysis, 0 (1) denotes the status of a line that is uncontrollable for value 0 (1).
Reference: [23] <author> I. Pomeranz and S. M. Reddy, </author> <title> ``Classification of Faults in Synchronous Sequential Circuits,'' </title> <journal> IEEE Trans. on Computers, </journal> <volume> vol. 42, </volume> <pages> pp. 1066-1077, </pages> <month> Sept. </month> <year> 1993. </year>
Reference-contexts: A fault is redundant, if the behavior of the faulty circuit cannot be distinguished from that of the fault-free circuit. (Relying on three-valued simulation results to verify this fact may lead to erroneous results.) Pomer-anz and Reddy have provided the following definitions <ref> [23] </ref> . <p> an input sequence I such that for ev ery fault-free initial state S, the response of the fault-free circuit to I starting from S, Z (I , S), is different from the response of the faulty circuit starting from S f f f ). (This definition differs from that in <ref> [23] </ref> , in that it includes testable faults. <p> same signal a is fed twice into the same gate d through different FFs. a D Q b b2 D Q c c2 d s a- 1 Another restricted definition of redundancy that uses specific initialization sequences (without imposing any restriction on time of observation) has also been proposed in <ref> [23] </ref> . It can be shown that the fault in this example remains irredundant under this restricted definition as well [15] . 4. c-Cycle Redundancy In this section, we introduce the concept of a c-cycle redundancy, which is a generalization of the conventional notion of sequential redundancy.
Reference: [24] <author> V. Singhal, C. Pixley, R. L. Rudell and R. K. Brayton, </author> <title> ``The Validity of Retiming Sequential Circuits,'' </title> <booktitle> Proc. Design Automation Conf., </booktitle> <pages> pp. 316-321, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: In fact, other sequential optimizations may require the same sort of delay before initialization. For example, in recent work, Singhal et al. <ref> [24] </ref> have shown that forward retiming [25] has this same property.
Reference: [25] <author> C. E. Leiserson and J. B. Saxe, </author> <title> ``Retiming Synchronous Circuitry,'' </title> <journal> Algorithmica, </journal> <volume> vol. 6, </volume> <pages> pp. 5-35, </pages> <year> 1991. </year>
Reference-contexts: In fact, other sequential optimizations may require the same sort of delay before initialization. For example, in recent work, Singhal et al. [24] have shown that forward retiming <ref> [25] </ref> has this same property.
Reference: [26] <author> F. Brglez, D. Bryan, and K. Kozminski, </author> <title> ``Combinational Profiles of Sequential Benchmark Circuits,'' </title> <booktitle> Proc. 1989 Intn'l Symp. on Circuits and Systems, </booktitle> <pages> pp. 1929-1934, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: Results We used a prototype implementation of FIRES in C++ to identify redundancies in the ISCAS89 sequential benchmark circuits <ref> [26] </ref> . Our program performs the validation step outlined in Section 5 as an option. It can be shown that all the faults identified by FIRES without the validation step are untestable [14] , and those found with the validation step are c-cycle redundant.
Reference: [27] <author> T. J. Chakraborty, S. Davidson, and B. Bencivenga, ``GENTEST: </author> <title> The Architecture of Sequential Circuit Test Generator,'' </title> <booktitle> Proc. Custom Integrated Circuits Conf., </booktitle> <month> May </month> <year> 1991. </year>
Reference-contexts: However, the test generator cannot identify these faults as redundant. We now show that state-of-the-art sequential test generators can have difficulty even in proving that the faults found by FIRES are untestable. We used two sequential test generators, GENTEST <ref> [27] </ref> and HITEC [28] . In this experiment, the faults found by FIRES (without validation) were passed as the only targets to the test generators.
Reference: [28] <author> T. Niermann and J. H. Patel, ``HITEC: </author> <title> A Test Generation Package for Sequential Circuits,'' </title> <booktitle> Proc. European Conf. on Design Automation, </booktitle> <pages> pp. 214-218, </pages> <year> 1991. </year>
Reference-contexts: However, the test generator cannot identify these faults as redundant. We now show that state-of-the-art sequential test generators can have difficulty even in proving that the faults found by FIRES are untestable. We used two sequential test generators, GENTEST [27] and HITEC <ref> [28] </ref> . In this experiment, the faults found by FIRES (without validation) were passed as the only targets to the test generators.
References-found: 28

