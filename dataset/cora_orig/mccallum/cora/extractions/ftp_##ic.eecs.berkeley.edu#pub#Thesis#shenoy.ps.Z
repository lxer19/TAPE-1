URL: ftp://ic.eecs.berkeley.edu/pub/Thesis/shenoy.ps.Z
Refering-URL: http://www-cad.eecs.berkeley.edu/Respep/Research/Thesis/thesis.html
Root-URL: http://www.cs.berkeley.edu
Title: TIMING ISSUES IN SEQUENTIAL CIRCUITS  
Author: by Narendra Vasudeva Shenoy 
Degree: Bachelor of Technology (Indian Institute of Technology, Bombay, India) 1988 A dissertation submitted in partial satisfaction of the requirements for the degree of Doctor of Philosophy in Engineering-Electrical Engineering and Computer Sciences in the GRADUATE DIVISION of the UNIVERSITY of CALIFORNIA at BERKELEY Committee in charge: Professor Alberto Sangiovanni-Vincentelli, Chair Professor Robert K. Brayton Professor Shmuel Oren  
Date: 1993  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> A. V. Aho, J. E. Hopcroft, and J. D. Ullman. </author> <title> Data Structures and Algorithms. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1983. </year>
Reference-contexts: INTRODUCTION 9 MODEL add-modulo S&lt;1:0&gt;, intSo&lt;4:0&gt;= ! current sum A&lt;2:0&gt;, ! 2 bit input vector C&lt;1:0&gt;, ! 2 bit non-zero input vector oldS&lt;3:0&gt;, ! previous sum intSi&lt;4:0&gt;; ROUTINE adder; intSo = oldS + A; ENDROUTINE; ROUTINE modulo; S&lt;1:0&gt; = 0; SELECT C FROM <ref> [1] </ref>: BEGIN S&lt;1:0&gt; = 0; ! modulo 1 is always 0 END; [2]: BEGIN S&lt;0&gt; = intSi&lt;0&gt;; ! modulo 2 is the least significant bit END; [3]: BEGIN SELECT intSi&lt;4:0&gt; FROM [1, 4, 7, 10, 13, 16, 19]: BEGIN S&lt;1:0&gt; = 1; ! modulo 3 for this set is 1 END; <p> previous sum intSi&lt;4:0&gt;; ROUTINE adder; intSo = oldS + A; ENDROUTINE; ROUTINE modulo; S&lt;1:0&gt; = 0; SELECT C FROM [1]: BEGIN S&lt;1:0&gt; = 0; ! modulo 1 is always 0 END; [2]: BEGIN S&lt;0&gt; = intSi&lt;0&gt;; ! modulo 2 is the least significant bit END; [3]: BEGIN SELECT intSi&lt;4:0&gt; FROM <ref> [1, 4, 7, 10, 13, 16, 19] </ref>: BEGIN S&lt;1:0&gt; = 1; ! modulo 3 for this set is 1 END; [2, 5, 8, 11, 14, 17, 20]: BEGIN S&lt;1:0&gt; = 2; ! modulo 3 for this set is 2 END; ENDSELECT; ! modulo 3 for rest is 0 (default) END; ENDSELECT; <p> Thus no flip-flop can occur on the path that prevents convergence in n iterations. The proof of convergence is identical to the proof of convergence for the longest path algorithm in a graph with no positive cycles <ref> [1] </ref>. Theorem 3.2.8 The iterative procedure to obtain a solution to the late equation set runs in O (jV jjEj). CHAPTER 3. <p> The delays of the combinational regions (a and b) are given by the pair of numbers in brackets ([max, min]) adjacent to it. The set of feasible solutions (all instants are given in the local time zone of phase 2) to the late equation set, parameterized by ff 2 <ref> [0; 1] </ref> is given by - A 1 = R 1 = 3 + ff CHAPTER 3. <p> Theorem 4.4.2 Let x q ; x r be feasible solutions to the constraints in P with clock periods q and r respectively (q &gt; r). Let c = q + (1 )r ( 2 <ref> [0; 1] </ref>). Then x = x q + (1 )x r is a feasible solution to the constraints in P with clock period c. Proof Consider any constraint of the form x i x j a + bc, where a, b are real constants. <p> So a clocking scheme with s 1 = 1; e 1 = 2; s 2 = 3; e 2 = 5, will work for all possible delays of the gate within the bound <ref> [1; 4] </ref>. APPENDIX A.
Reference: [2] <author> K. A. Bartlett, G. Boriello, and S. Raju. </author> <title> Timing optimization of multi-phase sequential logic. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <pages> pages 51-62, </pages> <year> 1991. </year>
Reference-contexts: intSo&lt;4:0&gt;= ! current sum A&lt;2:0&gt;, ! 2 bit input vector C&lt;1:0&gt;, ! 2 bit non-zero input vector oldS&lt;3:0&gt;, ! previous sum intSi&lt;4:0&gt;; ROUTINE adder; intSo = oldS + A; ENDROUTINE; ROUTINE modulo; S&lt;1:0&gt; = 0; SELECT C FROM [1]: BEGIN S&lt;1:0&gt; = 0; ! modulo 1 is always 0 END; <ref> [2] </ref>: BEGIN S&lt;0&gt; = intSi&lt;0&gt;; ! modulo 2 is the least significant bit END; [3]: BEGIN SELECT intSi&lt;4:0&gt; FROM [1, 4, 7, 10, 13, 16, 19]: BEGIN S&lt;1:0&gt; = 1; ! modulo 3 for this set is 1 END; [2, 5, 8, 11, 14, 17, 20]: BEGIN S&lt;1:0&gt; = 2; ! <p> BEGIN S&lt;1:0&gt; = 0; ! modulo 1 is always 0 END; [2]: BEGIN S&lt;0&gt; = intSi&lt;0&gt;; ! modulo 2 is the least significant bit END; [3]: BEGIN SELECT intSi&lt;4:0&gt; FROM [1, 4, 7, 10, 13, 16, 19]: BEGIN S&lt;1:0&gt; = 1; ! modulo 3 for this set is 1 END; <ref> [2, 5, 8, 11, 14, 17, 20] </ref>: BEGIN S&lt;1:0&gt; = 2; ! modulo 3 for this set is 2 END; ENDSELECT; ! modulo 3 for rest is 0 (default) END; ENDSELECT; ENDROUTINE; ENDMODEL; CHAPTER 1. INTRODUCTION 10 asynchronous events but we shall ignore these for the time being. <p> In the single phase edge-triggered case, the pipeline performance optimization problem is equivalent to a combinational speedup problem [38]. The approach in <ref> [2] </ref> approximates level-sensitive latches by edge triggered flip-flops and handles arbitrary multi-phase circuits. Slack is used to direct logic resynthesis and logic movement across memory elements repeatedly, to find the best clock period at which the circuit can operate. The slack based approach is myopic in its optimization. <p> Clock Optimization Given C, find smallest c and s i ; e i i = 1; l so that circuit operates correctly. See [55, 69, 25]. Retiming Given C, reposition memory elements for smallest c. See [33, 25, 35]. Resynthesis Given C, resynthesize circuit for smallest c. See <ref> [38, 2] </ref>. Table 2.3: Clocking issues these, we shall focus on the clock verification, clock optimization and pipeline resynthesis problems. The intricate link relating them will become clear over the next few Chapters. 35 Chapter 3 Clock Schedule Verification Current VLSI designs have several thousand gates and memory elements. <p> Bartlett et al. <ref> [2] </ref> propose an approach based on approximating level-sensitive latches by edge triggered flip-flops. This algorithm can handle arbitrary multi-phase circuits. A slack based algorithm is used to direct resynthesis and logic movement across memory elements repeatedly to find the best clock period at which the circuit can operate. <p> The slack based approach algorithm is myopic in its optimization. To overcome this, simulated annealing is used to direct the optimization. However this may result in much larger circuits than necessary, especially when a target clock period is given. Our approach differs from <ref> [2] </ref> in several ways. CHAPTER 5. RESYNTHESIS OF MULTI-PHASE PIPELINES 85 1. We focus on the problem of satisfying a target clock period. 2. Only combinational regions are optimized, with no movement of logic across memory ele ments. 3. Flip-flops and latches are handled without any approximations. 4.
Reference: [3] <editor> H. Behnke et al., editor. </editor> <title> Fundamentals of Mathematics, volume 1, The Real Number System and Algebra. </title> <publisher> MIT Press, </publisher> <year> 1987. </year>
Reference-contexts: non-zero input vector oldS&lt;3:0&gt;, ! previous sum intSi&lt;4:0&gt;; ROUTINE adder; intSo = oldS + A; ENDROUTINE; ROUTINE modulo; S&lt;1:0&gt; = 0; SELECT C FROM [1]: BEGIN S&lt;1:0&gt; = 0; ! modulo 1 is always 0 END; [2]: BEGIN S&lt;0&gt; = intSi&lt;0&gt;; ! modulo 2 is the least significant bit END; <ref> [3] </ref>: BEGIN SELECT intSi&lt;4:0&gt; FROM [1, 4, 7, 10, 13, 16, 19]: BEGIN S&lt;1:0&gt; = 1; ! modulo 3 for this set is 1 END; [2, 5, 8, 11, 14, 17, 20]: BEGIN S&lt;1:0&gt; = 2; ! modulo 3 for this set is 2 END; ENDSELECT; ! modulo 3 for rest <p> None of the optimization techniques at the logic level of a circuit are able to detect this transformation. The transformation takes advantage of the fact that the modulo operation with respect to an integer C, can be used to construct a group <ref> [3] </ref> known as the modulo C group. The mathematical properties of a group are exploited to obtain a circuit with different structure but identical behavior. The edge-triggered version has an area of 95 and a clock period of 23.4 units.
Reference: [4] <author> M.R.C.M. Berkelaar and J. A. G. </author> <title> Jess. </title> <type> Private communication. </type> <month> June, </month> <year> 1993. </year>
Reference-contexts: previous sum intSi&lt;4:0&gt;; ROUTINE adder; intSo = oldS + A; ENDROUTINE; ROUTINE modulo; S&lt;1:0&gt; = 0; SELECT C FROM [1]: BEGIN S&lt;1:0&gt; = 0; ! modulo 1 is always 0 END; [2]: BEGIN S&lt;0&gt; = intSi&lt;0&gt;; ! modulo 2 is the least significant bit END; [3]: BEGIN SELECT intSi&lt;4:0&gt; FROM <ref> [1, 4, 7, 10, 13, 16, 19] </ref>: BEGIN S&lt;1:0&gt; = 1; ! modulo 3 for this set is 1 END; [2, 5, 8, 11, 14, 17, 20]: BEGIN S&lt;1:0&gt; = 2; ! modulo 3 for this set is 2 END; ENDSELECT; ! modulo 3 for rest is 0 (default) END; ENDSELECT; <p> The first set of experiments deals with the greedy algorithm (Procedure 6.3.2) and the linear programming approach CHAPTER 6. DELAY INSERTION FOR SHORT PATHS 126 (Section 6.4). We use the linear program solver lp solve a sparse matrix implementation of the simplex algorithm due to M. Berkelaar <ref> [4] </ref>. We hasten to point out that it is not known if these combinational circuits were designed to operate in a sequential environment. Consequently the delay inserted and the area penalty is quite large. <p> So a clocking scheme with s 1 = 1; e 1 = 2; s 2 = 3; e 2 = 5, will work for all possible delays of the gate within the bound <ref> [1; 4] </ref>. APPENDIX A.
Reference: [5] <author> C. L. Berman, J. L. Carter, and K. F. Day. </author> <title> The Fanout Problem: From Theory to Practice. </title> <booktitle> In Advanced Research in VLSI: Proceedings of the 1989 Decennial Caltech Conference, </booktitle> <pages> pages 69-99, </pages> <year> 1989. </year>
Reference-contexts: BEGIN S&lt;1:0&gt; = 0; ! modulo 1 is always 0 END; [2]: BEGIN S&lt;0&gt; = intSi&lt;0&gt;; ! modulo 2 is the least significant bit END; [3]: BEGIN SELECT intSi&lt;4:0&gt; FROM [1, 4, 7, 10, 13, 16, 19]: BEGIN S&lt;1:0&gt; = 1; ! modulo 3 for this set is 1 END; <ref> [2, 5, 8, 11, 14, 17, 20] </ref>: BEGIN S&lt;1:0&gt; = 2; ! modulo 3 for this set is 2 END; ENDSELECT; ! modulo 3 for rest is 0 (default) END; ENDSELECT; ENDROUTINE; ENDMODEL; CHAPTER 1. INTRODUCTION 10 asynchronous events but we shall ignore these for the time being. <p> In practice, sophisticated techniques for selecting these cones of logic are required. Algorithms used for minimizing area, like logic decomposition are modified with a cost function that depends on some estimate of the final delay of the circuit. 2. Technology mapping and buffer optimization <ref> [65, 5, 73, 53, 36] </ref>: A critical step in logic synthesis is the binding of Boolean equations to an implementation technology. Standard technology mapping (such as [29]) yields a minimal area implementation. It can be tailored to yield circuits with less delay for an area penalty. <p> Thus finding the best approximation for delay insertion for a single fanout and the buffer tree construction are difficult problems. It is known that the problem of inserting buffers to meet upper bounds on arrival times with an area constraint and taking fanout loads into account, is NP-complete <ref> [5, 73] </ref>. To solve the discrete delay problem, we first find the best approximation for each fanout edge independently by a branch and bound procedure that enumerates the different sets B e . Area recovery is then done by extracting buffers common to fanouts, in a greedy manner.
Reference: [6] <author> T. M. Burks, K. Sakallah, and T. N. Mudge. </author> <title> Identification of Critical Paths in Circuits with level-Sensitive Latches. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <pages> pages 137-141. </pages> <publisher> IEEE, </publisher> <year> 1992. </year>
Reference-contexts: More importantly if this condition was met, there would be at least one solution to the late equation set that violated a set-up constraint (Lemma 3.3.3 to Lemma 3.3.11 including Theorem 3.3.10). At the same time, Burks et al. <ref> [6] </ref> provided a detailed analysis of the reasons for clock schedule verification failure and explored efficient approaches to examine circuits with potential errors. 55 Chapter 4 Clock Schedule Optimization We turn our attention to the problem of optimizing the clock period of a synchronous circuit.
Reference: [7] <author> T.-A. Chu. </author> <title> Synthesis of Hazard-free Control Circuits from Asynchronous Finite State Machine Specifications. </title> <booktitle> In Tau 92, </booktitle> <year> 1992. </year>
Reference-contexts: The actual delay of a gate depends on the fabrication process and on factors related to the operating environment (like temperature, exposure to radiation etc.). This makes it difficult for a designer to ensure that a circuit is hazard-free. Automated approaches to synthesize hazard-free designs have been recently proposed <ref> [47, 7, 31] </ref>. This problem is mitigated in synchronous designs due of the presence of memory elements. Hazards can appear in a combinational region, but the clock schedule is designed so that the flow of hazards through memory elements into adjacent combinational regions, is prevented or carefully controlled. <p> previous sum intSi&lt;4:0&gt;; ROUTINE adder; intSo = oldS + A; ENDROUTINE; ROUTINE modulo; S&lt;1:0&gt; = 0; SELECT C FROM [1]: BEGIN S&lt;1:0&gt; = 0; ! modulo 1 is always 0 END; [2]: BEGIN S&lt;0&gt; = intSi&lt;0&gt;; ! modulo 2 is the least significant bit END; [3]: BEGIN SELECT intSi&lt;4:0&gt; FROM <ref> [1, 4, 7, 10, 13, 16, 19] </ref>: BEGIN S&lt;1:0&gt; = 1; ! modulo 3 for this set is 1 END; [2, 5, 8, 11, 14, 17, 20]: BEGIN S&lt;1:0&gt; = 2; ! modulo 3 for this set is 2 END; ENDSELECT; ! modulo 3 for rest is 0 (default) END; ENDSELECT;
Reference: [8] <author> M. R. Dagenais and N. C. Rumin. </author> <title> Automatic Determination of Optimal Clocking Parameters in MOS VLSI Circuits. </title> <booktitle> In Advanced Research in VLSI:Proc. of the 5th MIT Conference, </booktitle> <pages> pages 19-33, </pages> <year> 1988. </year>
Reference-contexts: BEGIN S&lt;1:0&gt; = 0; ! modulo 1 is always 0 END; [2]: BEGIN S&lt;0&gt; = intSi&lt;0&gt;; ! modulo 2 is the least significant bit END; [3]: BEGIN SELECT intSi&lt;4:0&gt; FROM [1, 4, 7, 10, 13, 16, 19]: BEGIN S&lt;1:0&gt; = 1; ! modulo 3 for this set is 1 END; <ref> [2, 5, 8, 11, 14, 17, 20] </ref>: BEGIN S&lt;1:0&gt; = 2; ! modulo 3 for this set is 2 END; ENDSELECT; ! modulo 3 for rest is 0 (default) END; ENDSELECT; ENDROUTINE; ENDMODEL; CHAPTER 1. INTRODUCTION 10 asynchronous events but we shall ignore these for the time being. <p> Various efforts at examining constraints for correct latch operation have hinted at possible algorithms to solve for the optimal clock problem. Unger et al.[75] provide an approach to solve the problem for 2 phase circuits. The pioneering work in optimal clocking can be traced to TAMIA <ref> [8] </ref>. The approach suggests starting with null retardation at a set of latches and successively updating the values (of retardation) as the iterations proceed. The iterations are used to shave time off in the different intervals that combine to yield the clocking scheme.
Reference: [9] <author> J. D. Darringer, D. Brand, W. H. Joyner, and L. Trevillyan. LSS: </author> <title> A System for Production Logic Syntehsis. </title> <type> Technical report, </type> <institution> IBM Journal of Research and Development, </institution> <year> 1984. </year> <note> BIBLIOGRAPHY 148 </note>
Reference-contexts: Often signals need to be driven to several termini. The linear delay model reflects the delay due to the increased load. Buffer trees are constructed to ensure that signals arrive at destinations in time. CHAPTER 2. PRELUDE 24 3. Rule based <ref> [9, 20] </ref>: These approaches use a variety of transformations to improve the performance of a circuit. Limitations inherent to all rule based systems are two-fold; the rules depend on the choice of technology and only local improvement can be gained. 4.
Reference: [10] <author> G. De Micheli. </author> <title> Synchronous logic synthesis: Algorithms for cycle-time minimization. </title> <booktitle> In IEEE Transactions on Computer-Aided Design, </booktitle> <pages> pages 63-73, </pages> <year> 1991. </year>
Reference-contexts: previous sum intSi&lt;4:0&gt;; ROUTINE adder; intSo = oldS + A; ENDROUTINE; ROUTINE modulo; S&lt;1:0&gt; = 0; SELECT C FROM [1]: BEGIN S&lt;1:0&gt; = 0; ! modulo 1 is always 0 END; [2]: BEGIN S&lt;0&gt; = intSi&lt;0&gt;; ! modulo 2 is the least significant bit END; [3]: BEGIN SELECT intSi&lt;4:0&gt; FROM <ref> [1, 4, 7, 10, 13, 16, 19] </ref>: BEGIN S&lt;1:0&gt; = 1; ! modulo 3 for this set is 1 END; [2, 5, 8, 11, 14, 17, 20]: BEGIN S&lt;1:0&gt; = 2; ! modulo 3 for this set is 2 END; ENDSELECT; ! modulo 3 for rest is 0 (default) END; ENDSELECT; <p> Techniques described in [37, 11] make an effort to do so. The problem explored in [12] is to identify and eliminate circuit structures that prevent retiming from yielding a faster circuit. DeMicheli <ref> [10] </ref> uses the notion of synchronous logic operations, and combines combinational synthesis techniques with register movement to optimize the performance of single phase edge-triggered designs. CHAPTER 2. PRELUDE 26 2.3 Definitions This Section presents the mathematical models that form a basis for the rest of the thesis.
Reference: [11] <author> S. Dey, F. Brglez, and G. Kedem. </author> <title> Partitioning Sequential Circuits for Logic Optimization. </title> <booktitle> In Proceedings of the International Workshop on Logic Synthesis, </booktitle> <year> 1991. </year>
Reference-contexts: BEGIN S&lt;1:0&gt; = 0; ! modulo 1 is always 0 END; [2]: BEGIN S&lt;0&gt; = intSi&lt;0&gt;; ! modulo 2 is the least significant bit END; [3]: BEGIN SELECT intSi&lt;4:0&gt; FROM [1, 4, 7, 10, 13, 16, 19]: BEGIN S&lt;1:0&gt; = 1; ! modulo 3 for this set is 1 END; <ref> [2, 5, 8, 11, 14, 17, 20] </ref>: BEGIN S&lt;1:0&gt; = 2; ! modulo 3 for this set is 2 END; ENDSELECT; ! modulo 3 for rest is 0 (default) END; ENDSELECT; ENDROUTINE; ENDMODEL; CHAPTER 1. INTRODUCTION 10 asynchronous events but we shall ignore these for the time being. <p> However this may result in much larger circuits than necessary, especially when a target clock period is given. In order to help the combinational optimizers achieve their goal, it is important to expose large regions of combinational logic. Techniques described in <ref> [37, 11] </ref> make an effort to do so. The problem explored in [12] is to identify and eliminate circuit structures that prevent retiming from yielding a faster circuit.
Reference: [12] <author> S. Dey, M. Potkonjak, and S. G. Rothweiler. </author> <title> Performance Optimization of Sequential Circuits by Eliminating Retiming Bottlenecks. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <pages> pages 504-509, </pages> <year> 1992. </year>
Reference-contexts: In order to help the combinational optimizers achieve their goal, it is important to expose large regions of combinational logic. Techniques described in [37, 11] make an effort to do so. The problem explored in <ref> [12] </ref> is to identify and eliminate circuit structures that prevent retiming from yielding a faster circuit. DeMicheli [10] uses the notion of synchronous logic operations, and combines combinational synthesis techniques with register movement to optimize the performance of single phase edge-triggered designs. CHAPTER 2.
Reference: [13] <author> D. H. C. Du, S. H. C. Yen, and S. Ghanta. </author> <title> On the General False Path Problem in Timing Analysis. </title> <booktitle> In Proceedings of the Design Automation Conference, </booktitle> <pages> pages 555-560. IEEE/ACM, </pages> <year> 1989. </year>
Reference-contexts: previous sum intSi&lt;4:0&gt;; ROUTINE adder; intSo = oldS + A; ENDROUTINE; ROUTINE modulo; S&lt;1:0&gt; = 0; SELECT C FROM [1]: BEGIN S&lt;1:0&gt; = 0; ! modulo 1 is always 0 END; [2]: BEGIN S&lt;0&gt; = intSi&lt;0&gt;; ! modulo 2 is the least significant bit END; [3]: BEGIN SELECT intSi&lt;4:0&gt; FROM <ref> [1, 4, 7, 10, 13, 16, 19] </ref>: BEGIN S&lt;1:0&gt; = 1; ! modulo 3 for this set is 1 END; [2, 5, 8, 11, 14, 17, 20]: BEGIN S&lt;1:0&gt; = 2; ! modulo 3 for this set is 2 END; ENDSELECT; ! modulo 3 for rest is 0 (default) END; ENDSELECT; <p> Such a path is termed a false path. The purpose of dynamic analysis is to disregard such paths and report the delay of only paths that can propagate transitions. The basic formulation of this problem can be found in <ref> [40, 13] </ref>. It involves capturing the sensitization criteria at every gate and solving the set of criteria efficiently. More recently, efficient techniques [41] based on solving Boolean SATISFIABILITY [67] have been reported. Although false paths are not encountered frequently in combinational circuits, they are extremely common in sequential circuits.
Reference: [14] <author> E. B. Eichelberger and T. W. Williams. </author> <title> A Logic Design Structure for LSI Testability. </title> <booktitle> In Proceedings of the Design Automation Conference, </booktitle> <pages> pages 462-468, </pages> <year> 1977. </year>
Reference-contexts: The advantages of designing a synchronous circuit are: * Hazards occurring internally in the circuit do not affect the outputs. * Modularity of combinational regions due to the relative isolation provided by the intervening memory elements. * Ease of testing. Techniques such as SCAN <ref> [14] </ref> can be used to test and detect errors in a fabricated chip. * Relative insensitivity to actual gate delays. If gate delays violate respective bounds, the circuit may not operate at the desired frequency. However, it may be possible to operate it at a lower frequency. <p> BEGIN S&lt;1:0&gt; = 0; ! modulo 1 is always 0 END; [2]: BEGIN S&lt;0&gt; = intSi&lt;0&gt;; ! modulo 2 is the least significant bit END; [3]: BEGIN SELECT intSi&lt;4:0&gt; FROM [1, 4, 7, 10, 13, 16, 19]: BEGIN S&lt;1:0&gt; = 1; ! modulo 3 for this set is 1 END; <ref> [2, 5, 8, 11, 14, 17, 20] </ref>: BEGIN S&lt;1:0&gt; = 2; ! modulo 3 for this set is 2 END; ENDSELECT; ! modulo 3 for rest is 0 (default) END; ENDSELECT; ENDROUTINE; ENDMODEL; CHAPTER 1. INTRODUCTION 10 asynchronous events but we shall ignore these for the time being.
Reference: [15] <author> J. Fishburn. </author> <title> Clock Skew Optimization. </title> <institution> AT&T Bell Laboratories, </institution> <address> Murray Hill NJ 07974, </address> <year> 1981. </year>
Reference-contexts: These problems are attributed to clock skew. However, recent advances in physical DA have provided techniques to overcome the clock skew problem [74, 34]. Despite the problems associated with uncontrolled skew, efforts have been also made to control clock skew to the designer's advantage CHAPTER 1. INTRODUCTION 4 <ref> [15] </ref>. Asynchronous circuits are free from clock skew problems, since there are no clock signals to be routed across the chip. An important issue in VLSI design is the power dissipation per unit area of the design.
Reference: [16] <author> J. P. Fishburn. </author> <title> A Depth-Decreasing Heuristic for Combinational Logic. </title> <booktitle> In Proceedings of the Design Automation Conference, </booktitle> <pages> pages 361-364, </pages> <year> 1990. </year>
Reference-contexts: previous sum intSi&lt;4:0&gt;; ROUTINE adder; intSo = oldS + A; ENDROUTINE; ROUTINE modulo; S&lt;1:0&gt; = 0; SELECT C FROM [1]: BEGIN S&lt;1:0&gt; = 0; ! modulo 1 is always 0 END; [2]: BEGIN S&lt;0&gt; = intSi&lt;0&gt;; ! modulo 2 is the least significant bit END; [3]: BEGIN SELECT intSi&lt;4:0&gt; FROM <ref> [1, 4, 7, 10, 13, 16, 19] </ref>: BEGIN S&lt;1:0&gt; = 1; ! modulo 3 for this set is 1 END; [2, 5, 8, 11, 14, 17, 20]: BEGIN S&lt;1:0&gt; = 2; ! modulo 3 for this set is 2 END; ENDSELECT; ! modulo 3 for rest is 0 (default) END; ENDSELECT; <p> This Section examines some techniques that are popular in literature and practice. Combinational optimization The problem of optimizing a combinational circuit has been well studied and numerous algorithms have been proposed. A representative sample of the optimization approaches may be classified into the following categories. 1. Circuit restructuring <ref> [66, 16, 17, 49] </ref>: A simple idea to decrease the delay of a circuit is to move late arriving signals in a cone of logic, closer towards the output. In practice, sophisticated techniques for selecting these cones of logic are required. <p> Singh et al. [66] present an algorithm that uses the movement of critical signals closer to the output of a cone of logic to speed up circuits. Fishburn presents <ref> [16] </ref> an approach to decrease the depth of a circuit and in [17] presents an iterative algorithm that combines several known methods in a heuristic manner. We are concerned with the problem of satisfying lower bounds on delays of paths.
Reference: [17] <author> J. P. Fishburn. LATTIS: </author> <title> An Iterative Speedup Heuristic for Mapped Logic. </title> <booktitle> In Proceedings of the Design Automation Conference, </booktitle> <pages> pages 488-491, </pages> <year> 1992. </year>
Reference-contexts: BEGIN S&lt;1:0&gt; = 0; ! modulo 1 is always 0 END; [2]: BEGIN S&lt;0&gt; = intSi&lt;0&gt;; ! modulo 2 is the least significant bit END; [3]: BEGIN SELECT intSi&lt;4:0&gt; FROM [1, 4, 7, 10, 13, 16, 19]: BEGIN S&lt;1:0&gt; = 1; ! modulo 3 for this set is 1 END; <ref> [2, 5, 8, 11, 14, 17, 20] </ref>: BEGIN S&lt;1:0&gt; = 2; ! modulo 3 for this set is 2 END; ENDSELECT; ! modulo 3 for rest is 0 (default) END; ENDSELECT; ENDROUTINE; ENDMODEL; CHAPTER 1. INTRODUCTION 10 asynchronous events but we shall ignore these for the time being. <p> This Section examines some techniques that are popular in literature and practice. Combinational optimization The problem of optimizing a combinational circuit has been well studied and numerous algorithms have been proposed. A representative sample of the optimization approaches may be classified into the following categories. 1. Circuit restructuring <ref> [66, 16, 17, 49] </ref>: A simple idea to decrease the delay of a circuit is to move late arriving signals in a cone of logic, closer towards the output. In practice, sophisticated techniques for selecting these cones of logic are required. <p> Singh et al. [66] present an algorithm that uses the movement of critical signals closer to the output of a cone of logic to speed up circuits. Fishburn presents [16] an approach to decrease the depth of a circuit and in <ref> [17] </ref> presents an iterative algorithm that combines several known methods in a heuristic manner. We are concerned with the problem of satisfying lower bounds on delays of paths.
Reference: [18] <author> J. P. Fishburn and A. E. Dunlop. TILOS: </author> <title> A Posynomial Programming Approach to Transistor Sizing. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <pages> pages 326-328, </pages> <year> 1985. </year>
Reference-contexts: PRELUDE 24 3. Rule based [9, 20]: These approaches use a variety of transformations to improve the performance of a circuit. Limitations inherent to all rule based systems are two-fold; the rules depend on the choice of technology and only local improvement can be gained. 4. Transistor sizing <ref> [64, 18, 57, 39] </ref>: This is a popular technique for performance optimization. The pioneering work done in TILOS demonstrated that the area and delay of a transistor net-list are representable as posynomial functions of transistor sizes. TILOS [18] uses a heuristic based on sensitivity computations. <p> Transistor sizing [64, 18, 57, 39]: This is a popular technique for performance optimization. The pioneering work done in TILOS demonstrated that the area and delay of a transistor net-list are representable as posynomial functions of transistor sizes. TILOS <ref> [18] </ref> uses a heuristic based on sensitivity computations. Shyu et al. [64] use the method of feasible directions (a standard non-linear optimization technique [51]) to solve the problem. iCONTRAST [57] uses a convex optimization technique proposed recently [76].
Reference: [19] <author> M. R. Garey and D. S. Johnson. </author> <title> Computers and Intractability A Guide to the Theory of NP-Completeness. </title> <editor> W. H. </editor> <publisher> Freeman and Company, </publisher> <year> 1979. </year>
Reference-contexts: previous sum intSi&lt;4:0&gt;; ROUTINE adder; intSo = oldS + A; ENDROUTINE; ROUTINE modulo; S&lt;1:0&gt; = 0; SELECT C FROM [1]: BEGIN S&lt;1:0&gt; = 0; ! modulo 1 is always 0 END; [2]: BEGIN S&lt;0&gt; = intSi&lt;0&gt;; ! modulo 2 is the least significant bit END; [3]: BEGIN SELECT intSi&lt;4:0&gt; FROM <ref> [1, 4, 7, 10, 13, 16, 19] </ref>: BEGIN S&lt;1:0&gt; = 1; ! modulo 3 for this set is 1 END; [2, 5, 8, 11, 14, 17, 20]: BEGIN S&lt;1:0&gt; = 2; ! modulo 3 for this set is 2 END; ENDSELECT; ! modulo 3 for rest is 0 (default) END; ENDSELECT; <p> Any ties are broken by comparing the respective area penalties ( P i2B e a (b i )). With d (b i ) 2 Z + for all i, and W e a positive number, the problem is equivalent to the subset-sum problem <ref> [19] </ref>, which is NP-complete. * The problem above concentrates only on the best solution for an edge. A difficulty arises when (see Figure 6.3) multiple fanouts from a gate require delay insertions.
Reference: [20] <author> D. Gregory, K. Bartlett, A. de Geus, and G. Hachtel. SOCRATES: </author> <title> A System for Automatically Synthesizing and Optimizing Combinational Logic. </title> <booktitle> In Proceedings of the Design Automation Conference, </booktitle> <pages> pages 79-85. IEEE/ACM, </pages> <year> 1986. </year>
Reference-contexts: BEGIN S&lt;1:0&gt; = 0; ! modulo 1 is always 0 END; [2]: BEGIN S&lt;0&gt; = intSi&lt;0&gt;; ! modulo 2 is the least significant bit END; [3]: BEGIN SELECT intSi&lt;4:0&gt; FROM [1, 4, 7, 10, 13, 16, 19]: BEGIN S&lt;1:0&gt; = 1; ! modulo 3 for this set is 1 END; <ref> [2, 5, 8, 11, 14, 17, 20] </ref>: BEGIN S&lt;1:0&gt; = 2; ! modulo 3 for this set is 2 END; ENDSELECT; ! modulo 3 for rest is 0 (default) END; ENDSELECT; ENDROUTINE; ENDMODEL; CHAPTER 1. INTRODUCTION 10 asynchronous events but we shall ignore these for the time being. <p> Often signals need to be driven to several termini. The linear delay model reflects the delay due to the increased load. Buffer trees are constructed to ensure that signals arrive at destinations in time. CHAPTER 2. PRELUDE 24 3. Rule based <ref> [9, 20] </ref>: These approaches use a variety of transformations to improve the performance of a circuit. Limitations inherent to all rule based systems are two-fold; the rules depend on the choice of technology and only local improvement can be gained. 4.
Reference: [21] <author> R. B. Hitchcock. </author> <title> Timing Verification and Timing Analysis Program. In 25 Years of Electronic Design Automation. </title> <journal> IEEE/ACM, </journal> <note> 1988. BIBLIOGRAPHY 149 </note>
Reference-contexts: This review is not complete (it would take an entire book to do so), but is intended to provide a brief description of the evolution of timing issues and to underline salient features that are borrowed in our approach. 2.2.1 Timing analysis An excellent survey by Hitchcock, Sr. <ref> [21] </ref> describes several early efforts in timing analysis [50, 80, 58, 27, 30, 42, 22]. These timing analyzers suffer from poor modeling of memory elements (only flip-flops are assumed present). If a circuit has only FEDFF's, then it suffices to restrict attention to the timing analysis of combinational regions.
Reference: [22] <author> R. B. Hitchcock, G. L. Smith, and D. D. Cheng. </author> <title> Timing Analysis of Computer Hardware. </title> <type> Technical report, </type> <institution> IBM, </institution> <year> 1982. </year>
Reference-contexts: would take an entire book to do so), but is intended to provide a brief description of the evolution of timing issues and to underline salient features that are borrowed in our approach. 2.2.1 Timing analysis An excellent survey by Hitchcock, Sr. [21] describes several early efforts in timing analysis <ref> [50, 80, 58, 27, 30, 42, 22] </ref>. These timing analyzers suffer from poor modeling of memory elements (only flip-flops are assumed present). If a circuit has only FEDFF's, then it suffices to restrict attention to the timing analysis of combinational regions.
Reference: [23] <author> D. A. Hodges and H. G. Jackson. </author> <title> Analysis and Design of Digital Integrated Circuits. </title> <publisher> McGraw-Hill Book Co., </publisher> <address> 2 edition, </address> <year> 1988. </year>
Reference-contexts: It stores a value (logical 1 or 0) at its output until the control decides to store a fresh value. There are a variety of circuit structures that can be used as memory elements for data storage (see <ref> [23] </ref> for a detailed description of various memory elements). The different memory elements may be classified into two categories based on their behavior. We restrict attention to two memory elements which are representative of the two categories; falling edge-triggered D flip-flops (FEDFF) and active-high level-sensitive latches (AHLSL). 1.
Reference: [24] <author> A. Ishii and C. E. Leiserson. </author> <title> A Timing Analysis of Level-Clocked Circuitry. </title> <booktitle> In Advanced Research in VLSI: Proc. of the 7th MIT Conference, </booktitle> <year> 1990. </year>
Reference-contexts: Of CHAPTER 2. PRELUDE 34 Problem Comments Clock Verification Given C, c and s i ; e i i = 1; l, does circuit operate correctly ? See <ref> [24, 55] </ref>. Clock Optimization Given C, find smallest c and s i ; e i i = 1; l so that circuit operates correctly. See [55, 69, 25]. Retiming Given C, reposition memory elements for smallest c. See [33, 25, 35]. Resynthesis Given C, resynthesize circuit for smallest c. <p> The rest of the section is devoted to proving the equivalence of the sets of constraints in Table 4.1 and Table 4.2. The following Lemma has been has been used by several researchers <ref> [24, 25, 69, 62] </ref>; the proof is borrowed from [69]. Lemma 4.2.1 Let c be a feasible value of the clock period to constraints 1 and 2 in Table 4.2 over all paths p 2 P (G).
Reference: [25] <author> A. Ishii, C. E. Leiserson, and M. C. Papaefthymiou. </author> <title> Optimizing Two-Phase Level-Clocked Circuitry. </title> <booktitle> In Advanced Research in VLSI, </booktitle> <year> 1992. </year>
Reference-contexts: The approach suggests starting with null retardation at a set of latches and successively updating the values (of retardation) as the iterations proceed. The iterations are used to shave time off in the different intervals that combine to yield the clocking scheme. Ishii et al. <ref> [25] </ref> present a polynomial algorithm to deal with 2 phase level-clocked circuitry, using the fixed delay model and considering only set-up constraints. Sakallah et al. [54, 55] propose an elegant model and use linear programming techniques to solve for the clock schedule. <p> The structure of logic gates remains unchanged. Leiserson et al. [33] were the first to provide an efficient algorithm to solve the retiming problem for single phase circuits with FEDFF's. Efforts have been made to extend retiming to deal with AHLSL's <ref> [25, 35] </ref>, although the delay model (fixed delay) leaves something to be desired. Sequential optimization: resynthesis The constraints for a circuit to operate at a target clock period translate to a set of performance constraints on one or more pieces of combinational logic. <p> Clock Optimization Given C, find smallest c and s i ; e i i = 1; l so that circuit operates correctly. See <ref> [55, 69, 25] </ref>. Retiming Given C, reposition memory elements for smallest c. See [33, 25, 35]. Resynthesis Given C, resynthesize circuit for smallest c. See [38, 2]. Table 2.3: Clocking issues these, we shall focus on the clock verification, clock optimization and pipeline resynthesis problems. <p> Clock Optimization Given C, find smallest c and s i ; e i i = 1; l so that circuit operates correctly. See [55, 69, 25]. Retiming Given C, reposition memory elements for smallest c. See <ref> [33, 25, 35] </ref>. Resynthesis Given C, resynthesize circuit for smallest c. See [38, 2]. Table 2.3: Clocking issues these, we shall focus on the clock verification, clock optimization and pipeline resynthesis problems. <p> The rest of the section is devoted to proving the equivalence of the sets of constraints in Table 4.1 and Table 4.2. The following Lemma has been has been used by several researchers <ref> [24, 25, 69, 62] </ref>; the proof is borrowed from [69]. Lemma 4.2.1 Let c be a feasible value of the clock period to constraints 1 and 2 in Table 4.2 over all paths p 2 P (G). <p> By a curious co-incidence, a paper by Megiddo [44] triggered some ideas that led to exploring the structure of the linear program for the optimal clock schedule computation problem. Ishii et al. had reached similar conclusions for two-phase level-clocked circuits <ref> [25] </ref> independently. In contrast, our approach does not restrict the circuits to have a two-phase clocking methodology with only AHLSLs.
Reference: [26] <author> N. P. Jouppi. </author> <title> Timing Verification and Performance Improvement of MOS VLSI Designs . PhD thesis, </title> <institution> Stanford University, Stanford CA-94305, </institution> <month> October </month> <year> 1984. </year>
Reference-contexts: Then compute arrival times for a gate at level i only after all gates at level i 1 have been processed. We shall have occasion to use this in the algorithms we develop. In the early eighties, timing analysis on transistor net-lists was an area of intense research <ref> [48, 26, 68] </ref>. The first of these, CRYSTAL [48] uses a switch-level approach (advocated by a genre of simulators) to detect critical paths in the circuit. The delay model is based on the CHAPTER 2. PRELUDE 22 RC model (lumped and distributed) described in [43, 52]. <p> CRYSTAL provides satisfactory results to circuits with simple clocking schemes, since it does not have a notion of a clock signal (but rather treats them as inputs from the environment) and is unable to model level-sensitive latches. TV <ref> [26] </ref> is a timing analysis program for nMOS circuits. A set of rules are used to determine signal flow before timing analysis. It uses breadth-first analysis to speed up the analysis.
Reference: [27] <author> R. Kamikawai, M. Yamada, T. Chiba, K. Furumaya, and Y. Tsuchiya. </author> <title> A Critical Path Delay Check System. </title> <booktitle> In Proceedings of the Design Automation Conference, </booktitle> <pages> pages 118-123. IEEE/ACM, </pages> <year> 1981. </year>
Reference-contexts: would take an entire book to do so), but is intended to provide a brief description of the evolution of timing issues and to underline salient features that are borrowed in our approach. 2.2.1 Timing analysis An excellent survey by Hitchcock, Sr. [21] describes several early efforts in timing analysis <ref> [50, 80, 58, 27, 30, 42, 22] </ref>. These timing analyzers suffer from poor modeling of memory elements (only flip-flops are assumed present). If a circuit has only FEDFF's, then it suffices to restrict attention to the timing analysis of combinational regions.
Reference: [28] <author> M. Kawarabayashi, N. Shenoy, and A. Sangiovanni-Vincentelli. </author> <title> A Verification Technique for Gated Clock. </title> <booktitle> In Proceedings of the Design Automation Conference. IEEE/ACM, </booktitle> <year> 1993. </year>
Reference-contexts: The problem of clock schedule analysis with multiple frequency clock signals is another issue that merits investigation. Lastly, permitting arbitrary signals to control memory elements remains largely unsolved. We have made some progress in this direction using a restricted form of qualified clocks <ref> [28] </ref>. Chapter 5 investigates the resynthesis of multi-phase pipeline circuits to meet target clock periods. A novel approach using the notion of minimal perturbation is presented to solve the problem. The problem of extending resynthesis to general cyclic circuits remains complicated. A CHAPTER 7.
Reference: [29] <author> K. Keutzer. DAGON: </author> <title> Technology Binding and Local Optimization by DAG Matching. </title> <booktitle> In Proceedings of the Design Automation Conference, </booktitle> <pages> pages 341-347. </pages> <address> ACM/IEEE, </address> <year> 1987. </year>
Reference-contexts: Technology mapping and buffer optimization [65, 5, 73, 53, 36]: A critical step in logic synthesis is the binding of Boolean equations to an implementation technology. Standard technology mapping (such as <ref> [29] </ref>) yields a minimal area implementation. It can be tailored to yield circuits with less delay for an area penalty. Often signals need to be driven to several termini. The linear delay model reflects the delay due to the increased load.
Reference: [30] <author> T. I. Kirkpatrick and N. R. Clark. </author> <title> PERT as an Aid to Logic Design. </title> <type> Technical report, </type> <institution> IBM Journal of Research and Development, </institution> <year> 1966. </year>
Reference-contexts: would take an entire book to do so), but is intended to provide a brief description of the evolution of timing issues and to underline salient features that are borrowed in our approach. 2.2.1 Timing analysis An excellent survey by Hitchcock, Sr. [21] describes several early efforts in timing analysis <ref> [50, 80, 58, 27, 30, 42, 22] </ref>. These timing analyzers suffer from poor modeling of memory elements (only flip-flops are assumed present). If a circuit has only FEDFF's, then it suffices to restrict attention to the timing analysis of combinational regions.
Reference: [31] <author> L. Lavagno, N. Shenoy, and A. Sangiovanni-Vincentelli. </author> <title> Linear Programming for Hazard Elimination in Asynchronous Circuits. </title> <booktitle> In Journal of VLSI Signal Processing, </booktitle> <year> 1993. </year>
Reference-contexts: The actual delay of a gate depends on the fabrication process and on factors related to the operating environment (like temperature, exposure to radiation etc.). This makes it difficult for a designer to ensure that a circuit is hazard-free. Automated approaches to synthesize hazard-free designs have been recently proposed <ref> [47, 7, 31] </ref>. This problem is mitigated in synchronous designs due of the presence of memory elements. Hazards can appear in a combinational region, but the clock schedule is designed so that the flow of hazards through memory elements into adjacent combinational regions, is prevented or carefully controlled.
Reference: [32] <author> E. L. Lawler. </author> <title> Combinatorial Optimization: networks and Matroids. </title> <publisher> Holt, Rinehart and Winston, </publisher> <year> 1976. </year>
Reference-contexts: INFEASIBLE: The problem is infeasible. The search starts at the lower bound of the clock period. The routine check-constraints () evaluates the dominating constraint for each edge in E p i.e. it computes min k=1;N (a k ji + b k and sets it as the edge weight. Floyd-Warshall <ref> [32] </ref> is used to detect the shortest path from x p to x q , keeping track of the sum of the b ij 's for the shortest path. During the Floyd-Warshall iterations, we keep track of the diagonal entries of the Floyd-Warshall matrix.
Reference: [33] <author> C. E. Leiserson and J. B. Saxe. </author> <title> Optimizing Synchronous Systems. </title> <journal> In Journal of VLSI and Computer Systems, </journal> <pages> pages 41-67, </pages> <year> 1983. </year>
Reference-contexts: We only consider gates with single outputs in this thesis. The following are popular delay models for gates. Fixed Delay A gate is assumed to have a constant delay, known a priori, and represented by a real number. This model has been used in <ref> [33, 37] </ref>. A simple fixed delay model is the unit delay model, wherein each gate is assigned a delay of 1 unit. <p> Sequential optimization: retiming Retiming is a process of re-distributing memory elements in a circuit, to obtain a faster circuit with the same input-output behavior. The structure of logic gates remains unchanged. Leiserson et al. <ref> [33] </ref> were the first to provide an efficient algorithm to solve the retiming problem for single phase circuits with FEDFF's. Efforts have been made to extend retiming to deal with AHLSL's [25, 35], although the delay model (fixed delay) leaves something to be desired. <p> Clock Optimization Given C, find smallest c and s i ; e i i = 1; l so that circuit operates correctly. See [55, 69, 25]. Retiming Given C, reposition memory elements for smallest c. See <ref> [33, 25, 35] </ref>. Resynthesis Given C, resynthesize circuit for smallest c. See [38, 2]. Table 2.3: Clocking issues these, we shall focus on the clock verification, clock optimization and pipeline resynthesis problems.
Reference: [34] <author> Y-M. Li and M. A. Jabri. </author> <title> A Zero-Skew Clock Routing Scheme for VLSI Circuits. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <pages> pages 458-463, </pages> <year> 1992. </year> <note> BIBLIOGRAPHY 150 </note>
Reference-contexts: This can cause a memory element to permit flow of data, when in fact it should have impeded it, or vice versa. These problems are attributed to clock skew. However, recent advances in physical DA have provided techniques to overcome the clock skew problem <ref> [74, 34] </ref>. Despite the problems associated with uncontrolled skew, efforts have been also made to control clock skew to the designer's advantage CHAPTER 1. INTRODUCTION 4 [15]. Asynchronous circuits are free from clock skew problems, since there are no clock signals to be routed across the chip.
Reference: [35] <author> B. Lockyear and C. Ebeling. </author> <title> Optimal Retiming of Multi-Phase Level-Clocked Circuits. </title> <booktitle> In Advanced Research in VLSI, </booktitle> <year> 1992. </year>
Reference-contexts: The structure of logic gates remains unchanged. Leiserson et al. [33] were the first to provide an efficient algorithm to solve the retiming problem for single phase circuits with FEDFF's. Efforts have been made to extend retiming to deal with AHLSL's <ref> [25, 35] </ref>, although the delay model (fixed delay) leaves something to be desired. Sequential optimization: resynthesis The constraints for a circuit to operate at a target clock period translate to a set of performance constraints on one or more pieces of combinational logic. <p> Clock Optimization Given C, find smallest c and s i ; e i i = 1; l so that circuit operates correctly. See [55, 69, 25]. Retiming Given C, reposition memory elements for smallest c. See <ref> [33, 25, 35] </ref>. Resynthesis Given C, resynthesize circuit for smallest c. See [38, 2]. Table 2.3: Clocking issues these, we shall focus on the clock verification, clock optimization and pipeline resynthesis problems.
Reference: [36] <author> F. Mailhot and G. De Micheli. </author> <title> Technology Mapping using Boolean Matching and Don't care Sets. </title> <booktitle> In Proceedings of the European Design Automation Conference, </booktitle> <year> 1990. </year>
Reference-contexts: In practice, sophisticated techniques for selecting these cones of logic are required. Algorithms used for minimizing area, like logic decomposition are modified with a cost function that depends on some estimate of the final delay of the circuit. 2. Technology mapping and buffer optimization <ref> [65, 5, 73, 53, 36] </ref>: A critical step in logic synthesis is the binding of Boolean equations to an implementation technology. Standard technology mapping (such as [29]) yields a minimal area implementation. It can be tailored to yield circuits with less delay for an area penalty.
Reference: [37] <author> S. Malik, E. Sentovich, R. K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Retiming and Resynthesis: Optimization of Sequential Networks with Combinational Techniques. </title> <booktitle> In Proceedings of the Hawaii International Conference on System Sciences, </booktitle> <pages> pages 397-406, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: We only consider gates with single outputs in this thesis. The following are popular delay models for gates. Fixed Delay A gate is assumed to have a constant delay, known a priori, and represented by a real number. This model has been used in <ref> [33, 37] </ref>. A simple fixed delay model is the unit delay model, wherein each gate is assigned a delay of 1 unit. <p> However this may result in much larger circuits than necessary, especially when a target clock period is given. In order to help the combinational optimizers achieve their goal, it is important to expose large regions of combinational logic. Techniques described in <ref> [37, 11] </ref> make an effort to do so. The problem explored in [12] is to identify and eliminate circuit structures that prevent retiming from yielding a faster circuit.
Reference: [38] <author> S. Malik, K. J. Singh, R. K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Performance optimization of pipelined circuits. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <pages> pages 410-413. </pages> <publisher> IEEE, </publisher> <year> 1990. </year>
Reference-contexts: Sequential optimization: resynthesis The constraints for a circuit to operate at a target clock period translate to a set of performance constraints on one or more pieces of combinational logic. In the single phase edge-triggered case, the pipeline performance optimization problem is equivalent to a combinational speedup problem <ref> [38] </ref>. The approach in [2] approximates level-sensitive latches by edge triggered flip-flops and handles arbitrary multi-phase circuits. Slack is used to direct logic resynthesis and logic movement across memory elements repeatedly, to find the best clock period at which the circuit can operate. <p> Clock Optimization Given C, find smallest c and s i ; e i i = 1; l so that circuit operates correctly. See [55, 69, 25]. Retiming Given C, reposition memory elements for smallest c. See [33, 25, 35]. Resynthesis Given C, resynthesize circuit for smallest c. See <ref> [38, 2] </ref>. Table 2.3: Clocking issues these, we shall focus on the clock verification, clock optimization and pipeline resynthesis problems. The intricate link relating them will become clear over the next few Chapters. 35 Chapter 3 Clock Schedule Verification Current VLSI designs have several thousand gates and memory elements. <p> For circuits with single phase edge-triggered memory elements, it has been shown by Malik et al. <ref> [38] </ref> that the pipeline performance optimization problem is equivalent to a combinational performance problem; namely, the first problem has a solution if and only if the second problem has a solution. Bartlett et al. [2] propose an approach based on approximating level-sensitive latches by edge triggered flip-flops. <p> The delay optimizer, in use currently, uses block oriented constraints on arrival and required times and is unable to handle path based constraints efficiently. Techniques that use path based delay optimization are still an issue of research. The results obtained by Malik et al. <ref> [38] </ref> for pipeline circuits with FEDFFs, prompted us to investigate pipelines with AHLSLs and multi-phase clocking schemes. The goal was to CHAPTER 5. RESYNTHESIS OF MULTI-PHASE PIPELINES 106 relate the clock period constraints for a target clock period to performance constraints on regions of combinational logic.
Reference: [39] <author> D. Marple. </author> <title> Performance Optimization of Digital VLSI design. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <year> 1986. </year>
Reference-contexts: PRELUDE 24 3. Rule based [9, 20]: These approaches use a variety of transformations to improve the performance of a circuit. Limitations inherent to all rule based systems are two-fold; the rules depend on the choice of technology and only local improvement can be gained. 4. Transistor sizing <ref> [64, 18, 57, 39] </ref>: This is a popular technique for performance optimization. The pioneering work done in TILOS demonstrated that the area and delay of a transistor net-list are representable as posynomial functions of transistor sizes. TILOS [18] uses a heuristic based on sensitivity computations. <p> TILOS [18] uses a heuristic based on sensitivity computations. Shyu et al. [64] use the method of feasible directions (a standard non-linear optimization technique [51]) to solve the problem. iCONTRAST [57] uses a convex optimization technique proposed recently [76]. Marple <ref> [39] </ref> presents a solution to the transistor sizing problem based on Lagrangian multipliers. Clock schedule optimization The clock schedule optimization problem involves computing the minimum clock period and assigning instants of occurrence to the clock events (rise/fall of phases) in some time frame.
Reference: [40] <author> P. C. McGeer. </author> <title> On the Interaction of Functional and Timing Behavior of Combinational Circuits. </title> <type> PhD thesis, </type> <institution> University of California, Berkeley, </institution> <year> 1989. </year>
Reference-contexts: Such a path is termed a false path. The purpose of dynamic analysis is to disregard such paths and report the delay of only paths that can propagate transitions. The basic formulation of this problem can be found in <ref> [40, 13] </ref>. It involves capturing the sensitization criteria at every gate and solving the set of criteria efficiently. More recently, efficient techniques [41] based on solving Boolean SATISFIABILITY [67] have been reported. Although false paths are not encountered frequently in combinational circuits, they are extremely common in sequential circuits.
Reference: [41] <author> P.C. Mcgeer, A. Saldanha, P. R. Stephan, R. K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Timing Analysis and Delay-Fault Test Generation using Path-Recursive Functions. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <pages> pages 180-183. </pages> <publisher> IEEE, </publisher> <year> 1991. </year>
Reference-contexts: The basic formulation of this problem can be found in [40, 13]. It involves capturing the sensitization criteria at every gate and solving the set of criteria efficiently. More recently, efficient techniques <ref> [41] </ref> based on solving Boolean SATISFIABILITY [67] have been reported. Although false paths are not encountered frequently in combinational circuits, they are extremely common in sequential circuits.
Reference: [42] <author> T. M. McWilliams and L. C. Widdoes Jr. SCALD: </author> <title> Structured Computer-Aided Logic Design. </title> <booktitle> In Proceedings of the Design Automation Conference, </booktitle> <pages> pages 271-277. IEEE/ACM, </pages> <year> 1978. </year>
Reference-contexts: would take an entire book to do so), but is intended to provide a brief description of the evolution of timing issues and to underline salient features that are borrowed in our approach. 2.2.1 Timing analysis An excellent survey by Hitchcock, Sr. [21] describes several early efforts in timing analysis <ref> [50, 80, 58, 27, 30, 42, 22] </ref>. These timing analyzers suffer from poor modeling of memory elements (only flip-flops are assumed present). If a circuit has only FEDFF's, then it suffices to restrict attention to the timing analysis of combinational regions.
Reference: [43] <author> C. A. Mead and L. A. Conway. </author> <title> Introduction to VLSI Systems. </title> <publisher> Addison-Wesley, </publisher> <year> 1980. </year>
Reference-contexts: A placement tool is used to find locations for the polygons on a two dimensional plane. The goal is to minimize the total area and also to take the criticality of the nets into account, while ensuring that design CHAPTER 1. INTRODUCTION 6 rules <ref> [43, 79] </ref> are observed. Global and detailed routing is done to interconnect the pins of the gates. Wire length minimization, via minimization and criticality of nets are some of the issues that need to be considered. * Design Verification At this stage, the design is ready for a performance evaluation. <p> The first of these, CRYSTAL [48] uses a switch-level approach (advocated by a genre of simulators) to detect critical paths in the circuit. The delay model is based on the CHAPTER 2. PRELUDE 22 RC model (lumped and distributed) described in <ref> [43, 52] </ref>. CRYSTAL uses a value-independent approach (unless specified, with the caveat that specifying data values may cause the program to fail in identifying critical paths eliminated by the specification). A problem inherent with value-independent analysis is that changes may be propagated oblivious of other conditions in the circuit.
Reference: [44] <author> N. Megiddo. </author> <title> Towards a Genuinely Polynomial Algorithm for Linear Programming. </title> <booktitle> In Society for Industrial and Applied Mathematics, </booktitle> <pages> pages 347-353, </pages> <year> 1983. </year>
Reference-contexts: The value of N (fi p u 1 u q in Equation 4.8) reflects the depth of cycle stealing along paths in the circuit. For most circuits, N t jV j (typically N ~ 5), leading to a fast algorithm for the linear program. Megiddo <ref> [44] </ref> presents an interesting approach to solve a similar problem. Note that we permit only those external constraints that can be put in the form required by GP . <p> We chose the effort by Szymanski [72] that provides the linear programming formulation (whose merits have been summarized earlier), as the basis for our approach. By a curious co-incidence, a paper by Megiddo <ref> [44] </ref> triggered some ideas that led to exploring the structure of the linear program for the optimal clock schedule computation problem. Ishii et al. had reached similar conclusions for two-phase level-clocked circuits [25] independently.
Reference: [45] <author> K. G. Murty. </author> <title> Linear Programming. </title> <publisher> John Wiley and Sons, </publisher> <year> 1983. </year>
Reference-contexts: The presence of auxiliary variables A i ; R i ; a i and r i serves little purpose, since they have to be assigned columns in a tableau (assuming the simplex <ref> [45] </ref> method is used to solve the linear program). The first cut is to eliminate these variables and pose the optimal clock formulation only in terms of the variables arising from the clocking scheme. A further refinement is to use the structure of the constraints to efficiently eliminate redundant constraints.
Reference: [46] <author> L Nagel. </author> <title> SPICE2: A Computer Program to Simulate Semiconductor Circuits. </title> <note> Memorandum No. </note> <institution> UCB/ERL M85/90, Electronics Research Laboratory, College of Engineering, University of California, Berkeley, </institution> <address> CA 94720, </address> <month> November </month> <year> 1985. </year> <note> BIBLIOGRAPHY 151 </note>
Reference-contexts: For a library of standard cells, the values for ff and fi are computed using regression analysis on several simulations (using a circuit simulator like SPICE <ref> [46] </ref>). The linear delay model for a library is also referred to as the library delay model. Most combinational optimization techniques have relied on the linear delay model.
Reference: [47] <author> S. M. Nowick and D. L. Dill. </author> <title> Exact Two-level Minimization of Hazard-free Logic with Multiple-input Changes. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <pages> pages 626-630. </pages> <publisher> IEEE, </publisher> <year> 1992. </year>
Reference-contexts: The actual delay of a gate depends on the fabrication process and on factors related to the operating environment (like temperature, exposure to radiation etc.). This makes it difficult for a designer to ensure that a circuit is hazard-free. Automated approaches to synthesize hazard-free designs have been recently proposed <ref> [47, 7, 31] </ref>. This problem is mitigated in synchronous designs due of the presence of memory elements. Hazards can appear in a combinational region, but the clock schedule is designed so that the flow of hazards through memory elements into adjacent combinational regions, is prevented or carefully controlled.
Reference: [48] <author> J. K. Ousterhout. </author> <title> A Switch-Level Timing Verifier for Digital MOS VLSI. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> CAD-4(3):336-349, </volume> <month> July </month> <year> 1985. </year>
Reference-contexts: Then compute arrival times for a gate at level i only after all gates at level i 1 have been processed. We shall have occasion to use this in the algorithms we develop. In the early eighties, timing analysis on transistor net-lists was an area of intense research <ref> [48, 26, 68] </ref>. The first of these, CRYSTAL [48] uses a switch-level approach (advocated by a genre of simulators) to detect critical paths in the circuit. The delay model is based on the CHAPTER 2. PRELUDE 22 RC model (lumped and distributed) described in [43, 52]. <p> We shall have occasion to use this in the algorithms we develop. In the early eighties, timing analysis on transistor net-lists was an area of intense research [48, 26, 68]. The first of these, CRYSTAL <ref> [48] </ref> uses a switch-level approach (advocated by a genre of simulators) to detect critical paths in the circuit. The delay model is based on the CHAPTER 2. PRELUDE 22 RC model (lumped and distributed) described in [43, 52].
Reference: [49] <author> P. G. Paulin and F. Poirot. </author> <title> Logic Decomposition Algorithms for the Timing Optimization of Multi-Level Logic. </title> <booktitle> In Proceedings of the International Conference on Computer Design, </booktitle> <pages> pages 329-33, </pages> <year> 1989. </year>
Reference-contexts: This Section examines some techniques that are popular in literature and practice. Combinational optimization The problem of optimizing a combinational circuit has been well studied and numerous algorithms have been proposed. A representative sample of the optimization approaches may be classified into the following categories. 1. Circuit restructuring <ref> [66, 16, 17, 49] </ref>: A simple idea to decrease the delay of a circuit is to move late arriving signals in a cone of logic, closer towards the output. In practice, sophisticated techniques for selecting these cones of logic are required.
Reference: [50] <author> D. J. Pilling and H. B. Sun. </author> <title> Computer-Aided Prediction of Delays in LSI Logic Systems. </title> <booktitle> In Proceedings of the Design Automation Conference, </booktitle> <pages> pages 182-186. IEEE/ACM, </pages> <year> 1973. </year>
Reference-contexts: would take an entire book to do so), but is intended to provide a brief description of the evolution of timing issues and to underline salient features that are borrowed in our approach. 2.2.1 Timing analysis An excellent survey by Hitchcock, Sr. [21] describes several early efforts in timing analysis <ref> [50, 80, 58, 27, 30, 42, 22] </ref>. These timing analyzers suffer from poor modeling of memory elements (only flip-flops are assumed present). If a circuit has only FEDFF's, then it suffices to restrict attention to the timing analysis of combinational regions.
Reference: [51] <author> E. Polak, R. Trahan, and D. Q. Mayne. </author> <title> Combined phase I phase II Methods of Feasible Directions. </title> <journal> Mathematical Programming, </journal> <volume> 17(1) </volume> <pages> 61-73, </pages> <year> 1971. </year>
Reference-contexts: The pioneering work done in TILOS demonstrated that the area and delay of a transistor net-list are representable as posynomial functions of transistor sizes. TILOS [18] uses a heuristic based on sensitivity computations. Shyu et al. [64] use the method of feasible directions (a standard non-linear optimization technique <ref> [51] </ref>) to solve the problem. iCONTRAST [57] uses a convex optimization technique proposed recently [76]. Marple [39] presents a solution to the transistor sizing problem based on Lagrangian multipliers.
Reference: [52] <author> J. Rubinstein, P. Penfield, and M. A. Horowitz. </author> <title> Signal Delay in RC Tree Networks. </title> <journal> In IEEE Transactions on CAD, </journal> <pages> pages 119-127, </pages> <month> July </month> <year> 1983. </year>
Reference-contexts: The first of these, CRYSTAL [48] uses a switch-level approach (advocated by a genre of simulators) to detect critical paths in the circuit. The delay model is based on the CHAPTER 2. PRELUDE 22 RC model (lumped and distributed) described in <ref> [43, 52] </ref>. CRYSTAL uses a value-independent approach (unless specified, with the caveat that specifying data values may cause the program to fail in identifying critical paths eliminated by the specification). A problem inherent with value-independent analysis is that changes may be propagated oblivious of other conditions in the circuit.
Reference: [53] <author> R. Rudell. </author> <title> Logic Synthesis for VLSI Design. </title> <type> PhD thesis, </type> <institution> University of California, Berkeley, </institution> <year> 1989. </year>
Reference-contexts: In practice, sophisticated techniques for selecting these cones of logic are required. Algorithms used for minimizing area, like logic decomposition are modified with a cost function that depends on some estimate of the final delay of the circuit. 2. Technology mapping and buffer optimization <ref> [65, 5, 73, 53, 36] </ref>: A critical step in logic synthesis is the binding of Boolean equations to an implementation technology. Standard technology mapping (such as [29]) yields a minimal area implementation. It can be tailored to yield circuits with less delay for an area penalty.
Reference: [54] <author> K. Sakallah, T. Mudge, and O. A. Olukotun. </author> <title> Analysis and Design of Latch-Controlled Synchronous Circuits. </title> <booktitle> In Proceedings of the Design Automation Conference, </booktitle> <pages> pages 111-117. IEEE/ACM, </pages> <year> 1990. </year>
Reference-contexts: The iterations are used to shave time off in the different intervals that combine to yield the clocking scheme. Ishii et al. [25] present a polynomial algorithm to deal with 2 phase level-clocked circuitry, using the fixed delay model and considering only set-up constraints. Sakallah et al. <ref> [54, 55] </ref> propose an elegant model and use linear programming techniques to solve for the clock schedule. The optimality of the procedure [55] remains unanswered (most probably the algorithm is sub-optimal). <p> Section 4.4 presents two approaches to solve the clock schedule optimization problem. An example is given in Section 4.5 to illustrates the proposed techniques. Results on a set of benchmarks are also provided in the same Section. 4.2 Clocking constraints: a new form Szymanski terms the original constraints in <ref> [54] </ref> as aggressive. He suggests modifying the early equation set by letting r i = s L (i) for a level-sensitive memory element. This is called the conservative set of constraints. The motivation is two-fold.
Reference: [55] <author> K. Sakallah, T. N. Mudge, and O. A. Olukotun. </author> <title> CheckT c and minT c : Timing Verification and Optimal Clocking of Synchronous Digital Circuits. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <pages> pages 552-555. </pages> <publisher> IEEE, </publisher> <year> 1990. </year>
Reference-contexts: The fixed delay model is used and only set-up constraints are checked. Sakallah et al.[54] present an elegant model which handles both kinds of memory elements in a simple manner. Using this model, they present an iterative approach for timing verification <ref> [55] </ref> called CheckT c . Our approach is developed on these models. A formal definition of the models is given in Section 2.3. All the timing verification techniques described so far are static, namely they are value-independent. <p> The iterations are used to shave time off in the different intervals that combine to yield the clocking scheme. Ishii et al. [25] present a polynomial algorithm to deal with 2 phase level-clocked circuitry, using the fixed delay model and considering only set-up constraints. Sakallah et al. <ref> [54, 55] </ref> propose an elegant model and use linear programming techniques to solve for the clock schedule. The optimality of the procedure [55] remains unanswered (most probably the algorithm is sub-optimal). <p> Sakallah et al. [54, 55] propose an elegant model and use linear programming techniques to solve for the clock schedule. The optimality of the procedure <ref> [55] </ref> remains unanswered (most probably the algorithm is sub-optimal). The problem formulation in [55] is valid only in the steady state of circuit operation and leads to a non-convex solution set. A major contribution made by Szymanski [69] is to modify the constraints to ensure correct circuit CHAPTER 2. <p> Sakallah et al. [54, 55] propose an elegant model and use linear programming techniques to solve for the clock schedule. The optimality of the procedure <ref> [55] </ref> remains unanswered (most probably the algorithm is sub-optimal). The problem formulation in [55] is valid only in the steady state of circuit operation and leads to a non-convex solution set. A major contribution made by Szymanski [69] is to modify the constraints to ensure correct circuit CHAPTER 2. PRELUDE 25 behavior from quiescence. This provides a formulation with a convex solution set. <p> A major contribution made by Szymanski [69] is to modify the constraints to ensure correct circuit CHAPTER 2. PRELUDE 25 behavior from quiescence. This provides a formulation with a convex solution set. A drawback of the formulation in <ref> [55] </ref> is that several constraints in the linear programming formulation are redundant. Detecting a redundant constraint amongst a set of constraints is as hard as solving the linear program itself. Consequently general linear programming techniques are unable to eliminate constraints efficiently. <p> CHAPTER 2. PRELUDE 26 2.3 Definitions This Section presents the mathematical models that form a basis for the rest of the thesis. These models were first proposed by Sakallah et al. in <ref> [55] </ref>. 2.3.1 Clocking scheme A clocking scheme, F is a collection of l periodic signals, 1 ; l , each with a common period c, and is represented by F = ( 1 ; 2 ; ; l ). <p> The phase shift operator E ij introduced in <ref> [55] </ref> is used to translate all measurements of time from the local frame of phase i to the local frame of j . The phase shift operator is defined for a combinational path between latches. <p> Of CHAPTER 2. PRELUDE 34 Problem Comments Clock Verification Given C, c and s i ; e i i = 1; l, does circuit operate correctly ? See <ref> [24, 55] </ref>. Clock Optimization Given C, find smallest c and s i ; e i i = 1; l so that circuit operates correctly. See [55, 69, 25]. Retiming Given C, reposition memory elements for smallest c. See [33, 25, 35]. Resynthesis Given C, resynthesize circuit for smallest c. <p> Clock Optimization Given C, find smallest c and s i ; e i i = 1; l so that circuit operates correctly. See <ref> [55, 69, 25] </ref>. Retiming Given C, reposition memory elements for smallest c. See [33, 25, 35]. Resynthesis Given C, resynthesize circuit for smallest c. See [38, 2]. Table 2.3: Clocking issues these, we shall focus on the clock verification, clock optimization and pipeline resynthesis problems. <p> Ensuring that a clock schedule adheres to the clocking constraints is a difficult problem for the human designer; especially in the presence of level-sensitive memory elements. Another reason for investigating this problem is that previous approaches <ref> [55, 78] </ref> fail to provide an analysis on the complexity of their procedures. Lastly the development of sophisticated algorithms to solve other clocking issues is hampered without the ability to verify the resulting solution. 3.1 Overview The clocking constraints (Table 2.2) are summarized in the Table 3.1. <p> We have demonstrated that there can be multiple solutions to the clocking constraints for the given model. An interpretation to the multiple solutions has also been provided. It was the paper by Sakallah et al. <ref> [55] </ref> that evoked our interest in this problem. Our first result was a pseudo-polynomial algorithm for clock schedule verification [61]. <p> The formulation in Table 2.2 involves max and min operators, which interact with one another. The approach suggested by Sakallah et al. <ref> [55] </ref> is to relax the min and max operators to a set of inequalities. The clock period optimization problem reduces to a linear program whose objective is to minimize c. A solution to the linear program is a lower bound on the clock period. <p> Several discussions with Szymanski on the clock schedule verification problem led to an exposure to the optimal clocking problem; in particular our curiosity was aroused by the non-convexity of the original model proposed by Sakallah et al. <ref> [55] </ref>. We chose the effort by Szymanski [72] that provides the linear programming formulation (whose merits have been summarized earlier), as the basis for our approach. <p> So the same gate may be assigned different delays in different inequalities and sometimes in the same inequality. This has been the model of choice for all the previous work on optimal clocking <ref> [55, 69, 62] </ref>. APPENDIX A. OPTIMALITY OF THE SMM DELAY MODEL 133 2. consistent min-max delay model (CmM): In this case, the delay is determined as a part of the optimization step for the clock period. <p> A clocking scheme thus computed, is not necessarily robust. A.1.2 SmM delay model This formulation was suggested by Sakallah <ref> [55] </ref> and has been used by Szymanski [69] and Shenoy [62]. This is a conservative approach.
Reference: [56] <author> A. Saldanha, N. Shenoy, R. K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Approximating Optimum Functional Clock Schedules. </title> <note> in preparation, </note> <month> July </month> <year> 1992. </year>
Reference-contexts: We feel that the existence of false paths (due to unreachable states) is more likely in sequential circuits than in purely combinational circuits. Using paths that actually propagate events for purposes of clock schedule verification and optimization is the next logical step. Efforts <ref> [56] </ref> are currently underway to approximate the optimum clock schedule which includes only sensitizable paths. The problem of clock schedule analysis with multiple frequency clock signals is another issue that merits investigation. Lastly, permitting arbitrary signals to control memory elements remains largely unsolved.
Reference: [57] <author> S. Sapatnekar. </author> <title> A Convex Programming Approach to Problems in VLSI Design. </title> <type> PhD thesis, </type> <institution> University of Illinois, Urbana-Champaign, </institution> <year> 1992. </year> <note> BIBLIOGRAPHY 152 </note>
Reference-contexts: PRELUDE 24 3. Rule based [9, 20]: These approaches use a variety of transformations to improve the performance of a circuit. Limitations inherent to all rule based systems are two-fold; the rules depend on the choice of technology and only local improvement can be gained. 4. Transistor sizing <ref> [64, 18, 57, 39] </ref>: This is a popular technique for performance optimization. The pioneering work done in TILOS demonstrated that the area and delay of a transistor net-list are representable as posynomial functions of transistor sizes. TILOS [18] uses a heuristic based on sensitivity computations. <p> TILOS [18] uses a heuristic based on sensitivity computations. Shyu et al. [64] use the method of feasible directions (a standard non-linear optimization technique [51]) to solve the problem. iCONTRAST <ref> [57] </ref> uses a convex optimization technique proposed recently [76]. Marple [39] presents a solution to the transistor sizing problem based on Lagrangian multipliers.
Reference: [58] <author> T. Sasaki, A. Yamada, T. Aoyama, K. Hasegawa, S. Kato, and S. Sato. </author> <title> Hierarchical Design Verification for Large Digital Systems. </title> <booktitle> In Proceedings of the Design Automation Conference, </booktitle> <pages> pages 105-112. IEEE/ACM, </pages> <year> 1981. </year>
Reference-contexts: would take an entire book to do so), but is intended to provide a brief description of the evolution of timing issues and to underline salient features that are borrowed in our approach. 2.2.1 Timing analysis An excellent survey by Hitchcock, Sr. [21] describes several early efforts in timing analysis <ref> [50, 80, 58, 27, 30, 42, 22] </ref>. These timing analyzers suffer from poor modeling of memory elements (only flip-flops are assumed present). If a circuit has only FEDFF's, then it suffices to restrict attention to the timing analysis of combinational regions.
Reference: [59] <author> R. B. Segal. BDSYN: </author> <title> Logic Description Translator; BDSIM: Switch Level Simulator. </title> <type> Master's thesis, </type> <institution> University of California, Berkeley, </institution> <month> May </month> <year> 1987. </year> <note> ERL Memo. M87/33. </note>
Reference-contexts: The phase controlling it may be omitted if all memory elements are clocked by the same phase (single phase clocking scheme). The high level description of the circuit in BDS <ref> [59] </ref> is given in Figure 1.4. The BDS description is translated to a logic level description and memory elements are inserted. A sequential logic optimizer SIS [60], is used to obtain a logic circuit which has not been bound to a technology.
Reference: [60] <author> E. Sentovich et al. </author> <title> Sequential Circuit Design Using Synthesis and Optimization. </title> <booktitle> In Proceedings of the International Conference on Computer Design, </booktitle> <year> 1992. </year>
Reference-contexts: The high level description of the circuit in BDS [59] is given in Figure 1.4. The BDS description is translated to a logic level description and memory elements are inserted. A sequential logic optimizer SIS <ref> [60] </ref>, is used to obtain a logic circuit which has not been bound to a technology. At this stage the designer is interested in exploring the design space for a performance versus area trade-off. <p> These circuits have a large number of buffers and inverters. The circuits are passed to a sequential optimizer SIS <ref> [60] </ref>, which simplifies the logic. An industrial library is used to bind the logic to a CMOS technology. The characteristics of the benchmarks are shown in Table 3.4. Column 2 gives the number of 2 input and gates, or gates and inverters.
Reference: [61] <author> N. Shenoy, R. K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> A Pseudo-Polynomial Algorithm for Verification of Clocking Schemes. </title> <booktitle> In Tau 92, </booktitle> <year> 1992. </year>
Reference-contexts: The second choice for the initial guess can * lead to an erroneous solution (this will be clarified in Section 3.3.3), * take an arbitrary long time to converge. The details of convergence of the iterations with the second choice of initial guess may be found in <ref> [61] </ref>. We shall focus only on the algorithm with the first choice of initial guess. An algorithm to compute a solution to the early equation set is given in Procedure 3.2.2. Procedure 3.2.2 1. <p> An interpretation to the multiple solutions has also been provided. It was the paper by Sakallah et al. [55] that evoked our interest in this problem. Our first result was a pseudo-polynomial algorithm for clock schedule verification <ref> [61] </ref>. This approach recognized that the long path equation set was equivalent to a Bellman-Ford relaxation (a technique commonly used to solve the problem of computing the shortest path in a graph).
Reference: [62] <author> N. Shenoy, R. K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Graph Algorithms for Efficient Clock Schedule Optimization. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <year> 1992. </year>
Reference-contexts: The rest of the section is devoted to proving the equivalence of the sets of constraints in Table 4.1 and Table 4.2. The following Lemma has been has been used by several researchers <ref> [24, 25, 69, 62] </ref>; the proof is borrowed from [69]. Lemma 4.2.1 Let c be a feasible value of the clock period to constraints 1 and 2 in Table 4.2 over all paths p 2 P (G). <p> So the same gate may be assigned different delays in different inequalities and sometimes in the same inequality. This has been the model of choice for all the previous work on optimal clocking <ref> [55, 69, 62] </ref>. APPENDIX A. OPTIMALITY OF THE SMM DELAY MODEL 133 2. consistent min-max delay model (CmM): In this case, the delay is determined as a part of the optimization step for the clock period. <p> A clocking scheme thus computed, is not necessarily robust. A.1.2 SmM delay model This formulation was suggested by Sakallah [55] and has been used by Szymanski [69] and Shenoy <ref> [62] </ref>. This is a conservative approach.
Reference: [63] <author> N. Shenoy, R. K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Resynthesis of Multi-Phase Pipelines. </title> <booktitle> In Proceedings of the Design Automation Conference, </booktitle> <year> 1993. </year>
Reference-contexts: to meet an early required time constraint, set to a fraction of the longest delay, these outputs need to be buffered by a significant amount. 6.8 Discussion The main motivation for this Chapter lies in the synthesis of sequential circuits (with level-sensitive memory elements) to meet a target clock period <ref> [63] </ref>. We have introduced the minimum padding problem in circuit synthesis. Under the pip-to-pin delay model, we give a theorem that prescribes necessary and sufficient conditions to solve the padding problem. We present two algorithms to solve the relaxed problem.
Reference: [64] <author> J. Shyu, J. P. Fishburn, A. E. Dunlop, and A. Sangiovanni-Vincentelli. </author> <title> Optimization-based Transistor Sizing. </title> <journal> IEEE Journal of Solid-State Circuits, </journal> <pages> pages 100-409, </pages> <year> 1988. </year>
Reference-contexts: PRELUDE 24 3. Rule based [9, 20]: These approaches use a variety of transformations to improve the performance of a circuit. Limitations inherent to all rule based systems are two-fold; the rules depend on the choice of technology and only local improvement can be gained. 4. Transistor sizing <ref> [64, 18, 57, 39] </ref>: This is a popular technique for performance optimization. The pioneering work done in TILOS demonstrated that the area and delay of a transistor net-list are representable as posynomial functions of transistor sizes. TILOS [18] uses a heuristic based on sensitivity computations. <p> The pioneering work done in TILOS demonstrated that the area and delay of a transistor net-list are representable as posynomial functions of transistor sizes. TILOS [18] uses a heuristic based on sensitivity computations. Shyu et al. <ref> [64] </ref> use the method of feasible directions (a standard non-linear optimization technique [51]) to solve the problem. iCONTRAST [57] uses a convex optimization technique proposed recently [76]. Marple [39] presents a solution to the transistor sizing problem based on Lagrangian multipliers.
Reference: [65] <author> K. J. Singh and A. Sangiovanni-Vincentelli. </author> <title> A Heuristic Algorithm for the Fanout Problem. </title> <booktitle> In Proceedings of the Design Automation Conference, </booktitle> <pages> pages 357-360, </pages> <year> 1990. </year>
Reference-contexts: In practice, sophisticated techniques for selecting these cones of logic are required. Algorithms used for minimizing area, like logic decomposition are modified with a cost function that depends on some estimate of the final delay of the circuit. 2. Technology mapping and buffer optimization <ref> [65, 5, 73, 53, 36] </ref>: A critical step in logic synthesis is the binding of Boolean equations to an implementation technology. Standard technology mapping (such as [29]) yields a minimal area implementation. It can be tailored to yield circuits with less delay for an area penalty.
Reference: [66] <author> K. J. Singh, A. R. Wang, R. K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Timing Optimization of Combinational Logic. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <pages> pages 282-285, </pages> <year> 1988. </year>
Reference-contexts: This Section examines some techniques that are popular in literature and practice. Combinational optimization The problem of optimizing a combinational circuit has been well studied and numerous algorithms have been proposed. A representative sample of the optimization approaches may be classified into the following categories. 1. Circuit restructuring <ref> [66, 16, 17, 49] </ref>: A simple idea to decrease the delay of a circuit is to move late arriving signals in a cone of logic, closer towards the output. In practice, sophisticated techniques for selecting these cones of logic are required. <p> For a stage with small difference, resynthesis for a target delay of the stage may cause all outputs to be critical. 2. The size of the stage. If the stage has a large size then the resynthesis algorithm has a better chance of identifying nodes on critical cuts <ref> [66] </ref>. CHAPTER 5. RESYNTHESIS OF MULTI-PHASE PIPELINES 94 The actual function used to compute this figure will depend to a large extent on the algorithm used for combinational resynthesis, and the factors that aid the particular algorithm. The resynthesis algorithm in our implementation is the path restructuring approach presented in [66]. <p> <ref> [66] </ref>. CHAPTER 5. RESYNTHESIS OF MULTI-PHASE PIPELINES 94 The actual function used to compute this figure will depend to a large extent on the algorithm used for combinational resynthesis, and the factors that aid the particular algorithm. The resynthesis algorithm in our implementation is the path restructuring approach presented in [66]. 5.6 Cycle stealing So far it was assumed that the longest path in the circuit from (an input of) stage S i to (an output of) stage S j1 (j &gt; i), was the sum of the longest paths in each of the stages. <p> The only anomaly in the table is the circuit named parity (row 7), where setting a faster target clock resulted in an area saving. We attribute this to the fact that decreasing the target clock period increases the * critical network (see <ref> [66] </ref> for details) which allows the optimizer to explore a large space for delay optimization. name initial target (clock/area) (clock/area) adder 21.4/103 20/104 19/104 18/123 17/127 addT1 10.0/26 9/28 8/29 - addT2 12.1/89 11/95 10/101 9/101 - addT3 21.3/226 20/238 - addT4 26.2/511 25/551 24/563 22/569 - mcnc 54.6/384 52/391 50/413 <p> Providing a circuit that achieves the upper bound constraints at all outputs, given primary input arrival times, has long been a focus of research. Singh et al. <ref> [66] </ref> present an algorithm that uses the movement of critical signals closer to the output of a cone of logic to speed up circuits. <p> A refinement to the above procedure is to find a cutset of external edges so that delays can be inserted independently on each edge. A min-cut found using a flow algorithm as described in <ref> [66] </ref> can be used to insert delays simultaneously on several edges without updating the values for the slacks. 6.4 A linear programming approach In this section we show that the minimum padding problem is equivalent to a linear program obtained by relaxing Equations 6.1 and 6.2.
Reference: [67] <author> P. R. Stephan, R. K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Combinational Test Generation using Satisfiability. </title> <note> Memo. No. UCB/ERL M92/12, </note> <year> 1992. </year>
Reference-contexts: The basic formulation of this problem can be found in [40, 13]. It involves capturing the sensitization criteria at every gate and solving the set of criteria efficiently. More recently, efficient techniques [41] based on solving Boolean SATISFIABILITY <ref> [67] </ref> have been reported. Although false paths are not encountered frequently in combinational circuits, they are extremely common in sequential circuits.
Reference: [68] <author> T. G. Szymanski. LEADOUT: </author> <title> A Static Timing Analyzer for MOS Circuits. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <pages> pages 130-133. </pages> <publisher> IEEE, </publisher> <year> 1986. </year>
Reference-contexts: Then compute arrival times for a gate at level i only after all gates at level i 1 have been processed. We shall have occasion to use this in the algorithms we develop. In the early eighties, timing analysis on transistor net-lists was an area of intense research <ref> [48, 26, 68] </ref>. The first of these, CRYSTAL [48] uses a switch-level approach (advocated by a genre of simulators) to detect critical paths in the circuit. The delay model is based on the CHAPTER 2. PRELUDE 22 RC model (lumped and distributed) described in [43, 52]. <p> TV [26] is a timing analysis program for nMOS circuits. A set of rules are used to determine signal flow before timing analysis. It uses breadth-first analysis to speed up the analysis. The approach in LEADOUT <ref> [68] </ref> uses the notion of a causality graph and uses compiled code techniques to analyze the circuit. Multi-phase clocks are permitted and latches are correctly handled. It constructs a set of equations relating various events in the circuit.
Reference: [69] <author> T. G. Szymanski. </author> <title> Computing Optimal Clock Schedules. </title> <booktitle> In Proceedings of the Design Automation Conference, </booktitle> <year> 1992. </year> <note> BIBLIOGRAPHY 153 </note>
Reference-contexts: The optimality of the procedure [55] remains unanswered (most probably the algorithm is sub-optimal). The problem formulation in [55] is valid only in the steady state of circuit operation and leads to a non-convex solution set. A major contribution made by Szymanski <ref> [69] </ref> is to modify the constraints to ensure correct circuit CHAPTER 2. PRELUDE 25 behavior from quiescence. This provides a formulation with a convex solution set. A drawback of the formulation in [55] is that several constraints in the linear programming formulation are redundant. <p> Clock Optimization Given C, find smallest c and s i ; e i i = 1; l so that circuit operates correctly. See <ref> [55, 69, 25] </ref>. Retiming Given C, reposition memory elements for smallest c. See [33, 25, 35]. Resynthesis Given C, resynthesize circuit for smallest c. See [38, 2]. Table 2.3: Clocking issues these, we shall focus on the clock verification, clock optimization and pipeline resynthesis problems. <p> The 2 phases are constrained to be non-overlapping, i.e. at no instant in time are latches on phase 1 and phase 2 simultaneously active. The new level-sensitive circuit is functionally equivalent to the original edge-triggered circuit. 2. Szymanski <ref> [69] </ref> proposes a simple approach to generate 2 phase circuits from a single phase circuit. Replace all edge-triggered elements by level-sensitive ones. The circuit is duplicated to yield two copies of the circuit named X and Y . <p> A solution to the linear program is a lower bound on the clock period. The solution to the linear program is perturbed to obtain a solution to the original problem. CHAPTER 4. CLOCK SCHEDULE OPTIMIZATION 56 Szymanksi presents two major contributions in <ref> [69] </ref>. <p> The idea of eliminating the auxiliary variables is conceptually elegant but leads to the question of formulating the clocking constraints without having to explicitly generate equations in Table 2.2. The conservative constraints described in <ref> [69] </ref> are shown in Table 4.1. Denote a flip-flop by F and a latch by L. There are 4 types of paths in a latch graph G. A path p : i 1 ; i q can be CHAPTER 4. <p> The rest of the section is devoted to proving the equivalence of the sets of constraints in Table 4.1 and Table 4.2. The following Lemma has been has been used by several researchers <ref> [24, 25, 69, 62] </ref>; the proof is borrowed from [69]. Lemma 4.2.1 Let c be a feasible value of the clock period to constraints 1 and 2 in Table 4.2 over all paths p 2 P (G). <p> The rest of the section is devoted to proving the equivalence of the sets of constraints in Table 4.1 and Table 4.2. The following Lemma has been has been used by several researchers [24, 25, 69, 62]; the proof is borrowed from <ref> [69] </ref>. Lemma 4.2.1 Let c be a feasible value of the clock period to constraints 1 and 2 in Table 4.2 over all paths p 2 P (G). <p> Szymanski demonstrated <ref> [69] </ref> that the inequalities in Table 4.1 implied the inequalities in Table 4.2. We will provide a proof for the converse too. Theorem 4.2.3 The constraints in Table 4.1 have a solution if and only if the inequalities in Table 4.2 have a solution. <p> If i 2 is a flip-flop, a contradiction to constraint 4 in Table 4.2 is found. 4.3 Eliminating redundant constraints This section is basically a reproduction of the theorems from <ref> [69] </ref>, that are used to reduce the number of constraints in Table 4.2. Constraints 3 and 4 total up to jEj constraints (one inequality per edge). Constraints 1 and 2, on the other hand, must hold for all paths, and possibly are infinite in number. <p> If we are given a clock period c this reduces to O (l 2 ) constraints. To compute all relevant long path constraints for all valid clock periods, we use the approach suggested by Szymanski <ref> [69] </ref>. This has a complexity of O (ljEjjV j). This approach also requires the computation of (the algorithm to do so has a complexity of O (jV jjEjb), where b is the number of bits of accuracy required in computing ). <p> The last column gives the total time taken by the implementation described by Szymanski <ref> [69] </ref>, using a unit delay model. The first entry in the column is the time taken to process the circuit and the second entry reports the time for computing , extracting the constraints and the best time required for solving the resulting linear program (amongst 3 linear program solvers). Szymanski [69] <p> <ref> [69] </ref>, using a unit delay model. The first entry in the column is the time taken to process the circuit and the second entry reports the time for computing , extracting the constraints and the best time required for solving the resulting linear program (amongst 3 linear program solvers). Szymanski [69] reports that no one linear program solver (of the 3) was uniformly the fastest; and that for occasional instances there was a factor of five between the best and worst linear program solvers. The circuits used CHAPTER 4. <p> A indicates that the results are not available. name read-in time optimal time time (sec.) (sec.) clock A1 (sec.) A2 (sec.) Szymanski <ref> [69] </ref> 2planet 1.29 56.00 0.01 56.00 0.01 0.01 - 2s1423 4.19 129.40 0.42 129.40 0.13 0.14 - 2s9234 9.87 55.20 1.30 55.20 0.25 0.30 - 2s38584 115.96 861.80 15.47 861.80 2.81 2.9 15.5 + 6.0 2s35932 72.64 641.80 1.00 641.80 0.65 0.68 - Table 4.3: Optimal clock computation with unit delay <p> Consequently the iterations are never completed for lower (i.e. infeasible) clock periods. As a side-note, the implementation to compute the lower bound makes use of a cycle-detection heuristic proposed by Szymanski [71]. The detailed procedure to compute may be found in <ref> [69] </ref>. Briefly, a guess 0 for the value of is made and each edge in the latch graph is assigned a weight D ij K ij 0 . A positive cycle in the latch graph implies that the guess was an under-estimate for the bound. <p> So the same gate may be assigned different delays in different inequalities and sometimes in the same inequality. This has been the model of choice for all the previous work on optimal clocking <ref> [55, 69, 62] </ref>. APPENDIX A. OPTIMALITY OF THE SMM DELAY MODEL 133 2. consistent min-max delay model (CmM): In this case, the delay is determined as a part of the optimization step for the clock period. <p> A clocking scheme thus computed, is not necessarily robust. A.1.2 SmM delay model This formulation was suggested by Sakallah [55] and has been used by Szymanski <ref> [69] </ref> and Shenoy [62]. This is a conservative approach.
Reference: [70] <author> T. G. Szymanski. </author> <title> Private communication. </title> <month> January, </month> <year> 1992. </year>
Reference-contexts: However it ignored the possibility of multiple solutions and had a drawback that could lead to incorrect results for the short path equations if the clock period was optimal. This was duly pointed out by Szymanski <ref> [70] </ref>. In order to correct the deficiencies of the pseudo-polynomial algorithm, we came up with the a sufficient condition for uniqueness of the late and early equation set. Szymanski had reached the same conclusions independently.
Reference: [71] <author> T. G. Szymanski. </author> <title> Private communication. </title> <month> February, </month> <year> 1993. </year>
Reference-contexts: The Floyd-Warshall skeleton (in column A2) detects a negative cycle early, if one exists. Consequently the iterations are never completed for lower (i.e. infeasible) clock periods. As a side-note, the implementation to compute the lower bound makes use of a cycle-detection heuristic proposed by Szymanski <ref> [71] </ref>. The detailed procedure to compute may be found in [69]. Briefly, a guess 0 for the value of is made and each edge in the latch graph is assigned a weight D ij K ij 0 .
Reference: [72] <author> T. G. Szymanski and N. V. Shenoy. </author> <title> Verifying Clock Schedules. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <year> 1992. </year>
Reference-contexts: Several discussions with Szymanski on the clock schedule verification problem led to an exposure to the optimal clocking problem; in particular our curiosity was aroused by the non-convexity of the original model proposed by Sakallah et al. [55]. We chose the effort by Szymanski <ref> [72] </ref> that provides the linear programming formulation (whose merits have been summarized earlier), as the basis for our approach. By a curious co-incidence, a paper by Megiddo [44] triggered some ideas that led to exploring the structure of the linear program for the optimal clock schedule computation problem.
Reference: [73] <author> H. Touati. </author> <title> Performance-Oriented Technology mapping. </title> <type> PhD thesis, </type> <institution> University of California, Berkeley, </institution> <year> 1990. </year>
Reference-contexts: In practice, sophisticated techniques for selecting these cones of logic are required. Algorithms used for minimizing area, like logic decomposition are modified with a cost function that depends on some estimate of the final delay of the circuit. 2. Technology mapping and buffer optimization <ref> [65, 5, 73, 53, 36] </ref>: A critical step in logic synthesis is the binding of Boolean equations to an implementation technology. Standard technology mapping (such as [29]) yields a minimal area implementation. It can be tailored to yield circuits with less delay for an area penalty. <p> Thus finding the best approximation for delay insertion for a single fanout and the buffer tree construction are difficult problems. It is known that the problem of inserting buffers to meet upper bounds on arrival times with an area constraint and taking fanout loads into account, is NP-complete <ref> [5, 73] </ref>. To solve the discrete delay problem, we first find the best approximation for each fanout edge independently by a branch and bound procedure that enumerates the different sets B e . Area recovery is then done by extracting buffers common to fanouts, in a greedy manner.
Reference: [74] <author> R. S. Tsay. </author> <title> Exact Zero Skew. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <year> 1991. </year>
Reference-contexts: This can cause a memory element to permit flow of data, when in fact it should have impeded it, or vice versa. These problems are attributed to clock skew. However, recent advances in physical DA have provided techniques to overcome the clock skew problem <ref> [74, 34] </ref>. Despite the problems associated with uncontrolled skew, efforts have been also made to control clock skew to the designer's advantage CHAPTER 1. INTRODUCTION 4 [15]. Asynchronous circuits are free from clock skew problems, since there are no clock signals to be routed across the chip.
Reference: [75] <author> S. H. Unger and C. J. Tan. </author> <title> Clocking Schemes for High-Speed Digital Systems. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-35(10):880-895, </volume> <month> October </month> <year> 1986. </year>
Reference-contexts: For correct behavior, there are requirements on the minimum pulse-width that the control signal can have. An excellent description of memory element models may be found in <ref> [75] </ref>. CHAPTER 2. PRELUDE 21 2.1.3 Clock signals Although there are no restrictions on the input to the control port of a memory element, the we focusses exclusively on circuits with clock phases connected to these ports.
Reference: [76] <author> P. M. Vaidya. </author> <title> A New Algorithm for Minimizing Convex Functions over Convex Sets. </title> <booktitle> Proceedings of the IEEE Foundations of Computer Science, </booktitle> <year> 1989. </year>
Reference-contexts: TILOS [18] uses a heuristic based on sensitivity computations. Shyu et al. [64] use the method of feasible directions (a standard non-linear optimization technique [51]) to solve the problem. iCONTRAST [57] uses a convex optimization technique proposed recently <ref> [76] </ref>. Marple [39] presents a solution to the transistor sizing problem based on Lagrangian multipliers. Clock schedule optimization The clock schedule optimization problem involves computing the minimum clock period and assigning instants of occurrence to the clock events (rise/fall of phases) in some time frame.
Reference: [77] <author> D. Wallace and C. H. Sequin. ATV: </author> <title> An Abstract Timing Verifier. </title> <booktitle> In Proceedings of the Design Automation Conference, </booktitle> <pages> pages 154-159. IEEE/ACM, </pages> <year> 1988. </year>
Reference: [78] <author> N. Weiner and A. Sangiovanni-Vincentelli. </author> <title> Timing Analysis in a Logic Synthesis Environment. </title> <booktitle> In Proceedings of the Design Automation Conference, </booktitle> <pages> pages 655-661. IEEE/ACM, </pages> <year> 1989. </year>
Reference-contexts: It uses loop unfolding to overcome the cyclic nature of sequential circuits. Hence, the analysis is true for only a user specified number of clock periods. HUMMINGBIRD <ref> [78] </ref> was primarily designed as a timing analyzer operating in a logic synthesis environment. It incorporates sophisticated models for memory elements and permits multiple frequency clock signals. The algorithm resorts to an iterative technique, though no convergence properties are discussed. <p> Ensuring that a clock schedule adheres to the clocking constraints is a difficult problem for the human designer; especially in the presence of level-sensitive memory elements. Another reason for investigating this problem is that previous approaches <ref> [55, 78] </ref> fail to provide an analysis on the complexity of their procedures. Lastly the development of sophisticated algorithms to solve other clocking issues is hampered without the ability to verify the resulting solution. 3.1 Overview The clocking constraints (Table 2.2) are summarized in the Table 3.1.
Reference: [79] <author> N. Weste and K. Eshraghian. </author> <title> Principles of CMOS VLSI Design. </title> <publisher> Addison-Wesley, </publisher> <year> 1985. </year>
Reference-contexts: A placement tool is used to find locations for the polygons on a two dimensional plane. The goal is to minimize the total area and also to take the criticality of the nets into account, while ensuring that design CHAPTER 1. INTRODUCTION 6 rules <ref> [43, 79] </ref> are observed. Global and detailed routing is done to interconnect the pins of the gates. Wire length minimization, via minimization and criticality of nets are some of the issues that need to be considered. * Design Verification At this stage, the design is ready for a performance evaluation.
Reference: [80] <author> M. A. </author> <title> Wold. Design verification and Performance Analysis. </title> <booktitle> In Proceedings of the Design Automation Conference, </booktitle> <pages> pages 264-270. IEEE/ACM, </pages> <year> 1978. </year>
Reference-contexts: would take an entire book to do so), but is intended to provide a brief description of the evolution of timing issues and to underline salient features that are borrowed in our approach. 2.2.1 Timing analysis An excellent survey by Hitchcock, Sr. [21] describes several early efforts in timing analysis <ref> [50, 80, 58, 27, 30, 42, 22] </ref>. These timing analyzers suffer from poor modeling of memory elements (only flip-flops are assumed present). If a circuit has only FEDFF's, then it suffices to restrict attention to the timing analysis of combinational regions.
Reference: [81] <author> D. Wong, G. De Micheli, and M. Flynn. </author> <title> Inserting Active Delay Elements to Achieve Wave Pipelining. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <pages> pages 270-273. </pages> <publisher> IEEE, </publisher> <year> 1989. </year>
Reference-contexts: Fishburn presents [16] an approach to decrease the depth of a circuit and in [17] presents an iterative algorithm that combines several known methods in a heuristic manner. We are concerned with the problem of satisfying lower bounds on delays of paths. De Micheli et al. <ref> [81] </ref> in an effort concerning wave pipelining of circuits, solve a problem which is related to the problem we describe in this Chapter. The definitions of terms used in this Chapter are described in Section 6.2. <p> In the case of wave pipelining, the system is clocked at a faster rate. Consider the structure used for wave-pipelining as shown in determined by the longest path. The primary inputs have equal early and late arrival times. Let T denote the clock period. The clock period depends <ref> [81] </ref> on * the maximum difference between the longest and shortest delay (to any gate) from the inputs (T ls ), * the maximum clock skew (T skew ), and * set-up and hold times for the memory elements (T sh ). <p> A first order approximation for T is T ls + 2 fl T skew + T sh . Wong et al. <ref> [81] </ref> focus on minimizing the first term. We shall focus on inserting minimum delays to meet a target T ls . In the terminology of Wong et al. [81] this is called rough tuning. <p> A first order approximation for T is T ls + 2 fl T skew + T sh . Wong et al. <ref> [81] </ref> focus on minimizing the first term. We shall focus on inserting minimum delays to meet a target T ls . In the terminology of Wong et al. [81] this is called rough tuning. In order to prevent data from one wave colliding with (corrupting) data in the previous wave we require a i + T ls A i (6.25) CHAPTER 6. DELAY INSERTION FOR SHORT PATHS 125 at every vertex i. <p> If we force all primary outputs i to have A i = DM AX (where DM AX is a predefined value), it is equivalent to the Balancing Problem defined by Wong et al. in <ref> [81] </ref>. 6.7 Results We present the results on a set of combinational multi-level examples. The first set of experiments deals with the greedy algorithm (Procedure 6.3.2) and the linear programming approach CHAPTER 6. DELAY INSERTION FOR SHORT PATHS 126 (Section 6.4).

References-found: 81

