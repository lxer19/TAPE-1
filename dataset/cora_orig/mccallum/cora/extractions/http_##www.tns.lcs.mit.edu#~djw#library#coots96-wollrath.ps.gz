URL: http://www.tns.lcs.mit.edu/~djw/library/coots96-wollrath.ps.gz
Refering-URL: http://www.tns.lcs.mit.edu/~djw/library/
Root-URL: 
Title: A Distributed Object Model for the Java System  
Author: Ann Wollrath, Roger Riggs, and Jim Waldo 
Address: Toronto, Ontario, Canada,  
Affiliation: Technologies  Sun Microsystems, Inc.  
Note: The following paper was originally published in the Proceedings of the USENIX 1996 Conference on Object-Oriented  For more information about USENIX Association contact:  
Email: Email: office@usenix.org  
Phone: 1. Phone: 510 528-8649 2. FAX: 510 548-5738 3.  4.  
Date: June 1996.  
Web: WWW URL: http://www.usenix.org  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Arnold, Ken, and James Gosling, </author> <title> The Java Programming Language. </title> <publisher> Addison-Wesley (1996). </publisher>
Reference: [2] <author> Birrell, Andrew, David Evers, Greg Nelson, Susan Owicki, and Edward Wobber, </author> <title> Distributed Garbage Collection for Network Objects . Digital Equipment Corporation Systems Research Center Technical Report 116 (1993). </title>
Reference-contexts: This frees the programmer from needing to k eep track of a remote object s clients so that the remote object can terminate appropriately . RMI uses a reference counting g arbage collection algorithm similar to the one used for Modula-3 Netw ork Objects <ref> [2] </ref>. To accomplish reference-counting g arbage collection, the RMI runtime k eeps track of all li ve references within each Ja va virtual machine. When a li ve reference enters a Ja va virtual machine its reference count is incremented.
Reference: [3] <author> Birrell, Andrew, Greg Nelson, Susan Owicki, and Edward Wobber, </author> <title> Network Objects . Digital Equipment Corporation Systems Research Center Technical Report 115 (1994). </title>
Reference-contexts: Also, systems that are CORB A compliant are unable to exploit the use of dynamic stub loading, since COR-BA generally assumes that stub code is link ed in at compile time. Our approach is more akin to the Modula-3 (M3) network object system <ref> [3] </ref>. The Modula-3 system supports remote method in vocation on objects in a language-dependent f ashion (i.e., the system does not support interoperability with other languages). A second similarity is that the M3 system transmits objects via pickling.
Reference: [4] <author> Ellis, Margaret A., and Bjarne Stroustrup, </author> <title> The Annotated C++ Reference Manual . Addison-Wesley (1990). </title>
Reference-contexts: Finally, we discuss related work and conclusions. 2 Java Object Model Java is a strongly-typed objectoriented language with a C-style syntax. The language incorporates man y ideas from languages such as Smalltalk [5], Modula-3 [10], Objecti ve C [12] and C++ <ref> [4] </ref>. Ja va attempts to be simple and safe while presenting a rich set of features in the objectoriented domain. Interfaces and Classes One of the interesting features of Ja va is its separation of the notion of interf ace and class.
Reference: [5] <author> Goldberg, Adele, and David Robson, </author> <title> Smalltalk-80: The Language and Its Implementation . Addison-Wesley (1983). </title>
Reference-contexts: W e will also describe the system architecture and relevant system interf aces. Finally, we discuss related work and conclusions. 2 Java Object Model Java is a strongly-typed objectoriented language with a C-style syntax. The language incorporates man y ideas from languages such as Smalltalk <ref> [5] </ref>, Modula-3 [10], Objecti ve C [12] and C++ [4]. Ja va attempts to be simple and safe while presenting a rich set of features in the objectoriented domain.
Reference: [6] <author> Gosling, James, Bill Joy, and Guy Steele, </author> <title> The Java Language Specification . Addison-Wesley (1996). </title>
Reference: [7] <author> Hamilton, G., and P. Kougiouris, </author> <title> The Spring Nucleus: A Microkernel for Objects. </title> <booktitle> USENIX Summer Conference (July 1993). </booktitle>
Reference-contexts: Because of this limitation, this type of functionality is not easily layered on the netw ork object system without adding some b urden to the programmer. Spring <ref> [7] </ref> is an object oriented operating system designed as a successor to UNIX. Spring has the notion of a subcontract [8] which has similar functionality to the remote reference layer in the RMI system.
Reference: [8] <author> Hamilton, Graham, Michael L. Powell, and James G. Mitchell, Subcontract: </author> <title> A Flexible Base for Distributed Programming . Sun Microsystems Laboratories Technical Report, </title> <month> SMLI TR-93-13 (April </month> <year> 1993). </year>
Reference-contexts: Because of this limitation, this type of functionality is not easily layered on the netw ork object system without adding some b urden to the programmer. Spring [7] is an object oriented operating system designed as a successor to UNIX. Spring has the notion of a subcontract <ref> [8] </ref> which has similar functionality to the remote reference layer in the RMI system. Our system differs in that the remote reference layer has a narrower interface that is more tailored to handling remote method in vocation semantics.
Reference: [9] <author> Mullender, Sape (ed.), </author> <title> Distributed Systems (second edition). </title> <publisher> Addison-Wesley (1993). </publisher>
Reference: [10] <author> Nelson, Greg (ed.), </author> <title> Systems Programming with Modula-3. </title> <publisher> Prentice Hall (1991). </publisher>
Reference-contexts: W e will also describe the system architecture and relevant system interf aces. Finally, we discuss related work and conclusions. 2 Java Object Model Java is a strongly-typed objectoriented language with a C-style syntax. The language incorporates man y ideas from languages such as Smalltalk [5], Modula-3 <ref> [10] </ref>, Objecti ve C [12] and C++ [4]. Ja va attempts to be simple and safe while presenting a rich set of features in the objectoriented domain. Interfaces and Classes One of the interesting features of Ja va is its separation of the notion of interf ace and class.
Reference: [11] <author> The Object Management Group, </author> <title> Common Object Request Broker: Architecture and Specification . OMG Document Number 91.12.1 (1991). </title>
Reference-contexts: Thus, a serv er may define its o wn policies via the security manager and stub loader and the RMI system will operate within them. 5 Related Work The Common Object Request Brok er Architecture (CORBA) <ref> [11] </ref> is designed to support remote method invocation between heterogeneous languages and systems. In CORB A, distrib uted objects are described in an interf ace definition language (IDL).
Reference: [12] <author> Pinson, Lewis J. and Richard S. Wiener, </author> <title> Objective C: </title> <booktitle> ObjectOriented Programming Techniques . Addison-Wesley (1991). </booktitle>
Reference-contexts: Finally, we discuss related work and conclusions. 2 Java Object Model Java is a strongly-typed objectoriented language with a C-style syntax. The language incorporates man y ideas from languages such as Smalltalk [5], Modula-3 [10], Objecti ve C <ref> [12] </ref> and C++ [4]. Ja va attempts to be simple and safe while presenting a rich set of features in the objectoriented domain. Interfaces and Classes One of the interesting features of Ja va is its separation of the notion of interf ace and class.
Reference: [13] <author> Rago, Steven A., </author> <title> UNIX System V Network Programming. </title> <publisher> Addison-Wesley (1993). </publisher>
Reference-contexts: 1 Introduction Distributed systems require entities which reside in different address spaces, potentially on dif ferent machines, to communicate. The Ja va system (hereafter referred to simply as Ja va) provides a basic communication mechanism, sock ets <ref> [13] </ref>. While e xible and sufficient for general communication, the use of sockets requires the client and serv er using this medium to engage in some application-le vel protocol to encode and decode messages for e xchange. Design of such protocols is cumbersome and can be error prone. 1. <p> Java and other Ja va-based names and logos are trade marks of Sun Microsystems, Inc., and refer to Suns fam ily of Java-branded products and services. 2. Patent pending An alternati ve to sock ets is Remote Procedure Call (RPC) <ref> [13] </ref>. RPC systems abstract the communication interface to the level of a procedure call.
Reference: [14] <author> Riggs, Roger, Jim Waldo, Ann Wollrath, and Krishna Bharat, </author> <title> Pickling State in the Java System. </title> <booktitle> The 2nd USENIX Conference on ObjectOriented Technologies. </booktitle> <year> (1996). </year>
Reference-contexts: F or example, the current transport implementation is TCP-based (using Ja va sock ets), b ut a transport based on UDP could be used interchangeably . To accomplish transparent transmission of objects from one address space to another , the technique of pickling <ref> [14] </ref> (designed specifically for Ja va) is used. Another technique, that we call dynamic stub loading , is used to support clientside stubs which implement the same set of remote interf aces as a remote object itself.
Reference: [15] <author> Waldo, Jim, Geoff Wyant, Ann Wollrath, and Sam Kendall, </author> <title> A Note on Distributed Computing . Sun Microsystems Laboratories Technical Report, </title> <month> SMLI TR-94-29 (November </month> <year> 1994). </year>
Reference-contexts: Remote objects have v ery dif ferent f ailure semantics than local objects. These f ailures cannot be hidden from the programmer since the y cannot be mask ed by the underlying system <ref> [15] </ref>. Therefore, we choose to e x-pose the additional e xception RemoteException in all remote method calls, so that programmers can handle this failure appropriately. Remote Implementations There are tw o w ays to implement a remote interf ace (such as BankAccount).
Reference: [16] <author> Wollrath, Ann, Geoff Wyant, and Jim Waldo, </author> <title> Simple Activation for Distributed Objects. </title> <booktitle> 1st USENIX Conference on ObjectOriented Technologies. </booktitle> <address> Monterey, CA (June 1995), </address> <pages> pp. 1-11. </pages>
References-found: 16

