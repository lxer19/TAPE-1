URL: http://www.cs.unc.edu/~ramamurt/papers/TOCS.ps.Z
Refering-URL: http://www.cs.unc.edu/~ramamurt/papers.html
Root-URL: http://www.cs.unc.edu
Title: Real-Time Computing with Lock-Free Shared Objects  
Author: JAMES H. ANDERSON, SRIKANTH RAMAMURTHY, and KEVIN JEFFAY 
Keyword: Categories and Subject Descriptors: C.3 [Computer Systems Organization]: Special-Purpose and Application-Based Systems|real-time systems; D.4.1 [Operating Systems]: Process Management|concurrency, multiprocessing/multiprogramming, mutual exclusion, scheduling, synchronization; J.7 [Computer Applications]: Computers in Other Systems|real-time General Terms: Design, Experimentation, Performance, Theory Additional Key Words and Phrases: critical sections, deadline-monotonic, earliest-deadline-first, hard real-time, lock-free, rate-monotonic, scheduling, synchronization, wait-free  
Affiliation: University of North Carolina  
Abstract: This paper considers the use of lock-free shared objects within hard real-time systems. As the name suggests, lock-free shared objects are distinguished by the fact that they are accessed without locking. As such, they do not give rise to priority inversions, a key advantage over conventional, lock-based object-sharing approaches. Despite this advantage, it is not immediately apparent that lock-free shared objects can be employed if tasks must adhere to strict timing constraints. In particular, lock-free object implementations permit concurrent operations to interfere with each other, and repeated interferences can cause a given operation to take an arbitrarily long time to complete. The main contribution of this paper is to show that such interferences can be bounded by judicious scheduling. This work pertains to periodic, hard real-time tasks that share lock-free objects on a uniprocessor. In the first part of the paper, scheduling conditions are derived for such tasks, for both static and dynamic priority schemes. Based on these conditions, it is formally shown that lock-free shared objects often incur less overhead than object implementations based on wait-free algorithms or lock-based schemes. In the last part of the paper, this conclusion is validated experimentally through work involving a real-time desktop videoconferencing system. A preliminary version of this paper appeared in Proceedings of the 16th IEEE Real-Time Systems Symposium, IEEE Computer Society Press, December 1995, pp. 28-37. The first author was supported by NSF grants CCR 9216421 and CCR 9510156, by an Alfred P. Sloan Research Fellowship, and by a U.S. Army Research Office Young Investigator Award, grant number DAAH04-95-1-0323. The second author was also supported by ARO grant DAAH04-95-1-0323. The third author was supported by NSF grant CCR 9510156 and by grants from the Intel and IBM corporations. Address: Department of Computer Science, University of North Carolina, Chapel Hill, NC 27599-3175; email: fanderson, ramamurt, jeffayg@cs.unc.edu. Permission to make digital or hard copies of part or all of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or direct commercial advantage and that copies show this notice on the first page or initial screen of a display along with the full citation. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, to republish, to post on servers, to redistribute to lists, or to use any component of this work in other works, requires prior specific permission and/or a fee. Permissions may be requested from Publications Dept, ACM Inc., 1515 Broadway, New York, NY 10036 USA, fax +1 (212) 869-0481, or permissions@acm.org. 
Abstract-found: 1
Intro-found: 1
References-found: 0

