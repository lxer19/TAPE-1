URL: ftp://coast.cs.purdue.edu/pub/doc/tools/hansen-atkins-swatch.ps.Z
Refering-URL: http://www.cs.purdue.edu/coast/archive/data/categ39.html
Root-URL: http://www.cs.purdue.edu
Title: Automated System Monitoring and Notification With Swatch It is an unfortunate fact that most UNIX
Author: Stephen E. Hansen E. Todd Atkins 
Keyword: Program Logging Enhancements  
Note: The Problem  to be inadequate and/or inconvenient. To address this  Table 1:  1993 LISA November 1-5, 1993 Monterey, CA 101  
Affiliation: Stanford University  
Abstract: This paper describes an approach to monitoring events on a large number of servers and workstations. While modern UNIX systems are capable of logging a variety of information concerning the health and status of their hardware and operating system software, they are generally not configured to do so. Even when this information is logged, it is often hidden in places that are either not monitored regularly or are susceptible to deletion or modification by a successful intruder. Also, a system administrator must often monitor several, perhaps dozens, of systems. To address these problems, our approach begins with the modification of certain system programs to enhance their logging capabilities. In addition, our approach calls for the logging facilities on each of these systems to be configured in such a way as to send a copy of the critical system and security related information to a dependable, secure, central logging host system. As one might expect, this central log can see a megabyte or more of data in a single day. To keep a system administrator from being overwhelmed by a large quantity of data we have developed an easily configurable log file filter/monitor, called swatch. Swatch monitors log files and acts to filter out unwanted data and take one or more user specified actions (ring bell, send mail, execute a script, etc.) based upon patterns in the log. What every good system administrator tries to do is keep an eye on the health of each of the systems in his or her care. The health of a system should be reflected in the log messages generated by the kernel and the various daemons and utilities. In addition, these messages should also include information relevant to system security. However, with most systems we have seen, the system's log information is not generally made available to the system administrator in a way that is either secure or convenient, rather it is often hidden in places that are either not monitored regularly or are susceptible to corruption or destruction by system failure or a successful intruder. The assumption seems to be that system log files are only to be consulted after the fact, to help with postmortem rather than prevention. What this means is that the UNIX syslog (3) facility, regardless of the original intent, is generally used as more of a debugging aid than as a tool for system management. problem, our approach begins with the modification of certain system utilities to enhance the reporting done, particularly with regard to possible security related activities. Table 1 lists some of the utilities modified and the changes made to their logging capabilities. Reports the originating host and the finger target(s) to syslog. fingerd Reports originating host to syslog. Reports file transfers to a local log file along with the local user name and, if the user is "anonymous", the password. ftpd Used by rshd and login when called by rlogind. Disallows and reports to syslog any attempts to use a /etc/hosts.equiv or ~/.rhosts file that contains a `+'. ruserok Reports the access status, local user, remote user and host, and the com mand issued to a local log file. rshd Reduced number of tries to three. Reports to syslog on `Incomplete Login Attempt', `Repeated Login Attempt', and `Root Login Refused'. Includes the account names attempted and the originating host. login: 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> W. Venema. </author> <title> "TCP WRAPPER, A Tool for Network Monitoring, Access Control, and for Setting Up Booby Traps", </title> <booktitle> Proc. 1992 USENIX Security Symposium, USENIX Association, </booktitle> <month> Sept. </month> <year> 1992. </year>
Reference-contexts: In a few cases it might be preferable to use the public version instead to improve portability. Another source of security related information is from the tcp wrapper code written by Weitse Venema <ref> [1] </ref>. Besides providing access control for those network services run out of inetd, it generates information via syslog about the connections it mediates. One important utility not listed in Table 1 is sendmail (8). Even without modification sendmail can be configured to generate a plethora of status information.
Reference: [2] <author> L. Wall and R. Schwatz. </author> <title> "Programming Perl", </title> <publisher> O'Reilly and Associates, </publisher> <address> Sebastopol, CA. </address> <year> 1991. </year> <note> 1993 LISA - November 1-5, 1993 - Monterey, CA 107 Automated System Monitoring and Notification With Swatch Hansen & Atkins </note>
Reference-contexts: For example, one might want to sort through process accounting or other audit information that is not kept in a plain text file and requires special processing to read. swatch -c swatchrc.acct -p lastcomm Implementation Swatch relies heavily on expression matching. For this reason the Perl <ref> [2] </ref> language was used because of its Awk and C like characteristics, as well as its increasing familiarity among systems administrators.
References-found: 2

