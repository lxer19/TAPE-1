URL: ftp://ftp.cs.washington.edu/tr/1996/04/UW-CSE-96-04-02.PS.Z
Refering-URL: http://www.cs.washington.edu/research/tr/tr-by-title.html
Root-URL: 
Title: Model Checking Large Software Specifications  
Author: Richard J. Anderson Paul Beame Steve Burns William Chan Francesmary Modugno David Notkin Jon Reese Richard Anderson and David Notkin. 
Note: Email addresses: fanderson, beame, burns, wchan, fm, notkin, jdreeseg@cs.washington.edu. Contact authors:  
Date: May 3, 1996  
Address: Box 352350 Seattle, WA 98195-2350  
Affiliation: Department of Computer Science and Engineering University of Washington  
Pubnum: Technical Report 96-04-02  
Abstract: In this paper we present our results and experiences of using symbolic model checking to study the specification of an aircraft collision avoidance system. Symbolic model checking has been highly successful when applied to hardware systems. We are interested in the question of whether or not model checking techniques can be applied to large software specifications. To investigate this, we translated a portion of the finite-state specification of TCAS II (Traffic Alert and Collision Avoidance System) into a form accepted by a model checker (SMV). We successfully used the model checker to investigate a number of dynamic properties of the system. We report on our experiences, describing our approach to translating from RSML to SMV and our methods for achieving acceptable performance in model checking, and giving a summary of the properties that we were able to check. We consider the paper as a data point that provides reason for optimism about the potential for successful application of model checking to software systems. In addition, our experiences provide a basis for characterizing features that would be especially suitable for model checkers built specifically for analyzing software systems. The intent of this paper is to evaluate symbolic model checking of state-machine based specifications, not to evaluate the TCAS II specification. We used a preliminary version of the specification, the version 6.00, dated March, 1993, in our study. We did not have access to later versions, so we do not know if the properties identified here are present in later versions. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. Alspaugh, S. Faulk, K. Britton, R. Parker, D. Parnas, and J. Shore. </author> <title> Software Requirements for the A-7E Aircraft. </title> <type> Technical report, </type> <institution> Naval Research Lab., </institution> <month> March </month> <year> 1988. </year>
Reference-contexts: While their motivations were similar, our studies differ in several ways because of differences in the specifications. The A-7E aircraft requirements were written in the Software Cost Reduction (SCR) requirements notation <ref> [1, 13] </ref>, as opposed RSML. RSML contains features like hierarchical states and particular assumptions and constraints on timing that are not present in SCR.
Reference: [2] <author> J. M. Atlee and A. M. Buckley. </author> <title> A Logic-Model Semantics for SCR Software Requirements. </title> <booktitle> In Proceedings of the International Symposium on Software Testing and Analysis, </booktitle> <pages> pages 280-292, </pages> <month> January </month> <year> 1996. </year> <month> 15 </month>
Reference-contexts: RSML contains features like hierarchical states and particular assumptions and constraints on timing that are not present in SCR. It was previously believed that a state hierarchy has to be flattened, or the analysis has to be limited to a subset of the RSML features <ref> [2] </ref>. In addition, the environment of the A-7E specification is abstracted as a set of predicates, whereas the inputs to our system are events and numerical values. Numerical calculation and comparison are abundant in the TCAS specification, and they could incur significant performance problems in the model checking process.
Reference: [3] <author> J.M. Atlee and J. Gannon. </author> <title> State-based Model Checking of Event-Driven System Requirements. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-19(1):24-40, </volume> <month> January </month> <year> 1993. </year>
Reference-contexts: This concern has not been as aggressively addressed in the literature. The examples used by Jackson, by Wing and Vaziri-Farahani, and by Atlee and Gannon <ref> [3] </ref>, for instance, are useful for showing the basic promise of applying model checking to software systems, but still consider relatively small systems. When the systems and their associated state spaces grow in size, the question remains as to whether they will exhibit structures and properties conducive to model checking.
Reference: [4] <author> R. E. Bryant. </author> <title> On the complexity of VLSI implementations and graph representation of boolean functions with applications to integer multiplication. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 40(2) </volume> <pages> 205-213, </pages> <month> February </month> <year> 1991. </year>
Reference: [5] <author> R. E. Bryant and Chen Y.-A. </author> <title> Verification of arithmetic circuits with Binary Moment Diagrams. </title> <booktitle> In Proceedings of the 32nd ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 535-541, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: Additional research is needed to assess the strengths and weaknesses of the techniques that we used to overcome a number of obstacles in model checking parts of the TCAS specification: * Multiplication and division cannot be represented efficiently by BDD's ([4, 18]). Bryant and Chen <ref> [5] </ref> introduced a different data structure, the BMD (Binary Moment Diagram) which can be used to represent multiplication concisely. With a variant of this data structure, the 14 *BMD, they were able to verify division circuits.
Reference: [6] <author> R.E. Bryant. </author> <title> Graph-based Algorithms for Boolean Function Manipulation. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-35(6):677-691, </volume> <month> August </month> <year> 1986. </year>
Reference-contexts: A data structure that has been developed to represent boolean functions is the Ordered Binary Decision Diagram (OBDD, or BDD for short) <ref> [6] </ref>.
Reference: [7] <author> J. R. Burch, E. M. Clarke, D. E. Long, K. L. McMillan, and D. L. Dill. </author> <title> Symbolic Model Checking for Sequential Circuit Verification. </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems, </journal> <volume> 13(4) </volume> <pages> 401-424, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: The size of the BDDs can be reduced by variable reordering and conjunctive partitioning <ref> [7] </ref>. These techniques dramatically improved the performance of checking some formulae; however, they did not solve all the problems. The BDD size was very sensitive to the ranges of the variables representing altitudes and altitude rates.
Reference: [8] <author> E. Clarke and X. Zhao. </author> <title> Work level symbolic model checking: A new approach for verifying arithmetic circuits. </title> <type> Technical Report CMU-CS-95-161, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <month> May </month> <year> 1995. </year>
Reference-contexts: With a variant of this data structure, the 14 *BMD, they were able to verify division circuits. A hybrid approach where BMD's are used to represent arithmetic variables and BDD's are used to represent control variables, as suggested by Clarke and Zhao <ref> [8] </ref>, may be attractive. Building model checkers that can handle arbitrarily complicated numeric calculations is almost certainly intractable.
Reference: [9] <author> E.M. Clarke, </author> <title> E.A. Emerson, and A.P. Sistla. Automatic Verification of Finite-state Concurrent Systems using Temporal Logic Specifications. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 8(2) </volume> <pages> 244-63, </pages> <month> April </month> <year> 1986. </year>
Reference: [10] <author> J.C. Corbett. </author> <title> Evaluating Deadlock Detection Methods for Concurrent Software. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-22(3), </volume> <month> March </month> <year> 1996. </year>
Reference-contexts: This iterative approach appears to have benefits for analysis and shows potential for iterative development of specifications, as well. 6 Related Work There are a number of other widely researched approaches to handling the state-space explosion problem. Corbett recently classified these techniques into several categories <ref> [10] </ref>: in addition to symbolic model checking, Corbett considered several variants on standard reachability analysis techniques, several compositional techniques, some approaches that exploit abstraction, some that use data flow analysis, and some that use integer programming. <p> Corbett recently classified these techniques into several categories <ref> [10] </ref>: in addition to symbolic model checking, Corbett discusses several variants on standard reachability analysis techniques, several compositional techniques, some approaches that exploit abstraction, some that use data flow analysis, and some that use integer programming. It would be interesting to compare these alternative approaches.
Reference: [11] <author> D. Harel. Statecharts: </author> <title> A Visual Formalism for Complex Systems. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 8 </volume> <pages> 231-274, </pages> <year> 1987. </year>
Reference-contexts: We first briefly overview RSML and SMV, which lays the foundation for our description of the translation. 3.1 RSML RSML is based on a Mealy-machine model of finite-state machines with outputs on the transitions between states. RSML includes several features found in other communicating state machine models (e.g., Statecharts <ref> [11] </ref>), such as hierarchical abstraction into superstates and parallel state machines (AND decomposition). It also has innovative features like transition buses and AND/OR tables. transitions between the states. There are three kinds of states in RSML: OR states, in which 4 Transition (s): S1 ! S2 Location: M .
Reference: [12] <author> M.P.E. Heimdahl and N.G. Leveson. </author> <title> Completeness and Consistency Analysis of State-Based Requirements. </title> <booktitle> In Proceedings of the 17th International Conference on Software Engineering, </booktitle> <pages> pages 3-14, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: attempt at validation was to find such transitions in one of these versions with the model checker. (For the other properties that we checked, we worked with a later draft TCAS specification, in which there is no unintentional nondeterminism.) These nondeterministic transitions had previously been identified by Heimdahl and Leveson <ref> [12] </ref> using static analysis. We were interested in checking these properties to verify that model checking could match previous results. Static techniques are conservative in that the problematic states may not be reachable (although in this particular case it is obvious that they are).
Reference: [13] <author> K. Heninger. </author> <title> Specifying Software Requirements for Complex Systems: New Techniques and Their Applications. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-6(1):2-12, </volume> <month> January </month> <year> 1980. </year>
Reference-contexts: While their motivations were similar, our studies differ in several ways because of differences in the specifications. The A-7E aircraft requirements were written in the Software Cost Reduction (SCR) requirements notation <ref> [1, 13] </ref>, as opposed RSML. RSML contains features like hierarchical states and particular assumptions and constraints on timing that are not present in SCR.
Reference: [14] <author> D. Jackson. </author> <title> Abstract Model Checking of Infinite Specifications. </title> <booktitle> In Proceedings of FME '94: Industrial Benefit of Formal Methods, Second International Symposium of Formal Methods Europe, </booktitle> <pages> pages 519-31. </pages> <publisher> Springer-Verlag, </publisher> <month> October </month> <year> 1994. </year>
Reference-contexts: The question of whether model checking can be applied as profitably to software systems as to hardware systems remains open. One key concern is that model checking is limited to handling finite state machines even though software systems are generally specified as infinite state machines. Jackson <ref> [14] </ref> and Wing and Vaziri-Farahani [20] have addressed aspects of this concern, showing some techniques for approximating infinite state machines with finite state machines that can then be used for model checking.
Reference: [15] <author> M. S. Jaffe, N. G. Leveson, M. P. E. Heimdahl, and B. E. Melhart. </author> <title> Software requirements analysis for real-time process-control systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(3) </volume> <pages> 241-258, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: A column evaluates to true if all of its entries are true. A dot denotes "don't care." When two or more transitions out of a state are triggered simultaneously leading to different next states, the state transition is nondeterministic. Nondeterminism is usually a design flaw in the specification <ref> [15] </ref>. event x is generated and the predicate specified by the AND/OR table is true. Event x may be triggered by some other transition in the system, or by the input interface as a result of receiving an external message from the environment.
Reference: [16] <author> N.G. Leveson, M.P.E. Heimdahl, H. Hildreth, and J.D. Reese. </author> <title> Requirements Specification for Process-control Systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-20(9), </volume> <month> September </month> <year> 1994. </year>
Reference-contexts: Specifically, we manually translated a significant portion of a preliminary version of the TCAS II (Traffic Alert and Collision Avoidance System) System Requirements Specification from the Requirements State Machine Language (RSML) <ref> [16] </ref> into a form suitable for input to the Symbolic Model Verifier (SMV) [17]. We then wrote formulae to check a number of properties of the specification. <p> Each interim state change in a step is called a microstep. A step (and thus a microstep) is assumed to happen instantaneously. Once a step is initiated, no external messages can arrive until the system reaches 5 a stable state. This assumption is called the synchrony hypothesis <ref> [16] </ref>. 3.2 SMV SMV is a tool for checking finite state systems against specification written in the temporal logic CTL. SMV supports specification of synchronous Mealy machine systems as well as specification of asynchronous finite state systems.
Reference: [17] <author> K.L. McMillan. </author> <title> Symbolic Model Checking. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1993. </year>
Reference-contexts: Specifically, we manually translated a significant portion of a preliminary version of the TCAS II (Traffic Alert and Collision Avoidance System) System Requirements Specification from the Requirements State Machine Language (RSML) [16] into a form suitable for input to the Symbolic Model Verifier (SMV) <ref> [17] </ref>. We then wrote formulae to check a number of properties of the specification. These included properties that had been identified previously by other techniques, as well as properties of the specification that were not known to any of the authors before model checking was applied.
Reference: [18] <author> S. Ponzio. </author> <title> A lower bound for integer multiplication with read-once branching programs. </title> <booktitle> In Proceedings of the 27th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 130-139, </pages> <month> May </month> <year> 1995. </year>
Reference: [19] <author> T. Sreemani and J. Atlee. </author> <title> Feasibility of model checking software requirements: A case study. </title> <type> Technical Report CS96-05, </type> <institution> Department of Computer Science, University of Waterloo, </institution> <month> January </month> <year> 1996. </year>
Reference-contexts: We were able to study properties relating to the consistency of transitions and the consistency of function definitions, as well as safety properties. These results are detailed in Section 5. Recently, Sreemani and Atlee <ref> [19] </ref>, in work independent of ours, analyzed the A-7E aircraft software requirement specification with SMV, and were also able to check several dynamic properties. While their motivations were similar, our studies differ in several ways because of differences in the specifications.
Reference: [20] <author> J.M. Wing and M. Vaziri-Farahani. </author> <title> Model Checking Software Systems: A Case Study. </title> <booktitle> In Proceedings of SIGSOFT'95 Third ACM SIGSOFT Symposium on the Foundations of Software Engineering, </booktitle> <pages> pages 128-139, </pages> <month> October </month> <year> 1995. </year> <month> 16 </month>
Reference-contexts: One key concern is that model checking is limited to handling finite state machines even though software systems are generally specified as infinite state machines. Jackson [14] and Wing and Vaziri-Farahani <ref> [20] </ref> have addressed aspects of this concern, showing some techniques for approximating infinite state machines with finite state machines that can then be used for model checking.
References-found: 20

