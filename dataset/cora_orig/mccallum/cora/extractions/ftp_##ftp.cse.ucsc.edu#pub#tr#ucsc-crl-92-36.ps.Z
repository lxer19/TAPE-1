URL: ftp://ftp.cse.ucsc.edu/pub/tr/ucsc-crl-92-36.ps.Z
Refering-URL: ftp://ftp.cse.ucsc.edu/pub/tr/README.html
Root-URL: http://www.cse.ucsc.edu
Title: Multi-Level Hierarchical Retrieval  
Author: Robert Levinson and Gerard Ellis 
Abstract: As large databases of conceptual graphs are developed for complex domains, efficient retrieval techniques must be developed to manage the complexity of graph-matching while maintaining reasonable space requirements. This paper describes a novel method "the multi-level hierarchical retrieval method" that exploits redundancy to improve both space and execution time efficiency. The method involves search in multiple partially ordered (by "more-general-than") hierarchies such that search in a simpler hierarchy reduces the search time in the hierarchy of next complexity. The specific hierarchies used are: the traditional partial order over conceptual graphs; a partial order over node descriptors; a partial order over "descriptor units"; and finally, the simplest partial order is the traditional type hierarchy.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Ellis, G, </author> <title> `Efficient retrieval from the generalization hierarchy' Technical Report No 114, </title> <institution> Dept of Computer Science, University of Queensland, </institution> <address> Australia (May 1989) </address>
Reference: [2] <author> Ellis, G, </author> <title> `Deterministic all-solutions retrieval from the generalization hierarchy' Proc 4th Annual Conceptual Structures Workshop Nagle, J A and Nagle, </title> <editor> T E (Eds.) </editor> <month> Detroit (August </month> <year> 1989) </year>
Reference: [3] <author> Ellis, </author> <title> G `Compiled hierarchical retrieval' Proceedings of the 6th Workshop on Conceptual Graphs, Eileen Way (Ed.) </title> <institution> SUNY Binghamton, </institution> <month> (July </month> <year> 1991). </year> <note> Also, to appear in Current Directions in Conceptual Structures Research, Nagle, </note> <editor> T et.al (Eds.), </editor> <publisher> Springer-Verlag, </publisher> <year> (1991) </year>
Reference-contexts: The first paper provides the background in graph matching and retrieval which has led to the multi-hierarchy system. The current paper provides extensions and further implementation details in particular the addition of the descriptor unit hierarchy. Other supporting material can be found in <ref> [3] </ref> which discusses compilation of the conceptual graph hierarchy and gives improvements to the uni-hierarchy method. The most typical application of these techniques is bibliographic retrieval in which articles or abstracts of articles are stored as individual conceptual graphs. Along with the graphs is provided a type hierarchy. <p> Node descriptors represent subgraphs of the original graphs, thus they can be treated as conceptual graphs. We believe that we can use the same formation rules for their construction. The differences can then be replaced with instances of the formation rules. Hence we can take advantage of a method <ref> [3] </ref> of sharing computation amongst conceptual graphs in the generalization hierarchy. Fig. 5 shows the result of compiling the node descriptor hierarchy based on this method. <p> Phase II. (find IS (Q), the immediate specializations of Q) (5) S := ;. (6) Y := some element of IG (Q) (7) I := intersection of the specialization sets of each element of IP (Q) except Y 12 We suggest implementation of step 7 as follows. <ref> [3] </ref> gives a more efficient method. (7') For each z in IP (Q) except Y do For each specialization s of z do Increment count (s) For each item s do If count (s) = jIP (Q)j 1 then I := I [ fsg (8) For each specialization X of Y <p> Since the relationship between hierarchies is uniform the multi-hierarchy algorithm can be specified and implemented in a recursive manner. Above we have given the expanded version 14 in order to remove some of the mystery. The algorithm can be further enhanced by using the improved intersection method discussed in <ref> [3] </ref>. This intersection algorithm obviates the need for maintaining counts. Here is the recursive version of the algorithm: Place (x,H) (* Finds the place of node x in hierarchy H by returning two lists IG (x) and IS (x). The immediate generalizations IG and immediate specializations of IG respectively.
Reference: [4] <author> Levinson, </author> <title> R A A Self-Organizing Retrieval System for Graphs, </title> <type> PhD thesis, </type> <institution> University of Texas, </institution> <month> May </month> <year> 1985 </year>
Reference: [5] <author> Levinson, </author> <title> R A `A self-organizing retrieval system for graphs' Proc AAAI-84 (1984) </title>
Reference: [6] <author> Levinson, </author> <title> R A and Helman, D and Oswalt, </title> <booktitle> E `Intelligent signal analysis and recognition' Proc 1st Int'l Conference on Industrial and Engineering Applications of Artificial Intelligence, ACM (1988) </booktitle>
Reference: [7] <author> Levinson, </author> <title> R A `A self-organizing pattern retrieval system and its applications' Technical Report UCSC-CRL-89-21, </title> <institution> University of California at Santa Cruz (1989). </institution> <note> (To be published in International Journal of Intelligent Systems) </note>
Reference: [8] <author> Levinson, </author> <title> R A `Pattern formation, associative recall and search: a proposal' Technical Report UCSC-CRL-89-22, </title> <institution> University of California at Santa Cruz (1989) </institution>
Reference: [9] <author> Levinson, </author> <title> R A `A self-learning, pattern-oriented, chess program' Proceedings of Workshop on New Directions in Game-Tree Search, Marsland, T A (Ed), </title> <journal> International Computer Chess Association (1989). </journal> <note> Also in International Computer Chess Association Journal, Edmonton, Vol 12 No 4 (December 1989) pp207-215 </note>
Reference: [10] <author> Levinson, </author> <title> R A and Snyder, </title> <booktitle> R `Adaptive pattern oriented chess' Proceedings of AAAI-91, </booktitle> <address> Morgan-Kaufman, </address> <year> (1991) </year> <month> pp601-605 19 </month>
Reference: [11] <author> Levinson, </author> <title> R A `Pattern associativity and the retrieval of semantic networks' Com--puters and Mathematics with Applications, </title> <note> (Jan 1992) To appear in the Special Edition on Semantic Networks. </note>
Reference-contexts: Note that potentially exponential subgraph-isomorphism tests are being replaced with O (n 3 ) graph comparisons where n is the number of nodes in the graphs. This paper is meant to be read after reading <ref> [11] </ref>. The first paper provides the background in graph matching and retrieval which has led to the multi-hierarchy system. The current paper provides extensions and further implementation details in particular the addition of the descriptor unit hierarchy.
Reference: [12] <author> Lipkis, </author> <title> T `A KL-ONE classifier' Proceedings of the 1981 KL-ONE Workshop Schmolze, </title> <editor> J G and Brachman, R J (Eds.), pp128-145, </editor> <address> Cambridge, MA, </address> <year> (1982). </year> <note> The Proceedings have been published as BBN Report No 4842 and Fairchild Technical Report No 618 </note>
Reference-contexts: Phase III: Phase III. (update immediate predecessor and successor sets of other items) (10) For each x in IP (Q) do S (x) := IS (x) [ fQg IS (Q) (11) For each x in IS (Q) do P (x) := IP (x) [ fQg IP (Q) KL-ONE's classification algorithm <ref> [12] </ref> is somewhat different: in phase I an object is compared to the query as soon as one of its predecessors match Q (A depth-first approach as opposed to the breadth-first approach described here).
Reference: [13] <author> Riff, </author> <title> B Searching a partially-ordered knowledge base of complex objects, </title> <type> Master's Thesis, </type> <institution> University of California at Santa Cruz (1988) </institution>
Reference-contexts: the most complex objects! We have explored alternative algorithms to these that do not query the partial order in a bottom-up or top-down fashion but instead use an information-theoretic heuristic that attempts to maximize the ratio of expected information gained to comparison cost and using a few levels of lookahead <ref> [13] </ref>. We've had only limited success with these algorithms: only improvements of about 15-20 percent despite a large amount of off-line pre-processing. Now lets move to the multi-hierarchy scheme.
Reference: [14] <author> Sowa, </author> <title> J F Conceptual structures: </title> <booktitle> information processing in mind and machine Addi-son Wesley, </booktitle> <address> Reading, MA (1984) </address>
Reference-contexts: 1 Introduction Although it is true for many natural language applications that due to a wide variation of concept and relation types that matching conceptual graphs <ref> [14] </ref> is relatively easy (and hence retrieval is efficient), no such claims can be made for general conceptual graphs applied to other domains such as chemistry [16], chess [9,11], VLSI CAD designs, structural designs, etc. <p> The database example that we will be using throughout the paper is shown in Fig. 1. In the traditional graph hierarchy, graphs are partially ordered by subsumption [1,2,3,5,7,11,13]. Fig. 1 gives the generalization hierarchy for the conceptual graphs Sowa uses to demonstrate the canonical formation rules for conceptual graphs <ref> [14] </ref>. The ordering in the hierarchy assumes that PERSON is a subtype of GIRL and all other concept types are pairwise incomparable. The relations AGNT, MANR, and OBJ are pairwise incomparable. <p> We are in the process of fully implementing the multi-hierarchical node descriptor method in C++ and making relevant experimental comparisons with the uni-hierarchical system. We intend to incorporate these retrieval methods in a principled conceptual graph processor based on first-order conceptual graphs <ref> [14] </ref>. It is hoped that this tool will support large scale applications of conceptual graphs. These methods are being explored in the associative graph database that is being used in 17 18 Morph the graph-based adaptive pattern-oriented chess system [9,11]. Chess patterns in this system are represented as graphs.
Reference: [15] <author> Sowa, </author> <title> J F `Semantic networks' Shapiro, S C (Ed), </title> <booktitle> Encyclopedia of Artificial Intelligence, </booktitle> <publisher> Wiley, </publisher> <address> New York (1987) pp1011-1024 </address>
Reference: [16] <author> Wilcox, C S and Levinson, </author> <title> R A `A self-organized knowledge base for recall, </title> <booktitle> design, and discovery in organic chemistry' Artificial Intelligence Applications in Chemistry, ACS Symposium Series, </booktitle> <month> 306 </month> <year> (1986) </year> <month> 20 </month>
Reference-contexts: Although it is true for many natural language applications that due to a wide variation of concept and relation types that matching conceptual graphs [14] is relatively easy (and hence retrieval is efficient), no such claims can be made for general conceptual graphs applied to other domains such as chemistry <ref> [16] </ref>, chess [9,11], VLSI CAD designs, structural designs, etc. In these domains, since many concepts and relations may be repeated within the same graph, the cost of graph-matching becomes the dominant cost. As these databases grow, effort must be taken to maintain space and execution time efficiency.
References-found: 16

