URL: http://www.almaden.ibm.com/cs/quest/papers/vldb95_shape.ps
Refering-URL: http://www.almaden.ibm.com/cs/quest/publications.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Querying Shapes of Histories  
Author: Rakesh Agrawal Giuseppe Psaila Edward L. Wimmers Mohamed Zat 
Address: 650 Harry Road, San Jose, CA 95120  
Affiliation: IBM Almaden Research Center  
Abstract: We present a shape definition language, called SDL, for retrieving objects based on shapes contained in the histories associated with these objects. It is a small, yet powerful, language that allows a rich variety of queries about the shapes found in historical time sequences. An interesting feature of SDL is its ability to perform blurry matching. A "blurry" match is one where the user cares about the overall shape but does not care about specific details. Another important feature of SDL is its efficient implementability. The SDL operators are designed to be greedy to reduce non-determinism, which in turn substantially reduces the amount of back-tracking in the implementation. We give transformation rules for rewriting an SDL expression into a more efficient form as well as an index structure for speeding up the execution of SDL queries. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Agrawal, G. Psaila, E. L. Wimmers, and M. Zat. </author> <title> Querying shapes of histories. </title> <type> IBM Research Report RJ 9962 (87921), </type> <institution> IBM Al-maden Research Center, </institution> <address> San Jose, California, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: In Section 5, we describe an index structure and show how it can be used to speed up the evaluation of SDL queries. We conclude in Section 6 with a summary. For an expanded version of this paper, see <ref> [1] </ref>. 2 Shape Definition Language We will introduce our shape definition language, SDL, informally through examples. The formal semantics is given in Appendix A. Every object in the database has associated with it several named histories. Each history is a sequence of real values. <p> Since SDL includes the operators concat, any, and atleast, SDL is equivalent in expressive power to regular expressions for regular matching. This equivalence is proven in <ref> [1] </ref>. Because SDL is designed to provide ease of expression together with an efficient implementation, it has several features to enhance its effectiveness. The atleast operator, which is a variant of the fl operator of regular expressions, provides both efficiency gains and expressiveness enhancements for continuous matching. <p> In the regular matching case, the greedy nature of atleast does not cause a loss of expressive power since one can always write the shape so that subsequent shapes are not affected by the greedy nature of atleast. Details of this construction are given in <ref> [1] </ref>. In the case of continuous matching, the greedy se-mantics of atleast allow SDL to take advantage of contextual information to eliminate useless clutter. For example, given the shape (atleast 5 up), SDL will find all the maximal subsequences that have at least five consecutive ups. <p> While the in operator can be simulated using regular expressions, it is not easy to do so. The details of the construction can be found in <ref> [1] </ref> and involve keeping track of how many times diverse finite automatons have entered accepting states. The in operator presents a much more natural method for expressing the desired shape. It is instructive to give an example. <p> The straightforward approach of listing all such possible strings grows factorially. It is well-known that the permutation expression can be compacted a bit to exponential size but no further compaction is possible in regular expression notation. (See <ref> [1] </ref> for more details and for proofs.) Since at least exponential size is required, expressing permutations in regular expression notation is tedious, error-prone, and not particularly readable. Parameterized shapes (macros) can dramatically reduce the size of a permutation expression.
Reference: [2] <author> D. J. Berndt and J. Clifford. </author> <title> Using dynamic time warping to find patterns in time series. </title> <booktitle> In KDD-94: AAAI Workshop on Knowledge Discovery in Databases, </booktitle> <pages> pages 359-370, </pages> <address> Seattle, Washington, </address> <month> July </month> <year> 1994. </year>
Reference-contexts: For example, while the blurry matching of SDL is reminiscent of approximate matching for strings (e.g., [9]) or for patterns in time series <ref> [2] </ref>, SDL allows the user to impose arbitrary conditions on the blurry match but requires that the user specify those conditions completely. The event specification languages in active databases [3] [5] [6] concentrate on detecting the endpoints of events rather than concentrating on intervals as SDL does.
Reference: [3] <author> S. Chakravarthy, V. Krishnaprasad, E. Anwar, and S.-K. Kim. </author> <title> Composite events for active databases: Semantics, contexts, and detection. </title> <booktitle> In Proc. of the VLDB Conference, </booktitle> <pages> pages 606-617, </pages> <address> Santiago, Chile, </address> <month> September </month> <year> 1994. </year>
Reference-contexts: The event specification languages in active databases <ref> [3] </ref> [5] [6] concentrate on detecting the endpoints of events rather than concentrating on intervals as SDL does. The SEQ work of [8] focused on building a framework for describing constructs from various existing sequence models. Organization of the Paper The rest of the paper is organized as follows.
Reference: [4] <author> R. D. Edwards and J. Magee. </author> <title> Technical Analysis of Stock Trends. </title> <publisher> John Magee, </publisher> <address> Springfield, Massachusetts, </address> <year> 1966. </year>
Reference-contexts: The ability to select objects based on the occurrence of some shape in their histories is a requirement that arises naturally in many applications. For example, we may want to retrieve stocks whose closing price history contains a head and shoulder pattern <ref> [4] </ref>. We should be able to specify shapes roughly. For example, we may choose to call a trend uptrend even if there were some down transitions as long as they were limited to a specified number. To this end, we propose a shape definition language, called SDL.
Reference: [5] <author> S. Gatziu and K. Dittrich. </author> <title> Detecting composite events in active databases using petri nets. </title> <booktitle> In Proc. of the 4th Int'l Workshop on Research Issues in Data Engineering: Active Database Systems, </booktitle> <pages> pages 2-9, </pages> <month> February </month> <year> 1994. </year>
Reference-contexts: The event specification languages in active databases [3] <ref> [5] </ref> [6] concentrate on detecting the endpoints of events rather than concentrating on intervals as SDL does. The SEQ work of [8] focused on building a framework for describing constructs from various existing sequence models. Organization of the Paper The rest of the paper is organized as follows.
Reference: [6] <author> N. Gehani, H. Jagadish, and O. Shmueli. </author> <title> Composite event specification in an active databases: Model & implementation. </title> <booktitle> In Proc. of the VLDB Conference, </booktitle> <pages> pages 327-338, </pages> <address> Vancouver, British Columbia, Canada, </address> <month> August </month> <year> 1992. </year>
Reference-contexts: The event specification languages in active databases [3] [5] <ref> [6] </ref> concentrate on detecting the endpoints of events rather than concentrating on intervals as SDL does. The SEQ work of [8] focused on building a framework for describing constructs from various existing sequence models. Organization of the Paper The rest of the paper is organized as follows.
Reference: [7] <author> J. E. Hopcroft and J. D. Ullman. </author> <title> Introduction to Automaton Theory, Languages, and Computation. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1979. </year>
Reference-contexts: Blurry matching permits the use of conjunctive as well as disjunctive expressions. It is well known that adding "and" to regular expressions does not increase the expressive power of regular expressions but does permit more compact expressions (see Chapter 3 exercises in <ref> [7] </ref>). A permutation expression is such an example. The regular expression (a 1 j . . .ja n ) can be used to describe all the characters. By concatenating n copies, it is possible to express in O (n 2 ) size all sequences of length exactly n.
Reference: [8] <author> P. Seshadri, M. Livny, and R. Ramakrishnan. SEQ: </author> <title> A model for sequence databases. </title> <booktitle> In Proc. of the IEEE Int'l Conference on Data Engineering, </booktitle> <address> Taiwan, </address> <year> 1995. </year>
Reference-contexts: The event specification languages in active databases [3] [5] [6] concentrate on detecting the endpoints of events rather than concentrating on intervals as SDL does. The SEQ work of <ref> [8] </ref> focused on building a framework for describing constructs from various existing sequence models. Organization of the Paper The rest of the paper is organized as follows. In Section 2, we introduce SDL informally through examples; the formal semantics is given in Appendix A. <p> Given a sequence and a shape, one type of query (called continuous matching in <ref> [8] </ref>) finds all the subsequences that match the shape; the other type of query (referred to as "regular matching" in this paper) produces a boolean indicating whether the entire sequence matches the shape. <p> SDL is equivalent in expressive power to the regular expressions when finding if a given sequence matches a particular shape. In the case of continuous matching <ref> [8] </ref>, where one finds all the subsequences of a given sequence that match a particular shape, SDL provides context information that regular expressions are unable to.
Reference: [9] <author> S. Wu and U. Manber. </author> <title> Fast text searching allowing errors. </title> <journal> Communications of the ACM, </journal> <volume> 35(10) </volume> <pages> 83-91, </pages> <month> October </month> <year> 1992. </year> <month> 13 </month>
Reference-contexts: For example, while the blurry matching of SDL is reminiscent of approximate matching for strings (e.g., <ref> [9] </ref>) or for patterns in time series [2], SDL allows the user to impose arbitrary conditions on the blurry match but requires that the user specify those conditions completely.
References-found: 9

