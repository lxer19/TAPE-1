URL: http://www.pdos.lcs.mit.edu/papers/UserLevelCommunication.ps
Refering-URL: http://www.pdos.lcs.mit.edu/PDOS-papers.html
Root-URL: 
Title: Efficient Implementation of High-Level Languages on User-Level Communication Architectures  
Author: by Wilson C. Hsieh, Kirk L. Johnson, M. Frans Kaashoek, Deborah A. Wallach, and William E. Weihl 
Address: Cambridge, Massachusetts 02139  
Affiliation: Massachusetts Institute of Technology Laboratory for Computer Science  
Date: May 1994  
Abstract: User-level communication architectures parallel architectures that give user code direct but protected access to the network provide communication performance that is an order of magnitude higher than previous-generation message-passing architectures. Unfortunately, in order to take advantage of this level of performance, programmers must concern themselves with low-level issues that are often hardware-dependent (e.g., what primitives to use for large and small data transfers, and whether to use interrupts or polling). As a result, programs are difficult to design, implement, maintain, and port. New compiler and runtime system mechanisms are needed to allow programs written in high-level languages languages where the programmer does not orchestrate communication to achieve the full potential of user-level communication architectures. We propose a software architecture (compiler and runtime system) for implementing high-level languages with dynamic parallelism on user-level communication architectures. The compiler uses a simple runtime interface, and a new strategy called optimistic active messages to eliminate overhead due to context switching and thread creation. The runtime supports user-level message handlers and multithreading. We developed an implementation of the runtime for the CM-5; microbenchmarks demonstrate that our runtime has excellent base performance. We compare our compilation strategy and runtime with a portable runtime that uses traditional network interfaces. On our system, the microbenchmarks perform up to 30 times better; three hand-compiled applications run 10% to 50% faster. We also compare our approach on these applications with hand-crafted C programs that use active messages; the microbenchmarks perform within 25% of C, and almost all of the applications perform within a factor of two of C. This work was supported in part by the Advanced Research Projects Agency under contracts N00014-91-J-1698 and DABT63-93-C-008, by the National Science Foundation under contract MIP-9012773, by a NSF Presidential Young Investigator Award, by grants from IBM and AT&T, by an equipment grant from DEC, by Project Scout under ARPA contract MDA972-92-J-1032, by a fellowship from the Computer Measurement Group, and by an Office of Naval Research Graduate Fellowship. c fl Massachusetts Institute of Technology 1994
Abstract-found: 1
Intro-found: 1
References-found: 0

