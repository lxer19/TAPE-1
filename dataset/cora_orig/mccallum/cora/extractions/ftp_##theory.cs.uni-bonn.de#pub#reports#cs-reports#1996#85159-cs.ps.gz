URL: ftp://theory.cs.uni-bonn.de/pub/reports/cs-reports/1996/85159-cs.ps.gz
Refering-URL: http://cs.uni-bonn.de/info5/publications/CS-1996-en.html
Root-URL: http://cs.uni-bonn.de
Email: email: carsten@cs.uni-bonn.de  email: wirtgen@cs.uni-bonn.de  
Title: A note on improving the running time of a class of parallel algorithms using randomization  
Author: Carsten Dorgerloh Jurgen Wirtgen 
Address: Bonn, Romerstr. 164, D-53117 Bonn, Germany,  Bonn, Romerstr. 164, D-53117 Bonn, Germany,  
Affiliation: Institut fur Informatik V, Universitat  Institut fur Informatik V, Universitat  
Date: December 4, 1996  
Abstract: A natural method to avoid memory access conflicts in EREW-PRAM graph algorithms is to compute a large independent set in a constant-degree-bounded conflict graph. Many EREW-PRAM algorithms use results from [CV 86], [GPS 87], which can be used to compute such a set in O(log fl n) parallel time. This paper gives an O(1) time randomized algorithm using O(n) processors for that problem. Our algorithm improves with high probability the running time of many EREW-PRAM algorithms. 
Abstract-found: 1
Intro-found: 1
Reference: [Ch 52] <author> Chernoff, H., </author> <title> A measure of asymptotic efficiency for tests of hypothesis based on the sum of observations, </title> <booktitle> Proc. 23 rd Annals of Mathematic Statistics (1952), </booktitle> <pages> pp. 493-507. </pages>
Reference: [CDH 87] <author> Chrobak, M., Diks, K., Hagerup, T., </author> <title> Parallel 5-Colouring of Planar Graphs, </title> <booktitle> ICALP 87, Lecture Notes in Computer Science 267, </booktitle> <pages> pp. 304-313, </pages> <publisher> Springer Verlag Heidelberg, </publisher> <year> 1987. </year>
Reference-contexts: in this paper may also be applied to many other EREW-PRAM algorithms, including: 5-coloring: Compute a coloring of a planar graph G, i.e., a partition of V into disjoint sets V 1 ; : : : ; V 5 such that each V i is an independent set for G. <ref> [CDH 87] </ref> gave an EREW-PRAM algorithm for this task which runs in O (log n log fl n) time using O (n= log n log fl n) processors. Their algorithm, though being more complicated, is very similar to the algorithm Orient described above.
Reference: [CE 91] <author> Chrobak, M., Eppstein, D., </author> <title> Planar orientations with low out-degree and compaction of adjacency matrices, </title> <booktitle> Theoretical Computer Science 86 (1991), </booktitle> <pages> pp. 243-266. </pages>
Reference-contexts: to the problem of finding such a set in list graphs (digraphs whose vertices have in- and out-degree bounded by 1), instead of using a direct imlementation like here. 4 An Application: Planar Orientations We start by applying the subroutine presented in section 3 to a parallel EREW-PRAM algorithm of <ref> [CE 91] </ref> for computing a 6-bounded acyclic orientation of planar graphs, which runs in O (log n log fl n) time with O (n= log n log fl n) processors. Let us call this algorithm Orient. The computation of Orient is divided in O (log n) phases.
Reference: [CV 86] <author> Cole, R., Vishkin, U., </author> <title> Deterministic Coin Tossing with Applications to Optimal Parallel List Ranking, </title> <booktitle> Information and Control 70 (1986), </booktitle> <pages> pp. 32-53. </pages>
Reference: [DK 89] <author> Dadoun, N., Kirkpatrick, D. G., </author> <title> Parallel Construction of Subdivision Hierarchies, </title> <journal> Journal of Computing Systems Science 39 (1989), </journal> <pages> pp. 153-165. </pages>
Reference-contexts: We present an O (1) time algorithm for this task which returns an independent set of size (n). A different O (1) time algorithm was developed by Dadoun and Kirkpatrick <ref> [DK 89] </ref>. The relationship between the algorithm presented here and that created by Dadoun et al. will be discussed in section 3. We then show that our algorithm together with some other techniques can be used to improve the running time of many known algorithms. <p> Now we calculate the fraction of V which should be the independent set. c (*) = 2 d+1 + 1 ! 2 d+1 = 2 2d+2 1 With lemma 3 we get Pr (jLargeISj 1 2 d+1 Thus, Pr (jLargeISj &gt; 1 1 The O (1) time algorithm proposed in <ref> [DK 89] </ref> uses a reduction of the problem of finding a large independent set in a constant-bounded-degree graph to the problem of finding such a set in list graphs (digraphs whose vertices have in- and out-degree bounded by 1), instead of using a direct imlementation like here. 4 An Application: Planar
Reference: [Do 96] <author> Dorgerloh, C. F., </author> <title> A Fast Randomized Parallel Algorithm for Finding Simple Cycles in Planar Graphs, </title> <institution> Research Report 85150-CS, Institut fur Informatik der Universitat Bonn, </institution> <year> 1996. </year>
Reference-contexts: In fact, his algorithms work for a much broader class of undirected graphs, the so-called linear contractible class of graphs. Simple Cycles: <ref> [Do 96] </ref> showed that if a planar graph has a simple cycle of length k, where k is a fixed integer, such a cycle may be computed in O (log n log fl n) expected time by a randomized EREW-PRAM with O (n) processors.
Reference: [Ev 79] <author> Even, S., </author> <title> Graph Algorithms, </title> <publisher> Computer Science Press, </publisher> <year> 1979. </year>
Reference-contexts: These ideas do not only work for those problems, but for all EREW-PRAM algorithms which avoid memory access conflicts by computing a large independent set in a constant-degree-bounded conflict graph. 2 Notations and definitions The terminology used in this paper follows that of Even <ref> [Ev 79] </ref>. Let G = (V; E) be a graph. For each vertex v, N (v) denotes the set of neighbors of v.
Reference: [GPS 87] <author> Goldberg, A. V., Plotkin, S. A., Shannon, G. E., </author> <title> Parallel Symmetry-Breaking in Sparse Graphs, </title> <booktitle> Proc. 19 th ACM STOC (1987), </booktitle> <pages> pp. 315-324. </pages>
Reference-contexts: Finally, we remove all vertices v 2 I from V and orient the incident edges of those vertices in the obvious way. The time for each phase is dominated by the computation of the independent set I. This can be done e.g. by a deteterministic algorithm of <ref> [GPS 87] </ref> in O (log fl n) time.
Reference: [Ha 90] <author> Hagerup, T., </author> <title> Optimal Parallel Algorithms on Planar Graphs, </title> <booktitle> Information and Computing 84 (1990), </booktitle> <pages> pp. 71-96. </pages>
Reference-contexts: Their algorithm, though being more complicated, is very similar to the algorithm Orient described above. Connected Components, Undirected Spanning Trees: <ref> [Ha 90] </ref> presented EREW-PRAM algorithms which solve those basic graph problems for planar graphs in O (log n log fl n) time using O (n= log n log fl n) processors.
Reference: [LM 86] <author> Leiserson, C. E., Maggs, B. M., </author> <title> Communication-efficient parallel graph algorithms, </title> <booktitle> Proc. Parallel Processing (1986), </booktitle> <pages> pp. 861-868. 7 </pages>
Reference-contexts: The proof that the algorithm Orient runs in O (log n) time uses lemma 4 from section 3 as well as the next lemma (see <ref> [LM 86] </ref>,[Ch 52]), which provides a bound on the tail of a binomial distribution. Consider a set of t independent Bernoulli trials, each with a probability p of success.
References-found: 10

