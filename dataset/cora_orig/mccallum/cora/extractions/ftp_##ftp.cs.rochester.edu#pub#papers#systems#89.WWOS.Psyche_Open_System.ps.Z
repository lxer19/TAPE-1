URL: ftp://ftp.cs.rochester.edu/pub/papers/systems/89.WWOS.Psyche_Open_System.ps.Z
Refering-URL: http://www.cs.rochester.edu/trs/systems-trs.html
Root-URL: 
Title: A Multi-User, Multi-Language Open Operating System (extended abstract)  
Author: Michael L. Scott Thomas J. LeBlanc Brian D. Marsh 
Date: April 1989  
Address: Rochester, NY 14627  
Affiliation: University of Rochester Department of Computer Science  
Abstract: An open operating system provides a high degree of programming flexibility and efficiency. At the same time, it generally requires that all programs be written in a single language, and provides no protection other than that which is available from the compiler. These limitations may be tolerated by the user of a personal computer, but they become unacceptable on a workstation that must run untrusted software written in many different languages. Psyche is an operating system designed to make the most effective possible use of shared-memory multiprocessors and uniprocessor machines. It combines the flexibility of an open operating system with the ability to write in multiple languages and to establish solid protection boundaries. It also provides the efficiency of an open operating system for programs that do not require protection. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Brinch Hansen, P., </author> <title> Programming a Personal Computer, </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1982. </year>
Reference-contexts: Clark's hhhhhhhhhhhhhhhhhhhhhhhhhhhhh This work was supported in part by NSF CER grant number DCR-8320136, Darpa ETL contract number DACA76-85-C-0001, and an IBM Faculty Development Award. 2 experience with Swift [2] testifies to their efficiency. Open systems have attracted the attention of language designers as well <ref> [1, 7] </ref>, and are an important part of the commercial market for personal computers. Unfortunately, the flexibility and efficiency of open operating systems is obtained at a serious price. Protection is available only to the extent that it is provided by high-level language compilers.
Reference: [2] <author> Clark, D., </author> <title> ``The Structuring of Systems Using Upcalls,'' </title> <booktitle> Proceedings of the Tenth ACM Symposium on Operating Systems Principles, </booktitle> <month> 1-4 December </month> <year> 1985, </year> <pages> pp. 171-180. </pages> <booktitle> In ACM Operating Systems Review 19:5. </booktitle>
Reference-contexts: Research results from the Pilot [4] and Cedar [6] projects at Xerox PARC testify to the usefulness of open systems. Clark's hhhhhhhhhhhhhhhhhhhhhhhhhhhhh This work was supported in part by NSF CER grant number DCR-8320136, Darpa ETL contract number DACA76-85-C-0001, and an IBM Faculty Development Award. 2 experience with Swift <ref> [2] </ref> testifies to their efficiency. Open systems have attracted the attention of language designers as well [1, 7], and are an important part of the commercial market for personal computers. Unfortunately, the flexibility and efficiency of open operating systems is obtained at a serious price.
Reference: [3] <author> Redell, D., </author> <title> ``Experience with Topaz TeleDebugging,'' </title> <booktitle> Proceedings, ACM SIGPLAN/SIGOPS Workshop on Parallel and Distributed Debugging, </booktitle> <month> 5-6 May </month> <year> 1988, </year> <pages> pp. 35-44. </pages> <note> In ACM SIGPLAN Notices 24:1 (January 1989). </note>
Reference-contexts: We are particularly interested in multiprocessor architectures such as the Berkeley SPUR, DEC Firefly, IBM ACE, or Xerox Dragon. To facilitate kernel development we have implemented a remote, source-level debugger in the style of the Topaz TeleDebug facility <ref> [3] </ref>. The front end for the debugger runs on a Sun workstation and communicates via UDP and serial lines with a low-level debugging stub that 5 underlies the Psyche kernel. The low-level debugger was the first piece of the kernel to be written, and has proven extremely valuable.
Reference: [4] <author> Redell, D. D. and others, </author> <title> ``Pilot: An Operating System for a Personal Computer,'' </title> <journal> CACM 23:2 (February 1980), </journal> <pages> pp. 81-92. </pages>
Reference-contexts: Flexibility stems from the opportunity to modify, invoke, or build upon existing pieces of code. Efficiency stems from the lack of heavyweight context switches, data movement across narrow interfaces, or unnecessary layers of abstraction. Research results from the Pilot <ref> [4] </ref> and Cedar [6] projects at Xerox PARC testify to the usefulness of open systems. Clark's hhhhhhhhhhhhhhhhhhhhhhhhhhhhh This work was supported in part by NSF CER grant number DCR-8320136, Darpa ETL contract number DACA76-85-C-0001, and an IBM Faculty Development Award. 2 experience with Swift [2] testifies to their efficiency.
Reference: [5] <author> Scott, M. L., T. J. LeBlanc, and B. D. Marsh, </author> <title> ``Design Rationale for Psyche, a General-Purpose Multiprocessor Operating System,'' </title> <booktitle> Proceedings of the 1988 International Conference on Parallel Processing, </booktitle> <month> 15-19 August </month> <year> 1988, </year> <pages> pp. 255-262, </pages> <booktitle> vol. II Software. </booktitle>
Reference-contexts: In a single-language system one cannot, for example, program simultaneously with actors, futures, parallel DO loops, and processes with monitors. One certainly cannot write a single program that uses different models in different sections of the code. 2. The Psyche Approach Psyche <ref> [5] </ref> is an operating system under development at the University of Rochester. Its primary goal is to support efficient, flexible use of large-scale shared-memory multiprocessors. At the same time, it offers what we believe to be an ideal environment for small-scale multiprocessors and workstations.
Reference: [6] <author> Swinehart, D., P. Zellweger, R. Beach, and R. Hagmann, </author> <title> ``A Structural View of the Cedar Programming Environment,'' </title> <journal> ACM TOPLAS 8:4 (October 1986), </journal> <pages> pp. 419-490. </pages>
Reference-contexts: Flexibility stems from the opportunity to modify, invoke, or build upon existing pieces of code. Efficiency stems from the lack of heavyweight context switches, data movement across narrow interfaces, or unnecessary layers of abstraction. Research results from the Pilot [4] and Cedar <ref> [6] </ref> projects at Xerox PARC testify to the usefulness of open systems. Clark's hhhhhhhhhhhhhhhhhhhhhhhhhhhhh This work was supported in part by NSF CER grant number DCR-8320136, Darpa ETL contract number DACA76-85-C-0001, and an IBM Faculty Development Award. 2 experience with Swift [2] testifies to their efficiency.
Reference: [7] <author> Wirth, N., </author> <title> ``From Programming Language Design to Computer Construction,'' </title> <journal> CACM 28:2 (February 1985), </journal> <pages> pp. 159-164. </pages> <note> The 1984 Turing Award Lecture. </note>
Reference-contexts: Clark's hhhhhhhhhhhhhhhhhhhhhhhhhhhhh This work was supported in part by NSF CER grant number DCR-8320136, Darpa ETL contract number DACA76-85-C-0001, and an IBM Faculty Development Award. 2 experience with Swift [2] testifies to their efficiency. Open systems have attracted the attention of language designers as well <ref> [1, 7] </ref>, and are an important part of the commercial market for personal computers. Unfortunately, the flexibility and efficiency of open operating systems is obtained at a serious price. Protection is available only to the extent that it is provided by high-level language compilers.
References-found: 7

