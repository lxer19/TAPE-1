URL: http://www.research.microsoft.com/~conal/papers/plilpalp98/short.ps
Refering-URL: http://www.research.microsoft.com/~conal/papers/
Root-URL: http://www.research.microsoft.com
Title: Functional Implementations of Continuous Modeled Animation  
Author: Conal Elliott 
Note: (To appear in the proceedings of PLILP/ALP '98)  
Web: http://www.research.microsoft.com/~conal  
Affiliation: Microsoft Research Graphics Group  
Abstract: Animation is a temporally continuous phenomenon, but is typically programmed in terms of a discrete sequence of changes. The use of discreteness serves to accommodate the machine that is presenting an animation, rather than the person modeling an animation with the help of a computer. Using a continuous model of time for animation allows for natural specification, avoiding some artificial details, but is difficult to implement with generality, robustness and efficiency. This paper presents and motivates continuous modeled animation, and sketches out a naive functional implementation for it. An examination of some of the practical problems with this implementation leads to several alternate representations, all of which have difficulties in themselves, some quite subtle. We hope that the insights and techniques discussed in this paper lead to still better representations, so that animation may be specified in natural terms without significant loss of performance. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Kavi Arya. </author> <title> A functional approach to animation. </title> <journal> Computer Graphics Forum, </journal> <volume> 5(4) </volume> <pages> 297-311, </pages> <month> December </month> <year> 1986. </year>
Reference-contexts: 1 Introduction A functional approach to animation offers the possibility to make animations much easier and more natural to express, by removing the need to direct the details of presentation and allowing the programmer instead to say what an animation is <ref> [1, 8] </ref>. Following the evolution of 3D graphics, we have termed this approach "modeling", as opposed to "presentation" [4].
Reference: 2. <author> John Backus. </author> <title> Can programming be liberated from the von Neumann style? Comm. </title> <journal> ACM, </journal> <volume> 8 </volume> <pages> 613-641, </pages> <year> 1978. </year>
Reference-contexts: The reason for this exception is that memo tables need to be "aged", as will explained below. Our algebra of behaviors is related to, and in some ways inspired by, Backus' language FP <ref> [2] </ref>. In FP, programs are always expressed at the function level, with application to "object-level" values kept implicit. This property leads to redundant applications of a function to the same argument, similar to the problem discussed in this section.
Reference: 3. <author> Byron Cook and John Launchbury. </author> <title> Disposable memo functions (extended abstract). </title> <booktitle> In Proceedings of the 1997 ACM SIGPLAN International Conference on Functional Programming, </booktitle> <pages> page 310, </pages> <address> Amsterdam, The Netherlands, </address> <month> June </month> <year> 1997. </year> <note> 16 Conal Elliott </note>
Reference-contexts: One approach to solving the problem of redundant sampling is applying lazy memoization <ref> [10, 3] </ref>, which may be supported with a function of the form type. memo :: Eq a =&gt; (a -&gt; b) -&gt; (a -&gt; b) Semantically, memo is the identity. Operationally, the closure returned contains a mutable "memo table". Any of the three representations discussed so far may be memoized. <p> The memoized functions contain tables of domain and range values, and Functional Implementations of Continuous Modeled Animation 11 these tables typically grow without bound. When all references to a memoized function are lost, the contents of its memo table are reclaimed, as described in <ref> [3] </ref>.
Reference: 4. <author> Conal Elliott. </author> <title> Modeling interactive 3D and multimedia animation with an embedded language. </title> <booktitle> In The Conference on Domain-Specific Languages, </booktitle> <pages> pages 285-296, </pages> <address> Santa Barbara, California, </address> <month> October </month> <year> 1997. </year> <note> USENIX. WWW version at http://- www.research.microsoft.com/~conal/papers/dsl97/dsl97.html. </note>
Reference-contexts: Following the evolution of 3D graphics, we have termed this approach "modeling", as opposed to "presentation" <ref> [4] </ref>. <p> An expanded version of this paper presents a few more implementation alternatives that we have investigated, but have implemented only partially or not at all [7]. Previous papers on Fran have presented its vocabulary and semantics, its role as an "embedded language", and examples of its use <ref> [8, 5, 4, 14] </ref>. <p> Although untilB only needs the first occurrence of an event, the other occurrences are used by some of the event combinators. This meaning of events turned out to be more convenient than the one in [8], since it enables higher level combinators for constructing reactive behaviors, as illustrated in <ref> [4] </ref>. 3 Implementing Continuous Behaviors We now turn to the main thrust of our paper, which is an exploration of how to implement continuous behaviors. Representation A: time-to-value functions.
Reference: 5. <author> Conal Elliott. </author> <title> Composing reactive animations. </title> <journal> Dr. Dobb's Journal, </journal> <pages> pages 18-33, </pages> <month> July </month> <year> 1998. </year> <note> Expanded version with animated GIFs: http://www.research.- microsoft.com/~conal/fran/ftutorial.htm,tutorialArticle.zipg. </note>
Reference-contexts: An expanded version of this paper presents a few more implementation alternatives that we have investigated, but have implemented only partially or not at all [7]. Previous papers on Fran have presented its vocabulary and semantics, its role as an "embedded language", and examples of its use <ref> [8, 5, 4, 14] </ref>.
Reference: 6. <author> Conal Elliott. </author> <title> From functional animation to sprite-based display (expanded version). </title> <type> Technical Report MSR-TR-98-28, </type> <institution> Microsoft Research, </institution> <month> July </month> <year> 1998. </year> <note> http://- www.research.microsoft.com/~conal/papers/spritify/long.ps. </note>
Reference-contexts: In all of these cases, lack of synchrony disallows sharing of work between different sampling patterns. We do not have a solution to this problem. Note, however, that the values used for display in between samplings are necessarily approximate. (Fran uses a linearly interpolating engine <ref> [6] </ref>.) As explored in [7], this observation suggests sharing of work among non-synchronous sampling patterns. 3.5 Structural Optimizations Fran's algebra of behaviors and events satisfies several algebraic properties that are exploited for optimization. Roughly speaking, these identities fall into the categories of "static" and "behavioral" properties.
Reference: 7. <author> Conal Elliott. </author> <title> Functional implementations of continuous modeled animation (expanded version). </title> <type> Technical Report MSR-TR-98-25, </type> <institution> Microsoft Research, </institution> <month> June </month> <year> 1998. </year> <note> http://www.research.microsoft.com/~conal/papers/plilpalp98/long.ps. </note>
Reference-contexts: An expanded version of this paper presents a few more implementation alternatives that we have investigated, but have implemented only partially or not at all <ref> [7] </ref>. Previous papers on Fran have presented its vocabulary and semantics, its role as an "embedded language", and examples of its use [8, 5, 4, 14]. <p> In all of these cases, lack of synchrony disallows sharing of work between different sampling patterns. We do not have a solution to this problem. Note, however, that the values used for display in between samplings are necessarily approximate. (Fran uses a linearly interpolating engine [6].) As explored in <ref> [7] </ref>, this observation suggests sharing of work among non-synchronous sampling patterns. 3.5 Structural Optimizations Fran's algebra of behaviors and events satisfies several algebraic properties that are exploited for optimization. Roughly speaking, these identities fall into the categories of "static" and "behavioral" properties. <p> In this paper, we have explored several functional implementations of continuous animation and some problems that arise. Some of these problems are rather subtle and became apparent only through costly trial and error. See <ref> [7] </ref> for more alternatives that we have partially explored.
Reference: 8. <author> Conal Elliott and Paul Hudak. </author> <title> Functional reactive animation. </title> <booktitle> In Proceedings of the 1997 ACM SIGPLAN International Conference on Functional Programming, </booktitle> <pages> pages 263-273, </pages> <address> Amsterdam, The Netherlands, </address> <month> 9-11 June </month> <year> 1997. </year>
Reference-contexts: 1 Introduction A functional approach to animation offers the possibility to make animations much easier and more natural to express, by removing the need to direct the details of presentation and allowing the programmer instead to say what an animation is <ref> [1, 8] </ref>. Following the evolution of 3D graphics, we have termed this approach "modeling", as opposed to "presentation" [4]. <p> An expanded version of this paper presents a few more implementation alternatives that we have investigated, but have implemented only partially or not at all [7]. Previous papers on Fran have presented its vocabulary and semantics, its role as an "embedded language", and examples of its use <ref> [8, 5, 4, 14] </ref>. <p> Although untilB only needs the first occurrence of an event, the other occurrences are used by some of the event combinators. This meaning of events turned out to be more convenient than the one in <ref> [8] </ref>, since it enables higher level combinators for constructing reactive behaviors, as illustrated in [4]. 3 Implementing Continuous Behaviors We now turn to the main thrust of our paper, which is an exploration of how to implement continuous behaviors. Representation A: time-to-value functions. <p> A third situation calling for variable sampling rate is detection of events defined by boolean behaviors. As discussed in <ref> [8] </ref>, interval analysis (IA) can be used in a robust nand efficient algorithm to detect occurrences of such events. The sampling patterns are adaptive to the nature of the condition's constituent behaviors. In all of these cases, lack of synchrony disallows sharing of work between different sampling patterns.
Reference: 9. <author> John Peterson et. al. </author> <title> Haskell 1.3: A non-strict, purely functional language. </title> <type> Technical Report YALEU/DCS/RR-1106, </type> <institution> Department of Computer Science, Yale University, </institution> <month> May </month> <year> 1996. </year> <note> Current WWW version at http://haskell.org/- report/index.html. </note>
Reference-contexts: This paper gives only minimal treatment of these issues. 2 A User Perspective on Fran Fran is a declarative animation library (or "embedded language") that embodies the continuous time model of animation, and is implemented in Haskell <ref> [9] </ref>. 2.1 Behaviors For any type ty, the Fran type Behavior ty represents ty-valued animations, i.e., functions from continuous time to ty. As an example, consider the following 1 The translation from continuous to discrete inevitably introduces error.
Reference: 10. <author> John Hughes. </author> <title> Lazy memo functions. </title> <editor> In J. P. Jouannaud, editor, </editor> <booktitle> Functional Programming Languages and Computer Architecture, volume 201 of LNCS, </booktitle> <pages> pages 129-146. </pages> <publisher> Springer Verlag, </publisher> <month> September </month> <year> 1985. </year>
Reference-contexts: One approach to solving the problem of redundant sampling is applying lazy memoization <ref> [10, 3] </ref>, which may be supported with a function of the form type. memo :: Eq a =&gt; (a -&gt; b) -&gt; (a -&gt; b) Semantically, memo is the identity. Operationally, the closure returned contains a mutable "memo table". Any of the three representations discussed so far may be memoized. <p> Rather than base memoization on the usual elementwise notion of list equality, which would be particularly problematic because our time lists are infinite, it suffices to use pointer equality on the list representations, as recommended in <ref> [10] </ref>. This is the representation used in the current version of Fran (1.11), except that memo tables are managed explicitly, rather than through a higher-order memo function. The reason for this exception is that memo tables need to be "aged", as will explained below. <p> This idea is described in <ref> [10] </ref> and has been in use in some Smalltalk, Lisp and Scheme implementations for quite a while, but as far as we 4 An upcoming release of the Glasgow Haskell Compiler fixes this problem. 5 The event "e -=&gt; v" occurs whenever e occurs and has value v at each occurrence.
Reference: 11. <author> Adobe Systems Incorporated. </author> <title> POSTSCRIPT Language: Tutorial and CookBook. </title> <publisher> Addison-Wesley Publishing Company, Inc, </publisher> <year> 1991. </year>
Reference-contexts: These tools include polynomials, trigonometry, and calculus, together with their applications to physical motion, governed by Newton's law of motion and its applications to gravitational attraction, springs, etc. Just as continuous image models such as Postscript <ref> [11] </ref> naturally give rise to spatial resolution-independence and hence scalability, the continuous time model for animation yields temporal resolution-independence and scalability. For instance, one can stretch or squeeze a given animation to fit a desired duration.
Reference: 12. <author> Simon L. Peyton Jones, Cordelia V. Hall, Kevin Hammond, Will Partain, and Philip Wadler. </author> <title> The Glasgow Haskell compiler: a technical overview. </title> <booktitle> In Proc. UK Joint Framework for Information Technology (JFIT) Technical Conference, </booktitle> <month> July 93. </month>
Reference-contexts: For this reason, it is important to have a garbage collector that deals very efficiently with the rapid production of short-lived structures, as in generational garbage collection. For instance, the Glasgow Haskell Compiler <ref> [12] </ref> has such a collector. 3.2 The Problem of Redundant Sampling Another serious problem with all the representations preceding is that they lead to redundant sampling.
Reference: 13. <author> Arch D. Robinson. </author> <title> The Illinois functional programming interpreter. </title> <booktitle> In Proceedings SIGPLAN '87 Symposium on Interpreters and Interpretive Techniques, </booktitle> <pages> pages 64-73. </pages> <publisher> ACM, ACM, </publisher> <month> June </month> <year> 1987. </year>
Reference-contexts: In FP, programs are always expressed at the function level, with application to "object-level" values kept implicit. This property leads to redundant applications of a function to the same argument, similar to the problem discussed in this section. The Illinois Functional Programming Interpreter <ref> [13] </ref> addressed this problem by using an "expression cache." For some recursive algorithms, expression caching reduced the asymptotic running time.
Reference: 14. <author> Simon Thompson. </author> <title> A functional reactive animation of a lift using Fran. </title> <type> Technical Report 5-98, </type> <institution> University of Kent, Computing Laboratory, </institution> <month> May </month> <year> 1998. </year> <note> http://www.cs.ukc.ac.uk/pubs/1998/583/index.html. </note>
Reference-contexts: An expanded version of this paper presents a few more implementation alternatives that we have investigated, but have implemented only partially or not at all [7]. Previous papers on Fran have presented its vocabulary and semantics, its role as an "embedded language", and examples of its use <ref> [8, 5, 4, 14] </ref>.
References-found: 14

