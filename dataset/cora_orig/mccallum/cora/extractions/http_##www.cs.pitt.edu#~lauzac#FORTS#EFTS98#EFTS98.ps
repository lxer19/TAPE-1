URL: http://www.cs.pitt.edu/~lauzac/FORTS/EFTS98/EFTS98.ps
Refering-URL: http://www.cs.pitt.edu/~lauzac/FORTS/EFTS98/
Root-URL: 
Email: (lauzac, melhem, mosse)@cs.pitt.edu  
Title: Adding Fault-Tolerance to P-Fair Real-Time Scheduling  
Author: Sylvain Lauzac, Rami Melhem, Daniel Mosse 
Address: Pittsburgh, PA 15260  
Affiliation: University of Pittsburgh Department of Computer Science  
Abstract: This paper presents a real-time scheduling algorithm for periodic preemptive tasks on a multiprocessor that tolerates transient and permanent faults. This fault-tolerant algorithm yields a processor utilization close to the optimal when the task set consists of many tasks with small utilizations. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. K. Baruah, N. Cohen, C. Plaxton, and D. Varvel. </author> <title> Proportionate progress: A notion of fairness in resource allocation. </title> <journal> Algorithmica, </journal> <volume> 15 </volume> <pages> 600-625, </pages> <year> 1996. </year>
Reference-contexts: A task cannot be executed at the same time on several processors. The platform considered in this work consists of p processors and their interconnection network. 2 Previous work A new real-time scheduling algorithm, algorithm PF for shared memory multiprocessors has recently been presented <ref> [1] </ref>. Algorithm PF uses the concept of slotted time, that is, each processor executes a given task for the length of the time slot. At the end of the time slot, algorithm PF selects which p tasks must be run in the next time slot. <p> PF generates a real-time schedule if n X C i p (1) An important property of a P-fair scheduling algorithm is that the number of time slots allocated to task t i during a time interval of length t, S (t; i), is such that 8i; t : i 2 <ref> [1; n] </ref>; t 2 N : bt fi U i c S (t; i) dt fi U i e (2) 3 Tolerance to transient faults This section shows how algorithm PF can be modified into algorithm FT-PF that schedules a set of real-time tasks T on p processors and tolerates transient <p> More formally, the next Lemma shows what increase in resource allocation makes a task finish early enough. 2 Lemma 1 Given p processors and a task set T , we transform T into a new set T 0 where 8i 2 <ref> [1; n] </ref>; C 0 C i T i e T 0 If there is a P-fair schedule, S 0 , generated by applying PF on T 0 for p processors, then S 0 is also a feasible schedule for T such that each task t i completes C i time units
Reference: [2] <author> N. S. W. </author> <note> Center. DD 21 Command Brief Presentation. http://www.nswc.navy.mil/DD21/combrf2/index.htm, 1997. </note>
Reference-contexts: 1 Introduction Two trends seem to be appearing when designing modern embedded computing systems. First, systems are increasingly complex, using many processors to process a large number of tasks <ref> [2] </ref>. Second, with the ever increasing power of modern processors, most tasks only use a small percentage of a processor. Due to these two trends, our work focuses on systems that use many processors, service many tasks and where each task requires a small percentage of the CPU time.
Reference: [3] <author> S. Ghosh, D. Mosse, and R. Melhem. </author> <title> Fault-Tolerant Rate-Monotonic Scheduling. </title> <journal> Journal of Real-Time Systems, </journal> <note> 1998. to appear. </note>
Reference-contexts: As example, adding a spare processor is a well known technique for tolerating faults [4]. However, because of the real-time requirements of this problem, simply adding a spare processor is inadequate (it does not satisfy condition C1). An other fault-tolerant technique is to reserve slack <ref> [3] </ref>. This technique works well on a uniprocessor, but does not adapt to this problem because of the multiprocessor environment. 3.3 Scheduling technique This section presents algorithm FT-PF which is based on the P-fair algorithm PF with two modifications.
Reference: [4] <author> B. W. Johnson. </author> <title> Design and Analysis of Fault Tolerant Digital Systems. </title> <publisher> Addison Wesley Pub. Co., </publisher> <year> 1989. </year>
Reference-contexts: Enforcing these conditions is not an easy problem. Several known techniques for fault-tolerance cannot be applied in this case. As example, adding a spare processor is a well known technique for tolerating faults <ref> [4] </ref>. However, because of the real-time requirements of this problem, simply adding a spare processor is inadequate (it does not satisfy condition C1). An other fault-tolerant technique is to reserve slack [3].
Reference: [5] <author> R. D. Schlichting and F. B. Schneider. </author> <title> Fail-stop processors: An approach to designing fault-tolerant computing systems. </title> <journal> ACM Trans. on Computing Systems, </journal> <volume> 1(3) </volume> <pages> 222-238, </pages> <year> 1983. </year>
Reference-contexts: However, if only permanent faults are to be tolerated, algorithm FT-PF can use the better admission control n X C i p 1 4.1 Fault model We consider a fault model stronger than the usual fail/stop model <ref> [5] </ref>. When a permanent fault occurs, not only the faulty processor must be replaced, but also each instance of a task that partially executed on the faulty processor must be discarded since the partial results may be corrupted or unavailable.
References-found: 5

