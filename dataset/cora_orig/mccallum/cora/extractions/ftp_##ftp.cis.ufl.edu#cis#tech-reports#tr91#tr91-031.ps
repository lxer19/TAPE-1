URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr91/tr91-031.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr91-abstracts.html
Root-URL: http://www.cis.ufl.edu
Phone: 2  
Title: Reconfigurable Mesh Algorithms For Fundamental Data Manipulation Operations  
Author: Jing-Fu Jenq and Sartaj Sahni 
Keyword: reconfigurable mesh computer, parallel algorithms, data manipulation.  
Address: Minneapolis, MN 55455, USA  Gainesville, FL 32611, USA  
Affiliation: 1 Department of Soil Science, University of Minnesota,  Computer and Information Sciences Department, CSE 301, University of Florida,  
Abstract: University of Florida Technical Report 91-031 Abstract: Reconfigurable mesh (RMESH) algorithms for several fundamental operations are developed. These operations include data broadcast, prefix sum, data sum, ranking, shift, data accumulation, consecutive sum, adjacent sum, sorting, random access read, and random access write. 
Abstract-found: 1
Intro-found: 1
Reference: [BEAM87] <author> P. Beame and J. Hastad, </author> <title> "Optimal bounds for decision problems on the CRCW PRAM", </title> <booktitle> Proc. 19th ACM Symp. on Theo. of Computing, </booktitle> <pages> 83-93, </pages> <year> 1987. </year>
Reference-contexts: For instance, the parity of n bits can be found in O (1) time on a reconfigurable mesh with n 2 processors while it takes W (logn/loglogn) time to do this on every CRCW PRAM with a polynomial number of processors <ref> [BEAM87] </ref>. Furthermore, the O (1) time RMESH algorithm is fairly simple. Because of the power and ease of programming of this model, it is interesting to explore the potential application of this model to various application areas.
Reference: [BEN90] <author> Y. Ben-Asher, D. Peleg, R. Ramaswami, and A. Schuster, </author> <title> "The power of reconfiguration," </title> <type> Research Report, </type> <institution> The Hebrew University, Israel, </institution> <year> 1990. </year>
Reference-contexts: 1 Introduction Recently, several similar reconfigurable mesh (RMESH) architectures have been proposed <ref> [MILL88abc, LI89ab, BEN90] </ref>. <p> It has been demonstrated that these architectures are often very easy to program and that in many cases it is possible to obtain constant time algorithms that use a polynomial number of processors for problems that are not so solvable using the PRAM model <ref> [BEN90, MILL88a, JENQ91b, WANG90ab] </ref>. For instance, the parity of n bits can be found in O (1) time on a reconfigurable mesh with n 2 processors while it takes W (logn/loglogn) time to do this on every CRCW PRAM with a polynomial number of processors [BEAM87]. <p> Rather, each processor has four bus segments entering. These segments are connected to a four input switch local to the processor. This switch is able to connect together arbitrary subsets of the input bus segments. The reconfigurable networks of <ref> [BEN90] </ref> do not have the wraparound connections of the polymorphic torus. However, their switching mechanism is similar.
Reference: [HORO90] <author> E. Horowitz and S. Sahni, </author> <title> Fundamentals of data structures in Pascal, Third Edition, </title> <publisher> Computer Science Press, Inc., </publisher> <address> New York, </address> <year> 1990. </year>
Reference-contexts: The initial and final configuration has the data in row 0 of the NN RMESH. N elements can be sorted on an NNN RMESH in O (1) time using our O (1) ranking algorithm and count sort <ref> [HORO90] </ref>.
Reference: [JANG91] <author> J. Jang and V. Prasanna, </author> <title> "An optimal sorting algorithm on reconfigurable meshes", </title> <institution> University of Southern California, </institution> <type> Technical Report IRIS 277, </type> <year> 1991. </year> - 
Reference-contexts: The sorting algorithm just described can be coupled with the column sort of [LEIG85] to obtain an O (1) time algorithm to sort N elements on an NN RMESH <ref> [LIN91, JANG91, NIGA91] </ref>. 3.10 RAR And RAW The random access read (RAR) and random access write (RAW) operations are defined in [NASS81]. In a RAR each PE has a read address associated with it. This is the address of the PE whose A variable it wishes to read.
Reference: [JENQ91a] <author> J. Jenq and S. Sahni, </author> <title> "Reconfigurable mesh algorithms for image shrinking, expanding, clustering, and template matching," </title> <booktitle> Proceedings 5th International Parallel Processing Symposium, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> 208-215, </pages> <year> 1991. </year>
Reference: [JENQ91b] <author> J. Jenq and S. Sahni, </author> <title> "Reconfigurable mesh algorithms for the Hough transform," </title> <booktitle> Proc. 1991 International Conference on Parallel Processing, </booktitle> <publisher> The Pennsylvania State University Press, </publisher> <pages> 34-41, </pages> <year> 1991. </year>
Reference-contexts: It has been demonstrated that these architectures are often very easy to program and that in many cases it is possible to obtain constant time algorithms that use a polynomial number of processors for problems that are not so solvable using the PRAM model <ref> [BEN90, MILL88a, JENQ91b, WANG90ab] </ref>. For instance, the parity of n bits can be found in O (1) time on a reconfigurable mesh with n 2 processors while it takes W (logn/loglogn) time to do this on every CRCW PRAM with a polynomial number of processors [BEAM87].
Reference: [JENQ91c] <author> J. Jenq and S. Sahni, </author> <title> "Reconfigurable mesh algorithms for the area and perimeter of image components," </title> <booktitle> Proc. 1991 International Conference on Parallel Processing, </booktitle> <publisher> The Pennsylvania State University Press, </publisher> <pages> 280-281, </pages> <year> 1991. </year>
Reference: [LEIG85] <author> T. Leighton, </author> <title> "Tight bounds on the complexity of parallel sorting", </title> <journal> IEEE Trans. on Computers, </journal> <volume> C-34, 4, </volume> <month> April </month> <year> 1985, </year> <pages> pp 344-354. </pages>
Reference-contexts: The sorting algorithm just described can be coupled with the column sort of <ref> [LEIG85] </ref> to obtain an O (1) time algorithm to sort N elements on an NN RMESH [LIN91, JANG91, NIGA91]. 3.10 RAR And RAW The random access read (RAR) and random access write (RAW) operations are defined in [NASS81]. In a RAR each PE has a read address associated with it.
Reference: [LI89a] <author> H. Li and M. Maresca, </author> <title> "Polymorphic-torus architecture for computer vision," </title> <journal> IEEE Trans. on Pattern & Machine Intelligence, </journal> <volume> 11, 3, </volume> <pages> 133-143, </pages> <year> 1989. </year>
Reference-contexts: Furthermore, the O (1) time RMESH algorithm is fairly simple. Because of the power and ease of programming of this model, it is interesting to explore the potential application of this model to various application areas. Some initial work in this regard has already been done <ref> [LI89a, MILL88c, MILL91ab, JENQ91abc, WANG90ab] </ref>. In this paper, we consider most of the fundamental parallel processing data manipulation operations identified in [RANK90] and develop efficient RMESH algorithms for these.
Reference: [LI89b] <author> H. Li and M. Maresca, </author> <title> "Polymorphic-torus network", </title> <journal> IEEE Trans. on Computers, C-38, </journal> <volume> 9, </volume> <pages> 1345-1351, </pages> <year> 1989. </year>
Reference: [LIN91] <author> R. Lin, S. Olariu, J. Schwing, and J. Zhang, </author> <title> "Sorting in O (1) time on an nn reconfigurable mesh", </title> <type> Technical Report, </type> <institution> Old Dominion University, Virginia. </institution>
Reference-contexts: The sorting algorithm just described can be coupled with the column sort of [LEIG85] to obtain an O (1) time algorithm to sort N elements on an NN RMESH <ref> [LIN91, JANG91, NIGA91] </ref>. 3.10 RAR And RAW The random access read (RAR) and random access write (RAW) operations are defined in [NASS81]. In a RAR each PE has a read address associated with it. This is the address of the PE whose A variable it wishes to read.
Reference: [MILL88a] <author> R. Miller, V. K. Prasanna Kumar, D. Resis and Q. Stout, </author> <title> "Data movement operations and applications on reconfigurable VLSI arrays", </title> <booktitle> Proceedings of the 1988 International Conference on Parallel Processing, </booktitle> <publisher> The Pennsylvania State University Press, </publisher> <pages> pp 205-208. </pages>
Reference-contexts: It has been demonstrated that these architectures are often very easy to program and that in many cases it is possible to obtain constant time algorithms that use a polynomial number of processors for problems that are not so solvable using the PRAM model <ref> [BEN90, MILL88a, JENQ91b, WANG90ab] </ref>. For instance, the parity of n bits can be found in O (1) time on a reconfigurable mesh with n 2 processors while it takes W (logn/loglogn) time to do this on every CRCW PRAM with a polynomial number of processors [BEAM87]. <p> PE (i, j) is to compute a value Sum (i, j) such that Sum (i, j) = S A k , 0 i, j &lt; N An O (logN) algorithm for this is given in <ref> [MILL88a] </ref>. First consider the case of obtaining the prefix sum of the N elements on any row of the RMESH. This can be done in O (logN ) time by using buses that are confined to the rows of the RMESH. <p> I.e., following the data sum operation we have : B (i, j) = S l=0 N-1 This can be done in O (logN) time by first performing a prefix sum <ref> [MILL88a] </ref> and then having PE (N -1,N -1) broadcast Sum (N -1,N -1) to the remaining PEs in the RMESH. For this, all switches can be closed. - 3.4 Ranking Consider the linear ordering of the N 2 PEs defined by row major order. <p> This is N 2 /2 in the worst case. The bandwidth of this boundary is N. Hence O (N ) time is needed to accomplish this data transfer. Miller et al. <ref> [MILL88a] </ref> present an O (logN ) sorting algorithm for the case when N elements are to be sorted on an RMESH with N 2 processors. The initial and final configuration has the data in row 0 of the NN RMESH. <p> In a RAW each PE has a write address which is the address of the PE to which it wishes to send the value of its A variable. Conflicts may be resolved arbitrarily. Miller et al. <ref> [MILL88a] </ref> have developed RMESH algorithms for RARs and RAWs. When k data items are to be moved in the RAR or RAW, their algorithm takes O ( MM k + logN) time, k N 2 .
Reference: [MILL88b] <author> R. Miller, V. K. Prasanna Kumar, D. Resis and Q. Stout, </author> <title> "Meshes with reconfigurable buses", </title> <booktitle> Proceedings 5th MIT Conference On Advanced Research IN VLSI, </booktitle> <year> 1988, </year> <pages> pp 163-178. </pages>
Reference: [MILL88c] <author> R. Miller, V. K. Prasanna Kumar, D. Resis and Q. Stout, </author> <title> "Image computations on reconfigurable VLSI arrays", </title> <booktitle> Proceedings IEEE Conference On Computer Vision And Pattern Recognition, </booktitle> <year> 1988, </year> <pages> pp 925-930. </pages>
Reference-contexts: Furthermore, the O (1) time RMESH algorithm is fairly simple. Because of the power and ease of programming of this model, it is interesting to explore the potential application of this model to various application areas. Some initial work in this regard has already been done <ref> [LI89a, MILL88c, MILL91ab, JENQ91abc, WANG90ab] </ref>. In this paper, we consider most of the fundamental parallel processing data manipulation operations identified in [RANK90] and develop efficient RMESH algorithms for these.
Reference: [MILL91a] <author> R. Miller, V. K. Prasanna Kumar, D. Resis and Q. Stout, </author> <title> "Image processing on reconfigurable meshes," in From Pixels to Features II, </title> <publisher> Elsevier Science, </publisher> <editor> H. Burkhardt, ed., </editor> <year> 1991. </year> - 
Reference: [MILL91b] <author> R. Miller, V. K. Prasanna Kumar, D. Resis and Q. Stout, </author> <title> "Efficient parallel algorithms for intermediate-level vision analysis on the reconfigurable mesh," in Parallel Algorithms and Architectures for Image Understanding, </title> <editor> ed. V. Prasanna Kumar, </editor> <publisher> Academic Press, </publisher> <year> 1991. </year>
Reference: [NASS79] <author> D. Nassimi and S. Sahni, </author> <title> "Bitonic sort on a mesh connected parallel computer", </title> <journal> IEEE Transactions on Computers, </journal> <volume> vol C-27, no. 1, </volume> <month> Jan. </month> <year> 1979, </year> <pages> pp 2-7. </pages>
Reference-contexts: to 0 do begin RowCircularShift (S, N,-1); S (i, j) := S (i, j) + X [k ](i, j); end; 3.9 Sorting N elements, one per processor, can be sorted in O (N ) time on an NN RMESH by simulating the O (N) sorting algorithm for ordinary mesh computers <ref> [NASS79] </ref>. That O (N ) is optimal for an RMESH can be seen by considering the amount of data that might need to cross the boundary between the left N/2 columns and the right N/2 columns. This is N 2 /2 in the worst case.
Reference: [NASS81] <author> D. Nassimi and S. Sahni, </author> <title> "Data broadcasting in SIMD computers", </title> <journal> IEEE Transactions on Computers, </journal> <volume> vol C-30, no. 2, </volume> <month> Feb. </month> <year> 1981, </year> <pages> pp 101-107. </pages>
Reference-contexts: The sorting algorithm just described can be coupled with the column sort of [LEIG85] to obtain an O (1) time algorithm to sort N elements on an NN RMESH [LIN91, JANG91, NIGA91]. 3.10 RAR And RAW The random access read (RAR) and random access write (RAW) operations are defined in <ref> [NASS81] </ref>. In a RAR each PE has a read address associated with it. This is the address of the PE whose A variable it wishes to read.
Reference: [NIGA91] <author> M. Nigam and S. Sahni, </author> <title> "On the equivalence of certain reconfigurable mesh models", </title> <type> Technical Report, </type> <institution> University of Florida, </institution> <year> 1991. </year>
Reference-contexts: The sorting algorithm just described can be coupled with the column sort of [LEIG85] to obtain an O (1) time algorithm to sort N elements on an NN RMESH <ref> [LIN91, JANG91, NIGA91] </ref>. 3.10 RAR And RAW The random access read (RAR) and random access write (RAW) operations are defined in [NASS81]. In a RAR each PE has a read address associated with it. This is the address of the PE whose A variable it wishes to read.
Reference: [RANK90] <author> S. Ranka and S. Sahni, </author> <title> Hypercube algorithms with Applications to Image Processing and Pattern Recognition, </title> <publisher> Springer Verlag, </publisher> <year> 1990. </year>
Reference-contexts: Some initial work in this regard has already been done [LI89a, MILL88c, MILL91ab, JENQ91abc, WANG90ab]. In this paper, we consider most of the fundamental parallel processing data manipulation operations identified in <ref> [RANK90] </ref> and develop efficient RMESH algorithms for these. This should simplify the __________________ * This research was supported in part by the National Science Foundation under grants DCR-84-20935 and MIP 86-17374 - task of developing application programs for the RMESH. <p> The column 0 processors read this data. Step 3: Diagonalize the column 0 data. Step 4: The diagonal PEs use column buses to broadcast their data to the row 0 PE on their column. ___________________________________________________________________________________ 4 Conclusions We have considered many of the fundamental data manipulation operations identified in <ref> [RANK90] </ref> and shown how these can be performed efficiently on a reconfigurable mesh parallel computer. These operations are useful in the development of efficient parallel algorithms. In [JENQ91abc], we have used these operations to arrive at efficient reconfigurable mesh algorithms for several problems that arise in the image processing area.
Reference: [SIEG81] <author> H. J. Siegel, L. Siegel, F. C. Kemmerer, P. T. Muller, H. E. Smalley, and S. D. Smith "PASM: </author> <title> A partitionable SIMD/MIMD system for image processing and pattern recognition", </title> <journal> IEEE Transactions on computers, </journal> <volume> vol. C-30, no. 12, </volume> <month> Dec. </month> <year> 1981, </year> <pages> pp 934-947. </pages>
Reference: [WANG90a] <author> B. Wang and G. Chen, </author> <title> "Constant time algorithms for the transitive closure and some related graph problems on processor arrays with reconfigurable bus systems," </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> 1, 4, </volume> <pages> 500-507, </pages> <year> 1990. </year>
Reference: [WANG90b] <author> B. Wang, G. Chen, and and F. Lin, </author> <title> "Constant time sorting on a processor array with a reconfigurable bus system," </title> <journal> Info. Proc. Letrs., </journal> <volume> 34, 4, </volume> <pages> 187-190, </pages> <year> 1990. </year> -
References-found: 23

