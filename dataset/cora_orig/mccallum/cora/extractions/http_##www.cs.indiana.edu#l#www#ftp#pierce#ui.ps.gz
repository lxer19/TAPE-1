URL: http://www.cs.indiana.edu/l/www/ftp/pierce/ui.ps.gz
Refering-URL: http://www.cs.indiana.edu/l/www/ftp/pierce/
Root-URL: http://www.cs.indiana.edu
Title: Preliminary Investigation of a Calculus with Intersection and Union Types of potential practical interest. For
Author: Benjamin C. Pierce 
Note: The dual construction, union types, also appears to be  
Date: June 29, 1990  
Abstract: Type systems based on the concept of intersection types [3, 4, 5] have been extensively studied in recent years, both as tools for the analysis of the pure -calculus and, more recently, as the basis for practical programming languages such as Forsythe [16]. This report summarizes the results of a preliminary investigation of a simple typed -calculus with intersection and union types. Section 1 introduces the concrete syntax and typing rules of the language. Section 2 presents a number of small programs illustrating various aspects of the language and indicating some of its expressive power. Section 3 gives a semantics in the form of rules for equality between typed terms and exhibits a PER model validating these rules. Section 4 discusses the decidability of typechecking. Section 5 relates this work to some other recent investigations of similar formulations of union types. Section 6 describes planned future work. N.b. This report describes work in a preliminary stage of development. It is likely that further investigation of both semantic considerations (e.g. the validity of deMorgan's laws and the general categorical characterization of union types) and algorithmic issues (e.g. the correctness and efficiency of the typechecking procedure proposed here) will lead to substantial changes in the formulation of the language and its interpretation.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Franco Barbanera. </author> <type> Personal communication, </type> <month> June </month> <year> 1990. </year>
Reference-contexts: My comments here are based only on informal conversations with the other researchers. Barbanera, Hayashi, and Fagan have written or are in the process of writing about their work but I have not yet read the written accounts. 5.1 Barbanera Franco Barbanera <ref> [1] </ref>, working in the context of Curry-style type assignment systems, has studied a formulation of union types quite similar to the one presented here. In particular, his rule for union elimination is identical to the rule Union-E given on page 4.
Reference: [2] <author> Kim Bruce and Giuseppe Longo. </author> <title> A modest model of records, inheritance, and bounded quantifcation. </title> <booktitle> In Proceedings of the IEEE Symposium on Logic in Computer Science, </booktitle> <pages> pages 38-50, </pages> <year> 1988. </year>
Reference-contexts: Lemma 3.2: If ` e = e 0 2 t , then ` e 2 t and ` e 0 2 t . Proof: By straightforward induction on the definition. 2 3.2 Partial Equivalence Relations Most of the basic definitions in this section come from Bruce and Longo <ref> [2] </ref>. Some of the notation is inspired by recent papers of Freyd, Scott, and others (e.g. [8]).
Reference: [3] <author> Felice Cardone and Mario Coppo. </author> <title> Two extensions of curry's type inference system. </title> <editor> In Odifreddi, editor, </editor> <booktitle> Logic For Computer Science. </booktitle> <publisher> Academic Press, </publisher> <year> 1990. </year>
Reference: [4] <author> Mario Coppo and Mariangiola Dezani-Ciancaglini. </author> <title> An extension of basic functionality theory for -calculus. </title> <journal> Notre-Dame Journal of Formal Logic, </journal> <volume> 21 </volume> <pages> 685-693, </pages> <year> 1980. </year>
Reference: [5] <author> M. Coppo, M. Dezani-Ciancaglini, and B. Venneri. </author> <title> Principal type schemes and lambda calculus semantics. In To H. </title> <editor> B. </editor> <booktitle> Curry: Essays on Combinatory Logic, Lambda Calculus, and Formalism, </booktitle> <pages> pages 535-560, </pages> <address> New York, 1980. </address> <publisher> Academic Press. </publisher>
Reference: [6] <author> Michael Fagan. </author> <type> Personal communication, </type> <month> June </month> <year> 1990. </year>
Reference-contexts: Like Barbanera's, this system has a union elimination form exactly analogous to the rule Union-E given here. 5.3 Cartwright and Fagan Michael Fagan and Robert Cartwright <ref> [6] </ref> are developing an extension of the ML type system [9, 12] that includes both recursive types and a notion of "true union" of disjoint types.
Reference: [7] <author> Tim Freeman. </author> <type> Personal communication, </type> <month> May </month> <year> 1990. </year>
Reference-contexts: But the motivating intuitions seem to be similar. Their system has principal types and a decidable type reconstruction problem. 39 5.4 Freeman Tim Freeman <ref> [7] </ref> uses intersection types as refinements of ML types, to encode the results of abstract interpretations of ML programs. His prototype implementation gives a typing very close to the one in Section 2.3 for the append function.
Reference: [8] <author> P. Freyd, P. Mulry, G. Rosolini, and D. Scott. </author> <title> Extensional PERs. </title> <booktitle> In Fifth Annual Symposium on Logic in Computer Science (Philadelphia, PA), </booktitle> <pages> pages 346-354. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> June </month> <year> 1990. </year>
Reference-contexts: Proof: By straightforward induction on the definition. 2 3.2 Partial Equivalence Relations Most of the basic definitions in this section come from Bruce and Longo [2]. Some of the notation is inspired by recent papers of Freyd, Scott, and others (e.g. <ref> [8] </ref>). Definition 3.3: Recall that Kleene's applicative structure (; ) consists of the set of natural numbers equipped with an application operation , where n m is the result of applying the nth partial recursive function to m.
Reference: [9] <author> Michael J. Gordon, Robin Milner, and Christopher P. </author> <title> Wadsworth. </title> <publisher> Edinburgh LCF. Springer-Verlag LNCS 78, </publisher> <year> 1979. </year>
Reference-contexts: Like Barbanera's, this system has a union elimination form exactly analogous to the rule Union-E given here. 5.3 Cartwright and Fagan Michael Fagan and Robert Cartwright [6] are developing an extension of the ML type system <ref> [9, 12] </ref> that includes both recursive types and a notion of "true union" of disjoint types. This is not quite the same idea as the union types described in this report, since for Fagan and Cartwright _t is defined only when and t have different outermost type constructors.
Reference: [10] <author> Susumu Hayashi. </author> <type> Personal communication, </type> <month> June </month> <year> 1990. </year>
Reference-contexts: Barbanera's long-term interests in union types include investigating infinitary union types, along the lines suggested by Leivant's work on infinitary intersections [11]. 5.2 Hayashi and Takeyama The ATT type theory of Susumu Hayashi and Yukihide Takeyama <ref> [10] </ref> includes a formulation of union types in the context of an intuitionistic logic.
Reference: [11] <author> Daniel Leivant. </author> <title> Discrete polymorphism. </title> <booktitle> To appear in Proceedings of Lisp and Functional Programming '90, </booktitle> <year> 1990. </year>
Reference-contexts: His intepretation of _t is (! u !) ! , rather than something like a pushout as suggested here. Barbanera's long-term interests in union types include investigating infinitary union types, along the lines suggested by Leivant's work on infinitary intersections <ref> [11] </ref>. 5.2 Hayashi and Takeyama The ATT type theory of Susumu Hayashi and Yukihide Takeyama [10] includes a formulation of union types in the context of an intuitionistic logic.
Reference: [12] <author> Robin Milner, Mads Tofte, and Robert Harper. </author> <title> The Definition of Standard ML. </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: Like Barbanera's, this system has a union elimination form exactly analogous to the rule Union-E given here. 5.3 Cartwright and Fagan Michael Fagan and Robert Cartwright [6] are developing an extension of the ML type system <ref> [9, 12] </ref> that includes both recursive types and a notion of "true union" of disjoint types. This is not quite the same idea as the union types described in this report, since for Fagan and Cartwright _t is defined only when and t have different outermost type constructors.
Reference: [13] <author> Benjamin C. Pierce. </author> <title> Bounded quantification and intersection types. </title> <type> Thesis proposal, </type> <month> Septem-ber </month> <year> 1989. </year>
Reference-contexts: It is clear from the examples in Section 2 that types like those given to if and caselist are beginning to be quite cumbersome. It appears likely that the only way to make this kind of type system efficient enough in practice is to incorporate polymorphic types as well <ref> [13, 14] </ref>. 7 Acknowledgements I am grateful for productive discussions with Franco Barbanera, Manfred Droste, Tim Freeman, Robert Harper, Nevin Heintze, Susumu Hayashi, Frank Pfenning, Didier Remy, and John Reynolds.
Reference: [14] <author> Benjamin C. Pierce. </author> <title> A decision procedure for the subtype relation on intersection types with bounded variables. </title> <type> Technical Report CMU-CS-89-169, CMU, </type> <year> 1989. </year>
Reference-contexts: It is clear from the examples in Section 2 that types like those given to if and caselist are beginning to be quite cumbersome. It appears likely that the only way to make this kind of type system efficient enough in practice is to incorporate polymorphic types as well <ref> [13, 14] </ref>. 7 Acknowledgements I am grateful for productive discussions with Franco Barbanera, Manfred Droste, Tim Freeman, Robert Harper, Nevin Heintze, Susumu Hayashi, Frank Pfenning, Didier Remy, and John Reynolds.
Reference: [15] <author> G. D. Plotkin. </author> <title> LCF considered as a programming language. </title> <journal> Theoretical Computer Science, </journal> <volume> 5 </volume> <pages> 223-255, </pages> <year> 1977. </year>
Reference-contexts: type allows more refined types to be derived for expressions using if. &gt; or = "x:T,F. "y:T,F. if x true y; or : F-&gt;F->F /" F-&gt;T->T /" T-&gt;F->T /" T-&gt;T->T &gt; if false pi 5; it : Int We can also express a convenient type for a "parallel if" primitive <ref> [15] </ref>. Assume that parif a b c evaluates the selector a and the (boolean) arms b and c in parallel.
Reference: [16] <author> John C. Reynolds. </author> <title> Preliminary design of the programming language Forsythe. </title> <type> Technical Report CMU-CS-88-159, </type> <institution> Carnegie Mellon University, </institution> <month> June </month> <year> 1988. </year>
Reference-contexts: There is probably also useful insight to be gained by studying the structure of categorical models of union types, along the lines of Reynolds' semantics for Forsythe <ref> [16] </ref>. Proof theory. Once the syntax of the language is settled, a detailed study of its proof theory will be needed to develop and justify the algorithms used in an implementation. Polymorphism.
References-found: 16

