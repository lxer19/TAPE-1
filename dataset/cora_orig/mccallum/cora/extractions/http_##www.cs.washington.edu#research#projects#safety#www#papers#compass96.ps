URL: http://www.cs.washington.edu/research/projects/safety/www/papers/compass96.ps
Refering-URL: http://www.cs.washington.edu/homes/vivek/pubs.html
Root-URL: 
Title: Safety Analysis Tools for Requirements Specifications  
Author: Vivek Ratan Kurt Partridge Jon Reese Nancy Leveson 
Keyword: Software engineering, software safety, hazard analysis, fault tree.  
Abstract: This paper describes safety analysis tools that have been developed for a state-based requirements specification language called Requirements State Machine Language (RSML). These tools include a simulator that allows for forward and backward execution of RSML specifications, a fault tree generator that is based on backward simulation, tools to check for consistency and completeness of specifications, and additional safety analysis techniques. An example requirements specification for an Automated Highway System (AHS) is used for describing the functionality of the tools. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> David J. Allen. </author> <title> Digraphs and fault trees. </title> <type> Hazard Prevention, </type> <pages> pages 22-25, </pages> <month> Jan uary/February </month> <year> 1983. </year>
Reference-contexts: Several procedures for automatic synthesis have been proposed, but these work only for systems consisting purely of hardware elements. In the automated approaches, a model of the hardware, such as a circuit diagram, is used to generate the tree <ref> [1, 2, 7] </ref>. Taylor's technique, which is typical, takes the components of the hardware model and writes them as transfer statements [16].
Reference: [2] <author> [ALM80] P.K. Andow, </author> <title> F.P. Lees, and C.P. Murphy. The propagation of faults in process plants: A state of the art review. </title> <booktitle> In 7th International Symposium on Chemical Process Hazards, </booktitle> <pages> pages 225-237. </pages> <institution> University of Manchester, Institute of Science and Technology, </institution> <address> United Kingdom, </address> <month> April </month> <year> 1980. </year>
Reference-contexts: Several procedures for automatic synthesis have been proposed, but these work only for systems consisting purely of hardware elements. In the automated approaches, a model of the hardware, such as a circuit diagram, is used to generate the tree <ref> [1, 2, 7] </ref>. Taylor's technique, which is typical, takes the components of the hardware model and writes them as transfer statements [16].
Reference: [3] <author> David Harel. Statecharts: </author> <title> A visual formalism for complex systems. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 8 </volume> <pages> 231-274, </pages> <year> 1987. </year>
Reference-contexts: This language includes many of the hierarchical abstraction and parallel state-machine features of modern state-machine specification languages <ref> [3] </ref>. These features make such languages practical for specifying complex systems, but they sometimes also greatly complicate the analysis process. We assume that the reader is familiar with the basic features of such languages, but we include a section describing the features of RSML that are relevant to this paper. <p> Again, we note that specific AHS designs may define these maneuvers differently, but the definitions used here are adequate for demonstrating the modeling language and analysis tools. 3 RSML and the AHS Model RSML is based on an underlying Mealy machine and adopts some of the features introduced in Statecharts <ref> [3] </ref>, including hierarchical abstraction into superstates and parallel state machines. A specification may be composed of multiple components, where each component specifies the behavior of a corresponding system component.
Reference: [4] <author> Mats P.E. Heimdahl and Nancy G. Leveson. </author> <title> Completeness and consistency check ing of software requirements. </title> <journal> IEEE Trans. on Software Engineering, </journal> <month> May, </month> <year> 1996. </year>
Reference-contexts: Adequate failure-handling mechanisms can then be added to enable the system to deal with the failures. 17 4.3 Robustness Analysis We have also developed tools to check some aspects of robustness of RSML specifications and to detect nondeterminism in the specification <ref> [4] </ref>. The output of the tool is a list of conditions on the transitions out of a state that allow more than one transition to be satisfied simultaneously. Performing this analysis on our AHS model, two nondeterministic situations were detected, both arising during the beginning of Change-lane.
Reference: [5] <author> A. Hitchcock. </author> <title> A specification of an automated freeway with vehicle-borne intelli gence. </title> <note> PATH Research Report, </note> <institution> University of California, Berkeley, </institution> <year> 1992. </year>
Reference-contexts: and backward simulation, generation of fault trees, consistency and completeness analysis, and deviation analysis. 2 The Automated Highway System Example In this paper, we use a requirements specification of an automated highway system (AHS) based on a model developed at the California PATH program at the University of California, Berkeley <ref> [5, 6] </ref> as an example. This specification, along with several others, is being used as a testbed to explore automated analysis techniques, and as such does not represent any real 2 in the RSML language, the analyst can perform a variety of analyses.
Reference: [6] <author> A. Hsu, F. Eskafi, S. Sachs, and P. Varaiya. </author> <title> The Design of Platoon Maneuver Protocols for AHS. </title> <note> PATH Research Report UCB-ITS-PRR-91-6. </note> <institution> University of California, Berkeley, </institution> <address> CA., </address> <year> 1991. </year>
Reference-contexts: and backward simulation, generation of fault trees, consistency and completeness analysis, and deviation analysis. 2 The Automated Highway System Example In this paper, we use a requirements specification of an automated highway system (AHS) based on a model developed at the California PATH program at the University of California, Berkeley <ref> [5, 6] </ref> as an example. This specification, along with several others, is being used as a testbed to explore automated analysis techniques, and as such does not represent any real 2 in the RSML language, the analyst can perform a variety of analyses.
Reference: [7] <author> Frank P. Lees. </author> <title> Loss Prevention in the Process Industries, </title> <booktitle> Vol. 1 and 2. </booktitle> <address> Butter worths, London, </address> <year> 1980. </year>
Reference-contexts: Several procedures for automatic synthesis have been proposed, but these work only for systems consisting purely of hardware elements. In the automated approaches, a model of the hardware, such as a circuit diagram, is used to generate the tree <ref> [1, 2, 7] </ref>. Taylor's technique, which is typical, takes the components of the hardware model and writes them as transfer statements [16].
Reference: [8] <author> Nancy G. Leveson. Safeware: </author> <title> System Safety and Computers. </title> <publisher> Addison-Wesley Publishing Co., </publisher> <year> 1995 </year>
Reference-contexts: Our general approach, called safeware engineering <ref> [8] </ref>, involves identifying software hazards and applying software hazard analysis and hazard control procedures throughout the software development process. We have been defining and evaluating specific techniques for implementing the safeware engineering methodology and building prototype tools. <p> We have been defining and evaluating specific techniques for implementing the safeware engineering methodology and building prototype tools. Because safety engineers have concluded that inadequate design foresight and requirements specification errors are the greatest cause of software safety problems <ref> [8] </ref> and because few tools exist to support this stage of development, we have focused on building an environment for computer-based systems to aid in modeling and analysis during overall system design and software requirements specification. <p> a fault tree is a hazardous condition or state of the system, where a hazard is defined as a state or set of conditions of a system (or an object) that, together with other conditions in the environment of the system (or object), will lead to an accident (loss event) <ref> [8] </ref>. FTA uses Boolean logic to describe the combinations of events and states that constitute a hazardous state. Each level in the tree lists the events and states that are necessary to cause or lead to the state shown in the level above it.
Reference: [9] <author> Nancy G. Leveson, Stephen S. Cha, and Timothy J. Shimeall. </author> <title> Safety verification of Ada programs using software fault trees. </title> <journal> IEEE Software, </journal> <volume> 8(7) </volume> <pages> 48-59, </pages> <month> July </month> <year> 1991. </year>
Reference: [10] <author> Nancy G. Leveson and Peter R. Harvey. </author> <title> Analyzing software safety. </title> <journal> IEEE Tran sations on Software Engineering, </journal> <volume> SE-9(5):569-579, </volume> <month> September </month> <year> 1983. </year>
Reference: [11] <author> Nancy G. Leveson, Mats P.E. Heimdahl, Holly Hildreth, and Jon D. Reese. </author> <title> Re quirements Specification for Process-Control Systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-20(9), </volume> <month> September </month> <year> 1994. </year>
Reference-contexts: Although these ideas can be adapted to most state-machine modeling languages, the language used in this paper is Requirements State Machine Language (RSML), which was developed to specify the system requirements for TCAS II (Traffic Alert and Collision Avoidance System) for the FAA <ref> [11] </ref>. This language includes many of the hierarchical abstraction and parallel state-machine features of modern state-machine specification languages [3]. These features make such languages practical for specifying complex systems, but they sometimes also greatly complicate the analysis process. <p> This blackbox behavior is defined in terms of states and transitions of the controlled process. A more detailed description of RSML can be found in <ref> [11] </ref>. The AHS can be modeled using multiple identical sub-systems, each sub-system representing a vehicle or a roadside control structure. The environment for each vehicle consists of the other vehicles on the highway as well as roadside controllers along the highway.
Reference: [12] <author> Nancy G. Leveson and Janice L. Stolzy. </author> <title> Safety analysis using Petri nets. </title> <journal> IEEE Transations on Software Engineering, </journal> <volume> SE-13(3):386-397, </volume> <month> March </month> <year> 1987. </year>
Reference-contexts: When the state space is large and the number of hazards is limited (as is almost always the case), backward analysis may be more effective and feasible than forward analyses. Previously, Leveson and Stolzy described how backward analysis could be used to analyze a Time Petri-net model for safety <ref> [12] </ref>, both with respect to the possibility of getting into hazardous states when the system operated as specified and when there were various types of failures. Although theoretically possible to generate the entire reachability graph for these types of models, this is often impractical.
Reference: [13] <author> Robyn R. Lutz. </author> <title> Analyzing software requirements errors in safety-critical, embed ded systems. </title> <booktitle> IEEE Software Requirements Conference, </booktitle> <address> San Diego, </address> <month> January </month> <year> 1992. </year> <month> 20 </month>
Reference: [14] <author> Vivek Ratan, Kurt Partridge, Nancy Leveson. </author> <title> Safety Analysis Tools for AHS Models. </title> <note> Submitted as a PATH Technical Report, </note> <month> January </month> <year> 1996. </year>
Reference-contexts: The input and output interfaces represent messages between the Controller component and its environment (other components or vehicles or roadside control structures). The complete specification can be found in <ref> [14] </ref>. 4 Analysis Tools The goal of our project is to explore the limits of automated analysis to provide information useful in safety-critical project development. We have previously developed algorithms to allow certain types of safety analyses on state-based specifications.
Reference: [15] <author> Jon Damon Reese. </author> <title> Software Deviation Analysis. </title> <type> Ph.D. Dissertation, </type> <institution> University of California, Irvine, </institution> <year> 1996. </year>
Reference-contexts: For example, a collision can result if the first transition is taken and there is a vehicle in the adjacent lane. 4.4 Deviation Analysis Deviation analysis is a new forward analysis technique developed by Reese <ref> [15] </ref> that takes its inspiration from HAZOP (HAZards and OPerability analysis), a very successful analysis procedure in the chemical process industry. Both techniques are based on the underlying system theory that considers accidents to be the result of deviations in system variables.
Reference: [16] <author> J.R. Taylor. </author> <title> An integrated approach to the treatment of design and specification errors in electronic systems and software. </title> <editor> In E. Lauger and J. Moltoft, editors, </editor> <title> Electronic Components and Systems, </title> <publisher> North-Holland Publishing Co., </publisher> <year> 1982. </year> <month> 21 </month>
Reference-contexts: In the automated approaches, a model of the hardware, such as a circuit diagram, is used to generate the tree [1, 2, 7]. Taylor's technique, which is typical, takes the components of the hardware model and writes them as transfer statements <ref> [16] </ref>. Both the normal and failure properties of the component are described, and each transfer statement is represented as a small fragment of a fault tree that Taylor calls a mini-fault tree.
References-found: 16

