URL: http://www-icparc.doc.ic.ac.uk/papers/constraints_as_a_tool_for_distributed_sc.ps
Refering-URL: http://www-icparc.doc.ic.ac.uk/papers.html
Root-URL: 
Title: Constraints as a Tool for Distributed Scheduling  
Author: Mark Wallace 
Date: November 15, 1995  
Abstract: Constraints programming is well-placed to take a key role in the development of distributed scheduling systems. Problem constraints can be directly encoded as program constraints. Specialised algorithms can be naturally embedded and more importantly they can be concurrently executed as active constraints. Finally constraint-based computation provides the dynamic control which is necessary to allow a program to take advantage of the actual data at runtime to modify its analysis of the problem. The simplicity and efficiency of constraints programming has been proved on standard job-shop scheduling benchmarks, and "local consistency" techniques contribute dramatically to this efficiency. Local consistency is enforced locally and concurrently for the different problem constraints. The concurrency of the constraint behaviour makes constraints particularly suitable for distributed computation. The final problem is to put together locally consistent solutions into a globally consistent solution. This depends on exploring alternatives, and communicating the appropriate information between the components of the system. Constraint propagation is, in effect, this communication. Control over constraint propagation how much information is communicated is the key to obtaining overall performance. In this paper we introduce local consistency techniques and constraint propagation, we describe some specialised constraints for job-shop scheduling, and we show how the combination can be applied to manufacturing in the distributed enterprise. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Abderrahmane Aggoun and Nicolas Beldiceanu. </author> <title> Overview of the CHIP compiler system. </title> <editor> In Koichi Furukawa, editor, ICLP'91: </editor> <booktitle> Proceedings 8th International Conference on Logic Programming, </booktitle> <pages> pages 775-789, </pages> <address> Paris, June 1991. </address> <publisher> MIT Press. </publisher>
Reference-contexts: The #=&lt; syntax informs the underlying constraint programming system that this constraint should be handled by propagating new domain constraints whenever the domains of the variables appearing in Expr1 or Expr2 are modified in a certain way <ref> [1] </ref>. This approach can also be extended to constraint agents whose constraint parts are defined by the host program, or a database accessed by the host program.
Reference: [2] <author> Abderrahmane Aggoun and Nicolas Beldiceanu. </author> <title> Extending CHIP in order to solve complex scheduling and placement problems. </title> <journal> Journal of Mathematical and Computer Modelling, </journal> <volume> 17(7) </volume> <pages> 57-73, </pages> <year> 1993. </year>
Reference-contexts: The commercial CHIP system has now been applied to industrial scheduling problems for example in the ATLAS system [23]. Indeed a number of constraints programming systems include generic constraint agents for scheduling applications <ref> [2, 26, 15] </ref> and excellent results on job shop benchmarks have been reported [7]. An analysis of the application of constraint programming to scheduling is in [27]. The most important advantage of constraints programming is however not reflected in benchmarks.
Reference: [3] <author> D. Applegate and B. Cook. </author> <title> A computational study of the job-shop scheduling problem. </title> <journal> Journal of the Operations Research Society of America, </journal> <volume> 3(2), </volume> <year> 1991. </year>
Reference-contexts: The number of alternatives is around 10 26 . This section shows how constraints programming can be scaled up to solve large problems, by incorporating constraint agents whose behaviour is based on specialised algorithms designed for job-shop scheduling <ref> [6, 3] </ref>. The requirement is to deal with a set of tasks which compete for a resource. Each task has an earliest start time and a latest end time, which can be directly extracted from the constraint store holding domain constraints on the start time of each task.
Reference: [4] <author> M. Bartusch. </author> <title> Optimierung von netzplaenen mit anordnungsbeziehungen bei knappen betrieb-smitteln. </title> <type> Technical Report MIP-8618, </type> <institution> Universitaet Passau, Fakultaet fuer Methematik und Informatik, </institution> <year> 1986. </year>
Reference-contexts: Deci-sionPower was based on ECRC's CHIP system [12] which was later productised by Cosytec. Whilst under development at ECRC, CHIP was tried out on a variety of scheduling applications such as wafer production scheduling at Siemens [5], and construction scheduling <ref> [4, 11] </ref>. The commercial CHIP system has now been applied to industrial scheduling problems for example in the ATLAS system [23]. Indeed a number of constraints programming systems include generic constraint agents for scheduling applications [2, 26, 15] and excellent results on job shop benchmarks have been reported [7]. <p> The disadvantage of propagation is that for large initial domains, the length of a propagation sequence necessary to make explicit an inconsistency may also grow large. To compare the two approaches we experimented with a scheduling problem first introduced in <ref> [4] </ref>. This problem has around 45 tasks with a variety of constraints between them. Over 80 of the constraints are simple inequality constraints constraining the start and end times of the tasks in various ways. <p> An agent was built in section 3.2 above which deals very effectively with pairs of tasks competing for a resource. (Testing its effect on the Bridge scheduling problem <ref> [4] </ref> we found it reduced backtracking by several orders of magnitude.) However in case three or more tasks compete for the same resource it may fail to detect inconsistencies.
Reference: [5] <author> G. Baues. </author> <title> Einsatz der Constraint-Logic-Programming-Sprache CHIP bei der Loesung eines Job-Shop-Scheduling-Problems. </title> <type> Master's thesis, </type> <institution> Technische Universitaet Muenchen, Munich, Germany, </institution> <month> May </month> <year> 1989. </year> <note> (submitted). </note>
Reference-contexts: Deci-sionPower was based on ECRC's CHIP system [12] which was later productised by Cosytec. Whilst under development at ECRC, CHIP was tried out on a variety of scheduling applications such as wafer production scheduling at Siemens <ref> [5] </ref>, and construction scheduling [4, 11]. The commercial CHIP system has now been applied to industrial scheduling problems for example in the ATLAS system [23].
Reference: [6] <author> J. Carlier and E. Pinson. </author> <title> Une methode arborescente pour optimiser la duree d'un job-shop. </title> <type> Technical Report ISSN 0294-2755, </type> <institution> Institut de Mathematiques Appliquees (IMA), Angers, </institution> <year> 1986. </year>
Reference-contexts: The number of alternatives is around 10 26 . This section shows how constraints programming can be scaled up to solve large problems, by incorporating constraint agents whose behaviour is based on specialised algorithms designed for job-shop scheduling <ref> [6, 3] </ref>. The requirement is to deal with a set of tasks which compete for a resource. Each task has an earliest start time and a latest end time, which can be directly extracted from the constraint store holding domain constraints on the start time of each task.
Reference: [7] <author> Yves Caseau and Francois Laburthe. </author> <title> Improved clp scheduling with task intervals. </title> <editor> In P. Van Hentenryck, editor, </editor> <booktitle> Proceedings of the 11th International Conference on Logic Programming, </booktitle> <address> Santa Margherita, 1994. </address> <publisher> MIT Press. </publisher> <pages> 11 </pages>
Reference-contexts: The commercial CHIP system has now been applied to industrial scheduling problems for example in the ATLAS system [23]. Indeed a number of constraints programming systems include generic constraint agents for scheduling applications [2, 26, 15] and excellent results on job shop benchmarks have been reported <ref> [7] </ref>. An analysis of the application of constraint programming to scheduling is in [27]. The most important advantage of constraints programming is however not reflected in benchmarks. Its advantage is on problems with a complex mixture of both general and specific constraints. <p> Using specific codes it is possible to build complex constraints and constraint behaviours to obtain good performance on large complex problems. Indeed this is the approach that was very successfully applied on job-shop scheduling benchmarks and reported in <ref> [7] </ref>. In section 5.1 below we shall outline this approach, but for clarity we shall define the behaviour using guarded constraint agents rather than specific codes. <p> The definition of these agents using guards is equally simple, but for brevity we omit them. For a much more detailed description of constraint agents for job-shop scheduling and their performance, see <ref> [7] </ref>. 2 first implemented in SNI-Prolog by Reinhard Enders 9 Hopefully this definition alone suffices to convince the reader that constraint agents can be defined for job-shop scheduling which have the theoretical properties that they can be modelled as increasing and monotonic operators on the constraint store as discussed in section
Reference: [8] <author> A. Chamard and A. Fischler. </author> <title> MADE: A workshop scheduler system written in CHIP. </title> <booktitle> In Proc. 2nd International Conf. on Practical Applications of Prolog, </booktitle> <address> London, </address> <year> 1994. </year>
Reference-contexts: This experiment goes some way to explain the dramatic success of constraints programming on a variety of industrial hybrid scheduling problems. For example the MADE system at Dassault <ref> [8] </ref> is used to schedule a shop where metal parts are prepared. However the metal arrives at the shop in sheets and the first phase of production is to cut out the initial shapes from the sheet.
Reference: [9] <author> CPLEX. </author> <title> Using the cplex callable library and cplex mixed integer library. </title> <type> Technical Report Version 2.1, </type> <institution> CPLEX Optimisation Inc., </institution> <year> 1993. </year>
Reference-contexts: A second drawback of this class of constraints is the cost of checking consistency. Although highly efficient solvers for linear constraints are available, <ref> [9, 19] </ref> among others, it is generally necessary to apply a global check on all the stored constraints whenever a single constraint is added.
Reference: [10] <author> Davey and Priestley. </author> <title> Introduction to Lattices and Order. </title> <publisher> Cambridge University Press, </publisher> <year> 1992. </year>
Reference-contexts: In the next section we outline the appropriate abstraction, and show that constraint agents except perhaps those defined by specific codes satisfy our independence requirement. 4.2 Information Systems A constraint store is an information system <ref> [10] </ref>. Constraint stores can be ordered by how much information they contain. Constraint agents operate on constraint stores by adding information to them. Viewed as a mapping on information systems, they are increasing, which means that they always add information to a constraint store and never remove it.
Reference: [11] <author> M. Dincbas, H. Simonis, and P. van Hentenryck. </author> <title> Solving Large Combinatorial Problems in Logic Programming. </title> <type> Technical Report TR-LP-21, </type> <institution> ECRC, Munich, </institution> <month> June </month> <year> 1987. </year>
Reference-contexts: Deci-sionPower was based on ECRC's CHIP system [12] which was later productised by Cosytec. Whilst under development at ECRC, CHIP was tried out on a variety of scheduling applications such as wafer production scheduling at Siemens [5], and construction scheduling <ref> [4, 11] </ref>. The commercial CHIP system has now been applied to industrial scheduling problems for example in the ATLAS system [23]. Indeed a number of constraints programming systems include generic constraint agents for scheduling applications [2, 26, 15] and excellent results on job shop benchmarks have been reported [7]. <p> There were two versions of the program. The first version used a constraint store with only domain constraints and handled the simple inequalities by propagation. This program was directly modelled on an original CHIP program described in <ref> [11] </ref>. In this program the makespan was minimised by simply instantiating the final task to start at the earliest time in its domain. The initial domain of all the variables was of size 200, and the average duration of the tasks was around 6. <p> problems of distributed scheduling. 5 Constraints for Scheduling 5.1 Building a Constraint Agent for Scheduling Applications The handling of disjunctive constraints, such as the contention constraint, by making choices is a very effective technique and has enabled quite difficult scheduling problems to be handled in CLP using finite domain propagation <ref> [11] </ref>. Nevertheless as the number of tasks in contention grows, the 8 number of possible orderings between then grows exponentially. For this reason the handling of disjunctive constraints by making choices does not scale up well.
Reference: [12] <author> M. Dincbas, P. van Hentenryck, H. Simonis, A. Aggoun, T. Graf, and F. Berthier. </author> <title> The Constraint Logic Programming Language CHIP. </title> <booktitle> In Proceedings of the International Conference on Fifth Generation Computer Systems FGCS-88, </booktitle> <pages> pages 693-702, </pages> <address> Tokyo, Japan, </address> <month> December </month> <year> 1988. </year>
Reference-contexts: One early application was to container port planning in Hong Kong [20], using ICL's DecisionPower. Deci-sionPower was based on ECRC's CHIP system <ref> [12] </ref> which was later productised by Cosytec. Whilst under development at ECRC, CHIP was tried out on a variety of scheduling applications such as wafer production scheduling at Siemens [5], and construction scheduling [4, 11]. <p> In this section we will explore three ways in which constraint agents can be built. 3.1 Built-in Behaviour Firstly, and most naturally, the programmer simply gives the constraint part and the underlying implementation defines the behaviour. For example in CHIP <ref> [12] </ref> and ECLIPSE [13] the syntax Expr1 #=&lt; Expr2 builds an agent whose constraint part is Expr1 Expr2.
Reference: [13] <institution> ECRC. ECLiPSe 3.5. </institution> <type> Technical report, </type> <institution> ECRC, </institution> <year> 1995. </year> <note> http://www.ecrc.de/eclipse/eclipse.html. </note>
Reference-contexts: In this section we will explore three ways in which constraint agents can be built. 3.1 Built-in Behaviour Firstly, and most naturally, the programmer simply gives the constraint part and the underlying implementation defines the behaviour. For example in CHIP [12] and ECLIPSE <ref> [13] </ref> the syntax Expr1 #=&lt; Expr2 builds an agent whose constraint part is Expr1 Expr2.
Reference: [14] <author> R. M. Haralick and G. L. Elliot. </author> <title> Increasing tree search efficiency for constraint satisfaction problems. </title> <journal> Artificial Intelligence, </journal> <volume> 14 </volume> <pages> 263-313, </pages> <year> 1980. </year>
Reference-contexts: Such a statement can be turned into a constraint by annotating it, so that it is handled by a consistency algorithm such as forward checking <ref> [14] </ref> or lookahead [17]. These algorithms are both designed to add domain constraints to the constraint store.
Reference: [15] <author> Claude Le Pape. </author> <title> Implementation of resource constraints in ILOG SCHEDULE. </title> <journal> Intelligent Systems Engineering, </journal> <volume> 3(2), </volume> <year> 1994. </year>
Reference-contexts: The commercial CHIP system has now been applied to industrial scheduling problems for example in the ATLAS system [23]. Indeed a number of constraints programming systems include generic constraint agents for scheduling applications <ref> [2, 26, 15] </ref> and excellent results on job shop benchmarks have been reported [7]. An analysis of the application of constraint programming to scheduling is in [27]. The most important advantage of constraints programming is however not reflected in benchmarks.
Reference: [16] <author> P. Lim. </author> <title> Experiences in using prolog to develop a practical constraints solver. </title> <booktitle> In Proc. Conf. on Tools with Artificial Intelligence, </booktitle> <address> New Orleans, </address> <year> 1994. </year>
Reference-contexts: The initial domain of all the variables was of size 200, and the average duration of the tasks was around 6. The second version used a constraint store which could admit linear constraints, and constraint solving was handled by a built-in solver <ref> [16] </ref>. Both programs performed exactly the same choices, and used exactly the same depth-first branch and bound procedure to find the optimum solution. Both programs performed the same number of backtracks. The first version, using domain constraints and propagation found the optimum in a few seconds.
Reference: [17] <author> Alan K. Mackworth. </author> <title> Consistency in networks of relations. </title> <journal> Artificial Intelligence, </journal> <volume> 8(1) </volume> <pages> 99-118, </pages> <year> 1977. </year>
Reference-contexts: The domain constraints on a given variable are consistent if their intersection is non-empty. 1 In the examples in this paper we will illustrate two forms of domain constraint. The first form is used for precise reasoning on variable domains, for example arc-consistency <ref> [17] </ref>. Domain constraints in the first form are written X 2 fV al 1 ; : : : ; V al n g where X is the constrained variable, and the V al i are possible values for X. <p> Such a statement can be turned into a constraint by annotating it, so that it is handled by a consistency algorithm such as forward checking [14] or lookahead <ref> [17] </ref>. These algorithms are both designed to add domain constraints to the constraint store. For example if the constraint store currently records that T ask 2 ft1; t2g then propagating on the agent whose constraint part is taskMachine (Task,Machine), yields the new domain constraint M achine 2 fm1; m2; m3g.
Reference: [18] <author> Michael J. Maher. </author> <title> Logic semantics for a class of committed-choice programs. </title> <editor> In Jean-Louis Lassez, editor, ICLP'87: </editor> <booktitle> Proceedings 4th International Conference on Logic Programming, </booktitle> <pages> pages 858-876, </pages> <address> Melbourne, 1987. </address> <publisher> MIT Press. </publisher>
Reference-contexts: A gener-alisation of this approach, and its embedding in Prolog was described in [21]. 3.2 Guards The second way in which constraint agents can be built is by directly defining their waking behaviour using the notion of a "guard" <ref> [18] </ref>. As an example we take a resource constraint on two tasks, t1 with duration d1 and t2 with duration d2 forcing them not to overlap. As before the variable ST 1 denotes the start time of t1 and ST 2 denotes the start time of t2.
Reference: [19] <author> NAG. </author> <title> FortMP user guide and reference manual. </title> <type> Technical Report FORTMP, </type> <institution> NAG Ltd., </institution> <address> Wilkin-son House, Jordan Hill Road, Oxford, UK, </address> <year> 1994. </year>
Reference-contexts: A second drawback of this class of constraints is the cost of checking consistency. Although highly efficient solvers for linear constraints are available, <ref> [9, 19] </ref> among others, it is generally necessary to apply a global check on all the stored constraints whenever a single constraint is added.
Reference: [20] <author> M. Perrett. </author> <title> Using constraint logic programming techniques in container port planning. </title> <journal> ICL Technical Journal, </journal> <volume> 7(3) </volume> <pages> 537-545, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: One early application was to container port planning in Hong Kong <ref> [20] </ref>, using ICL's DecisionPower. Deci-sionPower was based on ECRC's CHIP system [12] which was later productised by Cosytec. Whilst under development at ECRC, CHIP was tried out on a variety of scheduling applications such as wafer production scheduling at Siemens [5], and construction scheduling [4, 11].
Reference: [21] <author> Thierry Le Provost and Mark Wallace. </author> <title> Generalised constraint propagation over the CLP scheme. </title> <journal> Journal of Logic Programming, </journal> <volume> 16(3) </volume> <pages> 319-360, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: The embedding of forward checking and looking ahead in Prolog was described in [24]. A gener-alisation of this approach, and its embedding in Prolog was described in <ref> [21] </ref>. 3.2 Guards The second way in which constraint agents can be built is by directly defining their waking behaviour using the notion of a "guard" [18].
Reference: [22] <author> Vijay A. Saraswat. </author> <title> Concurrent Constraint Programming. </title> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: As soon as one guard is satisfied, the other guard and body are discarded. Whilst it is easy to establish that the above definition indeed enforces the required resource constraint, more complex definitions need a deeper analysis. A full treatise on constraint agent semantics is in <ref> [22] </ref>. 3.3 Agents Defined by Specific Codes Constraint programming systems implement their built-in agents using specific codes which wake up, for example, whenever the upper or lower bound of the domain constraint on a given variable is altered.
Reference: [23] <author> H. Simonis and T. Cornelissens. </author> <title> Modelling producer/consumer constraints. </title> <type> Technical Report COSY/TR/Oct94, </type> <institution> COSYTEC, 4, rue Jean Rostand, Parc-Club Orsay Universite', F-91893 Or-say, France, </institution> <month> October </month> <year> 1994. </year>
Reference-contexts: Whilst under development at ECRC, CHIP was tried out on a variety of scheduling applications such as wafer production scheduling at Siemens [5], and construction scheduling [4, 11]. The commercial CHIP system has now been applied to industrial scheduling problems for example in the ATLAS system <ref> [23] </ref>. Indeed a number of constraints programming systems include generic constraint agents for scheduling applications [2, 26, 15] and excellent results on job shop benchmarks have been reported [7]. An analysis of the application of constraint programming to scheduling is in [27]. <p> Clearly the placing of parts on the sheet is an essential component of the scheduling problem and placement constraints are handled by the system. Another example is the ATLAS system which schedules the production of chemicals at the MON-SANTO <ref> [23] </ref>. Here tasks such a canning, which fit the standard job-shop framework must be combined with other tasks such as filling which consume their resources.
Reference: [24] <author> Pascal Van Hentenryck. </author> <title> Constraint Satisfaction in Logic Programming. Logic Programming Series. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1989. </year>
Reference-contexts: For example if the constraint store currently records that T ask 2 ft1; t2g then propagating on the agent whose constraint part is taskMachine (Task,Machine), yields the new domain constraint M achine 2 fm1; m2; m3g. The embedding of forward checking and looking ahead in Prolog was described in <ref> [24] </ref>. A gener-alisation of this approach, and its embedding in Prolog was described in [21]. 3.2 Guards The second way in which constraint agents can be built is by directly defining their waking behaviour using the notion of a "guard" [18].
Reference: [25] <author> Pascal Van Hentenryck, Yves Deville, and Choh-Man Teng. </author> <title> A generic arc-consistency algorithm and its specializations. </title> <journal> Artificial Intelligence, </journal> <volume> 57(2-3):291-321, </volume> <month> October </month> <year> 1992. </year>
Reference-contexts: Thus the constraints are inconsistent if, and only if, some variable domain becomes empty during propagation <ref> [25] </ref>. We can briefly illustrate how such inconsistencies are detected by considering two variables 0 X 10 and 0 Y 10, and two constraints A X+3Y and A Y +2X . Propagation on the first agent yields 0 X 7 and 3 Y 10.
Reference: [26] <author> Andre Veron. </author> <title> disjunctive/5 a constraint for disjunctive scheduling. </title> <type> Technical Report ECEC-93-5ii, </type> <institution> ECRC, </institution> <address> Arabellastr 17, 81725 Munich, </address> <year> 1993. </year>
Reference-contexts: The commercial CHIP system has now been applied to industrial scheduling problems for example in the ATLAS system [23]. Indeed a number of constraints programming systems include generic constraint agents for scheduling applications <ref> [2, 26, 15] </ref> and excellent results on job shop benchmarks have been reported [7]. An analysis of the application of constraint programming to scheduling is in [27]. The most important advantage of constraints programming is however not reflected in benchmarks.
Reference: [27] <author> Mark Wallace. </author> <title> Applying constraints for scheduling. </title> <editor> In B. Mayoh, E. Tyugu, and J.Penjaam, editors, </editor> <booktitle> Constraint Programming: Proceedings 1993 NATO ASI Parnu, Estonia, NATO Advanced Science Institute Series, </booktitle> <pages> pages 161-180. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Indeed a number of constraints programming systems include generic constraint agents for scheduling applications [2, 26, 15] and excellent results on job shop benchmarks have been reported [7]. An analysis of the application of constraint programming to scheduling is in <ref> [27] </ref>. The most important advantage of constraints programming is however not reflected in benchmarks. Its advantage is on problems with a complex mixture of both general and specific constraints.
Reference: [28] <editor> M.G. Wallace, editor. </editor> <booktitle> Proc. Conf. on Practical Applications of Constraints Technology, </booktitle> <address> Paris, </address> <year> 1995. </year>
Reference-contexts: Here tasks such a canning, which fit the standard job-shop framework must be combined with other tasks such as filling which consume their resources. This is an important generalisation of the standard job shop problem. 10 A number of further such applications are described in <ref> [28] </ref>. 6 Conclusion This paper has argued that constraints programming precisely fits the requirements of real hybrid scheduling problems. Furthermore it would appear to be well suited for planning and scheduling in a distributed enterprise.
References-found: 28

