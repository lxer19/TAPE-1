URL: http://www.ri.cmu.edu/afs/cs/usr/khaigh/www/papers/khaigh97a.ps.gz
Refering-URL: http://www.ri.cmu.edu/afs/cs/usr/khaigh/www/papers/khaigh97a.abstract.html
Root-URL: 
Email: khaigh@cs.cmu.edu  mmv@cs.cmu.edu  
Title: High-Level Planning and Low-Level Execution: Towards a Complete Robotic Agent  
Author: Karen Zita Haigh Manuela M. Veloso 
Note: In Proceedings of the First International Conference on Autonomous Agents, Feb. 1997,  This research is sponsored in part by the Wright Laboratory, Aeronautical Systems Center, Air Force Material Command, USAF, and the Advanced Research Projects Agency (ARPA) under grant number F33615-93-1-1330. The views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies or endorsements, either expressed or implied, of the Wright Laboratory or the U. S. Government.  
Address: Pittsburgh PA 15213-3891  Menlo Park, CA  
Affiliation: Computer Science Department Carnegie Mellon University  
Web: http://www.cs.cmu.edu/~khaigh  http://www.cs.cmu.edu/~mmv  
Abstract: We have been developing Rogue, an architecture that integrates high-level planning with a low-level executing robotic agent. Rogue is designed as the office gofer task planner for Xavier the robot. User requests are interpreted as high-level planning goals, such as getting coffee, and picking up and delivering mail or faxes. Users post tasks asynchronously and Rogue controls the corresponding planning and execution continuous process. This paper presents the extensions to a nonlinear state-space planning algorithm to allow for the interaction to the robot executor. We focus on presenting how executable steps are identified based on the planning model and the predicted execution performance; how interrupts from users requests are handled and incorporated into the system; how executable plans are merged according to their priorities; and how monitoring execution can add more perception knowledge to the planning and possible needed re-planning processes. The complete Rogue system will learn from its planning and execution experiences to improve upon its own behaviour with time. We finalize the paper by briefly discussing Rogue's learning opportunities. c flACM. Permission to make digital or hard copies of part or all of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Jim Blythe. </author> <title> Planning with external events. </title> <editor> In Ra-mon Lopez de Mantaras and David Poole, editors, </editor> <booktitle> Proceedings of the Tenth Conference on Uncertainty in Artificial Intelligence, </booktitle> <pages> pages 94-101, </pages> <address> Seattle, WA, July 1994. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Rogue enables this link by both mapping prodigy's plan steps into Xavier's commands and by abstracting Xavier's perception information prodigy's state information. n2 (done) n4 &lt;*finish*&gt; n5 (mtg-scheduled) Firing prefer bindings LOOK-AT-CLOSESTCONFROOM-FIRST #&lt;5309&gt; over #&lt;5311&gt; n7 &lt;schedule-meeting 5309&gt; <ref> [1] </ref> n8 (conference-room 5309) n10 &lt;select-conference-room 5309&gt; n11 (at-room 5309) n13 &lt;goto-room 5309&gt; n14 &lt;GOTO-ROOM 5309&gt; SENDING COMMAND (tcaExecuteCommand "C_say" "Going to room 5309") ANNOUNCING: Going to room 5309 SENDING COMMAND (TCAEXPANDGOAL "navigateToG" #(TASK-CONTROL::MAPLOCDATA 567.0d0 3483.0d0)) ...waiting... <p> Because it is impossible to enumerate all the world's possible events, complete conditional planning is infeasible. Probabilistic planning falls in the middle of these two frameworks <ref> [1] </ref>. At planning time, it accounts for the most probable contingencies and relies on replanning if unpredictable or rare events may take place and disrupt the plan execution.
Reference: [2] <author> R. Peter Bonasso and David Kortenkamp. </author> <title> Using a layered control architecture to alleviate planning with incomplete information. </title> <booktitle> In Proceedings of the AAAI Spring Symposium "Planning with Incomplete Information for Robot Problems", </booktitle> <pages> pages 1-4, </pages> <address> Menlo Park, CA, March 1996. </address> <publisher> AAAI Press. </publisher>
Reference-contexts: ATLANTIS [5] and rap [4], like TCA, are architectures that enable a library of behaviours and reactions to be controlled by a deliberative system. The have been used as the underlying control mechanism on a variety of robots, from indoor mobile robots [5] to space station repair robots <ref> [2] </ref> and unmanned spacecraft [6].
Reference: [3] <author> Jaime G. Carbonell, Craig A. Knoblock, and Steven Minton. </author> <title> Prodigy: An integrated architecture for planning and learning. </title> <editor> In K. VanLehn, editor, </editor> <booktitle> Architectures for Intelligence. </booktitle> <publisher> Erlbaum, </publisher> <address> Hillsdale, NJ, </address> <year> 1990. </year> <note> Also Available as Technical Report CMU-CS-89-189. </note>
Reference-contexts: 1 Introduction We have been working towards the goal of building autonomous robotic agents that are capable of planning and executing high-level tasks. Our framework consists of the integration of Xavier the robot [10; 14] with the prodigy planning system <ref> [3; 17] </ref> in a setup where users can post tasks for which the planner generates appropriate plans, delivers them to the robot, and monitors their execution. Rogue effectively acts as the task scheduler for the robot. <p> Prodigy is a domain-independent problem solver that serves as a testbed for machine learning research <ref> [3; 17] </ref>. Prodigy4.0 is a nonlinear planner that follows a state-space search guided by means-ends analysis and backward chaining. It reasons about multiple goals and multiple alternative operators to achieve the goals. In prodigy, an incomplete plan consists of two parts, the head-plan and the tail-plan (see Figure 3).
Reference: [4] <author> R. James Firby. </author> <title> Task networks for controlling continuous processes. </title> <editor> In K. Hammond, editor, </editor> <booktitle> Artificial Intelligence Planning Systems: Proceedings of the Second International Conference (AIPS-94), </booktitle> <pages> pages 49-54, </pages> <address> Menlo Park, CA, June 1994. </address> <publisher> AAAI Press. </publisher>
Reference-contexts: ATLANTIS [5] and rap <ref> [4] </ref>, like TCA, are architectures that enable a library of behaviours and reactions to be controlled by a deliberative system. The have been used as the underlying control mechanism on a variety of robots, from indoor mobile robots [5] to space station repair robots [2] and unmanned spacecraft [6].
Reference: [5] <author> Erann Gat. </author> <title> Integrating planning and reacting in a heterogeneous asynchronous architecture for controlling real-world mobile robots. </title> <booktitle> In Proceedings of the Tenth National Conference on Artificial Intelligence (AAAI-92), </booktitle> <pages> pages 809-815, </pages> <year> 1992. </year>
Reference-contexts: ATLANTIS <ref> [5] </ref> and rap [4], like TCA, are architectures that enable a library of behaviours and reactions to be controlled by a deliberative system. The have been used as the underlying control mechanism on a variety of robots, from indoor mobile robots [5] to space station repair robots [2] and unmanned spacecraft <p> ATLANTIS <ref> [5] </ref> and rap [4], like TCA, are architectures that enable a library of behaviours and reactions to be controlled by a deliberative system. The have been used as the underlying control mechanism on a variety of robots, from indoor mobile robots [5] to space station repair robots [2] and unmanned spacecraft [6].
Reference: [6] <author> Erann Gat. </author> <title> News from the trenches: An overview of unmanned spacecraft for AI researchers. </title> <booktitle> In Proceedings of the AAAI Spring Symposium "Planning with Incomplete Information for Robot Problems", </booktitle> <pages> pages 5-12, </pages> <address> Menlo Park, CA, March 1996. </address> <publisher> AAAI Press. </publisher>
Reference-contexts: The have been used as the underlying control mechanism on a variety of robots, from indoor mobile robots [5] to space station repair robots [2] and unmanned spacecraft <ref> [6] </ref>.
Reference: [7] <author> Karen Zita Haigh and Manuela Veloso. </author> <title> Interleaving planning and robot execution for asynchronous user requests. </title> <booktitle> In Proceedings of the International Conference on Intelligent Robots and Systems (IROS), </booktitle> <month> November </month> <year> 1996. </year> <note> To Appear. </note>
Reference-contexts: We are currently investigating techniques that will allow the system to use experience to improve its performance and model of the world. We have been reporting on our work on the interleaving of planning and execution work <ref> [7; 8] </ref>. In this paper, we focus on describing in detail the planning algorithm and representation. Rogue uses the prodigy planning algorithm which is a non-linear state-space means-ends analysis planner. We explain the extensions to the algorithm that allow for effective robot execution.
Reference: [8] <author> Karen Zita Haigh and Manuela M. Veloso. </author> <title> Using perception information for robot planning and execution. </title> <booktitle> In Proceedings of the AAAI Workshop "Intelligent Adaptive Agents", </booktitle> <pages> pages 23-32, </pages> <address> Menlo Park, CA, </address> <month> August </month> <year> 1996. </year> <note> AAAI Press. Available at http://www.cs.cmu.edu/~khaigh/papers.html. </note>
Reference-contexts: We are currently investigating techniques that will allow the system to use experience to improve its performance and model of the world. We have been reporting on our work on the interleaving of planning and execution work <ref> [7; 8] </ref>. In this paper, we focus on describing in detail the planning algorithm and representation. Rogue uses the prodigy planning algorithm which is a non-linear state-space means-ends analysis planner. We explain the extensions to the algorithm that allow for effective robot execution.
Reference: [9] <author> Nils J. Nilsson. </author> <title> Shakey the robot. </title> <type> Technical Report 323, </type> <institution> AI Center, SRI International, </institution> <address> Menlo Park, CA, </address> <year> 1984. </year>
Reference-contexts: Real-world observation creates a more robust planner that is sensitive to its environment. 7 Related Work Following is a brief description of some of the robot architectures most similar to Rogue, pointing out some of the major differences. Shakey <ref> [9] </ref> was the first system to actually use plans to control a real robot in tasks involving pushing boxes. It also had a limited ability to reuse successful plans. The robot had a simple vision system and could identify failures and plan to correct them.
Reference: [10] <author> Joseph O'Sullivan and Karen Zita Haigh. </author> <type> Xavier. </type> <institution> Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <month> July </month> <year> 1994. </year> <note> Manual, Version 0.2, unpublished internal report. Available via http://www.cs.cmu.edu/~Xavier/. </note>
Reference-contexts: 1 Introduction We have been working towards the goal of building autonomous robotic agents that are capable of planning and executing high-level tasks. Our framework consists of the integration of Xavier the robot <ref> [10; 14] </ref> with the prodigy planning system [3; 17] in a setup where users can post tasks for which the planner generates appropriate plans, delivers them to the robot, and monitors their execution. Rogue effectively acts as the task scheduler for the robot. <p> Rogue is intended to be the task scheduler for a roving office gofer unit, and will deal with tasks such as delivering mail, picking up printouts and returning library books. Xavier is a mobile robot being developed at CMU <ref> [10; 14] </ref> (see Figure 1). It is built on an RWI B24 base and includes bump sensors, a laser range finder, sonars, a color camera and a speech board. The software controlling Xavier includes both reactive and deliberative behaviours, integrated using the Task Control Architecture (TCA) [13; 15].
Reference: [11] <author> Louise Margaret Pryor. </author> <title> Opportunities and Planning in an Unpredictable World. </title> <type> PhD thesis, </type> <institution> Northwestern University, Evanston, Illinois, </institution> <year> 1994. </year> <note> Also available as Technical Report number 53. </note>
Reference-contexts: Shakey however operated in a very simple near-static world doing very simple single-goal tasks. The range of failures that could occur were very limited, and goals were not very challenging. There was little need for complex high-level reasoning or learning. pareto <ref> [11] </ref>, can plan to acquire information and recognize opportunities in the environment (as can Rogue), but relies on powerful, perfect sensing in a simulated world.
Reference: [12] <author> Reid Simmons. </author> <title> Becoming increasingly reliable. </title> <editor> In K. Hammond, editor, </editor> <booktitle> Artificial Intelligence Planning Systems: Proceedings of the Second International Conference (AIPS-94), </booktitle> <pages> pages 152-157, </pages> <address> Menlo Park, CA, June 1994. </address> <publisher> AAAI Press. </publisher>
Reference-contexts: One of the goals of the project is to have the robot move autonomously in an office building reliably performing office tasks such as picking up and delivering mail and computer printouts, returning and picking up library books, and carrying recycling cans to the appropriate containers <ref> [12] </ref>. Our on-going contribution to this ultimate goal is at the high-level reasoning of the process, allowing the robot to efficiently handle multiple interacting goals, and to learn from its experience. We aim at building a complete planning, executing and learning autonomous robotic agent.
Reference: [13] <author> Reid Simmons. </author> <title> Structured control for autonomous robots. </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> 10(1) </volume> <pages> 34-43, </pages> <month> February </month> <year> 1994. </year>
Reference-contexts: It is built on an RWI B24 base and includes bump sensors, a laser range finder, sonars, a color camera and a speech board. The software controlling Xavier includes both reactive and deliberative behaviours, integrated using the Task Control Architecture (TCA) <ref> [13; 15] </ref>. The underlying architecture is described in more detail in [14]. Prodigy and Xavier are linked together using the Task Control Architecture [13; 15] as shown in Figure 2. <p> The software controlling Xavier includes both reactive and deliberative behaviours, integrated using the Task Control Architecture (TCA) <ref> [13; 15] </ref>. The underlying architecture is described in more detail in [14]. Prodigy and Xavier are linked together using the Task Control Architecture [13; 15] as shown in Figure 2.
Reference: [14] <author> Reid Simmons, Rich Goodwin, Karen Zita Haigh, Sven Koenig, and Joseph O'Sullivan. </author> <title> A modular architecture for office delivery robots. </title> <booktitle> In The First International Conference on Autonomous Agents, </booktitle> <month> February </month> <year> 1997. </year>
Reference-contexts: 1 Introduction We have been working towards the goal of building autonomous robotic agents that are capable of planning and executing high-level tasks. Our framework consists of the integration of Xavier the robot <ref> [10; 14] </ref> with the prodigy planning system [3; 17] in a setup where users can post tasks for which the planner generates appropriate plans, delivers them to the robot, and monitors their execution. Rogue effectively acts as the task scheduler for the robot. <p> Rogue is intended to be the task scheduler for a roving office gofer unit, and will deal with tasks such as delivering mail, picking up printouts and returning library books. Xavier is a mobile robot being developed at CMU <ref> [10; 14] </ref> (see Figure 1). It is built on an RWI B24 base and includes bump sensors, a laser range finder, sonars, a color camera and a speech board. The software controlling Xavier includes both reactive and deliberative behaviours, integrated using the Task Control Architecture (TCA) [13; 15]. <p> The software controlling Xavier includes both reactive and deliberative behaviours, integrated using the Task Control Architecture (TCA) [13; 15]. The underlying architecture is described in more detail in <ref> [14] </ref>. Prodigy and Xavier are linked together using the Task Control Architecture [13; 15] as shown in Figure 2. <p> Results are presented in greater detail elsewhere in these proceedings <ref> [14] </ref>. This work is the basis for machine learning research with the goal of creating a complete agent that can reliably perform tasks that it is given. Learning allows the agent to use accumulated experience and feedback about its performance to improve its behaviour.
Reference: [15] <author> Reid Simmons, Long-Ji Lin, and Chris Fedor. </author> <title> Autonomous task control for mobile robots. </title> <booktitle> In Proceedings of the IEEE Symposium on Reactive Control, </booktitle> <pages> pages 663-668, </pages> <address> Philadelphia, PA, </address> <month> September </month> <year> 1990. </year>
Reference-contexts: It is built on an RWI B24 base and includes bump sensors, a laser range finder, sonars, a color camera and a speech board. The software controlling Xavier includes both reactive and deliberative behaviours, integrated using the Task Control Architecture (TCA) <ref> [13; 15] </ref>. The underlying architecture is described in more detail in [14]. Prodigy and Xavier are linked together using the Task Control Architecture [13; 15] as shown in Figure 2. <p> The software controlling Xavier includes both reactive and deliberative behaviours, integrated using the Task Control Architecture (TCA) <ref> [13; 15] </ref>. The underlying architecture is described in more detail in [14]. Prodigy and Xavier are linked together using the Task Control Architecture [13; 15] as shown in Figure 2.
Reference: [16] <author> Peter Stone and Manuela Veloso. </author> <title> User-guided interleaving of planning and execution. </title> <booktitle> In Proceedings of the European Workshop on Planning, </booktitle> <pages> pages 103-112, </pages> <month> September </month> <year> 1995. </year>
Reference-contexts: During the application phase, user-defined code is called which can map the operator to a real-world action sequence <ref> [16] </ref>. Some examples of the use of this feature include shortening combined planning and execution time, acquiring necessary domain knowledge in order to continue planning (e.g. sensing the world), and executing an action in order to know its outcome and handle any failures.
Reference: [17] <author> Manuela M. Veloso, Jaime Carbonell, M. Alicia Perez, Daniel Borrajo, Eugene Fink, and Jim Blythe. </author> <title> Integrating planning and learning: The prodigy architecture. </title> <journal> Journal of Experimental and Theoretical Artificial Intelligence, </journal> <volume> 7(1) </volume> <pages> 81-120, </pages> <month> January </month> <year> 1995. </year>
Reference-contexts: 1 Introduction We have been working towards the goal of building autonomous robotic agents that are capable of planning and executing high-level tasks. Our framework consists of the integration of Xavier the robot [10; 14] with the prodigy planning system <ref> [3; 17] </ref> in a setup where users can post tasks for which the planner generates appropriate plans, delivers them to the robot, and monitors their execution. Rogue effectively acts as the task scheduler for the robot. <p> Prodigy is a domain-independent problem solver that serves as a testbed for machine learning research <ref> [3; 17] </ref>. Prodigy4.0 is a nonlinear planner that follows a state-space search guided by means-ends analysis and backward chaining. It reasons about multiple goals and multiple alternative operators to achieve the goals. In prodigy, an incomplete plan consists of two parts, the head-plan and the tail-plan (see Figure 3).
References-found: 17

