URL: ftp://cse.ogi.edu/pub/tech-reports/1994/94-009.ps.gz
Refering-URL: ftp://cse.ogi.edu/pub/tech-reports/README.html
Root-URL: http://www.cse.ogi.edu
Email: bellegar@cse.ogi.edu  
Title: Automatic Transformations by Rewriting Techniques  
Author: Fran~coise Bellegarde 
Address: PO Box 91000 Portland, Oregon  
Affiliation: Oregon Graduate Institute of Science Technology  
Abstract: The paper shows how term rewriting techniques can be used to automatically transform first-order functional programs by both deforestation (eliminating useless intermediate data structures) and tupling (eliminating parallel traversals of identical data structures). Its novelty is that it includes these strategies for program improvement in a transformation system which uses completion procedures to automatically control a unfold/fold methodology. This means that eurekas for these strategies are automatically discovered and that they are processed by a completion procedure. The completion procedure is automatically constrained for orienting pairs into rules and for producing critical pairs. An interesting result is that the process preserves termination of the original set of rules, which is not guaranteed in general by a unfold/fold method.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> L. Bachmair, N. Dershowitz. </author> <title> Commutation, transformation, and termination. </title> <booktitle> Proc. 8th Int. Conf. on Automated Deduction, </booktitle> <volume> LNCS 230, </volume> <pages> pages 5-20, </pages> <year> 1986. </year> <note> Id: cade.tex,v 1.2 1993/11/12 19:14:07 bellegar Exp bellegar 15 </note>
Reference-contexts: In the second case, the same can be done because x i occurs only once in the linear term g. Since R and E are terminating and E quasi-commutes over R, R [ E is terminating <ref> [1, 12] </ref>. 2 As a consequence, right-hand sides of the rules of R can be normalized by E, yielding a terminating rewrite system we call R fold .
Reference: 2. <author> F. Bellegarde, P. Lescanne. </author> <title> Termination by Completion. </title> <journal> Journal of Applied Algebra in Engineering, Communication and Computing, </journal> <volume> 1, </volume> <pages> pages 79-96, </pages> <year> 1990. </year>
Reference: 3. <author> F. Bellegarde. </author> <title> Program Transformation and Rewriting. </title> <booktitle> Proc. 4th Conf. on Rewriting Techniques and Applications. </booktitle> <volume> LNCS 488, </volume> <pages> pages 226-239, </pages> <year> 1991. </year>
Reference-contexts: Deforestation and tupling are particular instances of this strategy. In the Focus system [14], folding and unfolding are seen as rewritings. It has been pointed out in [9] that an unfold/fold strategy can be controlled by a completion procedure. Following this idea, the transformation system Astre <ref> [3, 4] </ref> is based on completion procedures. Astre takes into account of inductive laws provided by the user during the completion process. All these systems are interactive. The paper shows how deforestation and tupling are automatable using completion. These strategies are implemented inside the system Astre.
Reference: 4. <author> F. Bellegarde. Astre, </author> <title> a Transformation System using Completion. </title> <type> Technical Report, </type> <institution> Oregon Graduate Institute, </institution> <year> 1991. </year>
Reference-contexts: Deforestation and tupling are particular instances of this strategy. In the Focus system [14], folding and unfolding are seen as rewritings. It has been pointed out in [9] that an unfold/fold strategy can be controlled by a completion procedure. Following this idea, the transformation system Astre <ref> [3, 4] </ref> is based on completion procedures. Astre takes into account of inductive laws provided by the user during the completion process. All these systems are interactive. The paper shows how deforestation and tupling are automatable using completion. These strategies are implemented inside the system Astre.
Reference: 5. <author> F. Bellegarde. </author> <title> A transformation System Combining Partial Evaluation with Term Rewriting, Presented to HOA'93: An international Workshop on Higher Order Algebra, Logic and Term Rewriting, </title> <booktitle> Participant proc., </booktitle> <address> Amsterdam, </address> <month> Sept. 93. </month>
Reference-contexts: The superiority of Chin's work is that it is not restricted to first-order programs. Because we are using first-order term rewriting, it seems more difficult to integrate a `defunctionalization' transformation. We have explored a way to combine partial evaluation with completion in <ref> [5] </ref>. Acknowledgement We have enjoyed discussions with L. Fegaras. Many thanks to J. Bell and D. Spencer for reading the current draft of the paper.
Reference: 6. <author> R. M. Burstall and J. Darlington. </author> <title> A Transformation System For Developing Recursive Programs. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 24, </volume> <pages> pages 44-67, </pages> <year> 1977. </year>
Reference-contexts: These functions can be put together in a tuple as a single function that traverses the data structure only once. This is another way of transforming programs according to the tupling lemma [10]. General purpose program transformation systems are based on a unfold/fold method <ref> [6] </ref>. Deforestation and tupling are particular instances of this strategy. In the Focus system [14], folding and unfolding are seen as rewritings. It has been pointed out in [9] that an unfold/fold strategy can be controlled by a completion procedure. <p> Otherwise, it adds the critical pairs to R, orienting them in such a way as to preserve the termination property. If the procedure does not fail and terminates, it returns a confluent and terminating system equivalent to R. Completion Procedure and Unfold/Fold Method The unfold/fold method <ref> [6] </ref> consists of 6 rules, namely Definition, Instantia-tion, Unfolding, Folding, Abstraction, and Law, that allow new identities to be introduced that are equational consequences of existing identities. Dershowitz [9] has shown how the combination of Instantiation and Folding is enabled by critical pair generation.
Reference: 7. <author> W. N. Chin. </author> <title> Safe Fusion of Functional Expressions. </title> <booktitle> Proc. of the Conference on Lisp and Functional Programming, </booktitle> <address> San Francisco, </address> <year> 1992. </year>
Reference-contexts: Several approaches for eliminating useless intermediate data structures have been proposed. First came the algorithm proposed by Wadler [17] which performs automatic deforestation on a restricted class of terms called treeless terms. Later, Chin's remarkable work on fusion <ref> [7] </ref> applies to a wider class of e-treeless terms and to higher-order programs in general. More recently, promotion theorems have been utilized to normalize programs [16]. This technique is applicable to a class of potentially normalizable terms. <p> The assumptions about g ensure that best deforestation candidates in the R h rules have depths no higher than 2. Proofs of similar results can be found in [17] or in <ref> [7] </ref>. Suppose we treat only deforestation eureka which obeys the assumptions of the above lemma, then more deforestation terms obeying the assumptions can be available, and so on. This "bottom-up" process must terminate. Therefore if R contains no mutually recursive function, termination is guaranteed as consequence of Lemma 1. <p> We show in the paper that left-linearity guarantees the correctness of the transformation. The mutually safe property ensures that the process terminates. Fusability guarantees that every deforestation term can be fused. Directly fus-able terms are fusable terms that corresponds to the e-treeless terms of Chin <ref> [7] </ref>. At the present time, fusability of other terms relies on a set of laws provided by the user. We are currently exploring ways to use the completion process to synthesize rules that enlarge the class of directly fusable terms.
Reference: 8. <author> N. Dershowitz. </author> <title> Termination of Rewriting. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 3(1&2), </volume> <pages> pages 69-116, </pages> <year> 1987. </year>
Reference-contexts: Some particular 1 well-founded orderings &lt; allow to prove termination of a rewrite system R by proving only that l &gt; r for each rule l ! r in R. One of them is the recursive path ordering <ref> [8] </ref> which is based on a precedence (well-founded quasi-ordering) of symbols. <p> Deforestation Consider a naive example of a single deforestation of one term: length (x@y) where R length : length ([]) ! 0 length (x :: xs) ! S (length (xs)) R @ : (x :: xs)@y ! x :: (xs@y) 1 These well-founded orderings are fully invariant reduction orderings (see <ref> [8] </ref>). 4 Id: cade.tex,v 1.2 1993/11/12 19:14:07 bellegar Exp bellegar S is the successor function. The list x is traversed once to append it to y and once more to count the length of the result. A eureka rule length (x@y) ! h (x; y) is introduced.
Reference: 9. <author> N. Dershowitz. </author> <title> Completion and its Applications. Resolution of Equations in Algebraic Structures,, </title> <booktitle> 2, </booktitle> <pages> pages 31-86, </pages> <publisher> Academic Press, </publisher> <year> 1988. </year>
Reference-contexts: General purpose program transformation systems are based on a unfold/fold method [6]. Deforestation and tupling are particular instances of this strategy. In the Focus system [14], folding and unfolding are seen as rewritings. It has been pointed out in <ref> [9] </ref> that an unfold/fold strategy can be controlled by a completion procedure. Following this idea, the transformation system Astre [3, 4] is based on completion procedures. Astre takes into account of inductive laws provided by the user during the completion process. All these systems are interactive. <p> Completion Procedure and Unfold/Fold Method The unfold/fold method [6] consists of 6 rules, namely Definition, Instantia-tion, Unfolding, Folding, Abstraction, and Law, that allow new identities to be introduced that are equational consequences of existing identities. Dershowitz <ref> [9] </ref> has shown how the combination of Instantiation and Folding is enabled by critical pair generation. Unfolding and Law are simplifications by rewriting. Definition is the introduction of an eureka rule. Abstraction is used for a tupling tactic.
Reference: 10. <author> M. </author> <title> Fokkinga. </title> <journal> Tupling and Mutamorphisms. The Squiggolist, </journal> <volume> vol. 1,4, </volume> <year> 1989. </year>
Reference-contexts: These functions can be put together in a tuple as a single function that traverses the data structure only once. This is another way of transforming programs according to the tupling lemma <ref> [10] </ref>. General purpose program transformation systems are based on a unfold/fold method [6]. Deforestation and tupling are particular instances of this strategy. In the Focus system [14], folding and unfolding are seen as rewritings.
Reference: 11. <author> A. Gill, J. Launchbury and S.L. Peyton Jones. </author> <title> A short cut to Deforestation. </title> <booktitle> Proc. of the 6th Conf. on Functional Programming Languages and Computer Architecture, Copenhagen, </booktitle> <pages> pages 223-232, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: More recently, promotion theorems have been utilized to normalize programs [16]. This technique is applicable to a class of potentially normalizable terms. Also an automatic way to implement deforestation inside the Haskell's compiler has been shown in <ref> [11] </ref>. Deforestation algorithms do not recognize that an expression contains two or more functions that consume the same data structure.
Reference: 12. <author> J.P. Jouannaud, M. Munoz, </author> <title> Termination of a set of rules modulo a set of equations, </title> <booktitle> Proc. of the 7th Int. Conference of Automated Deduction. </booktitle> <volume> LNCS 170, </volume> <pages> pages 175-193, </pages> <year> 1984. </year>
Reference-contexts: In the second case, the same can be done because x i occurs only once in the linear term g. Since R and E are terminating and E quasi-commutes over R, R <ref> [ E is terminating [1, 12] </ref>. 2 As a consequence, right-hand sides of the rules of R can be normalized by E, yielding a terminating rewrite system we call R fold . <p> In the second case, the same can be done because x i occurs only once in the linear term g. Since R and E are terminating and E quasi-commutes over R, R [ E is terminating <ref> [1, 12] </ref>. 2 As a consequence, right-hand sides of the rules of R can be normalized by E, yielding a terminating rewrite system we call R fold .
Reference: 13. <author> L. </author> <title> Kott. About a transformation system: a theoretical study. </title> <booktitle> Proc. of the 3rd Symp. on Programming, </booktitle> <address> Paris, </address> <year> 1978. </year>
Reference-contexts: At this point, we must ensure that combining RCP rules with R fold preserves the termination of the rewrite system. Still, the termination of R is not enough to ensure the termination of R fold [ RCP . It is well-known that the unfold/fold method preserves only partial correctness <ref> [13] </ref>. However, if the system R is left-linear the following theorem ensures termination of the system R fold [R h . Linear patterns is a usual requirement in functional programming, therefore this is not such a strong requirement. Theorem 4. Assume R is an orthogonal, constructor-based, and terminating rewrite system.
Reference: 14. <author> U. S. Reddy. </author> <title> Transformational derivation of programs using the Focus system. </title> <booktitle> Symp. Practical Software Development Environments, </booktitle> <pages> pages 163-172, </pages> <publisher> ACM, </publisher> <month> De-cember </month> <year> 1988. </year>
Reference-contexts: This is another way of transforming programs according to the tupling lemma [10]. General purpose program transformation systems are based on a unfold/fold method [6]. Deforestation and tupling are particular instances of this strategy. In the Focus system <ref> [14] </ref>, folding and unfolding are seen as rewritings. It has been pointed out in [9] that an unfold/fold strategy can be controlled by a completion procedure. Following this idea, the transformation system Astre [3, 4] is based on completion procedures.
Reference: 15. <author> U. S. Reddy. </author> <title> Rewriting Techniques for Program Synthesis. </title> <booktitle> Proc. of the 3rd Conf. on Rewriting Techniques and Applications. </booktitle> <volume> LNCS 355, </volume> <pages> pages 388-403, </pages> <year> 1989. </year>
Reference-contexts: It is worthwhile to notice that this tactic can be applied to transform a function that computes the n th fibonacci number k in time proportional to k itself into a function that computes the same number in only n steps. This example has been used in <ref> [15] </ref> showing how a completion procedure produces useless explosion of critical pairs when controlling an unfold/fold transformation. Our way of implementing the tupling tactic always generates exactly the needed critical pairs. The completion, used for each transformation step, always terminates.
Reference: 16. <author> T. Sheard and L. Fegaras. </author> <title> A fold for All Seasons. </title> <booktitle> 6th Conf. on Functional Programming Languages and Computer Architecture, </booktitle> <pages> pages 233-242, </pages> <year> 1993. </year>
Reference-contexts: Later, Chin's remarkable work on fusion [7] applies to a wider class of e-treeless terms and to higher-order programs in general. More recently, promotion theorems have been utilized to normalize programs <ref> [16] </ref>. This technique is applicable to a class of potentially normalizable terms. Also an automatic way to implement deforestation inside the Haskell's compiler has been shown in [11]. Deforestation algorithms do not recognize that an expression contains two or more functions that consume the same data structure. <p> We are currently exploring ways to use the completion process to synthesize rules that enlarge the class of directly fusable terms. The enlarged class corresponds to the potentially normalizable terms of Sheard <ref> [16] </ref>. A completion procedure is used for controlling the unfold/fold process in each transformation step. It provides a great flexibility for testing a strategy on examples and validating the solutions before implementing them. Moreover, it provides an ideal framework for integrating new tactics and combining diverse strategies.

References-found: 16

