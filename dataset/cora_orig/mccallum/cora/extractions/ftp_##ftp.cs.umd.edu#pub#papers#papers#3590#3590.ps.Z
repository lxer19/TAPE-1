URL: ftp://ftp.cs.umd.edu/pub/papers/papers/3590/3590.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Title: Scalability Analysis of Declustering Methods for Cartesian Product Files  
Author: Bongki Moon Joel H. Saltz 
Keyword: Index Terms: multi-attribute access methods, range query, file declustering, scalability, Disk Modulo, Field wise Xor, Hilbert curve allocation method.  
Address: College Park, MD 20742  
Affiliation: Institute for Advanced Computer Studies and Department of Computer Science University of Maryland  
Note: To appear in IEEE Transactions on Knowledge and Data Engineering (with a different title by referees' suggestion). CS-TR-3590 and UMIACS-TR-96-5. Available at  
Email: fbkmoon, saltzg@cs.umd.edu  
Web: URL http://www.cs.umd.edu/TR/UMCP-CSD:CS-TR-3590  
Abstract: Efficient storage and retrieval of multi-attribute datasets have become one of the essential requirements for many data-intensive applications. The Cartesian product file has been known as an effective multi-attribute file structure for partial-match and best-match queries. Several heuristic methods have been developed to decluster Cartesian product files across multiple disks to obtain high performance for disk accesses. Though the scalability of the declustering methods becomes increasingly important for systems equipped with a large number of disks, no analytic studies have been done so far. In this paper we derive formulas describing the scalability of two popular declustering methods Disk Modulo and Fieldwise Xor for range queries, which are the most common type of queries. These formulas disclose the limited scalability of the declustering methods and are corroborated by extensive simulation experiments. From the practical point of view, the formulas given in this paper provide a simple measure which can be used to predict the response time of a given range query and to guide the selection of a declustering method under various conditions. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Khaled A. S. Abdel-Ghaffar and Amr El Abbadi. </author> <title> Optimal disk allocation for partial match queries. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 18(1) </volume> <pages> 132-156, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: There are a few well-known multidimensional declustering methods for Cartesian product files: Disk Modulo (DM) [15], Fieldwise Xor (FX) [31], Error Correcting Codes (ECC) [18], Hilbert Curve Allocation Method (HCAM) [17] and Vector-based declustering method [8]. Although ample analytic studies have been done for partial match queries <ref> [1, 15, 31, 46] </ref>, relatively little attention has been given to range queries [32, 33]. To the best of authors' knowledge, no analytic results have been provided so far for the scalability of multidimensional declustering methods with varying number of disks. <p> As an example, let D 1 = D 2 = fa; b; c; dg; D 11 = D 21 = fa; bg and D 12 = D 22 = fc; dg. Then the following is a Cartesian product file: Bucket <ref> [1; 1] </ref> = D 11 fiD 21 = f (a; a); (a; b); (b; a); (b; b)g Bucket [1; 2] = D 11 fiD 22 = f (a; c); (a; d); (b; c); (b; d)g Bucket [2; 1] = D 12 fiD 21 = f (c; a); (c; b); (d; a); <p> Then the following is a Cartesian product file: Bucket [1; 1] = D 11 fiD 21 = f (a; a); (a; b); (b; a); (b; b)g Bucket <ref> [1; 2] </ref> = D 11 fiD 22 = f (a; c); (a; d); (b; c); (b; d)g Bucket [2; 1] = D 12 fiD 21 = f (c; a); (c; b); (d; a); (d; b)g Bucket [2; 2] = D 12 fiD 22 = f (c; c); (c; d); (d; c); <p> Then the following is a Cartesian product file: Bucket [1; 1] = D 11 fiD 21 = f (a; a); (a; b); (b; a); (b; b)g Bucket [1; 2] = D 11 fiD 22 = f (a; c); (a; d); (b; c); (b; d)g Bucket <ref> [2; 1] </ref> = D 12 fiD 21 = f (c; a); (c; b); (d; a); (d; b)g Bucket [2; 2] = D 12 fiD 22 = f (c; c); (c; d); (d; c); (d; d)g A range query q is a d-tuple &lt; I 1 ; I 2 ; : : <p> The query q is called hypercubic if s 1 = s 2 = = s d . In the above example, if a query q is &lt; [a; b]; [b; c]&gt;, then s 1 = 1 and s 2 = 2, and two buckets Bucket <ref> [1; 1] </ref> and Bucket [1; 2] are fetched by the query. <p> The query q is called hypercubic if s 1 = s 2 = = s d . In the above example, if a query q is &lt; [a; b]; [b; c]&gt;, then s 1 = 1 and s 2 = 2, and two buckets Bucket [1; 1] and Bucket <ref> [1; 2] </ref> are fetched by the query. <p> Then it traverses the buckets in the order assigning each bucket to a disk unit in round-robin way. In [17], it has been empirically shown that HCAM outperforms DM, FX and ECC for small range queries and large number of disks. Abdel-Ghaffar et al. <ref> [1] </ref> have provided a coding-theoretic analysis of declustering Cartesian product files for partial-match queries. Both necessary and sufficient conditions are provided for the existence of a strictly optimal disk allocation method. <p> Then, in the following lemmas, we present some fundamental properties related to such operations on binary representation of bucket coordinates, which are useful in deriving the formula of FX scalability. NOTATION 3 x [i] denotes the i-th least significant bit of an integer x. x <ref> [1] </ref> and x [n] represent the least and the most significant bits of an n-bit integer x, respectively. <p> If a bucket [0; 0] is assigned to the disk unit 0, then bucket [0; 2] is assigned to disk unit 0 (m = 1 and n = 0); bucket [0; 4] is assigned to disk unit 0 (m = 2 and n = 0); bucket <ref> [1; 2] </ref> is assigned to disk unit 0 (m = 1 and n = 1); and so on. Figure 5 illustrates the buckets distributed across 4 disks by this method.
Reference: [2] <author> Chaitanya K. Baru et al. </author> <title> DB2 parallel edition. </title> <journal> IBM Systems Journal, </journal> <volume> 34(2) </volume> <pages> 292-322, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: NSF ASC9318183 and the Advanced Research Projects Agency under contract No. DABT63-94-C-0049. The authors assume all responsibility for the contents of the paper. parallel edition <ref> [2] </ref>). In such systems, database relations are generally partitioned horizontally and distributed across multiple processors. Another approach is to employ disk arrays [6, 22] or parallel file systems [10, 28]. <p> Then the following is a Cartesian product file: Bucket [1; 1] = D 11 fiD 21 = f (a; a); (a; b); (b; a); (b; b)g Bucket <ref> [1; 2] </ref> = D 11 fiD 22 = f (a; c); (a; d); (b; c); (b; d)g Bucket [2; 1] = D 12 fiD 21 = f (c; a); (c; b); (d; a); (d; b)g Bucket [2; 2] = D 12 fiD 22 = f (c; c); (c; d); (d; c); <p> Then the following is a Cartesian product file: Bucket [1; 1] = D 11 fiD 21 = f (a; a); (a; b); (b; a); (b; b)g Bucket [1; 2] = D 11 fiD 22 = f (a; c); (a; d); (b; c); (b; d)g Bucket <ref> [2; 1] </ref> = D 12 fiD 21 = f (c; a); (c; b); (d; a); (d; b)g Bucket [2; 2] = D 12 fiD 22 = f (c; c); (c; d); (d; c); (d; d)g A range query q is a d-tuple &lt; I 1 ; I 2 ; : : <p> 11 fiD 21 = f (a; a); (a; b); (b; a); (b; b)g Bucket [1; 2] = D 11 fiD 22 = f (a; c); (a; d); (b; c); (b; d)g Bucket [2; 1] = D 12 fiD 21 = f (c; a); (c; b); (d; a); (d; b)g Bucket <ref> [2; 2] </ref> = D 12 fiD 22 = f (c; c); (c; d); (d; c); (d; d)g A range query q is a d-tuple &lt; I 1 ; I 2 ; : : : ; I d &gt;, where I i is an interval [l i ; u i ] D <p> The query q is called hypercubic if s 1 = s 2 = = s d . In the above example, if a query q is &lt; [a; b]; [b; c]&gt;, then s 1 = 1 and s 2 = 2, and two buckets Bucket [1; 1] and Bucket <ref> [1; 2] </ref> are fetched by the query. <p> For example, the vector-based method generates two vectors u = (0; 2) and v = (2; 1) for 4 disks. If a bucket [0; 0] is assigned to the disk unit 0, then bucket <ref> [0; 2] </ref> is assigned to disk unit 0 (m = 1 and n = 0); bucket [0; 4] is assigned to disk unit 0 (m = 2 and n = 0); bucket [1; 2] is assigned to disk unit 0 (m = 1 and n = 1); and so on. <p> If a bucket [0; 0] is assigned to the disk unit 0, then bucket [0; 2] is assigned to disk unit 0 (m = 1 and n = 0); bucket [0; 4] is assigned to disk unit 0 (m = 2 and n = 0); bucket <ref> [1; 2] </ref> is assigned to disk unit 0 (m = 1 and n = 1); and so on. Figure 5 illustrates the buckets distributed across 4 disks by this method.
Reference: [3] <author> Steven Berson, Shahram Ghandeharizadeh, Richard Muntz, and Xiangyu Ju. </author> <title> Staggered striping in multimedia information systems. </title> <booktitle> In Proceedings of the 1994 ACM-SIGMOD Conference, </booktitle> <pages> pages 79-90, </pages> <address> Minneapolis, Minnesota, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: In addition Bubba provides partitioning based on multiple attributes by declustering inverted indexes of declustered relations [4]. Staggered striping <ref> [3] </ref> has been proposed in multimedia information systems environment. The goal of the staggered striping is to provide continuous (i.e., hiccup-free) display of multimedia objects.
Reference: [4] <author> Haran Boral et al. </author> <title> Prototyping Bubba, a highly parallel database system. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 2(1) </volume> <pages> 4-24, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: Thus efficient support for these types of queries is of paramount importance. During the past few years, much research effort has focused on developing high performance database management systems. One approach is to build multiprocessor database machines, which have become increasingly popular (for example, Bubba <ref> [4] </ref>, Gamma [12], Teradata [5, 13], Tandem [25], Oracle parallel server [14], DB2 fl This work was supported in part by the National Science Foundation under contract No. NSF ASC9318183 and the Advanced Research Projects Agency under contract No. DABT63-94-C-0049. <p> Evidently it is not guaranteed that a strictly optimal declustering can be achieved for every Cartesian product file. 2.2 Survey of declustering methods Early prototypes of parallel database systems such as Gamma [12] and Bubba <ref> [4] </ref> are based on the shared-nothing architecture model [44] and employ partitioning strategies to distribute database relations across multiple processing nodes. In addition to round-robin, range and hash partitioning [11], Gamma provides a hybrid-range partitioning scheme. <p> In addition Bubba provides partitioning based on multiple attributes by declustering inverted indexes of declustered relations <ref> [4] </ref>. Staggered striping [3] has been proposed in multimedia information systems environment. The goal of the staggered striping is to provide continuous (i.e., hiccup-free) display of multimedia objects. <p> If a bucket [0; 0] is assigned to the disk unit 0, then bucket [0; 2] is assigned to disk unit 0 (m = 1 and n = 0); bucket <ref> [0; 4] </ref> is assigned to disk unit 0 (m = 2 and n = 0); bucket [1; 2] is assigned to disk unit 0 (m = 1 and n = 1); and so on. Figure 5 illustrates the buckets distributed across 4 disks by this method.
Reference: [5] <author> Felipe Carino and Pekka Kostamaa. </author> <title> Exegesis of DBC/1012 and P-90 industrial supercomputer database machines. Teradata Advanced Concepts Laboratory. </title>
Reference-contexts: Thus efficient support for these types of queries is of paramount importance. During the past few years, much research effort has focused on developing high performance database management systems. One approach is to build multiprocessor database machines, which have become increasingly popular (for example, Bubba [4], Gamma [12], Teradata <ref> [5, 13] </ref>, Tandem [25], Oracle parallel server [14], DB2 fl This work was supported in part by the National Science Foundation under contract No. NSF ASC9318183 and the Advanced Research Projects Agency under contract No. DABT63-94-C-0049. The authors assume all responsibility for the contents of the paper. parallel edition [2]).
Reference: [6] <author> Vincenzo Catania, Antonio Puliafito, Salvatore Riccobene, and Lorenzo Vita. </author> <title> Design and performance analysis of a disk array system. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 44(10) </volume> <pages> 1236-1247, </pages> <month> October </month> <year> 1995. </year>
Reference-contexts: NSF ASC9318183 and the Advanced Research Projects Agency under contract No. DABT63-94-C-0049. The authors assume all responsibility for the contents of the paper. parallel edition [2]). In such systems, database relations are generally partitioned horizontally and distributed across multiple processors. Another approach is to employ disk arrays <ref> [6, 22] </ref> or parallel file systems [10, 28]. In both approaches, the key motivation is to exploit parallelism (especially in I/O) by distributing database files across multiple processors and/or disks aiming at closing the gap between processor and I/O performance, and thereby minimizing the response time of queries.
Reference: [7] <author> Chialin Chang, Bongki Moon, Anurag Acharya, Carter Shock, Alan Sussman, and Joel Saltz. </author> <title> Titan: a high-performance remote-sensing database. </title> <institution> Technical Report CS-TR-3689 and UMIACS-TR-96-67, University 20 of Maryland, College Park, MD, </institution> <month> September </month> <year> 1996. </year> <booktitle> Submitted to the Thirteenth International Conference on Data Engineering (ICDE'97). </booktitle>
Reference-contexts: 1 Introduction A variety of complex data management requirements have arisen in many large-scale data-intensive applications which often need support for multidimensional objects and sophisticated access methods. Typical examples are scientific data [21, 45], cartography and census data [36], the Earth Observing System (EOS) and remotely sensed image <ref> [7] </ref>, and geographic information systems [43]. Frequent operations on these datasets include volume visualization, transient detection, computation of trends and compositions, and accessing spatio-temporal subset of images. For data retrieval, all of these operations translate to requests for multidimensional subspaces from the dataset, that is, to multidimensional range queries.
Reference: [8] <author> Ling Tony Chen and Doron Rotem. </author> <title> Declustering objects for visualization. </title> <booktitle> In Proceedings of the 19th VLDB Conference, </booktitle> <pages> pages 85-96, </pages> <address> Dublin, Ireland, </address> <year> 1993. </year>
Reference-contexts: There are a few well-known multidimensional declustering methods for Cartesian product files: Disk Modulo (DM) [15], Fieldwise Xor (FX) [31], Error Correcting Codes (ECC) [18], Hilbert Curve Allocation Method (HCAM) [17] and Vector-based declustering method <ref> [8] </ref>. Although ample analytic studies have been done for partial match queries [1, 15, 31, 46], relatively little attention has been given to range queries [32, 33]. <p> A vector-based declustering method has been proposed in <ref> [8] </ref>. This declustering method is particularly suitable for 2-dimensional image and cartographic databases. Queries of interest are fixed-radius circles, and the goal of this method is to guarantee one-block-access-per-disk. <p> a formula representing all possible buckets that need to be fetched by a range query and thereby a closed-form formula of response time. 5 Types Declustering methods Single-attribute round-robin, range, hash [11], hybrid-range [23], heat/temperature locality [9] grid-based Disk Modulo [15], Fieldwise Xor [31], ECC [18], Multi-attribute HCAM [17], Vector-based <ref> [8] </ref>, MAGIC [24] graph-theoretic MST/SSP [20], Iterative [35], Minimax [37] Table 2: Classification of Declustering methods 3 Scalability of Disk Modulo declustering Du and Sobolewski have shown in [15] that the Disk Modulo (DM) is strictly optimal for a large class of partial match queries including partial match queries with only <p> The results from the vector-based method are available only for 2-dimensional Cartesian product files because the vector generation procedure for higher dimensional Cartesian product files has not been developed yet <ref> [8] </ref>. Descriptions of the HCAM and the vector-based method Before we present the experimental results, we describe the Hilbert curve allocation method (HCAM) [17] and the vector-based declustering method [8] for comparison. <p> for 2-dimensional Cartesian product files because the vector generation procedure for higher dimensional Cartesian product files has not been developed yet <ref> [8] </ref>. Descriptions of the HCAM and the vector-based method Before we present the experimental results, we describe the Hilbert curve allocation method (HCAM) [17] and the vector-based declustering method [8] for comparison. The HCAM uses the Hilbert space-filling curve to impose a linear ordering on the buckets in a Cartesian product file.
Reference: [9] <author> George Copeland, William Alexander, Ellen Boughter, and Tom Keller. </author> <title> Data placement in Bubba. </title> <booktitle> In Proceedings of the 1988 ACM-SIGMOD Conference, </booktitle> <pages> pages 99-108, </pages> <address> Chicago, IL, </address> <month> June </month> <year> 1988. </year>
Reference-contexts: Bubba considers the access frequency (heat) of each tuple when creating partitions of a relation; the goal is to balance the frequency with which each partition is accessed (temperature) rather than the actual number of tuples on each disk <ref> [9] </ref>. In addition Bubba provides partitioning based on multiple attributes by declustering inverted indexes of declustered relations [4]. Staggered striping [3] has been proposed in multimedia information systems environment. The goal of the staggered striping is to provide continuous (i.e., hiccup-free) display of multimedia objects. <p> subdomains overlapped by a range predicate for each attribute, the same technique can derive a formula representing all possible buckets that need to be fetched by a range query and thereby a closed-form formula of response time. 5 Types Declustering methods Single-attribute round-robin, range, hash [11], hybrid-range [23], heat/temperature locality <ref> [9] </ref> grid-based Disk Modulo [15], Fieldwise Xor [31], ECC [18], Multi-attribute HCAM [17], Vector-based [8], MAGIC [24] graph-theoretic MST/SSP [20], Iterative [35], Minimax [37] Table 2: Classification of Declustering methods 3 Scalability of Disk Modulo declustering Du and Sobolewski have shown in [15] that the Disk Modulo (DM) is strictly optimal
Reference: [10] <author> Peter F. Corbett and Dror G. Feitelson. </author> <title> Design and implementation of the Vesta parallel file system. </title> <booktitle> In Proceedings of the Scalable High Performance Computing Conference (SHPCC-94), </booktitle> <pages> pages 63-70, </pages> <address> Knoxville, TN, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: DABT63-94-C-0049. The authors assume all responsibility for the contents of the paper. parallel edition [2]). In such systems, database relations are generally partitioned horizontally and distributed across multiple processors. Another approach is to employ disk arrays [6, 22] or parallel file systems <ref> [10, 28] </ref>. In both approaches, the key motivation is to exploit parallelism (especially in I/O) by distributing database files across multiple processors and/or disks aiming at closing the gap between processor and I/O performance, and thereby minimizing the response time of queries.
Reference: [11] <author> David DeWitt and Jim Gray. </author> <title> Parallel database systems: The future of high performance database systems. </title> <journal> Communications of the ACM, </journal> <volume> 35(6) </volume> <pages> 85-98, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: In addition to round-robin, range and hash partitioning <ref> [11] </ref>, Gamma provides a hybrid-range partitioning scheme. The hybrid-range partitioning [23] is a combination of fragmentations of relations (sorted on a partitioning attribute) and round-robin partitioning. Bubba also provides both hash and range partitioning mechanism. <p> the ones corresponding to the subdomains overlapped by a range predicate for each attribute, the same technique can derive a formula representing all possible buckets that need to be fetched by a range query and thereby a closed-form formula of response time. 5 Types Declustering methods Single-attribute round-robin, range, hash <ref> [11] </ref>, hybrid-range [23], heat/temperature locality [9] grid-based Disk Modulo [15], Fieldwise Xor [31], ECC [18], Multi-attribute HCAM [17], Vector-based [8], MAGIC [24] graph-theoretic MST/SSP [20], Iterative [35], Minimax [37] Table 2: Classification of Declustering methods 3 Scalability of Disk Modulo declustering Du and Sobolewski have shown in [15] that the Disk
Reference: [12] <author> David J. DeWitt, Shahram Ghandeharizadeh, Donovan A. Schneider, Allan Bricker, Hui-I Hsiao, and Rick Rasmussen. </author> <title> The Gamma database machine project. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 2(1) </volume> <pages> 44-62, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: Thus efficient support for these types of queries is of paramount importance. During the past few years, much research effort has focused on developing high performance database management systems. One approach is to build multiprocessor database machines, which have become increasingly popular (for example, Bubba [4], Gamma <ref> [12] </ref>, Teradata [5, 13], Tandem [25], Oracle parallel server [14], DB2 fl This work was supported in part by the National Science Foundation under contract No. NSF ASC9318183 and the Advanced Research Projects Agency under contract No. DABT63-94-C-0049. <p> Evidently it is not guaranteed that a strictly optimal declustering can be achieved for every Cartesian product file. 2.2 Survey of declustering methods Early prototypes of parallel database systems such as Gamma <ref> [12] </ref> and Bubba [4] are based on the shared-nothing architecture model [44] and employ partitioning strategies to distribute database relations across multiple processing nodes. In addition to round-robin, range and hash partitioning [11], Gamma provides a hybrid-range partitioning scheme.
Reference: [13] <author> David J. DeWitt, Marc Smith, and Hanan Boral. </author> <title> A single-user performance evaluation of the Teradata database machine. </title> <booktitle> In the Second Workshop on High Performance Transaction Systems, </booktitle> <pages> pages 245-176, </pages> <address> Pacific Grove, CA, </address> <month> September </month> <year> 1987. </year>
Reference-contexts: Thus efficient support for these types of queries is of paramount importance. During the past few years, much research effort has focused on developing high performance database management systems. One approach is to build multiprocessor database machines, which have become increasingly popular (for example, Bubba [4], Gamma [12], Teradata <ref> [5, 13] </ref>, Tandem [25], Oracle parallel server [14], DB2 fl This work was supported in part by the National Science Foundation under contract No. NSF ASC9318183 and the Advanced Research Projects Agency under contract No. DABT63-94-C-0049. The authors assume all responsibility for the contents of the paper. parallel edition [2]).
Reference: [14] <author> Oracle & Digital. </author> <title> Oracle parallel server in the Digital environment. </title> <type> Technical report, Oracle, </type> <month> June </month> <year> 1994. </year>
Reference-contexts: During the past few years, much research effort has focused on developing high performance database management systems. One approach is to build multiprocessor database machines, which have become increasingly popular (for example, Bubba [4], Gamma [12], Teradata [5, 13], Tandem [25], Oracle parallel server <ref> [14] </ref>, DB2 fl This work was supported in part by the National Science Foundation under contract No. NSF ASC9318183 and the Advanced Research Projects Agency under contract No. DABT63-94-C-0049. The authors assume all responsibility for the contents of the paper. parallel edition [2]).
Reference: [15] <author> H. C. Du and J. S. Sobolewski. </author> <title> Disk allocation for Cartesian product files on multiple-disk systems. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 7(1) </volume> <pages> 82-101, </pages> <month> March </month> <year> 1982. </year>
Reference-contexts: Several heuristic methods have been developed to decluster a Cartesian product file [34], which has been known as a multi-attribute file structure effective for partial-match and best-match queries [42]. There are a few well-known multidimensional declustering methods for Cartesian product files: Disk Modulo (DM) <ref> [15] </ref>, Fieldwise Xor (FX) [31], Error Correcting Codes (ECC) [18], Hilbert Curve Allocation Method (HCAM) [17] and Vector-based declustering method [8]. Although ample analytic studies have been done for partial match queries [1, 15, 31, 46], relatively little attention has been given to range queries [32, 33]. <p> There are a few well-known multidimensional declustering methods for Cartesian product files: Disk Modulo (DM) [15], Fieldwise Xor (FX) [31], Error Correcting Codes (ECC) [18], Hilbert Curve Allocation Method (HCAM) [17] and Vector-based declustering method [8]. Although ample analytic studies have been done for partial match queries <ref> [1, 15, 31, 46] </ref>, relatively little attention has been given to range queries [32, 33]. To the best of authors' knowledge, no analytic results have been provided so far for the scalability of multidimensional declustering methods with varying number of disks. <p> 2.1 Cartesian product files and Range queries A d-attribute file is a set of records, where each record r is an ordered d-tuple (r 1 ; r 2 ; : : : ; r d ) of values. (Most of the definitions in this section are similar to those in <ref> [15] </ref>.) Let D i denote the domain of the i-th attribute. Thus a d-attribute file is a subset of D 1 fiD 2 fi: : :fiD d . In order to store a file on disk, the records are partitioned into buckets (or pages), containing mutually disjoint sets of records. <p> Among these methods, DM, FX and ECC have been originally invented for partial-match queries and the other two for range queries. It has been shown in <ref> [15] </ref> that DM is strictly optimal for many cases of partial-match queries including all partial-match queries with only one unspecified attribute. <p> range predicate for each attribute, the same technique can derive a formula representing all possible buckets that need to be fetched by a range query and thereby a closed-form formula of response time. 5 Types Declustering methods Single-attribute round-robin, range, hash [11], hybrid-range [23], heat/temperature locality [9] grid-based Disk Modulo <ref> [15] </ref>, Fieldwise Xor [31], ECC [18], Multi-attribute HCAM [17], Vector-based [8], MAGIC [24] graph-theoretic MST/SSP [20], Iterative [35], Minimax [37] Table 2: Classification of Declustering methods 3 Scalability of Disk Modulo declustering Du and Sobolewski have shown in [15] that the Disk Modulo (DM) is strictly optimal for a large class <p> round-robin, range, hash [11], hybrid-range [23], heat/temperature locality [9] grid-based Disk Modulo <ref> [15] </ref>, Fieldwise Xor [31], ECC [18], Multi-attribute HCAM [17], Vector-based [8], MAGIC [24] graph-theoretic MST/SSP [20], Iterative [35], Minimax [37] Table 2: Classification of Declustering methods 3 Scalability of Disk Modulo declustering Du and Sobolewski have shown in [15] that the Disk Modulo (DM) is strictly optimal for a large class of partial match queries including partial match queries with only one unspecified attribute. <p> Then, since the first three subregions have at least one side of length multiple of M , the buckets in these subregions are uniformly distributed across the M disk units. (See Theorem 3.2 in <ref> [15] </ref>.) Specifically, the number of buckets accessed from each disk is M ff 2 + 2fffi. However, the buckets in the fourth subregion (i.e., fi fifi subregion) are not uniformly distributed, and the maximum number of buckets from the same disk is fi by Corollary 1.
Reference: [16] <author> Christos Faloutsos. </author> <title> Multi-attribute hashing using Gray codes. </title> <booktitle> In Proceedings of the 1986 ACM-SIGMOD Conference, </booktitle> <pages> pages 227-238, </pages> <address> Washington D.C, </address> <month> May </month> <year> 1986. </year>
Reference-contexts: Since HCAM exploits such a clustering property of Hilbert curve, it can achieve better declustering than other linearization methods such as z-ordering [40] and Gray coding with bit-interleaving <ref> [16] </ref>. Since the analysis of the declustering properties of the HCAM is not available yet, we propose the scalability analysis of the HCAM as our future research. The assumption made in this paper and most of the literature was that queries are uniformly distributed in a given d-dimensional space.
Reference: [17] <author> Christos Faloutsos and Pravin Bhagwat. </author> <title> Declustering using fractals. </title> <booktitle> In the 2nd International Conference on Parallel and Distributed Information Systems, </booktitle> <pages> pages 18-25, </pages> <address> San Diego, CA, </address> <month> January </month> <year> 1993. </year>
Reference-contexts: There are a few well-known multidimensional declustering methods for Cartesian product files: Disk Modulo (DM) [15], Fieldwise Xor (FX) [31], Error Correcting Codes (ECC) [18], Hilbert Curve Allocation Method (HCAM) <ref> [17] </ref> and Vector-based declustering method [8]. Although ample analytic studies have been done for partial match queries [1, 15, 31, 46], relatively little attention has been given to range queries [32, 33]. <p> HCAM uses Hilbert space-filling curve to impose a linear ordering on the buckets in a Cartesian product file. Then it traverses the buckets in the order assigning each bucket to a disk unit in round-robin way. In <ref> [17] </ref>, it has been empirically shown that HCAM outperforms DM, FX and ECC for small range queries and large number of disks. Abdel-Ghaffar et al. [1] have provided a coding-theoretic analysis of declustering Cartesian product files for partial-match queries. <p> can derive a formula representing all possible buckets that need to be fetched by a range query and thereby a closed-form formula of response time. 5 Types Declustering methods Single-attribute round-robin, range, hash [11], hybrid-range [23], heat/temperature locality [9] grid-based Disk Modulo [15], Fieldwise Xor [31], ECC [18], Multi-attribute HCAM <ref> [17] </ref>, Vector-based [8], MAGIC [24] graph-theoretic MST/SSP [20], Iterative [35], Minimax [37] Table 2: Classification of Declustering methods 3 Scalability of Disk Modulo declustering Du and Sobolewski have shown in [15] that the Disk Modulo (DM) is strictly optimal for a large class of partial match queries including partial match queries <p> Descriptions of the HCAM and the vector-based method Before we present the experimental results, we describe the Hilbert curve allocation method (HCAM) <ref> [17] </ref> and the vector-based declustering method [8] for comparison. The HCAM uses the Hilbert space-filling curve to impose a linear ordering on the buckets in a Cartesian product file. <p> Therefore, by replacing the Disk Modulo with the Fieldwise Xor, we expect performance improvement only when the number of disks is a power of two. * HCAM scaled well and was fairly close to optimal in all our experiments. This result coincides with the observation made in <ref> [17] </ref>. Under most circumstances, the vector-based method was the best for declustering 2-dimensional Cartesian product files.
Reference: [18] <author> Christos Faloutsos and Dimitrios Metaxas. </author> <title> Disk allocation methods using error correcting codes. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 40(8) </volume> <pages> 907-914, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: There are a few well-known multidimensional declustering methods for Cartesian product files: Disk Modulo (DM) [15], Fieldwise Xor (FX) [31], Error Correcting Codes (ECC) <ref> [18] </ref>, Hilbert Curve Allocation Method (HCAM) [17] and Vector-based declustering method [8]. Although ample analytic studies have been done for partial match queries [1, 15, 31, 46], relatively little attention has been given to range queries [32, 33]. <p> They have also investigated the strict optimality of the FX for range queries [32]. Faloutsos et al. have empirically shown that ECC outperforms DM and FX for partial-match queries, but ECC works only for Cartesian product files of all side lengths power of two <ref> [18] </ref>. HCAM uses Hilbert space-filling curve to impose a linear ordering on the buckets in a Cartesian product file. Then it traverses the buckets in the order assigning each bucket to a disk unit in round-robin way. <p> the same technique can derive a formula representing all possible buckets that need to be fetched by a range query and thereby a closed-form formula of response time. 5 Types Declustering methods Single-attribute round-robin, range, hash [11], hybrid-range [23], heat/temperature locality [9] grid-based Disk Modulo [15], Fieldwise Xor [31], ECC <ref> [18] </ref>, Multi-attribute HCAM [17], Vector-based [8], MAGIC [24] graph-theoretic MST/SSP [20], Iterative [35], Minimax [37] Table 2: Classification of Declustering methods 3 Scalability of Disk Modulo declustering Du and Sobolewski have shown in [15] that the Disk Modulo (DM) is strictly optimal for a large class of partial match queries including
Reference: [19] <author> Christos Faloutsos and Shari Roseman. </author> <title> Fractals for secondary key retrieval. </title> <booktitle> In the 8th ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <pages> pages 247-252, </pages> <address> Philadelphia, PA, </address> <month> March </month> <year> 1989. </year>
Reference-contexts: To complete the scalability study of declustering methods, we plan to extend the analysis for Disk Modulo and Fieldwise Xor to non-hypercubic range queries. It is widely believed that the Hilbert space-filling curve achieves the best clustering among reported linear mapping schemes <ref> [19, 29] </ref>. In [38], we have recently derived closed-form formulas of the number of clusters required by a given query region of an arbitrary shape for the Hilbert curve, and have shown that the Hilbert curve achieves far better clustering than z-curve, which is also called Morton curve.
Reference: [20] <author> M. T. Fang, R. C. T. Lee, and C. C. Chang. </author> <title> The idea of de-clustering and its applications. </title> <booktitle> In Proceedings of the 12th VLDB Conference, </booktitle> <pages> pages 181-188, </pages> <address> Kyoto, Japan, </address> <year> 1986. </year>
Reference-contexts: In 2-dimensional cases, by their notion of optimality, the performance of this method is less than 7 percent off from optimum. Several similarity-based graph-theoretic declustering methods have been developed. Fang et al. <ref> [20] </ref> have proposed declustering methods using Minimal Spanning Tree (MST) and Short Spanning Path (SSP). They have made an attempt to place similar buckets (i.e., buckets close to each other) on different disks. An iterative declustering algorithm based on similarity has been proposed by Liu et al. [35]. <p> buckets that need to be fetched by a range query and thereby a closed-form formula of response time. 5 Types Declustering methods Single-attribute round-robin, range, hash [11], hybrid-range [23], heat/temperature locality [9] grid-based Disk Modulo [15], Fieldwise Xor [31], ECC [18], Multi-attribute HCAM [17], Vector-based [8], MAGIC [24] graph-theoretic MST/SSP <ref> [20] </ref>, Iterative [35], Minimax [37] Table 2: Classification of Declustering methods 3 Scalability of Disk Modulo declustering Du and Sobolewski have shown in [15] that the Disk Modulo (DM) is strictly optimal for a large class of partial match queries including partial match queries with only one unspecified attribute.
Reference: [21] <author> J. C. French, A. K. Jones, and J. L. Pfaltz. </author> <title> Summary of the final report of the NSF workshop on scientific database management. </title> <booktitle> SIGMOD Record, </booktitle> <volume> 19(4) </volume> <pages> 32-40, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: 1 Introduction A variety of complex data management requirements have arisen in many large-scale data-intensive applications which often need support for multidimensional objects and sophisticated access methods. Typical examples are scientific data <ref> [21, 45] </ref>, cartography and census data [36], the Earth Observing System (EOS) and remotely sensed image [7], and geographic information systems [43]. Frequent operations on these datasets include volume visualization, transient detection, computation of trends and compositions, and accessing spatio-temporal subset of images. <p> In the above example of the stock database, if a square query of side length 3 is given by &lt; [N; T ]; <ref> [21; 43] </ref> &gt;, then three buckets are retrieved from disk unit 0, and two buckets from each of disk units 1,2 and 3, which implies the response time of the query is three.
Reference: [22] <author> Gregory R. Ganger, Bruce L. Worthington, Robert Y. Hou, and Yale N. Patt. </author> <title> Disk arrays: High-performance, high-reliability storage subsystems. </title> <journal> IEEE Computer, </journal> <volume> 27(3) </volume> <pages> 30-36, </pages> <month> March </month> <year> 1994. </year>
Reference-contexts: NSF ASC9318183 and the Advanced Research Projects Agency under contract No. DABT63-94-C-0049. The authors assume all responsibility for the contents of the paper. parallel edition [2]). In such systems, database relations are generally partitioned horizontally and distributed across multiple processors. Another approach is to employ disk arrays <ref> [6, 22] </ref> or parallel file systems [10, 28]. In both approaches, the key motivation is to exploit parallelism (especially in I/O) by distributing database files across multiple processors and/or disks aiming at closing the gap between processor and I/O performance, and thereby minimizing the response time of queries.
Reference: [23] <author> Shahram Ghandeharizadeh and David J. DeWitt. </author> <title> Hybrid-range partitioning strategy : A new declustering strategy for multiprocessor database machines. </title> <booktitle> In Proceedings of the 16th VLDB Conference, </booktitle> <pages> pages 481-492, </pages> <address> Brisbane, Australia, </address> <year> 1990. </year> <month> 21 </month>
Reference-contexts: In addition to round-robin, range and hash partitioning [11], Gamma provides a hybrid-range partitioning scheme. The hybrid-range partitioning <ref> [23] </ref> is a combination of fragmentations of relations (sorted on a partitioning attribute) and round-robin partitioning. Bubba also provides both hash and range partitioning mechanism. One of the interesting features of Bubba is a partitioning mechanism based on the heat and temperature of relations. <p> corresponding to the subdomains overlapped by a range predicate for each attribute, the same technique can derive a formula representing all possible buckets that need to be fetched by a range query and thereby a closed-form formula of response time. 5 Types Declustering methods Single-attribute round-robin, range, hash [11], hybrid-range <ref> [23] </ref>, heat/temperature locality [9] grid-based Disk Modulo [15], Fieldwise Xor [31], ECC [18], Multi-attribute HCAM [17], Vector-based [8], MAGIC [24] graph-theoretic MST/SSP [20], Iterative [35], Minimax [37] Table 2: Classification of Declustering methods 3 Scalability of Disk Modulo declustering Du and Sobolewski have shown in [15] that the Disk Modulo (DM)
Reference: [24] <author> Shahram Ghandeharizadeh, David J. DeWitt, and Waheed Qureshi. </author> <title> A performance analysis of alternative multi-attribute declustering strategies. </title> <booktitle> In Proceedings of the 1992 ACM-SIGMOD Conference, </booktitle> <pages> pages 195-204, </pages> <address> San Diego, CA, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: Under this method, bandwidth fragmentation can be relieved with additional memory for buffer space and additional network capacity. Ghandeharizadeh et al. have proposed a declustering method called MAGIC to partition relations based on multiple attributes <ref> [24] </ref>. MAGIC partitions relations by constructing a grid directory on a relation where each entry in the grid represents a fragment of the relation. The goal of MAGIC is to maximize throughput for relatively small queries in multi-use environments. <p> representing all possible buckets that need to be fetched by a range query and thereby a closed-form formula of response time. 5 Types Declustering methods Single-attribute round-robin, range, hash [11], hybrid-range [23], heat/temperature locality [9] grid-based Disk Modulo [15], Fieldwise Xor [31], ECC [18], Multi-attribute HCAM [17], Vector-based [8], MAGIC <ref> [24] </ref> graph-theoretic MST/SSP [20], Iterative [35], Minimax [37] Table 2: Classification of Declustering methods 3 Scalability of Disk Modulo declustering Du and Sobolewski have shown in [15] that the Disk Modulo (DM) is strictly optimal for a large class of partial match queries including partial match queries with only one unspecified
Reference: [25] <author> The Tandem Performance Group. </author> <title> A benchmark of Nonstop SQL on the debit credit transaction. </title> <booktitle> In Proceedings of the 1988 ACM-SIGMOD Conference, </booktitle> <pages> pages 337-341, </pages> <address> Chicago, IL, </address> <month> June </month> <year> 1988. </year>
Reference-contexts: During the past few years, much research effort has focused on developing high performance database management systems. One approach is to build multiprocessor database machines, which have become increasingly popular (for example, Bubba [4], Gamma [12], Teradata [5, 13], Tandem <ref> [25] </ref>, Oracle parallel server [14], DB2 fl This work was supported in part by the National Science Foundation under contract No. NSF ASC9318183 and the Advanced Research Projects Agency under contract No. DABT63-94-C-0049. The authors assume all responsibility for the contents of the paper. parallel edition [2]).
Reference: [26] <author> Antonin Guttman. R-Trees: </author> <title> A dynamic index structure for spatial searching. </title> <booktitle> In Proceedings of the 1984 ACM-SIGMOD Conference, </booktitle> <pages> pages 47-57, </pages> <address> Boston, MA, </address> <month> June </month> <year> 1984. </year>
Reference-contexts: We have recently developed an improved algorithm with the goal being to minimize both the response time and the data imbalance among multiple disks [37]. The advantage of the similarity-based declustering methods is that they can handle more general data structures such as grid files [39] and R-trees <ref> [26] </ref> as well as Cartesian product files and hence are particularly suitable for non-uniform datasets with hot spots or correlation between attributes. However, the complexities of these methods are at least quadratic while all the previously mentioned methods (i.e., DM, FX, HCAM etc.) are linear.
Reference: [27] <author> Bhaskar Himatsingka and Jaideep Srivastava. </author> <title> Performance evaluation of grid based multi-attribute record declustering methods. </title> <booktitle> In the 10th Inter. Conference on Data Engineering, </booktitle> <pages> pages 356-365, </pages> <address> Houston, TX, February 1994. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: When M = 16, as shown in Figure 7 (a), the relative performance of the DM, FX and HCAM declustering methods was identical to the result given by Himatsingka et al. in <ref> [27] </ref>. For small queries (where s M ), the performance of the vector-based and HCAM was the best, followed by those of FX and DM.
Reference: [28] <author> James V. Huber, Christopher L. Elford, Daniel A. Reed, Andrew A. Chien, and David S. Blumenthal. </author> <title> PPFS: a high performance portable parallel file system. </title> <booktitle> In the 9th ACM International Conference on Supercomputing, </booktitle> <pages> pages 385-394, </pages> <address> Barcelona, Spain, </address> <month> July </month> <year> 1995. </year>
Reference-contexts: DABT63-94-C-0049. The authors assume all responsibility for the contents of the paper. parallel edition [2]). In such systems, database relations are generally partitioned horizontally and distributed across multiple processors. Another approach is to employ disk arrays [6, 22] or parallel file systems <ref> [10, 28] </ref>. In both approaches, the key motivation is to exploit parallelism (especially in I/O) by distributing database files across multiple processors and/or disks aiming at closing the gap between processor and I/O performance, and thereby minimizing the response time of queries.
Reference: [29] <author> H. V. Jagadish. </author> <title> Linear clustering of objects with multiple attributes. </title> <booktitle> In Proceedings of the 1990 ACM-SIGMOD Conference, </booktitle> <pages> pages 332-342, </pages> <address> Atlantic City, NJ, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: To complete the scalability study of declustering methods, we plan to extend the analysis for Disk Modulo and Fieldwise Xor to non-hypercubic range queries. It is widely believed that the Hilbert space-filling curve achieves the best clustering among reported linear mapping schemes <ref> [19, 29] </ref>. In [38], we have recently derived closed-form formulas of the number of clusters required by a given query region of an arbitrary shape for the Hilbert curve, and have shown that the Hilbert curve achieves far better clustering than z-curve, which is also called Morton curve.
Reference: [30] <author> B. W. Kernighan and S. Lin. </author> <title> An efficient heuristic procedure for partitioning graphs. </title> <journal> Bell System Technical Journal, </journal> <volume> 49(2) </volume> <pages> 291-307, </pages> <month> February </month> <year> 1970. </year>
Reference-contexts: They have made an attempt to place similar buckets (i.e., buckets close to each other) on different disks. An iterative declustering algorithm based on similarity has been proposed by Liu et al. [35]. They used Kernighan-Lin partitioning algorithm <ref> [30] </ref> to find an initial partition. We have recently developed an improved algorithm with the goal being to minimize both the response time and the data imbalance among multiple disks [37].
Reference: [31] <author> Myoung Ho Kim and Sakti Pramanik. </author> <title> Optimal file distribution for partial match retrieval. </title> <booktitle> In Proceedings of the 1988 ACM-SIGMOD Conference, </booktitle> <pages> pages 173-182, </pages> <address> Chicago, IL, </address> <month> June </month> <year> 1988. </year>
Reference-contexts: Several heuristic methods have been developed to decluster a Cartesian product file [34], which has been known as a multi-attribute file structure effective for partial-match and best-match queries [42]. There are a few well-known multidimensional declustering methods for Cartesian product files: Disk Modulo (DM) [15], Fieldwise Xor (FX) <ref> [31] </ref>, Error Correcting Codes (ECC) [18], Hilbert Curve Allocation Method (HCAM) [17] and Vector-based declustering method [8]. Although ample analytic studies have been done for partial match queries [1, 15, 31, 46], relatively little attention has been given to range queries [32, 33]. <p> There are a few well-known multidimensional declustering methods for Cartesian product files: Disk Modulo (DM) [15], Fieldwise Xor (FX) [31], Error Correcting Codes (ECC) [18], Hilbert Curve Allocation Method (HCAM) [17] and Vector-based declustering method [8]. Although ample analytic studies have been done for partial match queries <ref> [1, 15, 31, 46] </ref>, relatively little attention has been given to range queries [32, 33]. To the best of authors' knowledge, no analytic results have been provided so far for the scalability of multidimensional declustering methods with varying number of disks. <p> Kim et al. have shown that when both the number of disks and the size of each field (i.e., domain of an attribute) are a power of two, the set of partial-match queries which are optimal for the FX is a superset of that for the DM <ref> [31] </ref>. They have also investigated the strict optimality of the FX for range queries [32]. Faloutsos et al. have empirically shown that ECC outperforms DM and FX for partial-match queries, but ECC works only for Cartesian product files of all side lengths power of two [18]. <p> each attribute, the same technique can derive a formula representing all possible buckets that need to be fetched by a range query and thereby a closed-form formula of response time. 5 Types Declustering methods Single-attribute round-robin, range, hash [11], hybrid-range [23], heat/temperature locality [9] grid-based Disk Modulo [15], Fieldwise Xor <ref> [31] </ref>, ECC [18], Multi-attribute HCAM [17], Vector-based [8], MAGIC [24] graph-theoretic MST/SSP [20], Iterative [35], Minimax [37] Table 2: Classification of Declustering methods 3 Scalability of Disk Modulo declustering Du and Sobolewski have shown in [15] that the Disk Modulo (DM) is strictly optimal for a large class of partial match <p> In addition, for any M 3, this theorem gives a tighter upper bound on the response time than R Opt (s; M ) + M 2 given in [33] when the dimensionality is two. 4 Scalability of Fieldwise Xor declustering Kim and Pramanik <ref> [31] </ref> have shown that when both the number of disks and the size of each field are power of two, the set of partial match queries which are optimal under Fieldwise Xor (FX) declustering method is a superset of that for Disk Modulo declustering method.
Reference: [32] <author> Myoung Ho Kim and Sakti Pramanik. </author> <title> On the data distribution problems for range queries. </title> <booktitle> In Proceedings of the 1989 International Conference on Parallel Processing, </booktitle> <address> pages I-91 - I-94, </address> <month> August </month> <year> 1989. </year>
Reference-contexts: Although ample analytic studies have been done for partial match queries [1, 15, 31, 46], relatively little attention has been given to range queries <ref> [32, 33] </ref>. To the best of authors' knowledge, no analytic results have been provided so far for the scalability of multidimensional declustering methods with varying number of disks. <p> They have also investigated the strict optimality of the FX for range queries <ref> [32] </ref>. Faloutsos et al. have empirically shown that ECC outperforms DM and FX for partial-match queries, but ECC works only for Cartesian product files of all side lengths power of two [18]. HCAM uses Hilbert space-filling curve to impose a linear ordering on the buckets in a Cartesian product file. <p> Queries are hypercubic of side length a power of two (i.e., s = 2 m ). It is also assumed that the sizes of Cartesian product files are sufficiently large. Thus, it is not necessary to use the field transformation functions proposed in <ref> [32] </ref>, which are injective mappings for the attributes in a given Cartesian product file the number of subdomains of which are less than the number of disks.
Reference: [33] <author> Jianzhong Li, Jaideep Srivastava, and Doron Rotem. CMD: </author> <title> A multidimensional declustering method for parallel database systems. </title> <booktitle> In Proceedings of the 18th VLDB Conference, </booktitle> <pages> pages 3-14, </pages> <address> Vancouver, British Columbia, Canada, </address> <year> 1992. </year>
Reference-contexts: Although ample analytic studies have been done for partial match queries [1, 15, 31, 46], relatively little attention has been given to range queries <ref> [32, 33] </ref>. To the best of authors' knowledge, no analytic results have been provided so far for the scalability of multidimensional declustering methods with varying number of disks. <p> Li et al. have done extensive performance analysis for arbitrary range queries and concluded that Disk Modulo (or CMD by their own terminology) method is nearly optimal for any range query <ref> [33] </ref>. In contrast to their conclusion, however, we shall show that Disk Modulo allocation method has severely limited scalability under certain conditions. <p> Corollary 1 For square or cubic range queries of side length s, R DM (s; M) = &lt; s if M s when the dimensionality is two, j 4 if M 3 (s1) k + 1 when the dimensionality is three. Note that Li et al. <ref> [33] </ref> have reached the conclusion that Disk Modulo is optimal for range queries on Cartesian product files for almost all cases. While this might be true in the past when system configurations with large number of disks were not usual, it is no longer true. <p> In addition, for any M 3, this theorem gives a tighter upper bound on the response time than R Opt (s; M ) + M 2 given in <ref> [33] </ref> when the dimensionality is two. 4 Scalability of Fieldwise Xor declustering Kim and Pramanik [31] have shown that when both the number of disks and the size of each field are power of two, the set of partial match queries which are optimal under Fieldwise Xor (FX) declustering method is <p> The main conclusions from our experiments are: * For large queries and small number of disks, the performance of various declustering methods was quite close to each other and not very far from optimal. * As Li et al. concluded in <ref> [33] </ref>, the Disk Modulo is a reasonable choice for declustering Cartesian product files under various circumstances.
Reference: [34] <author> W. C. Lin, R. C. T. Lee, and H. C. Du. </author> <title> Common properties of some multi-attribute file systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-5(2):160-174, </volume> <month> March </month> <year> 1979. </year>
Reference-contexts: Under such schemes, however, queries based on non-partitioning attributes would not be processed efficiently because there is no guarantee that the answer set to such a query is well distributed across disks. Several heuristic methods have been developed to decluster a Cartesian product file <ref> [34] </ref>, which has been known as a multi-attribute file structure effective for partial-match and best-match queries [42].
Reference: [35] <author> Duen-Ren Liu and Shashi Shekhar. </author> <title> A similarity graph-based approach to declustering problems and its application towards parallelizing grid files. </title> <booktitle> In the 11th Inter. Conference on Data Engineering, </booktitle> <pages> pages 373-381, </pages> <address> Taipei, Taiwan, </address> <month> March </month> <year> 1995. </year>
Reference-contexts: They have made an attempt to place similar buckets (i.e., buckets close to each other) on different disks. An iterative declustering algorithm based on similarity has been proposed by Liu et al. <ref> [35] </ref>. They used Kernighan-Lin partitioning algorithm [30] to find an initial partition. We have recently developed an improved algorithm with the goal being to minimize both the response time and the data imbalance among multiple disks [37]. <p> need to be fetched by a range query and thereby a closed-form formula of response time. 5 Types Declustering methods Single-attribute round-robin, range, hash [11], hybrid-range [23], heat/temperature locality [9] grid-based Disk Modulo [15], Fieldwise Xor [31], ECC [18], Multi-attribute HCAM [17], Vector-based [8], MAGIC [24] graph-theoretic MST/SSP [20], Iterative <ref> [35] </ref>, Minimax [37] Table 2: Classification of Declustering methods 3 Scalability of Disk Modulo declustering Du and Sobolewski have shown in [15] that the Disk Modulo (DM) is strictly optimal for a large class of partial match queries including partial match queries with only one unspecified attribute.
Reference: [36] <author> Robert W. Marx. </author> <title> The TIGER system: </title> <journal> Yesterday, today, and tomorrow. Cartography and Geographic Information Systems, </journal> <volume> 17(1) </volume> <pages> 89-97, </pages> <year> 1990. </year>
Reference-contexts: 1 Introduction A variety of complex data management requirements have arisen in many large-scale data-intensive applications which often need support for multidimensional objects and sophisticated access methods. Typical examples are scientific data [21, 45], cartography and census data <ref> [36] </ref>, the Earth Observing System (EOS) and remotely sensed image [7], and geographic information systems [43]. Frequent operations on these datasets include volume visualization, transient detection, computation of trends and compositions, and accessing spatio-temporal subset of images.
Reference: [37] <author> Bongki Moon, Anurag Acharya, and Joel Saltz. </author> <title> Study of scalable declustering algorithms for parallel grid files. </title> <booktitle> In Proceedings of the Tenth International Parallel Processing Symposium, </booktitle> <pages> pages 434-440, </pages> <address> Honolulu, Hawaii, </address> <month> April </month> <year> 1996. </year>
Reference-contexts: This is also demonstrated by simulation experiments. The analytic results presented in this paper could be used to predict the performance of the declustering methods when they are applied to more general multidimensional data structures. In <ref> [37] </ref>, we have evaluated techniques which allow the declustering methods developed for Cartesian product files to be used to decluster grid files [39], which can handle non-uniformly distributed datasets in a more space-efficient manner. The rest of the paper is organized as follows. <p> They used Kernighan-Lin partitioning algorithm [30] to find an initial partition. We have recently developed an improved algorithm with the goal being to minimize both the response time and the data imbalance among multiple disks <ref> [37] </ref>. The advantage of the similarity-based declustering methods is that they can handle more general data structures such as grid files [39] and R-trees [26] as well as Cartesian product files and hence are particularly suitable for non-uniform datasets with hot spots or correlation between attributes. <p> be fetched by a range query and thereby a closed-form formula of response time. 5 Types Declustering methods Single-attribute round-robin, range, hash [11], hybrid-range [23], heat/temperature locality [9] grid-based Disk Modulo [15], Fieldwise Xor [31], ECC [18], Multi-attribute HCAM [17], Vector-based [8], MAGIC [24] graph-theoretic MST/SSP [20], Iterative [35], Minimax <ref> [37] </ref> Table 2: Classification of Declustering methods 3 Scalability of Disk Modulo declustering Du and Sobolewski have shown in [15] that the Disk Modulo (DM) is strictly optimal for a large class of partial match queries including partial match queries with only one unspecified attribute.
Reference: [38] <author> Bongki Moon, H.V. Jagadish, Christos Faloutsos, and Joel H. Saltz. </author> <title> Analysis of the clustering properties of Hilbert space-filling curve. </title> <institution> Technical Report CS-TR-3611 and UMIACS-TR-96-20, University of Maryland, College Park, MD, </institution> <month> March </month> <year> 1996. </year> <journal> Submitted to IEEE Transactions on Knowledge and Data Engineering. </journal> <volume> 22 </volume>
Reference-contexts: To complete the scalability study of declustering methods, we plan to extend the analysis for Disk Modulo and Fieldwise Xor to non-hypercubic range queries. It is widely believed that the Hilbert space-filling curve achieves the best clustering among reported linear mapping schemes [19, 29]. In <ref> [38] </ref>, we have recently derived closed-form formulas of the number of clusters required by a given query region of an arbitrary shape for the Hilbert curve, and have shown that the Hilbert curve achieves far better clustering than z-curve, which is also called Morton curve.
Reference: [39] <author> J. Nievergelt and H. Hinterberger. </author> <title> The Grid File: An adaptive, symmetric multikey file structure. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 9(1) </volume> <pages> 38-71, </pages> <month> March </month> <year> 1984. </year>
Reference-contexts: In [37], we have evaluated techniques which allow the declustering methods developed for Cartesian product files to be used to decluster grid files <ref> [39] </ref>, which can handle non-uniformly distributed datasets in a more space-efficient manner. The rest of the paper is organized as follows. Section 2 defines terminology for Cartesian product files and types of queries of our interest, and also surveys previous work. <p> We have recently developed an improved algorithm with the goal being to minimize both the response time and the data imbalance among multiple disks [37]. The advantage of the similarity-based declustering methods is that they can handle more general data structures such as grid files <ref> [39] </ref> and R-trees [26] as well as Cartesian product files and hence are particularly suitable for non-uniform datasets with hot spots or correlation between attributes. However, the complexities of these methods are at least quadratic while all the previously mentioned methods (i.e., DM, FX, HCAM etc.) are linear.
Reference: [40] <author> J. A. Orenstein and T. H. Merrett. </author> <title> A class of data structures for associative searching. </title> <booktitle> In the 3rd ACM SIGACT-SIGMOD Symposium on Principles of Database Systems, </booktitle> <pages> pages 181-190, </pages> <address> Waterloo, Canada, </address> <month> April </month> <year> 1984. </year>
Reference-contexts: Since HCAM exploits such a clustering property of Hilbert curve, it can achieve better declustering than other linearization methods such as z-ordering <ref> [40] </ref> and Gray coding with bit-interleaving [16]. Since the analysis of the declustering properties of the HCAM is not available yet, we propose the scalability analysis of the HCAM as our future research.
Reference: [41] <author> A. L. Narasimha Reddy and Prithviraj Banerjee. </author> <title> An evaluation of multiple-disk I/O systems. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 38(12) </volume> <pages> 1680-1690, </pages> <month> December </month> <year> 1989. </year>
Reference-contexts: For example, in scientific workload such as matrix multiplications and FFT, where the load is uniformly distributed, the I/O performance appears to be directly proportional to the available parallelism <ref> [41] </ref>. Therefore, we conjecture that the maximum number of buckets fetched from the same disk (i.e., max M i=1 fN i (q)g) is the best measure of the actual response time. Finally, we define the strict optimality of declustering methods.
Reference: [42] <author> R. L. Rivest. </author> <title> Partial match retrieval algorithms. </title> <journal> SIAM Journal of Computing, </journal> <volume> 5(1) </volume> <pages> 19-50, </pages> <month> March </month> <year> 1976. </year>
Reference-contexts: Several heuristic methods have been developed to decluster a Cartesian product file [34], which has been known as a multi-attribute file structure effective for partial-match and best-match queries <ref> [42] </ref>. There are a few well-known multidimensional declustering methods for Cartesian product files: Disk Modulo (DM) [15], Fieldwise Xor (FX) [31], Error Correcting Codes (ECC) [18], Hilbert Curve Allocation Method (HCAM) [17] and Vector-based declustering method [8].
Reference: [43] <author> C. A. Shaffer, H. Samet, and R. C. Nelson. </author> <title> QUILT:a geographic information system based on quadtrees. </title> <journal> International Journal on Geographical Information Systems, </journal> <volume> 4(2) </volume> <pages> 103-131, </pages> <year> 1990. </year>
Reference-contexts: Typical examples are scientific data [21, 45], cartography and census data [36], the Earth Observing System (EOS) and remotely sensed image [7], and geographic information systems <ref> [43] </ref>. Frequent operations on these datasets include volume visualization, transient detection, computation of trends and compositions, and accessing spatio-temporal subset of images. For data retrieval, all of these operations translate to requests for multidimensional subspaces from the dataset, that is, to multidimensional range queries. <p> In the above example of the stock database, if a square query of side length 3 is given by &lt; [N; T ]; <ref> [21; 43] </ref> &gt;, then three buckets are retrieved from disk unit 0, and two buckets from each of disk units 1,2 and 3, which implies the response time of the query is three.
Reference: [44] <author> Michael Stonebraker. </author> <title> The case for shared nothing. </title> <journal> A Quarterly bulletin of the IEEE Computer Society Technical Committee on Database Engineering, </journal> <volume> 9(1), </volume> <month> March </month> <year> 1986. </year>
Reference-contexts: Evidently it is not guaranteed that a strictly optimal declustering can be achieved for every Cartesian product file. 2.2 Survey of declustering methods Early prototypes of parallel database systems such as Gamma [12] and Bubba [4] are based on the shared-nothing architecture model <ref> [44] </ref> and employ partitioning strategies to distribute database relations across multiple processing nodes. In addition to round-robin, range and hash partitioning [11], Gamma provides a hybrid-range partitioning scheme. The hybrid-range partitioning [23] is a combination of fragmentations of relations (sorted on a partitioning attribute) and round-robin partitioning.
Reference: [45] <author> Michael Stonebraker. </author> <title> Sequoia 2000 : A reflection on the first three years. </title> <journal> IEEE Computational Science and Engineering, </journal> <pages> pages 63-72, </pages> <month> Winter </month> <year> 1994. </year>
Reference-contexts: 1 Introduction A variety of complex data management requirements have arisen in many large-scale data-intensive applications which often need support for multidimensional objects and sophisticated access methods. Typical examples are scientific data <ref> [21, 45] </ref>, cartography and census data [36], the Earth Observing System (EOS) and remotely sensed image [7], and geographic information systems [43]. Frequent operations on these datasets include volume visualization, transient detection, computation of trends and compositions, and accessing spatio-temporal subset of images.
Reference: [46] <author> Yuan Y. Sung. </author> <title> Performance analysis of disk modulo allocation method for Cartesian product files. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 13(9) </volume> <pages> 1018-1026, </pages> <month> September </month> <year> 1987. </year> <month> 23 </month>
Reference-contexts: There are a few well-known multidimensional declustering methods for Cartesian product files: Disk Modulo (DM) [15], Fieldwise Xor (FX) [31], Error Correcting Codes (ECC) [18], Hilbert Curve Allocation Method (HCAM) [17] and Vector-based declustering method [8]. Although ample analytic studies have been done for partial match queries <ref> [1, 15, 31, 46] </ref>, relatively little attention has been given to range queries [32, 33]. To the best of authors' knowledge, no analytic results have been provided so far for the scalability of multidimensional declustering methods with varying number of disks. <p> Abdel-Ghaffar et al. [1] have provided a coding-theoretic analysis of declustering Cartesian product files for partial-match queries. Both necessary and sufficient conditions are provided for the existence of a strictly optimal disk allocation method. Sung <ref> [46] </ref> has conducted a performance analysis of Disk Modulo and derived explicit expressions of response time for partial-match queries using Fourier transform. <p> However, the complexities of these methods are at least quadratic while all the previously mentioned methods (i.e., DM, FX, HCAM etc.) are linear. The declustering methods surveyed in this paper are summarized in Table 2. 2 By replacing the complex number terms of Equation 1 in <ref> [46] </ref> with the ones corresponding to the subdomains overlapped by a range predicate for each attribute, the same technique can derive a formula representing all possible buckets that need to be fetched by a range query and thereby a closed-form formula of response time. 5 Types Declustering methods Single-attribute round-robin, range,
References-found: 46

