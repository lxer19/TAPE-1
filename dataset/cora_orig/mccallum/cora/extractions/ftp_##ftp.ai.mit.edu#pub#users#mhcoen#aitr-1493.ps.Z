URL: ftp://ftp.ai.mit.edu/pub/users/mhcoen/aitr-1493.ps.Z
Refering-URL: http://www.ai.mit.edu/people/las/cv.html
Root-URL: 
Email: mhcoen@ai.mit.edu  
Title: SodaBot: A Software Agent Environment and Construction System  
Author: Michael H. Coen 
Note: This publication can be retrieved by anonymous ftp to publications.ai.mit.edu. Copyright c Massachusetts Institute of Technology, 1994 This material is based upon work supported by the National Science Foundation under National Science Foundation Young Investigator Award Grant No. IRI-9357761. Any opinions, findings, conclusions or recommendations expressed in this material are those of the author and do not necessarily reflect the views of the National Science Foundation. The research described here was conducted at the Artificial Intelligence Laboratory of the Massachusetts Institute of Technology. Support for the laboratory's artificial intelligence research is provided in part by the Advanced Research Projects Agency of the Department of Defense under Office of Naval Research contract N00014-91-J-4038.  
Date: 1493 June, 1994  
Affiliation: MASSACHUSETTS INSTITUTE OF TECHNOLOGY ARTIFICIAL INTELLIGENCE LABORATORY  
Pubnum: A.I. Technical Report  
Abstract-found: 0
Intro-found: 1
Reference: [Brooks, 1991] <author> Brooks, Rodney. </author> <title> Intelligence without representation. </title> <journal> Artificial Intelligence, </journal> <volume> 47 </volume> <pages> 139-160. </pages> <year> 1991. </year>
Reference: [Coen, 1994] <author> Coen, Michael. </author> <title> Letter to the Editor. </title> <journal> AI Magazine. </journal> <month> Summer </month> <year> 1994. </year>
Reference-contexts: leaving the limelight, software agents (and the people who research them) should enjoy their moment in the sun. [Etzioni, 1993] argues that software agents are an ideal "foundation for core AI research." While we agree with this conclusion, we do not accept the arguments he uses to reach it (see <ref> [Coen, 1994] </ref>). Regardless, Etzioni et al's work on Unix "softbots" ([Etzioni et al., 1992a, Etzioni et al., 1993, Etzioni and Segal, 1992, Etzioni et al., 1994]) provides a very interesting foundation for exploring many central issues in traditional core AI, particularly in planning.
Reference: [Dent et al., 1992] <author> Dent, Lisa; Boticario, Jesus; McDermott, John; Mitchell, Tom; and Zabowski, David. </author> <title> A personal learning apprentice. </title> <booktitle> In Proceedings of the Tenth National Conference on Artificial Intelligence, AAAI-92, </booktitle> <address> San Jose, CA. p96-103. </address> <year> 1992. </year>
Reference-contexts: In fact, meeting scheduling is the most popular software agent negotiation application. [Kozierok, 1993, Maes and Kozierok, 1993] schedules group meetings, [Kautz et al., 1994] schedules meetings between individuals, and <ref> [Dent et al., 1992] </ref> does both (and more). The backbone of all of these systems could be implemented in SodaBot. However, the actual scheduling processes would require external applications.
Reference: [Dougherty, 1990] <author> Dougherty, Dale. </author> <title> sed & awk. </title> <publisher> O'Reilly Associates. </publisher> <address> Sebastopol, CA. </address> <year> 1990 </year>
Reference-contexts: Regular expression are contained in "/.../" do not require internal quotations. Good references for building regular expressions are [Wall and Schwartz, 1990, p24-29] and <ref> [Dougherty, 1990] </ref>. You can use && for AND and jj for OR and ! for NOT.
Reference: [Doyle et al., 1991] <author> Doyle, Jon; Shoham, Yoav; and Wellman, Michael. </author> <title> A logic of relative desire. </title> <editor> In Z.W. Ras and M. Zemankova (eds.) </editor> <booktitle> Methodologies for Intelligent Systems, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin. p16-31. </address> <year> 1991. </year>
Reference-contexts: His approach does not necessarily conflict with our own. In fact, it would be very interesting to try combining aspects of both systems by providing BSAs with some type of formal intentional state. We note that there is much other theoretical research into agent cognition, such as <ref> [Doyle et al., 1991] </ref>. Again, it would be very interesting to ground this work by implementing it in a realized system. CHAPTER 5. SOFTWARE AGENTS 57 5.1.2 Software agents are a testbed for other realms in Core AI. Software agents are the new universal research tool for AI.
Reference: [Etzioni et al., 1992a] <author> Etzioni, Oren; Hanks, Steve; Weld, Daniel; Draper, Denise; Lesh, Neal; and Williamson, Mike. </author> <title> An approach to planning with incomplete information. </title> <booktitle> In Proceedings of the Third International Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <address> KR-92, Cambridge, MA. p115-125. </address> <year> 1992. </year> <note> BIBLIOGRAPHY 75 </note>
Reference: [Etzioni and Segal, 1992] <author> Etzioni, Oren and Segal, Richard. </author> <title> Sofbots as testbeds for machine learning. </title> <booktitle> In Working Notes of the AAAI Spring Symposium on Knowledge Assimilation, </booktitle> <address> Menlo Park, CA. </address> <year> 1992. </year>
Reference: [Etzioni et al., 1993] <author> Etzioni, Oren; Levy, Henry; Segal, Richard; and Thekkath, Chandramohan. </author> <title> OS Agents: Using AI Techniques in the Operating System Environment. </title> <type> Technical Report 93-04-04. </type> <institution> University of Washington, </institution> <address> Seattle, WA. </address> <year> 1993. </year>
Reference: [Etzioni, 1993] <author> Etzioni, Oren. </author> <title> Intelligence without Robots: A Reply to Brooks. In AI Magazine, </title> <booktitle> Winter, </booktitle> <year> 1993. </year>
Reference-contexts: SOFTWARE AGENTS 57 5.1.2 Software agents are a testbed for other realms in Core AI. Software agents are the new universal research tool for AI. Because expert systems and robots are leaving the limelight, software agents (and the people who research them) should enjoy their moment in the sun. <ref> [Etzioni, 1993] </ref> argues that software agents are an ideal "foundation for core AI research." While we agree with this conclusion, we do not accept the arguments he uses to reach it (see [Coen, 1994]).
Reference: [Etzioni et al., 1994] <author> Etzioni, Oren; Lesh, Neal; and Segal, Richard. </author> <title> Building softbots for Unix (Preliminary Report). </title> <booktitle> In Working Notes of the AAAI Spring Syposium on Software Agents, </booktitle> <address> Stanford, CA. p9-16. </address> <year> 1994. </year>
Reference: [Genesereth and Singh, 1994] <author> Genesereth, Michael and Narinder Singh. </author> <title> A Knowledge Sharing Approach to Software Interoperation. </title> <type> Unpublished draft. </type> <year> 1994. </year>
Reference: [Genesereth and Ketchpel, 1994] <author> Genesereth, Michael and Ketchpel, Steven. </author> <title> Software Agents. </title> <journal> CACM Special Issue on Intelligent Agents. </journal> <volume> 37:7. </volume> <year> 1994. </year>
Reference: [Genesereth 1994] <editor> Genesereth, Michael. </editor> <publisher> MIT AI Laboratory Revolving Seminar. </publisher> <month> February 3, </month> <year> 1994. </year>
Reference-contexts: This effort has led to the design of an agent communication language (ACL) intended as a universal medium for agent discourse. Genesereth et al. ([Genesereth and Singh, 1994, Genesereth and Ketchpel, 1994]) present a "federation" agent architecture that employs this ACL, and <ref> [Genesereth 1994] </ref> discusses these agents obtaining arbitrary software programs from other agents by advertising their required specifications written in ACL. 1 We don't consider even sophisticated interaction with disk drives and printers to be communication. CHAPTER 5.
Reference: [Horton, 1983] <author> Horton, Mark. </author> <title> Standard for interchange of usenet messages. Internet Request for Comment (RFC) 850. </title> <year> 1983. </year>
Reference-contexts: These include variables corresponding to all headers present in the current e-mail message as defined by <ref> [Horton, 1983] </ref>. (For example, $from and $subject.
Reference: [Kahn and Cerf, 1988] <author> Kahn, Robert and Cerf, Vinton. </author> <title> An open architecture for a digital library system and a plan for its development. </title> <type> Technical report. </type> <institution> Corporation for National Research Initiatives. </institution> <year> 1988. </year> <note> BIBLIOGRAPHY 76 </note>
Reference: [Kautz et al., 1994] <author> Kautz, Henry; Selman, Bart; Coen, Michael; Ketchpel, Steven. </author> <title> An experiment in the design of software agents. </title> <booktitle> Proceedings of the Twelfth National Conference on Artificial Intelligence, AAAI-94, </booktitle> <address> Seattle, WA. </address> <year> 1994. </year>
Reference-contexts: consulting their owner's private schedule; b) keep track of their owner's whereabouts and provide this information on request; c) contact their owner appropriately based on her location, e.g. via displaying a window on her workstation, sending a fax, or even making a phone call (SodaBot can't telephone yet, but see <ref> [Kautz et al., 1994] </ref>.) d) filter and sort incoming e-mail and faxes based on their owner's preferences (which may be provided explicitly or someday learned from ob served behavior.). 2. application agents: These agents coordinate the transfer and processing of in formation among people and other agents. <p> Building agents generally involves a multi-layered approach. First, it requires a great deal of specific "system-hacking," e.g., of esoteric system software, networking protocols, windowing systems. (See <ref> [Kautz et al., 1994] </ref> for a discussion of the diffi CHAPTER 1. INTRODUCTION 12 culties involved in handling the most basic of agent functions, e.g., reading e-mail reliably.) Second, agent construction frequently involves mid-level computational issues, e.g. having agents handle several events simultaneously, provide reliable transactions, or handle errors automatically. <p> The GUI was designed to provide the user with a sense of control over her BSA; she can enable or disable various capabilities | e.g. having it modifying her e-mail file | depending on her confidence in it (or lack thereof). <ref> [Kautz et al., 1994] </ref> makes clear that people are uncomfortable delegating absolute authority to software agents. By giving the user a large degree of control over agent activity, we hope to help assuage fears that the BSA will do something inappropriate or destructive. <p> Also, particular SodaBot modules can be incorporated into other programs. For example, an application which needs 11 <ref> [Kautz et al., 1994] </ref> describes this as "intension" vs. "extension," (i.e. "connotation" vs. "denotation"). It is not clear this terminology (drawn from linguistics) accurately describes the intended phenomenon. <p> needs to obtain her new messages from somewhere other than the system-mailer's spool file; therefore, she must explicitly provide a location for this new spool file, and inform her mail-reader of its existence. 8 It is also possible for the BSA to have its own e-mail address (as done in <ref> [Kautz et al., 1994] </ref>), but on some systems this can require root access to set up. 2.3 The Benefit The basic software agent provides preliminary solutions to the three problems outlined in section 1.2 with software agent construction. <p> We simultaneously discuss how SodaBot relates to and differs from other work in the field. Section 5.3 presents our motivation for designing the SodaBot system based on experience described in <ref> [Kautz et al., 1994] </ref> 5.1 What's an Agent? There is simply no set of necessary or sufficient criteria for determining whether some program is indeed a software agent. The "definition" varies widely, as do approaches to building agents. <p> In fact, meeting scheduling is the most popular software agent negotiation application. [Kozierok, 1993, Maes and Kozierok, 1993] schedules group meetings, <ref> [Kautz et al., 1994] </ref> schedules meetings between individuals, and [Dent et al., 1992] does both (and more). The backbone of all of these systems could be implemented in SodaBot. However, the actual scheduling processes would require external applications. <p> Finally, after receiving submitted time constraints from users, the agent generates (and distributes) a schedule of meetings with the visitor. The history behind the development of this agent is revealing. The version described in <ref> [Kautz et al., 1994] </ref> was begun at AT&T Bell Labs while I was a summer student there. <p> Additionally, an agent which centrally controlled all aspects of user-interaction was prone to failure in a networked environment. (For example, it is not possible to open X-Windows across a firewall.) Essentially, there were no clean abstraction barriers for writing agent software. The development of personal agents in <ref> [Kautz et al., 1994] </ref> was a first step towards establishing some minimum level of distinction between local and non-local agent activity. For example, the VisitorBot could tell a user's personal agent to open a window on the user's display rather than doing so itself. <p> For example, the VisitorBot could tell a user's personal agent to open a window on the user's display rather than doing so itself. However, both the VisitorBot and its involved personal agents are very much ad hoc, non-generalizable creations. The personal agent in <ref> [Kautz et al., 1994] </ref> is hard-coded and custom tailored to the VisitorBot, i.e. a hypothetical PaperReviewBot would require that users obtain a different personal agent to interact with it. <p> It notified me of any errors encountered during text processing at MIT, displayed the final results on my Bell Labs' workstation, etc. CHAPTER 5. SOFTWARE AGENTS 64 We did not address in <ref> [Kautz et al., 1994] </ref> how a new agent is released to the world. The VisitorBot was a collection of random C and Perl files which had to be installed and configured by a skilled human being. The difficulties inherent in encouraging use of new agents are thus enormous. <p> The high level primitives in SodaBotL allow agents to be written more quickly and in less space. For example, we can approximately implement the "VisitorBot" system described in <ref> [Kautz et al., 1994] </ref> in several pages of SodaBotL code. 1 The VisitorBot implementation described there is well over 50 pages of Perl and C code. 2.
Reference: [Knoblock and Arens, 1994] <author> Knoblock, Craig and Aren, Yigal. </author> <title> An architecture for information retrieval agents. </title> <booktitle> In Working Notes of the AAAI Spring Syposium on Software Agents, </booktitle> <address> Stanford, CA. p49-56. </address> <year> 1994. </year>
Reference-contexts: Sheth's work is similar in spirit to much of the activity regarding knowbots TM ([Kahn and Cerf, 1988, Waldrop, 1990]), which has generally fallen outside of the realm of mainstream AI research, although there are some exceptions, e.g. <ref> [Knoblock and Arens, 1994] </ref>. Knowbots (knowledge robots) are intended roughly as librarians for enormous digital data-libraries. They are not general purpose but are highly elaborate, specific creations.
Reference: [Kozierok, 1993] <author> Kozierok, Robyn. </author> <title> A learning approach to knowledge acquisition for intelligent interface agents. </title> <type> Technical Report 93-01, </type> <institution> Learning and Common Sense Group, MIT Media Lab. </institution> <year> 1993. </year>
Reference-contexts: In fact, meeting scheduling is the most popular software agent negotiation application. <ref> [Kozierok, 1993, Maes and Kozierok, 1993] </ref> schedules group meetings, [Kautz et al., 1994] schedules meetings between individuals, and [Dent et al., 1992] does both (and more). The backbone of all of these systems could be implemented in SodaBot. However, the actual scheduling processes would require external applications.
Reference: [Krishnamurthy and Rosenblum, 1992] <author> Krishnamurthy, Balachander and Rosen-blum, David. Yeast: </author> <title> a general purpose event-action system. </title> <institution> AT&T Bell Labs Technical Memorandum. </institution> <year> 1992. </year>
Reference: [Lansky, 1994] <author> Lansky, Amy. </author> <title> A data analysis assistant. </title> <booktitle> In Working Notes of the AAAI Spring Syposium on Software Agents, </booktitle> <address> Stanford, CA. p57-63. </address> <year> 1994. </year>
Reference-contexts: Rather, in term of directing research efforts, particularly with the growing popularity of "agents," it might be preferable to narrow the scope of the term. Even in research communities this designation is perhaps being abused. Work such as <ref> [Lansky, 1994] </ref> was once called an expert system. It was quite surprising to hear such a classic example of that paradigm being presented at the AAAI 1994 Spring Symposium on Software Agents. The final system we discuss is Telescript ([Wayner, 1994]).
Reference: [Maes, 1990] <editor> Maes, Pattie (ed). </editor> <title> Designing Autonomous Agents, </title> <publisher> MIT Press, </publisher> <address> Cam-bridge, </address> <year> 1990. </year>
Reference: [Maes and Kozierok, 1993] <editor> Maes, Pattie and Kozierok, Robyn. </editor> <booktitle> Learning interface agents. In Proceedings of the Eleventh National Conference on Artificial Intelligence, AAAI-93, </booktitle> <address> Washington D.C., p459-464. </address> <year> 1993. </year>
Reference-contexts: In fact, meeting scheduling is the most popular software agent negotiation application. <ref> [Kozierok, 1993, Maes and Kozierok, 1993] </ref> schedules group meetings, [Kautz et al., 1994] schedules meetings between individuals, and [Dent et al., 1992] does both (and more). The backbone of all of these systems could be implemented in SodaBot. However, the actual scheduling processes would require external applications.
Reference: [Maes, 1994] <editor> Maes, Pattie. </editor> <title> Social interface agents: acquiring competence by learning from users and other agents. </title> <booktitle> In Working Notes of the AAAI Spring Syposium on Software Agents, </booktitle> <address> Stanford, CA. p71-78. </address> <year> 1994. </year>
Reference: [Neches et al., 1991] <author> Neches, Robert; Fikes, Richard; Finin, Tom; Gruber, Thomas; Patil, Ramesh; Senator, Tod; and Swartout, William. </author> <title> Enabling Technology for Knowledge Sharing. </title> <journal> In AI Magazine, </journal> <note> Fall, 1991. BIBLIOGRAPHY 77 </note>
Reference: [Rosenschein, 1993] <author> Rosenschein, Jeffrey. </author> <title> Negotiation mechanisms for multi-agent systems. </title> <booktitle> In Proceedings of the Thirteenth International Joint Conference on Artificial Intelligence, </booktitle> <address> Chambery, France. p792-799. </address> <year> 1993. </year>
Reference-contexts: However, we note (without CHAPTER 5. SOFTWARE AGENTS 60 There has also been much theoretical work on abstract agent negotiation protocols, as in <ref> [Zlotkin and Roesnschein, 1994, Rosenschein, 1993] </ref>.
Reference: [Sheth, 1994] <author> Sheth, Beerud. </author> <title> Adaptive Agents for Information Processing. </title> <type> SM Thesis. </type> <institution> MIT. </institution> <address> Cambridge, MA. </address> <year> 1994. </year>
Reference: [Shoham, 1992] <author> Shoham, Yoav. </author> <title> Agent Alpha Programming Overview. </title> <year> 1992. </year>
Reference: [Shoham, 1993] <author> Shoham, Yoav. </author> <title> Agent oriented programming. </title> <journal> Artificial Intelligence, </journal> <volume> 60 </volume> <pages> 51-92. </pages> <year> 1993. </year>
Reference-contexts: Agent1 sent Agent2 e-mail because it felt "obligated," or perhaps Agent1 crashed the network because it was "confused." <ref> [Shoham, 1993] </ref> has defined an formal language for describing agents' "mental states" in terms of epistemic logic. He also presents a corresponding agent programming language called AGENT-0 ([Torrance and Viola, 1991]) which is semantically grounded in this mental state language.
Reference: [Stein, 1994] <author> Stein, Lynn. </author> <title> Private communication. (Also from comments made during the third discussion section at the AAAI 1994 Spring Syposium on Software Agents. Patrick Hayes made a similar statement.) </title>
Reference-contexts: As we pointed out earlier with reference to the work of Doyle, it would be very interesting to ground this theoretical work in negotiation by implementing it in a realized system. 5.1.5 Other Points of View <ref> [Stein, 1994] </ref> has suggested that "agency" (i.e., the property of being an agent) is determined by an observer's intentional stance; what a person views as an agent is an agent. While this may well be a tenable philosophical position, it is not clear what benefit it provides.
Reference: [Torrance and Viola, 1991] <author> Torrance, Mark and Viola, Paul. </author> <title> The AGENT0 Manual. </title> <type> Technical Report STAN-CS-91-1389. </type> <institution> Stanford University Department of Computer Science. Stanford, </institution> <address> CA. </address> <year> 1991. </year>
Reference: [Vere and Bickmore, 1990] <author> Vere, S and Bickmore, T. </author> <title> A basic agent. </title> <journal> Computational Intelligence, </journal> <volume> 6(1). </volume> <year> 1990. </year>
Reference-contexts: Finally, this work makes no mention of the practical consequences its type of distribution would entail, nor does it discuss the required effort to realize the described hypothetical agents. The work of <ref> [Vere and Bickmore, 1990] </ref> is quite unusual. Their "basic agent" has a remarkably wide core AI foundation, drawing on a broader range of research areas than any other system with which we are familiar.
Reference: [Waldrop, 1990] <author> Waldrop, M. Mitchell. </author> <title> Learning to drink from a fire hose. </title> <journal> Science, v248, </journal> <volume> pg 674. </volume> <year> 1990. </year>
Reference: [Wall and Schwartz, 1990] <author> Wall, Larry and Schwartz, Randall. </author> <title> Programming Perl. </title> <publisher> O'Reilly & Associates. </publisher> <address> Sebastopol, CA. </address> <year> 1990 </year>
Reference-contexts: Regular expression are contained in "/.../" do not require internal quotations. Good references for building regular expressions are <ref> [Wall and Schwartz, 1990, p24-29] </ref> and [Dougherty, 1990]. You can use && for AND and jj for OR and ! for NOT. <p> &lt;Sub name&gt; ::= &lt;Simple string&gt; &lt;Agent name&gt; ::= &lt;Simple string&gt; &lt;Library name&gt; ::= &lt;Simple string&gt; &lt;Arg list&gt; ::= &lt;String value&gt; [, &lt;Arg list&gt;] &lt;Multline string&gt; ::= &lt;Rich string&gt; nn [&lt;Multiline string&gt;] &lt;Rich string&gt; ::= All characters except nn &lt;Simple string&gt; ::= [a-z, A-Z, 0-9, ] fl &lt;Reg exp&gt; ::= See <ref> [Wall and Schwartz, 1990, p25] </ref>.
Reference: [Wayner, 1994] <author> Wayner, Peter. </author> <title> Agents away. </title> <journal> Byte, </journal> <volume> p113-118. </volume> <month> May, </month> <year> 1994. </year>
Reference: [Zlotkin and Roesnschein, 1994] <author> Zlotkin, Gilad, and Rosenschein, Jeffrey. </author> <title> Coalition, cryptography, and stability: mechanisms for coalition formation in task oriented BIBLIOGRAPHY 78 domains. </title> <booktitle> In Working Notes of the AAAI Spring Syposium on Software Agents, </booktitle> <address> Stanford, CA. p87-94. </address> <year> 1994. </year>
Reference-contexts: However, we note (without CHAPTER 5. SOFTWARE AGENTS 60 There has also been much theoretical work on abstract agent negotiation protocols, as in <ref> [Zlotkin and Roesnschein, 1994, Rosenschein, 1993] </ref>.
References-found: 35

