URL: http://www.cs.iastate.edu/tech-reports/TR94-17a.ps
Refering-URL: http://www.cs.iastate.edu/tech-reports/catalog.html
Root-URL: http://www.cs.iastate.edu
Title: Chambers Leavens Towards Safe Modular Extensible Objects  
Author: Craig Chambers and Gary T. Leavens TR #-a Craig Chambers and Gary T. Leavens, . 
Keyword: Multi-methods, object-oriented programming, subjectivity, encapsulation, modules, packages, Cecil language. 1994 CR Categories: D.3.2 [Programming Languages] Language Classifications Object-oriented languages; D.3.3 [Programming Language] Language Constructs and Features Modules, packages.  
Address: 226 Atanasoff Hall  Ames, Iowa 50011-1040, USA  
Affiliation: Department of Computer Science  Iowa State University  
Note: To appear in the proceedings of the OOPSLA 94 Workshop on Subjectivity in Object-Oriented Systems, October 1994.  1994  
Date: August 1994, revised September 1994  
Abstract-found: 0
Intro-found: 1
Reference: [Chambers 92] <author> Craig Chambers. </author> <title> Object-Oriented Multi-Methods in Cecil. </title> <booktitle> In ECOOP 92 Conference Proceedings, </booktitle> <pages> pp. 33-56, </pages> <address> Utrecht, the Netherlands, June/July, </address> <year> 1992. </year> <note> Published as Lecture Notes in Computer Science 615, Springer-Verlag, Berlin, </note> <year> 1992. </year>
Reference-contexts: Defining specialized subclasses of an existing class is not always an acceptable alternative, since subclassing does not allow existing objects to be extended with specialized behavior nor does it support sharing of objects that have different capabilities when viewed by different clients. In the Cecil language <ref> [Chambers 92, Chambers 93] </ref> we are exploring a more exible alternative that allows each individual client (embodied in the program by a scope, which is usually a module or group of nested modules) to customize its view of an object [Chambers & Leavens 94].
Reference: [Chambers 93] <author> Craig Chambers. </author> <title> The Cecil Language: Specification and Rationale. </title> <type> Technical report #93-03-05, </type> <institution> Department of Computer Science and Engineering, University of Washington, </institution> <month> March, </month> <year> 1993. </year>
Reference-contexts: Defining specialized subclasses of an existing class is not always an acceptable alternative, since subclassing does not allow existing objects to be extended with specialized behavior nor does it support sharing of objects that have different capabilities when viewed by different clients. In the Cecil language <ref> [Chambers 92, Chambers 93] </ref> we are exploring a more exible alternative that allows each individual client (embodied in the program by a scope, which is usually a module or group of nested modules) to customize its view of an object [Chambers & Leavens 94].
Reference: [Chambers & Leavens 94] <author> Craig Chambers and Gary T. Leavens. </author> <title> Typechecking and Modules for Multi-Methods. </title> <note> To appear in Proc. OOPSLA 94, ACM. (The extended version of this paper is TR94-03a, </note> <institution> Department of Computer Science, Iowa State University, Ames, IA, </institution> <month> August </month> <year> 1994. </year> <note> It can be obtained by e-mail from almanac@cs.iastate.edu or by anonymous ftp to ftp.cs.iastate.edu in directory pub/techreports/TR94-03) </note>
Reference-contexts: In the Cecil language [Chambers 92, Chambers 93] we are exploring a more exible alternative that allows each individual client (embodied in the program by a scope, which is usually a module or group of nested modules) to customize its view of an object <ref> [Chambers & Leavens 94] </ref>. Each module can add new multi-methods, instance variables, and even inheritance and subtyping relationships to objects defined in lexically enclosing or imported modules. <p> Additionally, we are investigating static type systems that can guarantee that no message lookup errors will occur at run-time. An initial informal semantics and a typechecking algorithm for languages containing modules and multi-methods is being presented in the main OOPSLA conference <ref> [Chambers & Leavens 94] </ref>. We are currently continuing this work to address fully extensible objects, to formally specify the run-time semantics and the static typechecking rules, and to prove that the static typechecking restrictions are sufficient to guarantee that no type errors occur at run-time.
References-found: 3

