URL: http://www.eecs.berkeley.edu/~tah/Publications/the_theory_of_hybrid_automata.ps
Refering-URL: http://www.eecs.berkeley.edu/~tah/Publications/the_theory_of_hybrid_automata.html
Root-URL: 
Title: The Theory of Hybrid Automata  
Author: Thomas A. Henzinger 
Address: Berkeley  
Affiliation: Electrical Engineering and Computer Sciences University of California at  
Abstract: A hybrid automaton is a formal model for a mixed discrete-continuous system. We classify hybrid automata acoording to what questions about their behavior can be answered algorithmically. The classification reveals structure on mixed discrete-continuous state spaces that was previously studied on purely discrete state spaces only. In particular, various classes of hybrid automata induce finitary trace equivalence (or similarity, or bisimilarity) relations on an uncountable state space, thus permitting the application of various model-checking techniques that were originally developed for finite-state systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Abadi and L. Lamport. </author> <title> An old-fashioned recipe for real time. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 16(5) </volume> <pages> 1543-1571, </pages> <year> 1994. </year>
Reference-contexts: Time-abstract design is desirable, because many useful properties of time-abstract component systems are inherited by the compound system. 2 Remark. [Receptiveness] The composition of two nonzeno hybrid automata is not necessarily nonzeno. It is an interesting modeling problem for real-time systems to guarantee the liveness of compound designs <ref> [1, 21, 39, 8] </ref>. 2 2 On the Trace Languages of Hybrid Automata We identify which requirements on the traces of a hybrid automaton can be checked algorithmically, and which cannot. 2.1 Verification Tasks We study four paradigmatic questions about the traces of a hybrid automaton. <p> The rectangular automaton H is a singular automaton if the flow rectangle I flow is a singleton. The singular automaton H is a timed automaton if I flow = <ref> [1; 1] </ref> n . 2 Remark. [Clocks and drifting clocks] A clock can be modeled by a variable x i with the flow interval I flow i = [1; 1]. All variables of a timed automaton are clocks [6]. <p> The singular automaton H is a timed automaton if I flow = <ref> [1; 1] </ref> n . 2 Remark. [Clocks and drifting clocks] A clock can be modeled by a variable x i with the flow interval I flow i = [1; 1]. All variables of a timed automaton are clocks [6]. <p> A hybrid automaton is a triangular automaton if the restrictions of Definition 2.2 are met, except that every rectangle may be a triangle. 2 Remark. [Stopwatches and symbolic constants] A stopwatch can be modeled by a multisingular variable x i with the two flow intervals I flow (v) i = <ref> [1; 1] </ref> (the stopwatch is turned on) and I flow (v 0 ) i = [0; 0] (the stopwatch is turned off). Stopwatches are useful for measuring accumulated durations, such as the cu mulative amount of time that is spent in control mode v [38, 4]. <p> If H is a timed automaton, then the (finite) set of triangular H-predicates with integer constants no larger than K induces a finitary -bisimulation on the time-abstract transition system S a H . The first panel of Figure 8 shows the induced bisimulation on the unit square <ref> [0; 1] </ref> 2 for a 2D timed automaton H. <p> If H is a singular automaton, then a slight extension of triangular H-predicates needs to be considered. For example, the second and third panels of Figure 8 show the induced bisimulations on the unit square for 2D singular automata with the flow rectangles [2; 2] fi <ref> [1; 1] </ref> and [1; 1] fi [3; 3], respectively. 2 Corollary 3.1 [Symbolic -calculus model checking for singular automata] The procedure MuApprox terminates if given the time-abstract transition system of a singular automaton H and an H-formula of the rectangular -calculus. <p> If H is a singular automaton, then a slight extension of triangular H-predicates needs to be considered. For example, the second and third panels of Figure 8 show the induced bisimulations on the unit square for 2D singular automata with the flow rectangles [2; 2] fi <ref> [1; 1] </ref> and [1; 1] fi [3; 3], respectively. 2 Corollary 3.1 [Symbolic -calculus model checking for singular automata] The procedure MuApprox terminates if given the time-abstract transition system of a singular automaton H and an H-formula of the rectangular -calculus. <p> Proof. The structure of the finitary time-abstract similarity relation is best illustrated with an example. Let H be a 2D rectangular automaton with the flow rectangle <ref> [1; 2] </ref> fi [1; 3]. Assuming that H and are normalized, the fourth panel of Figure 8 shows a finitary kernel of a time-abstract -simulation on the unit square. <p> Proof. The structure of the finitary time-abstract similarity relation is best illustrated with an example. Let H be a 2D rectangular automaton with the flow rectangle [1; 2] fi <ref> [1; 3] </ref>. Assuming that H and are normalized, the fourth panel of Figure 8 shows a finitary kernel of a time-abstract -simulation on the unit square.
Reference: [2] <author> R. Alur, C. Courcoubetis, and D.L. Dill. </author> <title> Model checking in dense real time. </title> <journal> Information and Computation, </journal> <volume> 104(1) </volume> <pages> 2-34, </pages> <year> 1993. </year>
Reference-contexts: If H is a singular automaton, then a slight extension of triangular H-predicates needs to be considered. For example, the second and third panels of Figure 8 show the induced bisimulations on the unit square for 2D singular automata with the flow rectangles <ref> [2; 2] </ref> fi [1; 1] and [1; 1] fi [3; 3], respectively. 2 Corollary 3.1 [Symbolic -calculus model checking for singular automata] The procedure MuApprox terminates if given the time-abstract transition system of a singular automaton H and an H-formula of the rectangular -calculus. <p> Proof. The structure of the finitary time-abstract similarity relation is best illustrated with an example. Let H be a 2D rectangular automaton with the flow rectangle <ref> [1; 2] </ref> fi [1; 3]. Assuming that H and are normalized, the fourth panel of Figure 8 shows a finitary kernel of a time-abstract -simulation on the unit square. <p> In this way, linear Ctl has been extended to include clocks (Tctl) <ref> [7, 2] </ref>, stopwatches [15, 9], and symbolic constants [49]. The symbolic-analysis result of Theorem 3.5 continues to hold for these logics, and the decidability results of Corollary 3.3 continue to hold for Tctl.
Reference: [3] <author> R. Alur, C. Courcoubetis, N. Halbwachs, T.A. Henzinger, P.-H. Ho, X. Nicollin, A. Olivero, J. Sifakis, and S. Yovine. </author> <title> The algorithmic analysis of hybrid systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 138 </volume> <pages> 3-34, </pages> <year> 1995. </year>
Reference-contexts: Dually, the behavior of the controller depends on the state of the plant: each control mode continuously observes an invariant condition of the plant state, and by violating the invariant condition, a continuous change in the plant state will cause a control switch. Definition 1.1 [Hybrid automata] <ref> [5, 43, 3] </ref> A hybrid automaton H consists of the following components. Variables. A finite set X = fx 1 ; : : : ; x n g of real-numbered variables. The number n is called the dimension of H. <p> For example, the second and third panels of Figure 8 show the induced bisimulations on the unit square for 2D singular automata with the flow rectangles [2; 2] fi [1; 1] and [1; 1] fi <ref> [3; 3] </ref>, respectively. 2 Corollary 3.1 [Symbolic -calculus model checking for singular automata] The procedure MuApprox terminates if given the time-abstract transition system of a singular automaton H and an H-formula of the rectangular -calculus. <p> Proof. The structure of the finitary time-abstract similarity relation is best illustrated with an example. Let H be a 2D rectangular automaton with the flow rectangle [1; 2] fi <ref> [1; 3] </ref>. Assuming that H and are normalized, the fourth panel of Figure 8 shows a finitary kernel of a time-abstract -simulation on the unit square.
Reference: [4] <author> R. Alur, C. Courcoubetis, and T.A. Henzinger. </author> <title> Computing accumulated delays in real-time systems. </title> <booktitle> Formal Methods in System Design, </booktitle> <volume> 11(2) </volume> <pages> 137-156, </pages> <year> 1997. </year>
Reference-contexts: Stopwatches are useful for measuring accumulated durations, such as the cu mulative amount of time that is spent in control mode v <ref> [38, 4] </ref>. <p> The symbolic-analysis result of Theorem 3.5 continues to hold for these logics, and the decidability results of Corollary 3.3 continue to hold for Tctl. Isolated decidability results are known also for computation tree logics with a limited use of stopwatches or symbolic constants <ref> [49, 4] </ref>. 2 Acknowledgments. My view of mixed discrete-continuous systems has been shaped in collaborations with Rajeev Alur, Costas Courcoubetis, Nicolas Halb-wachs, Pei-Hsin Ho, Peter Kopke, Zohar Manna, Xavier Nicollin, Amir Pnueli, Anuj Puri, Joseph Sifakis, Howard Wong-Toi, Pravin Varaiya, Moshe Vardi, and Sergio Yovine.
Reference: [5] <author> R. Alur, C. Courcoubetis, T.A. Henzinger, and P.-H. Ho. </author> <title> Hybrid automata: an algorithmic approach to the specification and verification of hybrid systems. In R.L. </title> <editor> Grossman, A. Nerode, A.P. Ravn, and H. Rischel, editors, </editor> <title> Hybrid Systems I, </title> <booktitle> Lecture Notes in Computer Science 736, </booktitle> <pages> pages 209-229. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Dually, the behavior of the controller depends on the state of the plant: each control mode continuously observes an invariant condition of the plant state, and by violating the invariant condition, a continuous change in the plant state will cause a control switch. Definition 1.1 [Hybrid automata] <ref> [5, 43, 3] </ref> A hybrid automaton H consists of the following components. Variables. A finite set X = fx 1 ; : : : ; x n g of real-numbered variables. The number n is called the dimension of H. <p> If the flow conditions are allowed to vary with control switches (multirectangular automata), or if the values of different variables may be related (triangular automata), then already the reach-ability problem cannot be decided. 11 Theorem 2.2 [Reachability] <ref> [5] </ref> The reachability problems for multisingular au-tomata and for triangular automata are undecidable. Proof. Reduction from the halting problem for 2-counter machines. 2 Remark. [Theorem 2.2] Theorem 2.2 can be sharpened to more specific statements [10, 32]. <p> An H-formula of the rectangular -calculus is a formula of the (S a H ; T )-based -calculus, for the set T of rectangular H-predicates. 2 17 Theorem 3.1 [Symbolic analysis of linear hybrid automata] <ref> [5, 9] </ref> For every linear hybrid automaton H, the set of linear H-predicates permits the symbolic analysis of the time-abstract transition system S a H . Proof. <p> This result can be extended to singular automata. Theorem 3.2 [Time-abstract bisimilarity of singular automata] <ref> [6, 5] </ref> If H is a singular automaton, and is a finite set of rectangular H-predicates, then the time-abstract -bisimilarity relation of H is finitary. 18 10 0 x 1 Proof.
Reference: [6] <author> R. Alur and D.L. Dill. </author> <title> A theory of timed automata. </title> <journal> Theoretical Computer Science, </journal> <volume> 126 </volume> <pages> 183-235, </pages> <year> 1994. </year>
Reference-contexts: All variables of a timed automaton are clocks <ref> [6] </ref>. <p> Remark. [Emptiness] The emptiness problem for rectangular automata is in PSPACE, and the additional exponential for time-abstract trace inclusion is caused by an intermediate complementation step. PSPACE emptiness checking is optimal, because already the reachability problem for timed automata (and other real-time formalisms) is PSPACE-hard <ref> [6] </ref>. 2 Rectangular automata characterize an exact boundary between the decidability and undecidability of verification problems. <p> For example, the combination of clocks with a single stopwatch causes undecidability, and so does the combination of clocks with symbolic constants. 2 We have focused on time-abstract trace inclusion, because there is no hope for deciding timed trace inclusion. Theorem 2.3 [Timed trace inclusion] <ref> [6] </ref> The finitary timed trace inclusion problem for timed automata is undecidable. Remark. [Complementation] Theorem 2.3 does not contradict the decidability of the emptiness problem for timed automata (which follows from Theorem 2.1), because the (finitary) timed trace sets of timed automata are not closed under complement [6]. 2 3 On <p> [Timed trace inclusion] <ref> [6] </ref> The finitary timed trace inclusion problem for timed automata is undecidable. Remark. [Complementation] Theorem 2.3 does not contradict the decidability of the emptiness problem for timed automata (which follows from Theorem 2.1), because the (finitary) timed trace sets of timed automata are not closed under complement [6]. 2 3 On the State Spaces of Hybrid Automata Since the state space of a nontrivial hybrid automaton is infinite, it cannot be explored by enumerating states. We analyze the state space of a hybrid automaton by computing with finite symbolic representations of infinite regions. <p> This result can be extended to singular automata. Theorem 3.2 [Time-abstract bisimilarity of singular automata] <ref> [6, 5] </ref> If H is a singular automaton, and is a finite set of rectangular H-predicates, then the time-abstract -bisimilarity relation of H is finitary. 18 10 0 x 1 Proof.
Reference: [7] <author> R. Alur and T.A. Henzinger. </author> <title> Logics and models of real time: a survey. </title> <editor> In J.W. de Bakker, K. Huizing, W.-P. de Roever, and G. Rozenberg, editors, </editor> <title> 25 Real Time: </title> <booktitle> Theory in Practice, Lecture Notes in Computer Science 600, </booktitle> <pages> pages 74-106. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: The time-abstract label set B is finite. For all states q of a hybrid automaton, q 0 !q. Sequences of event transitions and time transitions with duration (label) 0 are permitted, which generalizes the interleaving semantics for discrete concurrent systems <ref> [7] </ref>. 2 Remark. [Time vs. phase view] The time-abstract transition system S a H , which projects away the time dimension, can be viewed as the phase portrait of the timed transition system S t H [25]. 2 Remark. [Time-silent transition semantics] None of the results presented in this paper change <p> In this way, linear Ctl has been extended to include clocks (Tctl) <ref> [7, 2] </ref>, stopwatches [15, 9], and symbolic constants [49]. The symbolic-analysis result of Theorem 3.5 continues to hold for these logics, and the decidability results of Corollary 3.3 continue to hold for Tctl.
Reference: [8] <author> R. Alur and T.A. Henzinger. </author> <title> Modularity for timed and hybrid systems. </title> <editor> In A. Mazurkiewicz and J. Winkowski, editors, </editor> <booktitle> CONCUR 97: Concurrency Theory, Lecture Notes in Computer Science 1243, </booktitle> <pages> pages 74-88. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: Time-abstract design is desirable, because many useful properties of time-abstract component systems are inherited by the compound system. 2 Remark. [Receptiveness] The composition of two nonzeno hybrid automata is not necessarily nonzeno. It is an interesting modeling problem for real-time systems to guarantee the liveness of compound designs <ref> [1, 21, 39, 8] </ref>. 2 2 On the Trace Languages of Hybrid Automata We identify which requirements on the traces of a hybrid automaton can be checked algorithmically, and which cannot. 2.1 Verification Tasks We study four paradigmatic questions about the traces of a hybrid automaton.
Reference: [9] <author> R. Alur, T.A. Henzinger, and P.-H. Ho. </author> <title> Automatic symbolic verification of embedded systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 22(3) </volume> <pages> 181-201, </pages> <year> 1996. </year>
Reference-contexts: Alternative consistency checks can be used to model read-shared and even write-shared variables of hybrid automata <ref> [9] </ref>. 2 Remark. [Time-abstract hybrid automata] The time-abstract transition system S a H 1 kH 2 is generally different from the product S a H 1 fi S a H 2 of the time-abstract component systems. <p> An H-formula of the rectangular -calculus is a formula of the (S a H ; T )-based -calculus, for the set T of rectangular H-predicates. 2 17 Theorem 3.1 [Symbolic analysis of linear hybrid automata] <ref> [5, 9] </ref> For every linear hybrid automaton H, the set of linear H-predicates permits the symbolic analysis of the time-abstract transition system S a H . Proof. <p> H 0 ; ), for a clock extension H 0 of H, a linear H 0 - predicate p, and a formula of the (S [[p]] H 0 ; T )-based -calculus, where T is the set of linear H 0 -predicates. 2 Theorem 3.5 [From Ctl to the -calculus] <ref> [34, 9] </ref> Let H be a linear hybrid automaton and let be an H-formula of linear Ctl. There is an effective procedure for the observational symbolic analysis of H which, upon termination, 23 returns a linear H-predicate p with [[p]] = [[]]. <p> In this way, linear Ctl has been extended to include clocks (Tctl) [7, 2], stopwatches <ref> [15, 9] </ref>, and symbolic constants [49]. The symbolic-analysis result of Theorem 3.5 continues to hold for these logics, and the decidability results of Corollary 3.3 continue to hold for Tctl.
Reference: [10] <author> R. Alur, T.A. Henzinger, and M.Y. Vardi. </author> <title> Parametric real-time reasoning. </title> <booktitle> In Proceedings of the 25th Annual Symposium on Theory of Computing, </booktitle> <pages> pages 592-601. </pages> <publisher> ACM Press, </publisher> <year> 1993. </year>
Reference-contexts: constant can be modeled by a singular variable x j with the flow interval I flow j = [0; 0] such that (1) x j is not reinitialized by any control switch, and (2) the behaviors of other variables may depend on the (unknown but constant) value of x j <ref> [10] </ref>. 2 Remark. [Initialized multirectangular automata] Some multirectangular automata can be translated to rectangular automata by increasing the dimension. <p> Proof. Reduction from the halting problem for 2-counter machines. 2 Remark. [Theorem 2.2] Theorem 2.2 can be sharpened to more specific statements <ref> [10, 32] </ref>. For example, the combination of clocks with a single stopwatch causes undecidability, and so does the combination of clocks with symbolic constants. 2 We have focused on time-abstract trace inclusion, because there is no hope for deciding timed trace inclusion.
Reference: [11] <author> R. Alur and R.P. Kurshan. </author> <title> Timing analysis in cospan. </title> <editor> In R. Alur, T.A. Henzinger, and E.D. Sontag, editors, </editor> <booktitle> Hybrid Systems III, Lecture Notes in Computer Science 1066, </booktitle> <pages> pages 220-231. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: The proof concludes with the observation that the first-order theory (R; +; ; 0; 1) admits quantifier elimination. 2 Remark. [Timed automata] The symbolic analysis of singular automata does not require the full theory of linear predicates, which leads to more efficient implementations <ref> [20, 11, 12, 19] </ref>.
Reference: [12] <author> J. Bengtsson, K.G. Larsen, F. Larsson, P. Pettersson, and W. Yi. Uppaal: </author> <title> a tool-suite for automatic verification of real-time systems. </title> <editor> In R. Alur, T.A. Henzinger, and E.D. Sontag, editors, </editor> <booktitle> Hybrid Systems III, Lecture Notes in Computer Science 1066, </booktitle> <pages> pages 232-243. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: The proof concludes with the observation that the first-order theory (R; +; ; 0; 1) admits quantifier elimination. 2 Remark. [Timed automata] The symbolic analysis of singular automata does not require the full theory of linear predicates, which leads to more efficient implementations <ref> [20, 11, 12, 19] </ref>.
Reference: [13] <author> D. Bosscher, I. Polak, and F. Vaandrager. </author> <title> Verification of an audio-control protocol. </title> <editor> In H. Langmaack, W.-P. de Roever, and J. Vytopil, editors, </editor> <booktitle> FTRTFT 94: Formal Techniques in Real-time and Fault-tolerant Systems, Lecture Notes in Computer Science 863, </booktitle> <pages> pages 170-192. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: All variables of a timed automaton are clocks [6]. A clock with drift ", for " 2 Q 0 , can be modeled by a variable with the flow interval [1 "; 1 + "] <ref> [13, 37] </ref>. 2 Remark. [Composition] Timed, singular, and rectangular automata are closed under composition: for two timed (singular; rectangular) automata H 1 and H 2 , we can construct a timed (singular; rectangular) automaton H such that S t H = H 1 kH 2 (and therefore, S a H =
Reference: [14] <author> A. Bouajjani, R. Echahed, and R. Robbana. </author> <title> Verification of context-free timed systems using linear hybrid observers. </title> <editor> In D.L. Dill, editor, </editor> <booktitle> CAV 94: Computer-aided Verification, Lecture Notes in Computer Science, </booktitle> <pages> pages 118-131. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Remark. [Context-free equivalences] We have restricted ourselves to decidabil-ity results that can be obtained by relating hybrid automata to finite automata. Additional decidability results can be obtained by relating hybrid automata to pushdown automata <ref> [14, 16] </ref>. Little is known, however, about which classes of hybrid automata are time-abstract trace equivalent (similar; bisimilar) to pushdown automata. 2 Remark. [Timed (bi)similarity] We have focused on time-abstract state space equivalences, because the timed counterparts are infinitary already for nontrivial timed automata.
Reference: [15] <author> A. Bouajjani, R. Echahed, and J. Sifakis. </author> <title> On model checking for real-time properties with durations. </title> <booktitle> In Proceedings of the Eighth Annual Symposium on Logic in Computer Science, </booktitle> <pages> pages 147-159. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1993. </year>
Reference-contexts: In this way, linear Ctl has been extended to include clocks (Tctl) [7, 2], stopwatches <ref> [15, 9] </ref>, and symbolic constants [49]. The symbolic-analysis result of Theorem 3.5 continues to hold for these logics, and the decidability results of Corollary 3.3 continue to hold for Tctl.
Reference: [16] <author> A. Bouajjani and R. Robbana. </author> <title> Verifying !-regular properties for subclasses of linear hybrid systems. </title> <editor> In P. Wolper, editor, </editor> <booktitle> CAV 95: Computer-aided Verification, Lecture Notes in Computer Science 939, </booktitle> <pages> pages 437-450. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year> <month> 26 </month>
Reference-contexts: Remark. [Context-free equivalences] We have restricted ourselves to decidabil-ity results that can be obtained by relating hybrid automata to finite automata. Additional decidability results can be obtained by relating hybrid automata to pushdown automata <ref> [14, 16] </ref>. Little is known, however, about which classes of hybrid automata are time-abstract trace equivalent (similar; bisimilar) to pushdown automata. 2 Remark. [Timed (bi)similarity] We have focused on time-abstract state space equivalences, because the timed counterparts are infinitary already for nontrivial timed automata.
Reference: [17] <author> K. Cerans. </author> <title> Decidability of bisimulation equivalence for parallel timer pro-cesses. </title> <editor> In G. von Bochmann and D.K. Probst, editors, </editor> <booktitle> CAV 92: Computer-aided Verification, Lecture Notes in Computer Science 663, </booktitle> <pages> pages 302-315. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Specifically, if H is a timed automaton, is a finite set of rectangular H-predicates, and q and r are two states of H, then it can be decided if q and r are timed -(bi)similar <ref> [17, 48, 47] </ref>. 2 20 Remark. [Dense vs. discrete time] In our model, jumps may happen at any real-numbered times. By contrast, in sampling control, all control switches occur at multiples of a rational sampling interval.
Reference: [18] <author> J.C. Corbett. </author> <title> Timing analysis of Ada tasking programs. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 22(7) </volume> <pages> 461-483, </pages> <year> 1996. </year>
Reference-contexts: The procedure has been found to terminate on several examples of practical interest that do not fall into any of the classes for which a priori termination guarantees can be given <ref> [37, 42, 18, 36, 46] </ref>. 2 Example 3.1 [Railroad gate control] Recall the safety requirement for the railroad gate controller from Example 1.2, namely, that the gate is fully closed whenever the train is within 10 meters of the gate.
Reference: [19] <author> C. Daws, A. Olivero, S. Tripakis, and S. Yovine. </author> <title> The tool kronos. </title> <editor> In R. Alur, T.A. Henzinger, and E.D. Sontag, editors, </editor> <booktitle> Hybrid Systems III, Lecture Notes in Computer Science 1066, </booktitle> <pages> pages 208-219. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: The proof concludes with the observation that the first-order theory (R; +; ; 0; 1) admits quantifier elimination. 2 Remark. [Timed automata] The symbolic analysis of singular automata does not require the full theory of linear predicates, which leads to more efficient implementations <ref> [20, 11, 12, 19] </ref>.
Reference: [20] <author> D.L. Dill. </author> <title> Timing assumptions and verification of finite-state concurrent systems. </title> <editor> In J. Sifakis, editor, </editor> <title> CAV 89: Automatic Verification Methods for Finite-state Systems, </title> <booktitle> Lecture Notes in Computer Science 407, </booktitle> <pages> pages 197-212. </pages> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference-contexts: The proof concludes with the observation that the first-order theory (R; +; ; 0; 1) admits quantifier elimination. 2 Remark. [Timed automata] The symbolic analysis of singular automata does not require the full theory of linear predicates, which leads to more efficient implementations <ref> [20, 11, 12, 19] </ref>.
Reference: [21] <author> R. Gawlick, R. Segala, J.F. Sogaard-Andersen, and N.A. Lynch. </author> <title> Liveness in timed and untimed systems. </title> <editor> In S. Abiteboul and E. Shamir, editors, </editor> <booktitle> ICALP 94: Automata, Languages, and Programming, Lecture Notes in Computer Science 820, </booktitle> <pages> pages 166-177. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Time-abstract design is desirable, because many useful properties of time-abstract component systems are inherited by the compound system. 2 Remark. [Receptiveness] The composition of two nonzeno hybrid automata is not necessarily nonzeno. It is an interesting modeling problem for real-time systems to guarantee the liveness of compound designs <ref> [1, 21, 39, 8] </ref>. 2 2 On the Trace Languages of Hybrid Automata We identify which requirements on the traces of a hybrid automaton can be checked algorithmically, and which cannot. 2.1 Verification Tasks We study four paradigmatic questions about the traces of a hybrid automaton.
Reference: [22] <author> V. Gupta, T.A. Henzinger, and R. Jagadeesan. </author> <title> Robust timed automata. </title> <editor> In O. Maler, editor, </editor> <title> HART 97: Hybrid and Real-time Systems, </title> <booktitle> Lecture Notes in Computer Science 1201, </booktitle> <pages> pages 331-345. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: The resulting theory of "fuzzy" hybrid automata does not differ significantly from the results presented in this paper <ref> [22] </ref>. 2 1.4 Composition For two hybrid automata H 1 and H 2 , we define the timed semantics and the time-abstract semantics of the parallel composition H 1 kH 2 .
Reference: [23] <author> M.R. Henzinger, T.A. Henzinger, and P.W. Kopke. </author> <title> Computing simulations on finite and infinite graphs. </title> <booktitle> In Proceedings of the 36rd Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 453-462. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1995. </year>
Reference-contexts: Each step of the procedure BisimApprox (Figure 5) is effective, and upon termination the procedure returns the -bisimilarity relation of S. Furthermore, the procedure BisimApprox terminates iff the -bisimilarity relation of S is finitary. 2 Proposition 3.2 [Symbolic similarity approximation] <ref> [23] </ref> Let S, T , and be as in Proposition 3.1. <p> There is an (infinite-state) 2D rectangular automaton H such that the time-abstract 2 -bisimilarity relation of H is equality. 2 19 The boundary between the existence and nonexistence of finitary similarity relations lies at 2D rectangular automata. Theorem 3.3 [Time-abstract similarity of 2D rectangular automata] <ref> [23] </ref> If H is a 2D rectangular automaton, and is a finite set of rectangular H-predicates, then the time-abstract -similarity relation of H is finitary. Proof. The structure of the finitary time-abstract similarity relation is best illustrated with an example.
Reference: [24] <author> T.A. Henzinger. </author> <title> Sooner is safer than later. </title> <journal> Information Processing Letters, </journal> <volume> 43(3) </volume> <pages> 135-141, </pages> <year> 1992. </year>
Reference-contexts: The divergence of time is a liveness assumption, and it is the only liveness assumption we need to consider <ref> [24, 33] </ref>. A hybrid automaton is nonzeno if it cannot prevent time from diverging. Clearly, only nonzeno designs of real-time systems can be realized. 4 Definition 1.4 [Live transition systems] Consider a labeled transition system S and a state q 0 of S.
Reference: [25] <author> T.A. Henzinger. </author> <title> Hybrid automata with finite bisimulations. </title> <editor> In Z. Fulop and F. Gecseg, editors, </editor> <booktitle> ICALP 95: Automata, Languages, and Programming, Lecture Notes in Computer Science 944, </booktitle> <pages> pages 324-335. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: duration (label) 0 are permitted, which generalizes the interleaving semantics for discrete concurrent systems [7]. 2 Remark. [Time vs. phase view] The time-abstract transition system S a H , which projects away the time dimension, can be viewed as the phase portrait of the timed transition system S t H <ref> [25] </ref>. 2 Remark. [Time-silent transition semantics] None of the results presented in this paper change if the t -transitions of time-abstract transition systems are considered silent [30]. 2 1.3 Live Semantics If we consider the infinite behavior of a hybrid automaton, then we are interested only in infinite sequences of transitions <p> This is not the case for time-abstract hybrid au 7 _y = 9 _y = 0 y 90 y = 90 lower raise OpenMoveUp MoveDown Closed lower raise raise lower raise lower _y = 0 y = 90 tomata <ref> [25] </ref>. Time-abstract design is desirable, because many useful properties of time-abstract component systems are inherited by the compound system. 2 Remark. [Receptiveness] The composition of two nonzeno hybrid automata is not necessarily nonzeno.
Reference: [26] <author> T.A. Henzinger and P.-H. Ho. </author> <title> Algorithmic analysis of nonlinear hybrid systems. </title> <editor> In P. Wolper, editor, </editor> <booktitle> CAV 95: Computer-aided Verification, Lecture Notes in Computer Science 939, </booktitle> <pages> pages 225-238. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: If the direction of the gate cannot be reversed midway, then the gate can be modeled by a singular automaton. 2 Remark. [Abstract interpretation] Nonsingular flow intervals permit the conservative approximation of complex continuous behavior with arbitrary accuracy <ref> [26] </ref>: we may split the state space into regions and within each region, use lower and upper bounds on the first derivatives of all variables. 2 2.3 Verification Results The following theorem ensures the verifiability of rectangular automata against time-abstract finite-state specifications.
Reference: [27] <author> T.A. Henzinger, P.-H. Ho, and H. Wong-Toi. HyTech: </author> <title> the next generation. </title> <booktitle> In Proceedings of the 16th Annual Real-time Systems Symposium, </booktitle> <pages> pages 56-65. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1995. </year> <month> 27 </month>
Reference-contexts: The model-checking problems for rectangular 9Ctl and rectangular 8Ctl are PSPACE-decidable for 2D rectangular automata. Remark. [HyTech] The procedure of Theorem 3.5 for checking linear Ctl requirements of linear hybrid automata has been implemented in the tool HyTech <ref> [27, 28, 29] </ref>.
Reference: [28] <author> T.A. Henzinger, P.-H. Ho, and H. Wong-Toi. </author> <title> A user guide to HyTech. </title> <editor> In E. Brinksma, W.R. Cleaveland, K.G. Larsen, T. Margaria, and B. Steffen, editors, </editor> <booktitle> TACAS 95: Tools and Algorithms for the Construction and Analysis of Systems, Lecture Notes in Computer Science 1019, </booktitle> <pages> pages 41-71. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: The model-checking problems for rectangular 9Ctl and rectangular 8Ctl are PSPACE-decidable for 2D rectangular automata. Remark. [HyTech] The procedure of Theorem 3.5 for checking linear Ctl requirements of linear hybrid automata has been implemented in the tool HyTech <ref> [27, 28, 29] </ref>.
Reference: [29] <author> T.A. Henzinger, P.-H. Ho, and H. Wong-Toi. HyTech: </author> <title> a model checker for hybrid systems. </title> <editor> In O. Grumberg, editor, </editor> <booktitle> CAV 97: Computer-aided Verification, Lecture Notes in Computer Science 1254, </booktitle> <pages> pages 460-463. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: The model-checking problems for rectangular 9Ctl and rectangular 8Ctl are PSPACE-decidable for 2D rectangular automata. Remark. [HyTech] The procedure of Theorem 3.5 for checking linear Ctl requirements of linear hybrid automata has been implemented in the tool HyTech <ref> [27, 28, 29] </ref>.
Reference: [30] <author> T.A. Henzinger and P.W. Kopke. </author> <title> State equivalences for rectangular hybrid automata. </title> <editor> In U. Montanari and V. Sassone, editors, </editor> <booktitle> CONCUR 96: Con-currency Theory, Lecture Notes in Computer Science 1119, </booktitle> <pages> pages 530-545. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: a H , which projects away the time dimension, can be viewed as the phase portrait of the timed transition system S t H [25]. 2 Remark. [Time-silent transition semantics] None of the results presented in this paper change if the t -transitions of time-abstract transition systems are considered silent <ref> [30] </ref>. 2 1.3 Live Semantics If we consider the infinite behavior of a hybrid automaton, then we are interested only in infinite sequences of transitions which do not converge in time. <p> Theorem 3.3 does not generalize to rectangular automata of arbitrary dimension. Theorem 3.4 [Time-abstract similarity of 3D rectangular automata] <ref> [30] </ref> Let = fx 1 = 1; x 2 = 1; x 3 = 1g. There is an (infinite-state) 3D rectangular automaton H such that the time-abstract -similarity relation of H is equality.
Reference: [31] <author> T.A. Henzinger and P.W. Kopke. </author> <title> Discrete-time control for rectangular hybrid automata. </title> <editor> In P. Degano, R. Gorrieri, and A. Marchetti-Spaccamela, editors, </editor> <booktitle> ICALP 97: Automata, Languages, and Programming, Lecture Notes in Computer Science 1256, </booktitle> <pages> pages 582-593. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: By contrast, in sampling control, all control switches occur at multiples of a rational sampling interval. Sampling control can therefore be modeled by discrete-time hybrid automata, where all jumps happen (without loss of generality) at integer times <ref> [31] </ref>. For discrete-time hybrid automata, verification questions can be answered even in the multi rectangular case. This is because for every discrete-time multirectangular hybrid automaton H, the set of rectangular H-predicates permits the symbolic analysis of the time-abstract transition system S a H .
Reference: [32] <author> T.A. Henzinger, P.W. Kopke, A. Puri, and P. Varaiya. </author> <booktitle> What's decidable about hybrid automata? In Proceedings of the 27th Annual Symposium on Theory of Computing, </booktitle> <pages> pages 373-382. </pages> <publisher> ACM Press, </publisher> <year> 1995. </year>
Reference-contexts: The behaviors of the variables are decoupled, because the ranges of possible values and derivative values for one variable cannot depend on the value or derivative value of another variable. Definition 2.2 [Rectangular automata] <ref> [45, 32] </ref> A rectangle I = Q dimension n is the product of n intervals I i R of the real line, each with rational or infinite endpoints. The rectangle I is bounded (a singleton) if each interval I i , for 1 i n, is bounded (a singleton). <p> Theorem 2.1 [Time-abstract traces] <ref> [32] </ref> For every rectangular automaton H, the set of finite time-abstract traces of H is regular, and the set of infinite time-abstract traces of H is !-regular. Proof. <p> Proof. Reduction from the halting problem for 2-counter machines. 2 Remark. [Theorem 2.2] Theorem 2.2 can be sharpened to more specific statements <ref> [10, 32] </ref>. For example, the combination of clocks with a single stopwatch causes undecidability, and so does the combination of clocks with symbolic constants. 2 We have focused on time-abstract trace inclusion, because there is no hope for deciding timed trace inclusion.
Reference: [33] <author> T.A. Henzinger, P.W. Kopke, and H. Wong-Toi. </author> <title> The expressive power of clocks. </title> <editor> In Z. Fulop and F. Gecseg, editors, </editor> <booktitle> ICALP 95: Automata, Languages, and Programming, Lecture Notes in Computer Science 944, </booktitle> <pages> pages 417-428. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: The divergence of time is a liveness assumption, and it is the only liveness assumption we need to consider <ref> [24, 33] </ref>. A hybrid automaton is nonzeno if it cannot prevent time from diverging. Clearly, only nonzeno designs of real-time systems can be realized. 4 Definition 1.4 [Live transition systems] Consider a labeled transition system S and a state q 0 of S.
Reference: [34] <author> T.A. Henzinger, X. Nicollin, J. Sifakis, and S. Yovine. </author> <title> Symbolic model checking for real-time systems. </title> <journal> Information and Computation, </journal> <volume> 111(2) </volume> <pages> 193-244, </pages> <year> 1994. </year>
Reference-contexts: For every timed automaton H, the set of triangular H-predicates permits the symbolic analysis of the time-abstract transition system S a H <ref> [34] </ref>. 2 Remark. [Polynomial hybrid automata] Since the theory of the reals with addition and multiplication is decidable, it is possible to define a class of hybrid automata that are more general than linear hybrid automata and can be analyzed symbolically in the more powerful theory. <p> H 0 ; ), for a clock extension H 0 of H, a linear H 0 - predicate p, and a formula of the (S [[p]] H 0 ; T )-based -calculus, where T is the set of linear H 0 -predicates. 2 Theorem 3.5 [From Ctl to the -calculus] <ref> [34, 9] </ref> Let H be a linear hybrid automaton and let be an H-formula of linear Ctl. There is an effective procedure for the observational symbolic analysis of H which, upon termination, 23 returns a linear H-predicate p with [[p]] = [[]].
Reference: [35] <author> T.A. Henzinger and H. Wong-Toi. </author> <title> Linear phase-portrait approximations for nonlinear hybrid systems. </title> <editor> In R. Alur, T.A. Henzinger, and E.D. Sontag, editors, </editor> <booktitle> Hybrid Systems III, Lecture Notes in Computer Science 1066, </booktitle> <pages> pages 377-388. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: All (multi)rectangular automata and all triangular automata are linear hybrid automata. The use of general linear hybrid automata for approximating complex continuous behavior can be more efficient than the use of rectangular automata <ref> [35, 44] </ref>. 2 Definition 3.6 [Theories for hybrid automata] Consider a hybrid automaton H with the set X of variables and the set V of control modes. An H-predicate is a predicate whose free variables are boolean-valued variables from V and real-valued variables from X.
Reference: [36] <author> T.A. Henzinger and H. Wong-Toi. </author> <title> Using HyTech to synthesize control parameters for a steam boiler. </title> <editor> In J.-R. Abrial, E. Borger, and H. Langmaack, editors, </editor> <title> Formal Methods for Industrial Applications: Specifying and Programming the Steam Boiler Control, </title> <booktitle> Lecture Notes in Computer Science 1165, </booktitle> <pages> pages 265-282. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: The procedure has been found to terminate on several examples of practical interest that do not fall into any of the classes for which a priori termination guarantees can be given <ref> [37, 42, 18, 36, 46] </ref>. 2 Example 3.1 [Railroad gate control] Recall the safety requirement for the railroad gate controller from Example 1.2, namely, that the gate is fully closed whenever the train is within 10 meters of the gate.
Reference: [37] <author> P.-H. Ho and H. Wong-Toi. </author> <title> Automated analysis of an audio control protocol. </title> <editor> In P. Wolper, editor, </editor> <booktitle> CAV 95: Computer-aided Verification, Lecture Notes in Computer Science 939, </booktitle> <pages> pages 381-394. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year> <month> 28 </month>
Reference-contexts: All variables of a timed automaton are clocks [6]. A clock with drift ", for " 2 Q 0 , can be modeled by a variable with the flow interval [1 "; 1 + "] <ref> [13, 37] </ref>. 2 Remark. [Composition] Timed, singular, and rectangular automata are closed under composition: for two timed (singular; rectangular) automata H 1 and H 2 , we can construct a timed (singular; rectangular) automaton H such that S t H = H 1 kH 2 (and therefore, S a H = <p> The procedure has been found to terminate on several examples of practical interest that do not fall into any of the classes for which a priori termination guarantees can be given <ref> [37, 42, 18, 36, 46] </ref>. 2 Example 3.1 [Railroad gate control] Recall the safety requirement for the railroad gate controller from Example 1.2, namely, that the gate is fully closed whenever the train is within 10 meters of the gate.
Reference: [38] <author> Y. Kesten, A. Pnueli, J. Sifakis, and S. Yovine. </author> <title> Integration graphs: a class of decidable hybrid systems. In R.L. </title> <editor> Grossman, A. Nerode, A.P. Ravn, and H. Rischel, editors, </editor> <booktitle> Hybrid Systems, Lecture Notes in Computer Science 736, </booktitle> <pages> pages 179-208. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Stopwatches are useful for measuring accumulated durations, such as the cu mulative amount of time that is spent in control mode v <ref> [38, 4] </ref>.
Reference: [39] <author> N.A. Lynch, R. Segala, F. Vaandrager, and H.B. Weinberg. </author> <title> Hybrid I/O Automata. </title> <editor> In R. Alur, T.A. Henzinger, and E.D. Sontag, editors, </editor> <booktitle> Hybrid Systems III, Lecture Notes in Computer Science 1066, </booktitle> <pages> pages 496-510. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Time-abstract design is desirable, because many useful properties of time-abstract component systems are inherited by the compound system. 2 Remark. [Receptiveness] The composition of two nonzeno hybrid automata is not necessarily nonzeno. It is an interesting modeling problem for real-time systems to guarantee the liveness of compound designs <ref> [1, 21, 39, 8] </ref>. 2 2 On the Trace Languages of Hybrid Automata We identify which requirements on the traces of a hybrid automaton can be checked algorithmically, and which cannot. 2.1 Verification Tasks We study four paradigmatic questions about the traces of a hybrid automaton.
Reference: [40] <author> O. Maler, Z. Manna, and A. Pnueli. </author> <title> From timed to hybrid systems. </title> <editor> In J.W. de Bakker, K. Huizing, W.-P. de Roever, and G. Rozenberg, editors, </editor> <title> Real Time: </title> <booktitle> Theory in Practice, Lecture Notes in Computer Science 600, </booktitle> <pages> pages 447-484. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: My special thanks go to Oded Maler, Zohar, and Amir for introducing me to the problem domain <ref> [40] </ref>, to Pei-Hsin and Howard for implementing HyTech, and to Peter for many valuable comments on several drafts of this manuscript.
Reference: [41] <author> O. Maler, A. Pnueli, and J. Sifakis. </author> <title> On the synthesis of discrete controllers for timed systems. In E.W. </title> <editor> Mayr and C. Puech, editors, </editor> <booktitle> STACS 95: Theoretical Aspects of Computer Science, Lecture Notes in Computer Science 900, </booktitle> <pages> pages 229-242. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Suppose that the behavior of S can be influenced by applying a control map that maps each state of S to a label in A <ref> [41] </ref>: during the execution of S, in each state q, the control map chooses a label a, and the system proceeds to an a-successor of q.
Reference: [42] <author> S. Nadjm-Tehrani and J.-E. Stromberg. </author> <title> Proving dynamic properties in an aerospace application. </title> <booktitle> In Proceedings of the 16th Annual Real-time Systems Symposium, </booktitle> <pages> pages 2-10. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1995. </year>
Reference-contexts: The procedure has been found to terminate on several examples of practical interest that do not fall into any of the classes for which a priori termination guarantees can be given <ref> [37, 42, 18, 36, 46] </ref>. 2 Example 3.1 [Railroad gate control] Recall the safety requirement for the railroad gate controller from Example 1.2, namely, that the gate is fully closed whenever the train is within 10 meters of the gate.
Reference: [43] <author> X. Nicollin, A. Olivero, J. Sifakis, and S. Yovine. </author> <title> An approach to the description and analysis of hybrid systems. In R.L. </title> <editor> Grossman, A. Nerode, A.P. Ravn, and H. Rischel, editors, </editor> <title> Hybrid Systems I, </title> <booktitle> Lecture Notes in Computer Science 736, </booktitle> <pages> pages 149-178. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Dually, the behavior of the controller depends on the state of the plant: each control mode continuously observes an invariant condition of the plant state, and by violating the invariant condition, a continuous change in the plant state will cause a control switch. Definition 1.1 [Hybrid automata] <ref> [5, 43, 3] </ref> A hybrid automaton H consists of the following components. Variables. A finite set X = fx 1 ; : : : ; x n g of real-numbered variables. The number n is called the dimension of H.
Reference: [44] <author> A. Puri, V. Borkar, and P. Varaiya. </author> <title> "-approximation of differential inclusions. </title> <editor> In R. Alur, T.A. Henzinger, and E.D. Sontag, editors, </editor> <booktitle> Hybrid Systems III, Lecture Notes in Computer Science 1066, </booktitle> <pages> pages 362-376. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: All (multi)rectangular automata and all triangular automata are linear hybrid automata. The use of general linear hybrid automata for approximating complex continuous behavior can be more efficient than the use of rectangular automata <ref> [35, 44] </ref>. 2 Definition 3.6 [Theories for hybrid automata] Consider a hybrid automaton H with the set X of variables and the set V of control modes. An H-predicate is a predicate whose free variables are boolean-valued variables from V and real-valued variables from X.
Reference: [45] <author> A. Puri and P. Varaiya. </author> <title> Decidability of hybrid systems with rectangular differential inclusions. </title> <editor> In D.L. Dill, editor, </editor> <booktitle> CAV 94: Computer-aided Verification, Lecture Notes in Computer Science 818, </booktitle> <pages> pages 95-104. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: The behaviors of the variables are decoupled, because the ranges of possible values and derivative values for one variable cannot depend on the value or derivative value of another variable. Definition 2.2 [Rectangular automata] <ref> [45, 32] </ref> A rectangle I = Q dimension n is the product of n intervals I i R of the real line, each with rational or infinite endpoints. The rectangle I is bounded (a singleton) if each interval I i , for 1 i n, is bounded (a singleton). <p> for each variable x i and each control switch e, if the flow interval I flow (v) i of the source v of e is different from the flow interval I flow (v 0 ) i of the target v 0 of e, then x i is reinitialized by e <ref> [45] </ref>. 2 Example 2.1 [Railroad gate control] The train automaton of Figure 2 is an initialized 1D multirectangular automaton and can be translated to a 2D rectangular automaton with the same timed traces. The controller automaton of 10 the controller can be modeled by a 1D timed automaton.
Reference: [46] <author> T. Stauner, O. Muller, and M. Fuchs. </author> <title> Using HyTech to verify an automotive control system. </title> <editor> In O. Maler, editor, </editor> <title> HART 97: Hybrid and Real-time Systems, </title> <booktitle> Lecture Notes in Computer Science 1201, </booktitle> <pages> pages 139-153. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: The procedure has been found to terminate on several examples of practical interest that do not fall into any of the classes for which a priori termination guarantees can be given <ref> [37, 42, 18, 36, 46] </ref>. 2 Example 3.1 [Railroad gate control] Recall the safety requirement for the railroad gate controller from Example 1.2, namely, that the gate is fully closed whenever the train is within 10 meters of the gate.
Reference: [47] <author> S. Ta~siran, R. Alur, R.P. Kurshan, and R.K. Brayton. </author> <title> Verifying abstractions of timed systems. </title> <editor> In U. Montanari, editor, </editor> <booktitle> CONCUR 96: Concur-rency Theory, Lecture Notes in Computer Science, </booktitle> <pages> pages 546-562. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year> <month> 29 </month>
Reference-contexts: Specifically, if H is a timed automaton, is a finite set of rectangular H-predicates, and q and r are two states of H, then it can be decided if q and r are timed -(bi)similar <ref> [17, 48, 47] </ref>. 2 20 Remark. [Dense vs. discrete time] In our model, jumps may happen at any real-numbered times. By contrast, in sampling control, all control switches occur at multiples of a rational sampling interval.
Reference: [48] <author> K. Cerans, J.C. Godskesen, and K.G. Larsen. </author> <title> Timed modal specifica-tion: Theory and tools. </title> <editor> In C. Courcoubetis, editor, </editor> <booktitle> CAV 93: Computer-aided Verification, Lecture Notes in Computer Science 697, </booktitle> <pages> pages 253-267. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Specifically, if H is a timed automaton, is a finite set of rectangular H-predicates, and q and r are two states of H, then it can be decided if q and r are timed -(bi)similar <ref> [17, 48, 47] </ref>. 2 20 Remark. [Dense vs. discrete time] In our model, jumps may happen at any real-numbered times. By contrast, in sampling control, all control switches occur at multiples of a rational sampling interval.
Reference: [49] <author> F. Wang. </author> <title> Timing behavior analysis for real-time systems. </title> <booktitle> In Proceedings of the Tenth Annual Symposium on Logic in Computer Science, </booktitle> <pages> pages 112-122. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1995. </year> <month> 30 </month>
Reference-contexts: In this way, linear Ctl has been extended to include clocks (Tctl) [7, 2], stopwatches [15, 9], and symbolic constants <ref> [49] </ref>. The symbolic-analysis result of Theorem 3.5 continues to hold for these logics, and the decidability results of Corollary 3.3 continue to hold for Tctl. Isolated decidability results are known also for computation tree logics with a limited use of stopwatches or symbolic constants [49, 4]. 2 Acknowledgments. <p> The symbolic-analysis result of Theorem 3.5 continues to hold for these logics, and the decidability results of Corollary 3.3 continue to hold for Tctl. Isolated decidability results are known also for computation tree logics with a limited use of stopwatches or symbolic constants <ref> [49, 4] </ref>. 2 Acknowledgments. My view of mixed discrete-continuous systems has been shaped in collaborations with Rajeev Alur, Costas Courcoubetis, Nicolas Halb-wachs, Pei-Hsin Ho, Peter Kopke, Zohar Manna, Xavier Nicollin, Amir Pnueli, Anuj Puri, Joseph Sifakis, Howard Wong-Toi, Pravin Varaiya, Moshe Vardi, and Sergio Yovine.
References-found: 49

