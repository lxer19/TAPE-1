URL: http://www.cms.dmu.ac.uk/Research/CSTR/1996/cstr96-9.ps.gz
Refering-URL: http://www.cms.dmu.ac.uk/Research/CSTR/1996/
Root-URL: 
Email: E-mail: cau@dmu.ac.uk  E-mail: Ben.Moszkowski@newcastle.ac.uk  
Title: Using PVS for Interval Temporal Logic Proofs Part 1: The Syntactic and Semantic Encoding  
Author: Antonio Cau Ben Moszkowski 
Date: 4 October 1996  
Address: LE1 9BH, UK  NE1 7RU, UK  
Affiliation: Science and and Engineering Research Centre Department of Computer Science De Montfort University The Gateway Leicester  Department of Electrical and Electronic Engineering University of Newcastle upon Tyne Newcastle  
Abstract: Interval temporal logic (ITL) is a logic that is used to specify and reason about systems. The logic has a powerful proof system but rather than doing proofs by hand, which is tedious and error prone, we want a tool that can check each proof step. Instead of developing a new tool we will use the existing prototype verification system (PVS) as basic tool. The specification language of PVS is used to encode interval temporal logic semantically and syntactically. With this we can encode the ITL proof system within PVS. Several examples of proofs in ITL that are done per hand are checked with PVS.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Cau, H. Zedan, N. Coleman and B. Moszkowski. </author> <title> Using ITL and Tempura for Large Scale Specification and Simulation, </title> <booktitle> in proc. of fourth euromicro workshop on parallel and distributed processing, IEEE, 1996, </booktitle> <address> Braga, Portugal, </address> <month> 493500. </month>
Reference-contexts: The correctness of systems is therefore shown with help of a powerful proof system [5, 6]. Experience with this proof system shows that a whole range of properties can be proven. Currently ITL is used to specify and verify a general purpose multi-threaded data-flow processor EP/3 <ref> [1] </ref>. One drawback is that all these proofs are done by hand, i.e., there is no tool that checks that a particular application of a proof rule is right. <p> Rule? (LEMMA "BoxChopImpChop" ("f0" "f0!1" "f1" "f1!1" "f2" "f2!1")) 12 Applying BoxChopImpChop where f0 gets f0!1, f1 gets f1!1, f2 gets f2!1, this simplifies to: RightChopImpChop : --1- V ([]((f0!1 =&gt; f1!1)) =&gt; (f2!1 f0!1) =&gt; (f2!1 f1!1)) [-3] ((V (((f0!1 =&gt; f1!1))))) <ref> [1] </ref> (V (((f2!1 f0!1) =&gt; (f2!1 f1!1)))) * Apply proof rule MP. Rule? (FORWARD-CHAIN "MP") Forward chaining on MP, Q.E.D. Run time = 2.67 secs. Real time = 16.34 secs. The example shows that the PVS proof follows the same pattern as the by hand proof. <p> This ensures that people who are used to the proofs by hand can easily switch to the proofs by the tool. The next step will be the verification of a large example. This example will be the EP/3 example <ref> [1] </ref> for which already an ITL specification exist (a large ITL formula of about 3500 lines). This example will probably require the definition of proof strategies (tactics). These strategies can be defined in PVS to semi-automatically prove certain theorems.
Reference: [2] <author> A. Cau and H. Zedan. </author> <title> Communication and Time in ITL, </title> <note> in preparation. </note>
Reference-contexts: For ITL we also defined constructs to reason about message-passing communication and timing (delay and time-out) using the work on temporal agent model (TAM) [9]. The latter has also a refinement calculus which can be easily ported to ITL <ref> [2] </ref>. These constructs and refinement rules will also be included in the proof assistant. Related work is done in Macau where Mao Xiaoguang, Xu Qiwen and Wang Ji are working on a proof assistant for interval logics. They have embedded the neighbourhood calculus within PVS [3].
Reference: [3] <author> X. Mao, Q. Xu and J. Wang. </author> <title> Towards a proof assistant for interval logics, </title> <note> in preparation. </note>
Reference-contexts: These constructs and refinement rules will also be included in the proof assistant. Related work is done in Macau where Mao Xiaoguang, Xu Qiwen and Wang Ji are working on a proof assistant for interval logics. They have embedded the neighbourhood calculus within PVS <ref> [3] </ref>. This calculus can express a whole range of interval logics like the duration calculus and ITL. We have exchanged ideas, they have, on our suggestion, also used abstract datatypes to syntactically encode their calculus.
Reference: [4] <author> B. Moszkowski. </author> <title> Executing temporal logic programs, </title> <publisher> Cambridge Univ. Press, </publisher> <address> UK, </address> <year> 1986. </year> <month> 15 </month>
Reference-contexts: 1 Introduction Interval temporal logic (ITL) is a very convenient formalism for the description of hardware and software systems <ref> [4] </ref>. It describes these systems in terms of intervals which are sequences of states wherein a systems can be. Also an executable subset of ITL has been defined the so called Tempura language.
Reference: [5] <author> B. Moszkowski. </author> <title> Some very compositional temporal properties, in: Programming Concepts, Methods and Calculi, Ernst-R udiger Olderog (ed.), </title> <journal> IFIP Transactions, </journal> <volume> Vol. </volume> <publisher> A-56, North-Holland, </publisher> <year> 1994, </year> <pages> 307-326. </pages>
Reference-contexts: The correctness, with respect to certain properties of, can not be shown by this simulator (although for very simple systems it is possible). The correctness of systems is therefore shown with help of a powerful proof system <ref> [5, 6] </ref>. Experience with this proof system shows that a whole range of properties can be proven. Currently ITL is used to specify and verify a general purpose multi-threaded data-flow processor EP/3 [1]. <p> This example will probably require the definition of proof strategies (tactics). These strategies can be defined in PVS to semi-automatically prove certain theorems. Besides proof strategies also compositional proof rules are needed to tackle the EP/3 example. These proof rules are discussed in <ref> [5, 6] </ref>. Because the basic ITL formalism is now encoded the encoding of these proof rules is straight forward. For ITL we also defined constructs to reason about message-passing communication and timing (delay and time-out) using the work on temporal agent model (TAM) [9].
Reference: [6] <author> B. Moszkowski. </author> <title> Using temporal fixpoints to compositionally reason about liveness, </title> <booktitle> in proc. of the 7th BCS FACS Refinement Workshop, </booktitle> <editor> He Jifeng (ed.), </editor> <address> Bath, UK, </address> <year> 1996. </year>
Reference-contexts: The correctness, with respect to certain properties of, can not be shown by this simulator (although for very simple systems it is possible). The correctness of systems is therefore shown with help of a powerful proof system <ref> [5, 6] </ref>. Experience with this proof system shows that a whole range of properties can be proven. Currently ITL is used to specify and verify a general purpose multi-threaded data-flow processor EP/3 [1]. <p> This example will probably require the definition of proof strategies (tactics). These strategies can be defined in PVS to semi-automatically prove certain theorems. Besides proof strategies also compositional proof rules are needed to tackle the EP/3 example. These proof rules are discussed in <ref> [5, 6] </ref>. Because the basic ITL formalism is now encoded the encoding of these proof rules is straight forward. For ITL we also defined constructs to reason about message-passing communication and timing (delay and time-out) using the work on temporal agent model (TAM) [9].
Reference: [7] <author> John Rushby. </author> <title> A tutorial on specification and verification using PVS. </title> <booktitle> In proc. of the First International Symposium of Formal Methods Europe FME '93: Industrial-Strength Formal Methods, </booktitle> <editor> Peter Gorm Larsen (ed.), </editor> <address> 1993, Odense, Denmark, </address> <note> 357406. Check home-page: http://www.csl.sri.com/pvs.html </note>
Reference: [8] <author> J.U. Skakkebk and N. Shankar. </author> <title> Towards a Duration Calculus Proof Assistant in PVS, </title> <booktitle> in proc. of the 3rd International Symposium Formal Techniques in Real-Time and Fault-Tolerant Systems FTRTFT '94, </booktitle> <editor> Hans Langmaack, Willem-Paul de Roever and Jan Vytopil (eds.), </editor> <year> 1994, </year> <title> L ubeck, </title> <booktitle> Germany, </booktitle> <volume> 660 679. </volume>
Reference-contexts: We took as proof tool the prototype verification system (PVS)[7] since it has an excellent reputation and it is easy to use. This proof tool was already used for the embedding of the duration calculus <ref> [8] </ref> which is a descendant of ITL. This embedding was a semantical one, an extra interface was constructed to deal with the syntax of the duration calculus. We didn't want to proceed this way because it means an extra interface to be built.
Reference: [9] <author> D. Scholefield, H. Zedan and J. </author> <title> He. A specification oriented semantics for the refinement of real-time systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 130, </volume> <month> August </month> <year> 1994. </year> <month> 16 </month>
Reference-contexts: These proof rules are discussed in [5, 6]. Because the basic ITL formalism is now encoded the encoding of these proof rules is straight forward. For ITL we also defined constructs to reason about message-passing communication and timing (delay and time-out) using the work on temporal agent model (TAM) <ref> [9] </ref>. The latter has also a refinement calculus which can be easily ported to ITL [2]. These constructs and refinement rules will also be included in the proof assistant.
References-found: 9

