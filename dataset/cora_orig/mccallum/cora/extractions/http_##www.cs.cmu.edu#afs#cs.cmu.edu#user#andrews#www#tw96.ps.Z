URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/user/andrews/www/tw96.ps.Z
Refering-URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/user/andrews/www/tps-papers.html
Root-URL: 
Email: Andrews+@CS.CMU.EDU, mbishop+@CS.CMU.EDU 1  
Title: On Sets, Types, Fixed Points, and Checkerboards  
Author: Peter B. Andrews and Matthew Bishop 
Address: Pittsburgh, PA 15213, U.S.A.  
Affiliation: Mathematics Department, Carnegie Mellon University,  
Abstract: Most current research on automated theorem proving is concerned with proving theorems of first-order logic. We discuss two examples which illustrate the advantages of using higher-order logic in certain contexts. For some purposes type theory is a much more convenient vehicle for formalizing mathematics than axiomatic set theory. Even theorems of first-order logic can sometimes be proven more expeditiously in higher-order logic than in first-order logic. We also note the need to develop automatic theorem-proving methods which may produce proofs which do not have the subformula property. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Peter B. Andrews, </author> <title> An Introduction to Mathematical Logic and Type Theory: To Truth Through Proof, </title> <publisher> Academic Press, </publisher> <year> 1986. </year>
Reference-contexts: However, as a practical matter, it may not be rich enough for certain purposes. For example, in certain contexts, type theory seems to have clear practical advantages over first-order logic. We shall illustrate this point with two examples. 2 Proofs will be presented in the style of <ref> [1] </ref>, and in wffs a dot stands for a left 1 This material is based upon work supported by the National Science Foundation under grant CCR-9201893. 2 Much of the work discussed below was done using the theorem proving system TPS [2], which has been developed in collaboration with Sunil Issar, <p> This is the approach taken by Subramanian [17], who uses certain built-in arithmetic functions and relations. A proof along these lines in pure higher-order logic would require defining these arithmetic concepts. One can certainly do this, as is shown in chapter 6 of <ref> [1] </ref>, but simply borrowing the required theorems from [1] would require introducing an Axiom of Infinity, which does not seem warranted for this problem. Note that while the theorem is true regardless of the size of the checkerboard, the finiteness of the checkerboard is essential. <p> A proof along these lines in pure higher-order logic would require defining these arithmetic concepts. One can certainly do this, as is shown in chapter 6 of <ref> [1] </ref>, but simply borrowing the required theorems from [1] would require introducing an Axiom of Infinity, which does not seem warranted for this problem. Note that while the theorem is true regardless of the size of the checkerboard, the finiteness of the checkerboard is essential. <p> Of course, the notions of finiteness and infinity can be defined in various ways. (See section 60 of <ref> [1] </ref> for a brief discussion of some possibilities.) One way to assert that a set k is infinite is to assert that it contains something which looks like the set of natural numbers as described by Peano's Postulates: there is an initial object in the set, and there is a function <p> Of course, we could use functions rather than the corresponding relations in our proof, but this would require using the Axiom of Descriptions (see section 53 of <ref> [1] </ref>), and we have chosen not to do this here.
Reference: 2. <author> Peter B. Andrews, Matthew Bishop, Sunil Issar, Dan Nesmith, Frank Pfenning, Hongwei Xi, TPS: </author> <title> A Theorem Proving System for Classical Type Theory, </title> <note> Journal of Automated Reasoning (to appear). </note>
Reference-contexts: 2 Proofs will be presented in the style of [1], and in wffs a dot stands for a left 1 This material is based upon work supported by the National Science Foundation under grant CCR-9201893. 2 Much of the work discussed below was done using the theorem proving system TPS <ref> [2] </ref>, which has been developed in collaboration with Sunil Issar, Dan Nesmith, Frank Pfenning, and Hongwei Xi. 2 bracket whose mate is as far to the right as is consistent with the pairing of brackets already present. Quantifiers and negations have the smallest possible scope. <p> First-order logic is simpler than type theory in various ways, but one may pay a considerable price for this apparent simplicity. Let us illustrate this by considering the problem of proving THM15B of <ref> [2] </ref> in Church's type theory [6] and in set theory as formulated in [4]. THM15B asserts that if some iterate of a function f has a unique fixed point, then f has a fixed point. <p> THM15B asserts that if some iterate of a function f has a unique fixed point, then f has a fixed point. A type-theoretic proof of this theorem in natural deduction style which was found automatically in less than six minutes is presented in <ref> [2] </ref>. The proof is 35 lines long, but can easily be made a few lines shorter by (interactively) reorganizing lines 24-28. An interactively generated outline of a proof of this theorem in the set theory of [4] is shown in Figures 2-1 and 2-2. <p> i = s ii 2 i 4 i = s ii 3 i (8) "x i "y i .g iii x y = 1 i g x y = 2 i g x y = 3 i g is a function which describes the tiling. g x y = 1 <ref> [2, 3, 4, respectively] </ref> means that the domino which covers square &lt;x,y&gt; also covers square &lt;sx,y&gt; [&lt;x,sy&gt;, &lt;x-1,y&gt;, &lt;x,y-1&gt;, respectively] (where x-1 means s .s .s .s .s .s .s x), and g x y = 5 means that the square &lt;x,y&gt; is not covered by any domino. (6) asserts that
Reference: 3. <author> Grzegorz Bancerek, </author> <title> "The Mutilated Chessboard Problem - checked by Mizar," </title> <booktitle> in The QED Workshop II, edited by Roman Matuszewski, </booktitle> <year> 1995, </year> <pages> 43-45. </pages> <note> Available from http://www.mcs.anl.gov/qed/index.html </note>
Reference-contexts: In order to define the concepts involved in more sophisticated 7 approaches, higher-order logic is often useful, and sometimes essential. Some treatments of the problem, and references to additional treatments, may be found in <ref> [3] </ref>, [13], [14], [17], [18], and [19] (section 5). It should be noted that most treatments of the problem in the literature solve it in the conceptual sense, but do not actually provide proofs of the theorem in either of McCarthy's original formulations. <p> i = s ii 2 i 4 i = s ii 3 i (8) "x i "y i .g iii x y = 1 i g x y = 2 i g x y = 3 i g is a function which describes the tiling. g x y = 1 <ref> [2, 3, 4, respectively] </ref> means that the domino which covers square &lt;x,y&gt; also covers square &lt;sx,y&gt; [&lt;x,sy&gt;, &lt;x-1,y&gt;, &lt;x,y-1&gt;, respectively] (where x-1 means s .s .s .s .s .s .s x), and g x y = 5 means that the square &lt;x,y&gt; is not covered by any domino. (6) asserts that
Reference: 4. <author> Robert Boyer, Ewing Lusk, William McCune, Ross Overbeek, Mark Stickel, and Lawrence Wos, </author> <title> Set Theory in First-Order Logic: Clauses for Go"del's Axioms, </title> <booktitle> Journal of Automated Reasoning 2 (1986), </booktitle> <pages> 287-327. </pages>
Reference-contexts: The Fixed Point Theorem The best developed logical systems for formalizing mathematics are (1) various formulations of axiomatic set theory in first-order logic and (2) type theory (otherwise known as higher-order logic). The formulation of set theory in <ref> [4] </ref> seems particularly well suited to automated deduction, since it is finitely axiomatised, and has been enhanced with function constants to denote such operations as forming ordered pairs, intersections of sets, etc. <p> First-order logic is simpler than type theory in various ways, but one may pay a considerable price for this apparent simplicity. Let us illustrate this by considering the problem of proving THM15B of [2] in Church's type theory [6] and in set theory as formulated in <ref> [4] </ref>. THM15B asserts that if some iterate of a function f has a unique fixed point, then f has a fixed point. A type-theoretic proof of this theorem in natural deduction style which was found automatically in less than six minutes is presented in [2]. <p> The proof is 35 lines long, but can easily be made a few lines shorter by (interactively) reorganizing lines 24-28. An interactively generated outline of a proof of this theorem in the set theory of <ref> [4] </ref> is shown in Figures 2-1 and 2-2. <p> The proof contains 47 lines, but we have numbered them to reflect our estimate of what the proof would look like if all the details were filled in. The notation is closely related to that used in <ref> [4] </ref>. Mx means that x is a set, [NOP x y] (written as -x,y- in [4]) is the nonordered pair formed from x and y, [OP x y] (written as &lt;x,y&gt; in [4]) is the ordered pair formed from x and y, and [APPLY f y] is the result of applying <p> The notation is closely related to that used in <ref> [4] </ref>. Mx means that x is a set, [NOP x y] (written as -x,y- in [4]) is the nonordered pair formed from x and y, [OP x y] (written as &lt;x,y&gt; in [4]) is the ordered pair formed from x and y, and [APPLY f y] is the result of applying f to y. [ITERATE f g] is an abbreviation for the wff in line (7) <p> The notation is closely related to that used in <ref> [4] </ref>. Mx means that x is a set, [NOP x y] (written as -x,y- in [4]) is the nonordered pair formed from x and y, [OP x y] (written as &lt;x,y&gt; in [4]) is the ordered pair formed from x and y, and [APPLY f y] is the result of applying f to y. [ITERATE f g] is an abbreviation for the wff in line (7) of the proof. <p> This shows that [f x] is also a fixed point of g, so by the uniqueness of x, (9041) f x = x. The proof contains three gaps. Line (9030) is Lemma 26 of <ref> [4] </ref> and line (8518) is a lemma about the associativity of composition which must be proved. In type theory this is trivial, since functions are primitive, and g ab f bg is defined to be lx g g ab [f bg x]. <p> f f = f f Assert REFL= (8011)8009 |- M f .f e P f f = f f UI: f 8009 (8012)1,8009 |- f e P RuleP: 1 8010 8011 (8013)8013 |- j e P M.j f Hyp (8015) |- "x "y.x e y M x Axiom A-2 of <ref> [4] </ref> (8016) |- j e P M j UI : 8015 (8017)8009,8013 |- f j = j f RuleP: 8013 8014 8016 ... (8518) |- "f "g "h.f [g h] = [f g] h Lemma (8519) |- f [j f] = [f j] f UI: 8518 Sub=: 8519 8017 f [j <p> (8528)8009 |- M g .g e P f g = g f UI: g 8009 (8529)1,3,8009 |- f g = g f RuleP: 3 8527 8528 ... (9030) |- "f "g "x.FUNCTION f x e DOM f APPLY g [APPLY f x] = APPLY [g f] x Lemma 26 of <ref> [4] </ref> (9031) |- FUNCTION f x e DOM f APPLY g [APPLY f x] = APPLY [g f] x UI: 9030 (9032)1,3,5 |- APPLY g [APPLY f x] = APPLY [g f] x RuleP: 1 5 9031 (9033) |- FUNCTION g x e DOM g APPLY f [APPLY g x] = <p> It seems clear that any procedure which searched blindly for a proof of THM15B at a sufficient depth to generate this proof (in any format) would be searching in an extremely large search space. The authors of <ref> [4] </ref> presented their system of set theory as a vehicle for generating difficult problems for resolution-based theorem provers. In this they were surely successful. <p> i = s ii 2 i 4 i = s ii 3 i (8) "x i "y i .g iii x y = 1 i g x y = 2 i g x y = 3 i g is a function which describes the tiling. g x y = 1 <ref> [2, 3, 4, respectively] </ref> means that the domino which covers square &lt;x,y&gt; also covers square &lt;sx,y&gt; [&lt;x,sy&gt;, &lt;x-1,y&gt;, &lt;x,y-1&gt;, respectively] (where x-1 means s .s .s .s .s .s .s x), and g x y = 5 means that the square &lt;x,y&gt; is not covered by any domino. (6) asserts that
Reference: 5. <author> Samuel R. Buss, </author> <title> On Go"del's Theorem on Lengths of Proofs I: Number of Lines and Speedup for Arithmetic, </title> <journal> Journal of Symbolic Logic 59 (1994), </journal> <pages> 737-756. </pages>
Reference-contexts: the logic of the next higher order has the effect, not only of making provable certain propositions that were not provable before, but also of making it possible to shorten, by an extraordinary amount, infinitely many of the proofs already available." A complete proof of this may be found in <ref> [5] </ref>.
Reference: 6. <author> Alonzo Church, </author> <title> A Formulation of the Simple Theory of Types, </title> <journal> Journal of Symbolic Logic 5 (1940), </journal> <pages> 56-68. </pages>
Reference-contexts: First-order logic is simpler than type theory in various ways, but one may pay a considerable price for this apparent simplicity. Let us illustrate this by considering the problem of proving THM15B of [2] in Church's type theory <ref> [6] </ref> and in set theory as formulated in [4]. THM15B asserts that if some iterate of a function f has a unique fixed point, then f has a fixed point.
Reference: 7. <author> James Glanz, </author> <title> Computer Scientists Rethink Their Discipline's Foundations, </title> <booktitle> Science 269 (September 1995), </booktitle> <pages> 1363-1364. </pages>
Reference-contexts: However, this will change. Radically new computers based on exotic technologies such as DNA computing, quantum computing, and optical circuitry are on the horizon <ref> [7] </ref> [11]. As better hardware is combined with increasingly versatile, sophisticated, and friendly tools for using rigorous logic in practical ways, there will be a revolution in the foundations and developmental methodologies of many intellectual disciplines.
Reference: 8. <author> Kurt Go"del, </author> <title> U"ber die La"nge von Beweisen, Ergebnisse eines Mathematischen Kolloquiums (1936), 23-24. </title> <booktitle> Translated in [10], </booktitle> <pages> pp. 396-399. </pages>
Reference-contexts: If one adds an odd number of occurrences of s ii , the theorem is still provable, since the number of squares is odd, but our proof of (230) will fail.) We are reminded of Go"del's assertion in <ref> [8] </ref> that "passing to the logic of the next higher order has the effect, not only of making provable certain propositions that were not provable before, but also of making it possible to shorten, by an extraordinary amount, infinitely many of the proofs already available." A complete proof of this may
Reference: 9. <author> Kurt Go"del, </author> <title> The Consistency of the Axiom of Choice and of the Generalized Continuum Hypothesis with the Axioms of Set Theory, </title> <publisher> Princeton University Press, Princeton, </publisher> <year> 1940. </year>
Reference-contexts: In order to prove a theorem of the form $P "x 1 ... "x n . M x 1 ... M x n [&lt;x 1 ... x n &gt; e P A], one proceeds by structural induction on A, as in Go"del's proof (page 8 of <ref> [9] </ref>) of the General Existence Theorem. Let us illustrate this procedure.
Reference: 10. <author> Kurt Go"del, </author> <title> Collected Works, Volume I, </title> <publisher> Oxford University Press, </publisher> <year> 1986. </year>
Reference: 11. <author> Seth Lloyd, </author> <title> Quantum-Mechanical Computers, </title> <booktitle> Scientific American 273 (October 1995), </booktitle> <pages> 140-145. </pages>
Reference-contexts: However, this will change. Radically new computers based on exotic technologies such as DNA computing, quantum computing, and optical circuitry are on the horizon [7] <ref> [11] </ref>. As better hardware is combined with increasingly versatile, sophisticated, and friendly tools for using rigorous logic in practical ways, there will be a revolution in the foundations and developmental methodologies of many intellectual disciplines.
Reference: 12. <author> John McCarthy. </author> <title> A Tough Nut for Proof Procedures, </title> <journal> Stanford Artificial Intelligence Project Memo No. </journal> <volume> 16, </volume> <year> 1964. </year> <note> Available from http://www-formal.stanford.edu/jmc/. 15 </note>
Reference-contexts: Next we turn to an example where higher-order concepts are useful in proving a genuinely first-order theorem. 3. McCarthy's Tough Nut In 1964 John McCarthy wrote the memo <ref> [12] </ref>, which is about a mutilated checkerboard, such as is shown in Figure 3-1, and by now various versions of the problem are well known. The problem is to prove that the mutilated checkerboard cannot be tiled by dominoes, each of which covers exactly two adjacent squares. <p> All the lines of the proof below except the last line (900) are derived from it. Lines (1)-(8) are the sentences in the elegant and concise second formulation of the problem in <ref> [12] </ref>. (1) s ii [s .s .s .s .s .s .s 8 i ] = 8 (3) "x i "y i .g iii x y = 5 i .x = 8 i y = 8 (4) "x i "y i .g iii x y = 1 i g [s ii x]
Reference: 13. <author> John McCarthy. </author> <note> http://www-formal.stanford.edu/jmc/nut.html., </note>
Reference-contexts: In order to define the concepts involved in more sophisticated 7 approaches, higher-order logic is often useful, and sometimes essential. Some treatments of the problem, and references to additional treatments, may be found in [3], <ref> [13] </ref>, [14], [17], [18], and [19] (section 5). It should be noted that most treatments of the problem in the literature solve it in the conceptual sense, but do not actually provide proofs of the theorem in either of McCarthy's original formulations. One exception to this is discussed in [15].
Reference: 14. <author> John McCarthy, </author> <title> "The Mutilated Checkerboard in Set Theory," </title> <booktitle> in The QED Workshop II, edited by Roman Matuszewski, </booktitle> <year> 1995, </year> <pages> 25-26. </pages> <note> Available from http://www.mcs.anl.gov/qed/index.html. </note>
Reference-contexts: In order to define the concepts involved in more sophisticated 7 approaches, higher-order logic is often useful, and sometimes essential. Some treatments of the problem, and references to additional treatments, may be found in [3], [13], <ref> [14] </ref>, [17], [18], and [19] (section 5). It should be noted that most treatments of the problem in the literature solve it in the conceptual sense, but do not actually provide proofs of the theorem in either of McCarthy's original formulations. One exception to this is discussed in [15].
Reference: 15. <author> William McCune, </author> <title> Another Crack in a Tough Nut, </title> <booktitle> Association for Automated Reasoning Newsletter 31 (1995), </booktitle> <pages> 1-3. </pages>
Reference-contexts: It should be noted that most treatments of the problem in the literature solve it in the conceptual sense, but do not actually provide proofs of the theorem in either of McCarthy's original formulations. One exception to this is discussed in <ref> [15] </ref>. McCune reports that when he applied a program called MACE, which searches for finite models, to McCarthy's first formulation of the problem, MACE determined in a minute or two that there are no models of size 8.
Reference: 16. <author> Richard Statman, </author> <title> Bounds for Proof Search and Speed-up in the Predicate Calculus, </title> <booktitle> Annals of Mathematical Logic 15 (1978), </booktitle> <pages> 225-287. </pages>
Reference-contexts: Go"del was actually referring to n-th order arithmetic when he wrote n-th order logic, but a related result by Statman (Proposition 6.3.5 of <ref> [16] </ref>) establishes that the minimal length of a proof in first-order logic of a wff of first-order logic may be extraordinarily longer than that the minimal length of a proof of the same wff in second-order logic.
Reference: 17. <author> Sakthi Subramanian, </author> <title> An Interactive Solution to the n x n Mutilated Checkerboard Problem, </title> <note> Journal of Logic and Computation (to appear). </note>
Reference-contexts: In order to define the concepts involved in more sophisticated 7 approaches, higher-order logic is often useful, and sometimes essential. Some treatments of the problem, and references to additional treatments, may be found in [3], [13], [14], <ref> [17] </ref>, [18], and [19] (section 5). It should be noted that most treatments of the problem in the literature solve it in the conceptual sense, but do not actually provide proofs of the theorem in either of McCarthy's original formulations. One exception to this is discussed in [15]. <p> This is the approach taken by Subramanian <ref> [17] </ref>, who uses certain built-in arithmetic functions and relations. A proof along these lines in pure higher-order logic would require defining these arithmetic concepts.
Reference: 18. <author> Thomas E. Uribe and Mark E. Stickel, </author> <title> "Ordered Binary Decision Diagrams and the Davis-Putnam Procedure," </title> <booktitle> in Proceedings of the First International Conference on Constraints in Computational Logics, </booktitle> <editor> edited by J. P. Jouannaud, </editor> <booktitle> Lecture Notes in Computer Science 845, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1994, </year> <pages> 34-49. </pages>
Reference-contexts: In order to define the concepts involved in more sophisticated 7 approaches, higher-order logic is often useful, and sometimes essential. Some treatments of the problem, and references to additional treatments, may be found in [3], [13], [14], [17], <ref> [18] </ref>, and [19] (section 5). It should be noted that most treatments of the problem in the literature solve it in the conceptual sense, but do not actually provide proofs of the theorem in either of McCarthy's original formulations. One exception to this is discussed in [15].
Reference: 19. <author> Larry Wos, Ross Overbeek, Ewing Lusk, Jim Boyle, </author> <title> Automated Reasoning. Introduction and Applications, </title> <publisher> Prentice Hall, </publisher> <year> 1984. </year> <title> i Table of Contents </title>
Reference-contexts: In order to define the concepts involved in more sophisticated 7 approaches, higher-order logic is often useful, and sometimes essential. Some treatments of the problem, and references to additional treatments, may be found in [3], [13], [14], [17], [18], and <ref> [19] </ref> (section 5). It should be noted that most treatments of the problem in the literature solve it in the conceptual sense, but do not actually provide proofs of the theorem in either of McCarthy's original formulations. One exception to this is discussed in [15].
Reference: 1. <institution> Introduction 1 </institution>
Reference-contexts: However, as a practical matter, it may not be rich enough for certain purposes. For example, in certain contexts, type theory seems to have clear practical advantages over first-order logic. We shall illustrate this point with two examples. 2 Proofs will be presented in the style of <ref> [1] </ref>, and in wffs a dot stands for a left 1 This material is based upon work supported by the National Science Foundation under grant CCR-9201893. 2 Much of the work discussed below was done using the theorem proving system TPS [2], which has been developed in collaboration with Sunil Issar, <p> This is the approach taken by Subramanian [17], who uses certain built-in arithmetic functions and relations. A proof along these lines in pure higher-order logic would require defining these arithmetic concepts. One can certainly do this, as is shown in chapter 6 of <ref> [1] </ref>, but simply borrowing the required theorems from [1] would require introducing an Axiom of Infinity, which does not seem warranted for this problem. Note that while the theorem is true regardless of the size of the checkerboard, the finiteness of the checkerboard is essential. <p> A proof along these lines in pure higher-order logic would require defining these arithmetic concepts. One can certainly do this, as is shown in chapter 6 of <ref> [1] </ref>, but simply borrowing the required theorems from [1] would require introducing an Axiom of Infinity, which does not seem warranted for this problem. Note that while the theorem is true regardless of the size of the checkerboard, the finiteness of the checkerboard is essential. <p> Of course, the notions of finiteness and infinity can be defined in various ways. (See section 60 of <ref> [1] </ref> for a brief discussion of some possibilities.) One way to assert that a set k is infinite is to assert that it contains something which looks like the set of natural numbers as described by Peano's Postulates: there is an initial object in the set, and there is a function <p> Of course, we could use functions rather than the corresponding relations in our proof, but this would require using the Axiom of Descriptions (see section 53 of <ref> [1] </ref>), and we have chosen not to do this here.
Reference: 2. <institution> The Fixed Point Theorem 2 </institution>
Reference-contexts: 2 Proofs will be presented in the style of [1], and in wffs a dot stands for a left 1 This material is based upon work supported by the National Science Foundation under grant CCR-9201893. 2 Much of the work discussed below was done using the theorem proving system TPS <ref> [2] </ref>, which has been developed in collaboration with Sunil Issar, Dan Nesmith, Frank Pfenning, and Hongwei Xi. 2 bracket whose mate is as far to the right as is consistent with the pairing of brackets already present. Quantifiers and negations have the smallest possible scope. <p> First-order logic is simpler than type theory in various ways, but one may pay a considerable price for this apparent simplicity. Let us illustrate this by considering the problem of proving THM15B of <ref> [2] </ref> in Church's type theory [6] and in set theory as formulated in [4]. THM15B asserts that if some iterate of a function f has a unique fixed point, then f has a fixed point. <p> THM15B asserts that if some iterate of a function f has a unique fixed point, then f has a fixed point. A type-theoretic proof of this theorem in natural deduction style which was found automatically in less than six minutes is presented in <ref> [2] </ref>. The proof is 35 lines long, but can easily be made a few lines shorter by (interactively) reorganizing lines 24-28. An interactively generated outline of a proof of this theorem in the set theory of [4] is shown in Figures 2-1 and 2-2. <p> i = s ii 2 i 4 i = s ii 3 i (8) "x i "y i .g iii x y = 1 i g x y = 2 i g x y = 3 i g is a function which describes the tiling. g x y = 1 <ref> [2, 3, 4, respectively] </ref> means that the domino which covers square &lt;x,y&gt; also covers square &lt;sx,y&gt; [&lt;x,sy&gt;, &lt;x-1,y&gt;, &lt;x,y-1&gt;, respectively] (where x-1 means s .s .s .s .s .s .s x), and g x y = 5 means that the square &lt;x,y&gt; is not covered by any domino. (6) asserts that
Reference: 3. <institution> McCarthy's Tough Nut 6 </institution>
Reference-contexts: In order to define the concepts involved in more sophisticated 7 approaches, higher-order logic is often useful, and sometimes essential. Some treatments of the problem, and references to additional treatments, may be found in <ref> [3] </ref>, [13], [14], [17], [18], and [19] (section 5). It should be noted that most treatments of the problem in the literature solve it in the conceptual sense, but do not actually provide proofs of the theorem in either of McCarthy's original formulations. <p> i = s ii 2 i 4 i = s ii 3 i (8) "x i "y i .g iii x y = 1 i g x y = 2 i g x y = 3 i g is a function which describes the tiling. g x y = 1 <ref> [2, 3, 4, respectively] </ref> means that the domino which covers square &lt;x,y&gt; also covers square &lt;sx,y&gt; [&lt;x,sy&gt;, &lt;x-1,y&gt;, &lt;x,y-1&gt;, respectively] (where x-1 means s .s .s .s .s .s .s x), and g x y = 5 means that the square &lt;x,y&gt; is not covered by any domino. (6) asserts that
Reference: 4. <institution> Conclusion 13 </institution>
Reference-contexts: The Fixed Point Theorem The best developed logical systems for formalizing mathematics are (1) various formulations of axiomatic set theory in first-order logic and (2) type theory (otherwise known as higher-order logic). The formulation of set theory in <ref> [4] </ref> seems particularly well suited to automated deduction, since it is finitely axiomatised, and has been enhanced with function constants to denote such operations as forming ordered pairs, intersections of sets, etc. <p> First-order logic is simpler than type theory in various ways, but one may pay a considerable price for this apparent simplicity. Let us illustrate this by considering the problem of proving THM15B of [2] in Church's type theory [6] and in set theory as formulated in <ref> [4] </ref>. THM15B asserts that if some iterate of a function f has a unique fixed point, then f has a fixed point. A type-theoretic proof of this theorem in natural deduction style which was found automatically in less than six minutes is presented in [2]. <p> The proof is 35 lines long, but can easily be made a few lines shorter by (interactively) reorganizing lines 24-28. An interactively generated outline of a proof of this theorem in the set theory of <ref> [4] </ref> is shown in Figures 2-1 and 2-2. <p> The proof contains 47 lines, but we have numbered them to reflect our estimate of what the proof would look like if all the details were filled in. The notation is closely related to that used in <ref> [4] </ref>. Mx means that x is a set, [NOP x y] (written as -x,y- in [4]) is the nonordered pair formed from x and y, [OP x y] (written as &lt;x,y&gt; in [4]) is the ordered pair formed from x and y, and [APPLY f y] is the result of applying <p> The notation is closely related to that used in <ref> [4] </ref>. Mx means that x is a set, [NOP x y] (written as -x,y- in [4]) is the nonordered pair formed from x and y, [OP x y] (written as &lt;x,y&gt; in [4]) is the ordered pair formed from x and y, and [APPLY f y] is the result of applying f to y. [ITERATE f g] is an abbreviation for the wff in line (7) <p> The notation is closely related to that used in <ref> [4] </ref>. Mx means that x is a set, [NOP x y] (written as -x,y- in [4]) is the nonordered pair formed from x and y, [OP x y] (written as &lt;x,y&gt; in [4]) is the ordered pair formed from x and y, and [APPLY f y] is the result of applying f to y. [ITERATE f g] is an abbreviation for the wff in line (7) of the proof. <p> This shows that [f x] is also a fixed point of g, so by the uniqueness of x, (9041) f x = x. The proof contains three gaps. Line (9030) is Lemma 26 of <ref> [4] </ref> and line (8518) is a lemma about the associativity of composition which must be proved. In type theory this is trivial, since functions are primitive, and g ab f bg is defined to be lx g g ab [f bg x]. <p> f f = f f Assert REFL= (8011)8009 |- M f .f e P f f = f f UI: f 8009 (8012)1,8009 |- f e P RuleP: 1 8010 8011 (8013)8013 |- j e P M.j f Hyp (8015) |- "x "y.x e y M x Axiom A-2 of <ref> [4] </ref> (8016) |- j e P M j UI : 8015 (8017)8009,8013 |- f j = j f RuleP: 8013 8014 8016 ... (8518) |- "f "g "h.f [g h] = [f g] h Lemma (8519) |- f [j f] = [f j] f UI: 8518 Sub=: 8519 8017 f [j <p> (8528)8009 |- M g .g e P f g = g f UI: g 8009 (8529)1,3,8009 |- f g = g f RuleP: 3 8527 8528 ... (9030) |- "f "g "x.FUNCTION f x e DOM f APPLY g [APPLY f x] = APPLY [g f] x Lemma 26 of <ref> [4] </ref> (9031) |- FUNCTION f x e DOM f APPLY g [APPLY f x] = APPLY [g f] x UI: 9030 (9032)1,3,5 |- APPLY g [APPLY f x] = APPLY [g f] x RuleP: 1 5 9031 (9033) |- FUNCTION g x e DOM g APPLY f [APPLY g x] = <p> It seems clear that any procedure which searched blindly for a proof of THM15B at a sufficient depth to generate this proof (in any format) would be searching in an extremely large search space. The authors of <ref> [4] </ref> presented their system of set theory as a vehicle for generating difficult problems for resolution-based theorem provers. In this they were surely successful. <p> i = s ii 2 i 4 i = s ii 3 i (8) "x i "y i .g iii x y = 1 i g x y = 2 i g x y = 3 i g is a function which describes the tiling. g x y = 1 <ref> [2, 3, 4, respectively] </ref> means that the domino which covers square &lt;x,y&gt; also covers square &lt;sx,y&gt; [&lt;x,sy&gt;, &lt;x-1,y&gt;, &lt;x,y-1&gt;, respectively] (where x-1 means s .s .s .s .s .s .s x), and g x y = 5 means that the square &lt;x,y&gt; is not covered by any domino. (6) asserts that
Reference: 5. <institution> References 14 ii </institution>
Reference-contexts: the logic of the next higher order has the effect, not only of making provable certain propositions that were not provable before, but also of making it possible to shorten, by an extraordinary amount, infinitely many of the proofs already available." A complete proof of this may be found in <ref> [5] </ref>.
References-found: 24

