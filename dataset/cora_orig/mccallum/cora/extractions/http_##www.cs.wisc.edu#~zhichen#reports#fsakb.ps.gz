URL: http://www.cs.wisc.edu/~zhichen/reports/fsakb.ps.gz
Refering-URL: http://www.cs.wisc.edu/~zhichen/zhichen.html
Root-URL: 
Title: FSA/KB: an Object-Oriented Knowledge Base System  
Author: Zhichen Xu, Xiaohong Guo, Jiahua Qian 
Note: Shanghai 200433, P. R. China  
Affiliation: Department of Computer Science Fudan University,  
Abstract: FSA/KB is an Object-Oriented Knowledge Base System of the Software Development Environment FSA ( Fudan Software Automation ). It manages various kinds of knowledge in an uniform Object-Oriented fashion. The knowledge it manages includes: descriptions of all FSA components, programming knowledge in rule form, user domain knowledge and products in the process of program transformation ( eg., specification, partially transformed specification, target code ). FSA/KB provides the other subsystems of FSA with an interface which consists of a rich set of utilities. The other subsystems query and modify the knowledge base through the interface. In this paper we described the hierarchical implementation, consistency control, state control mechanism and the knowledge base-supported program transformation of FSA.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Balzer. </author> <title> "A 15 Years Perspective on Automatic Programming", </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol. SE-11, NO.11, </volume> <pages> pp. 1257-1268, </pages> <month> Nov. </month> <note> 1985 11 [2] "FASL Language manual", </note> <institution> FSA Project Group, Computer Science Department, Fudan Uni--versity. </institution> <month> Dec. </month> <year> 1988 </year>
Reference: [3] <author> P. Lee, and U. Pleban. </author> <title> "A Realistic Compiler Generator Based on High-Level Semantics", Ergo Report 00-057 The University of michign, 1988 [4] "Refine Users Guide", Reasoning Systems, </title> <publisher> Inc., </publisher> <month> Sept. </month> <year> 1987 </year>
Reference-contexts: The compiler of FSAL, which consists of a macro semantic analyzer and a micro semantic analyzer [13], uses the technique of high-level semantics <ref> [3] </ref> to describe the semantics of FSAL. The high-level semantics separates the model-independent macro semantics (static semantic) from model-dependent micro semantics (dynamic semantics) of FSAL explicitly.
Reference: [5] <editor> Deux et al., </editor> <title> "The Story of O2", </title> <journal> IEEE Trans. Knowledge and Data Eng., Vol.2, </journal> <volume> No.1, </volume> <year> 1990, </year> <month> pp109-124 </month>
Reference-contexts: Consequently the latest version becomes the old version. This approach may be used to reduce the number of the procedures in the exception handling procedure sequence. To resolve the last problem, recompiling the method, FSA/KB adopt the approach similar to O2 system <ref> [5] </ref>. There are two kinds of running models in FSA/KB: the development model and the execution model. Development model is used in software development phase to support the running of a prototype, and execution model is used to support the running of the actual objective system.
Reference: [6] <author> D. R. Smith, G. B. Kotic, and S. J. Westfold. </author> <title> "Research on Knowledge-Based Software Environments at Kestrel Institute", </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol. SE-11, No. 11, </volume> <pages> pp 1278-1295, </pages> <month> Nov. </month> <year> 1985 </year>
Reference-contexts: The design and implementation of FSA makes full use of experiences of other software automation systems. Some famous software automation systems and prototype systems include: PA of the MIT [8], CHI <ref> [6] </ref> and KIDs [7] of Kestral Institute and Refine [4] of Reasoning Systems. 2 The Object-Oriented data model and the hierarchical imple mentation of FSA/KB 2.0.1 The Object-Oriented data model FSA/KB adopts the object-oriented model. Class, Object, Attribute and method are the key concepts of FSA/KB.
Reference: [7] <author> D. R. Smith. </author> <title> "KIDS-A Knowledge-Based Software Development System", </title> <booktitle> Proceedings of the Workshop on Automating Software Design, AAAI-88, </booktitle> <pages> pp 129-136, </pages> <year> 1988 </year>
Reference-contexts: The design and implementation of FSA makes full use of experiences of other software automation systems. Some famous software automation systems and prototype systems include: PA of the MIT [8], CHI [6] and KIDs <ref> [7] </ref> of Kestral Institute and Refine [4] of Reasoning Systems. 2 The Object-Oriented data model and the hierarchical imple mentation of FSA/KB 2.0.1 The Object-Oriented data model FSA/KB adopts the object-oriented model. Class, Object, Attribute and method are the key concepts of FSA/KB.
Reference: [8] <author> R. C. Waters. </author> <title> "The Programmers Apprentice: A Session with KBEmacs", </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol. SE-11, No. 11, </volume> <pages> pp 1296-1320, </pages> <month> Nov. </month> <year> 1985 </year>
Reference-contexts: The design and implementation of FSA makes full use of experiences of other software automation systems. Some famous software automation systems and prototype systems include: PA of the MIT <ref> [8] </ref>, CHI [6] and KIDs [7] of Kestral Institute and Refine [4] of Reasoning Systems. 2 The Object-Oriented data model and the hierarchical imple mentation of FSA/KB 2.0.1 The Object-Oriented data model FSA/KB adopts the object-oriented model. Class, Object, Attribute and method are the key concepts of FSA/KB.
Reference: [9] <author> S. Zdonik, </author> <title> "Object-Oriented Type Evolution", </title> <booktitle> in Advances in Database Programming Languages, </booktitle> <editor> F. Bancilhon and P. Buneman, eds., </editor> <publisher> Addison Wesley, </publisher> <address> Reading Mass., </address> <year> 1990, </year> <pages> pp 277-288 </pages>
Reference-contexts: There are generally two kinds of approaches: the deferred approach and the immediate approach. Deferred Approach delays the application of change to objects, even indefinitely. Zdonik gave an approach based on class version <ref> [9] </ref>. After the class is modified, a new version of the class will be generated at once.
Reference: [10] <author> W. Kim et al., </author> <title> "Architecture of the Orion Next-Generation Database System", </title> <journal> IEEE Trans. Knowledge and Data Eng. Vol.2, </journal> <volume> No.1, </volume> <year> 1990 </year>
Reference-contexts: In Avance system [11] and Orion <ref> [10] </ref>, the version-based approach has been proved to be very effective. Immediate Approach propagation to the instances is done immediately after the modification to the class.
Reference: [11] <author> A. Bjonerstedt and C. hulten, </author> <title> "Version Control in an Object-Oriented Architecture", in Object-Oriented Concepts, Databases, and Applications, </title> <editor> W. Kim and F. Lochov sky. eds., </editor> <publisher> Addison-Wesley Reading, </publisher> <address> Mass., </address> <year> 1989, </year> <month> pp451-485 </month>
Reference-contexts: In Avance system <ref> [11] </ref> and Orion [10], the version-based approach has been proved to be very effective. Immediate Approach propagation to the instances is done immediately after the modification to the class.
Reference: [12] <author> Jiang Wenqian. </author> <title> "Knowledge Base System in Software Automation Environment: Design and Implementation", </title> <type> Master's Thesis, </type> <institution> Fudan Uni. </institution> <year> 1991 </year>
Reference-contexts: A class inherits the attributes and methods from its super class; The instances of a class are also viewed as the instances of its super class. 2 2.1 The Hierarchical Implementation of FSA/KB The implementation of FSA/KB forms a hierarchical architecture <ref> [12] </ref>. The hierarchical architecture can be illustrated as follows (figure 2 omitted): The interface layer of the knowledge base provides users and other subparts of FSA with an interface to access the knowledge base.
Reference: [13] <author> Hong Mei. </author> <title> Design and Implementation of the Compiler for Wide-Spectrum Language FSAL, </title> <type> Master's Thesis, </type> <institution> Fudan Uni. </institution> <year> 1991 </year>
Reference-contexts: FSAL/UNPARSER can convert the AST back into FSAL source code when the AST is modified and the FSAL specification correspond to the AST is subject to recompiling. The compiler of FSAL, which consists of a macro semantic analyzer and a micro semantic analyzer <ref> [13] </ref>, uses the technique of high-level semantics [3] to describe the semantics of FSAL. The high-level semantics separates the model-independent macro semantics (static semantic) from model-dependent micro semantics (dynamic semantics) of FSAL explicitly.
Reference: [14] <author> Penedo, M., Ploedereder, E., Thomas, I., </author> <booktitle> "Object Management Issues for Software Engineering Environments (Workshop Report)"; Proceedings of the ACM SIGSOFT/SIG PLAN Software Engineering Symposium on Practical Software Development Environments, </booktitle> <year> 1988, </year> <pages> pp 226-234 12 </pages>
Reference-contexts: The hierarchical implementation makes the interfaces between various implementation layers of FSA/KB explicit and transparent thus FSA/KB itself is easy to maintain and highly extensible. 3 The issues of the knowledge base consistency Object management systems have been identified as the core of object-oriented software development environments <ref> [14] </ref>. The most important issue on object management systems is how to 3 maintain the consistency of the object base consisting of the vast amount of objects.
References-found: 12

