URL: http://robotics.eecs.berkeley.edu/~lygeros/Postscript/DIMACS.ps
Refering-URL: http://robotics.eecs.berkeley.edu/~lygeros/Publications/game_memo.html
Root-URL: 
Email: lygeros, godbole, sastry@robotics.eecs.berkeley.edu  
Title: A Game Theoretic Approach to Hybrid System Design  
Author: John Lygeros, Datta N. Godbole and Shankar Sastry 
Address: Berkeley, CA 94720  
Affiliation: Intelligent Machines and Robotics Laboratory University of California, Berkeley  
Abstract: We present a design and verification methodology for hybrid dynamical systems. Our approach is based on optimal control and game theory. The hybrid design is seen as a game between two players. One is the disturbances that enter the dynamics. The disturbances can encode the actions of other agents (in a multi-agent setting), the actions of high level controllers or unmodeled environmental disturbances. The second player is the control, which is to be chosen by the designer. The two players compete over cost functions that encode the properties that the closed loop hybrid system needs to satisfy (e.g. safety). The control "wins" the game if it can keep the system "safe" for any allowable disturbance. The solution to the game theory problem provides the designer with continuous controllers as well as sets of safe states where the control "wins" the game. These safe sets can be used to construct an interface that guarantees the safe operation of the combined hybrid system. Extensions of this approach can also be used for verification of hybrid systems as well as the generation of abstractions of the lower layer behavior (e.g. timed abstractions).
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> R. Alur, C. Courcoubetis, and D. Dill, </author> <title> "Model checking for real-time systems," </title> <booktitle> Logic in Computer Science, </booktitle> <pages> pp. 414-425, </pages> <year> 1990. </year>
Reference-contexts: This approach has been motivated by the success of automatic verification techniques for finite state machines and the fact that many hybrid designs already operating in practice need to be verified, without having to redesign them from scratch. Verification algorithms for finite state machines, timed automata <ref> [1] </ref> and linear hybrid systems [2] have been developed and efficient programs exist to implement them (COSPAN [3], HSIS [4], STATE-MATE [5], KRONOS [6], HyTech [7] etc.). <p> As the logarithm function is monotone, the above conditions are the same as the ones in the theorem statement. 2 The Possible Role of Coordination. If the sensors were placed improperly, for example S 1 &gt; 2v 2 ln <ref> ( C 1 90 ffi ) </ref>, the above analysis can not guarantee a safe controller.
Reference: 2. <author> A. Puri and P. Varaiya, </author> <title> "Decidebility of hybrid systems with rectangular differential inclusions," </title> <booktitle> in Computer Aided Verification, </booktitle> <pages> pp. 95-104, </pages> <year> 1994. </year>
Reference-contexts: Verification algorithms for finite state machines, timed automata [1] and linear hybrid systems <ref> [2] </ref> have been developed and efficient programs exist to implement them (COSPAN [3], HSIS [4], STATE-MATE [5], KRONOS [6], HyTech [7] etc.).
Reference: 3. <author> Z. Har'El and R. Kurshan, </author> <title> Cospan User's Guide. </title> <institution> AT&T Bell Laboratories, </institution> <year> 1987. </year>
Reference-contexts: Verification algorithms for finite state machines, timed automata [1] and linear hybrid systems [2] have been developed and efficient programs exist to implement them (COSPAN <ref> [3] </ref>, HSIS [4], STATE-MATE [5], KRONOS [6], HyTech [7] etc.). They have proved very successful in verification problems for communication protocols, software algorithms, digital 2 The consequences could be catastrophic if the centralized controller is disabled circuit design and real-time software.
Reference: 4. <author> Adnan Aziz, et al., "HSIS: </author> <title> a BDD-based environment for formal verification," </title> <booktitle> in ACM/IEEE International Conference on CAD, </booktitle> <year> 1994. </year>
Reference-contexts: Verification algorithms for finite state machines, timed automata [1] and linear hybrid systems [2] have been developed and efficient programs exist to implement them (COSPAN [3], HSIS <ref> [4] </ref>, STATE-MATE [5], KRONOS [6], HyTech [7] etc.). They have proved very successful in verification problems for communication protocols, software algorithms, digital 2 The consequences could be catastrophic if the centralized controller is disabled circuit design and real-time software.
Reference: 5. <author> M. Heymann, </author> <title> "Hierarchical decomposition of hybrid systems." </title> <type> (preprint), </type> <year> 1994. </year>
Reference-contexts: Verification algorithms for finite state machines, timed automata [1] and linear hybrid systems [2] have been developed and efficient programs exist to implement them (COSPAN [3], HSIS [4], STATE-MATE <ref> [5] </ref>, KRONOS [6], HyTech [7] etc.). They have proved very successful in verification problems for communication protocols, software algorithms, digital 2 The consequences could be catastrophic if the centralized controller is disabled circuit design and real-time software.
Reference: 6. <author> C. Daws and S. Yovine, </author> <title> "Two examples of verification of multirate timed automata with KRONOS," </title> <booktitle> in Proc. 1995 IEEE Real-Time Systems Symposium, </booktitle> <address> RTSS'95, (Pisa, Italy), </address> <publisher> IEEE Computer Society Press, </publisher> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: Verification algorithms for finite state machines, timed automata [1] and linear hybrid systems [2] have been developed and efficient programs exist to implement them (COSPAN [3], HSIS [4], STATE-MATE [5], KRONOS <ref> [6] </ref>, HyTech [7] etc.). They have proved very successful in verification problems for communication protocols, software algorithms, digital 2 The consequences could be catastrophic if the centralized controller is disabled circuit design and real-time software.
Reference: 7. <author> R. Alur, C. Courcoubetis, T. A. Henzinger, and P. H. Ho, </author> <title> "Hybrid automaton: An algorithmic approach to the specification and verification of hybrid systems," in Hybrid System (R. </title> <editor> L. Grossman, A. Nerode, A. P. Ravn, and H. Rischel, </editor> <booktitle> eds.), </booktitle> <pages> pp. 209-229, </pages> <address> New York: </address> <publisher> Springer Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Verification algorithms for finite state machines, timed automata [1] and linear hybrid systems [2] have been developed and efficient programs exist to implement them (COSPAN [3], HSIS [4], STATE-MATE [5], KRONOS [6], HyTech <ref> [7] </ref> etc.). They have proved very successful in verification problems for communication protocols, software algorithms, digital 2 The consequences could be catastrophic if the centralized controller is disabled circuit design and real-time software. Progress in the direction of automatic ver-ification has been impeded, however, by undecidability and computational complexity.
Reference: 8. <author> T. Henzinger, P. Kopke, A. Puri, and P. Varaiya, </author> <title> "What's decidable about hybrid automata," </title> <booktitle> in STOCS, </booktitle> <year> 1995. </year>
Reference-contexts: Progress in the direction of automatic ver-ification has been impeded, however, by undecidability and computational complexity. To guarantee that an automatic verification algorithm will terminate in a finite number of steps with a conclusive answer, the system needs to satisfy very stringent technical requirements <ref> [8] </ref>. Moreover, even relatively simple hybrid systems lead to very large numbers of discrete states when looked at from the point of view of automatic verification. Even though efficient algorithms exist, the problem may still be prohibitively large for current computers [9].
Reference: 9. <author> F. Balarin, K. Petty, and A. L. Sangiovanni-Vincentelli, </author> <title> "Formal verification of the PATHO real-time operating system," </title> <booktitle> in IEEE Control and Decision Conference, </booktitle> <pages> pp. 2459-2465, </pages> <year> 1994. </year>
Reference-contexts: Moreover, even relatively simple hybrid systems lead to very large numbers of discrete states when looked at from the point of view of automatic verification. Even though efficient algorithms exist, the problem may still be prohibitively large for current computers <ref> [9] </ref>. A different approach has been to design the hybrid controller so that performance is a-priori guaranteed [10, 11, 12]. This eases the requirements on verification somewhat since a large part of the complexity can be absorbed by careful design.
Reference: 10. <author> A. Deshpande, </author> <title> Control of Hybrid Systems. </title> <type> PhD thesis, </type> <institution> Department of Electrical Engineering, University of California, Berkeley, California, </institution> <year> 1994. </year>
Reference-contexts: Even though efficient algorithms exist, the problem may still be prohibitively large for current computers [9]. A different approach has been to design the hybrid controller so that performance is a-priori guaranteed <ref> [10, 11, 12] </ref>. This eases the requirements on verification somewhat since a large part of the complexity can be absorbed by careful design. The techniques presented in this paper fit in with this way of thinking. The plan is to start by modeling the system dynamics at the continuous level.
Reference: 11. <author> M. S. Branicky, V. S. Borkar, and S. K. Mitter, </author> <title> "A unified framework for hybrid control: Background, model and theory," </title> <type> Tech. Rep. </type> <institution> LIDS-P-2239, Laboratory for Information and Decision Systems, Massachusetts Institute of Technology, </institution> <year> 1994. </year>
Reference-contexts: Even though efficient algorithms exist, the problem may still be prohibitively large for current computers [9]. A different approach has been to design the hybrid controller so that performance is a-priori guaranteed <ref> [10, 11, 12] </ref>. This eases the requirements on verification somewhat since a large part of the complexity can be absorbed by careful design. The techniques presented in this paper fit in with this way of thinking. The plan is to start by modeling the system dynamics at the continuous level.
Reference: 12. <author> A. Nerode and W. Kohn, </author> <title> "Multiple agent hybrid control architecture," in Hybrid System (R. </title> <editor> L. Grossman, A. Nerode, A. P. Ravn, and H. Rischel, </editor> <booktitle> eds.), </booktitle> <pages> pp. 297-316, </pages> <address> New York: </address> <publisher> Springer Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Even though efficient algorithms exist, the problem may still be prohibitively large for current computers [9]. A different approach has been to design the hybrid controller so that performance is a-priori guaranteed <ref> [10, 11, 12] </ref>. This eases the requirements on verification somewhat since a large part of the complexity can be absorbed by careful design. The techniques presented in this paper fit in with this way of thinking. The plan is to start by modeling the system dynamics at the continuous level.
Reference: 13. <author> T. Basar and P. Bernhard, </author> <title> H 1 -Optimal Control and Related Minimax Design Problems. </title> <publisher> Birkhauser, </publisher> <year> 1991. </year>
Reference-contexts: Game theoretic ideas have already been applied in this context to problems with disturbances of Class 1 and quadratic cost functions. The resulting controllers are the so called H 1 or L 2 optimal controllers <ref> [13] </ref>. We will try to extend these ideas to the multiagent, hybrid setting. Extensions: Verification and Abstraction. Optimal control and gaming ideas may prove useful in other hybrid settings. Here we touch upon two of them, verification and abstraction.
Reference: 14. <author> J. Lygeros, D. N. Godbole, and S. Sastry, </author> <title> "A game theoretic approach to hybrid system design," </title> <type> Tech. Rep. </type> <institution> UCB/ERL-M95/77, Electronic Research Laboratory, University of California Berkeley, </institution> <year> 1995. </year>
Reference-contexts: Optimal control can be used to determine the discrete command sequences that force the continuous system to violate the performance specifications. If the discrete design is such that these command sequences are excluded then the hybrid design is verified. Examples of this approach can be found in <ref> [14] </ref> and [15]. The main advantage of the optimal control point of view to verification is that, by removing the requirement for an exhaustive search, the limitations of complexity and undecidability disappear. On the down side, verification using optimal control requires a lot of input from the user. <p> We consider a classic example from the timed automata verification literature, the "train gate controller". For a more complicated example from highway automation the reader is refered to <ref> [14] </ref>. To simplify the notation, time dependency of the states inputs and outputs will be suppressed unless explicitly stated. Problem Statement. The train gate problem set up is shown in Figure 1. We will work on the problem formulation of [16]. <p> dynamics given in equation (12) are simple enough to allow us to write an analytic expression for the value of the state at time t: x 1 (t) = e t=2 x 0 Z t e (tt)=2 u (t )dt (14) 2 + 0 It is easy to show that <ref> [14] </ref>: Lemma 1 If x 0 2 X and the input constraints are satisfied, x (t) 2 X 8t 0. Our first goal is to find the safe set of initial conditions and the control that makes them safe. <p> Proof: The proof consists of verifying that for any admissible (u; d): J 1 (x 0 ; u fl ; d) J fl Then, by definition, (u fl ; d fl ) is a global saddle solution. The details of the calculation are given in <ref> [14] </ref>. 2 Lemma 3 The set of safe initial conditions is: V = x 0 2 Xjx 0 2 2v 2 ln ( x 0 ) (19) Proof: For sufficiently large values of L, all initial conditions with x 0 2 &gt; 0 are safe (the train has already passed the
Reference: 15. <author> A. Puri and P. Varaiya, </author> <title> "Driving safely in smart cars," </title> <booktitle> in American Control Conference, </booktitle> <pages> pp. 3597-3599, </pages> <year> 1995. </year>
Reference-contexts: Optimal control can be used to determine the discrete command sequences that force the continuous system to violate the performance specifications. If the discrete design is such that these command sequences are excluded then the hybrid design is verified. Examples of this approach can be found in [14] and <ref> [15] </ref>. The main advantage of the optimal control point of view to verification is that, by removing the requirement for an exhaustive search, the limitations of complexity and undecidability disappear. On the down side, verification using optimal control requires a lot of input from the user.
Reference: 16. <author> A. Puri and P. Varaiya, </author> <title> "Verification of hybrid systems using abstractions," in Hybrid Systems II, </title> <publisher> LNCS 999, Springer Verlag, </publisher> <year> 1995. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: To simplify the notation, time dependency of the states inputs and outputs will be suppressed unless explicitly stated. Problem Statement. The train gate problem set up is shown in Figure 1. We will work on the problem formulation of <ref> [16] </ref>. For simplicity we assume that the train is going around on a circular track of length L, where L is large enough to ensure adequate separation between consecutive train appearances. We also assume that the train can be approximated by a point. The train moves clockwise around the track.
References-found: 16

