URL: ftp://ftp.cs.virginia.edu/pub/techreports/IPC-87-01.ps.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/techreports/README.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Basic Database Concepts in ADAMS (Advanced DAta Manipulations System) Language Interface for Process Service  
Author: John L. Pfaltz, Sang H. Son, James R. French, Paul K. Baron, David J. Kirks, and Ratko Orlandic 
Note: This research was supported in part by JPL under contract #957721.  
Address: Charlottesville, VA 22903  
Affiliation: Institute for Parallel Computation School of Engineering and Applied Science University of Virginia  
Date: November 30, 1987  
Pubnum: IPC-TR-87-001  
Abstract-found: 0
Intro-found: 0
Reference: [AAA75] <institution> CODASYL Data Base Task Group Report, </institution> <address> 1971, </address> <publisher> ACM, </publisher> <address> New York, </address> <year> 1975. </year>
Reference-contexts: Also our definition provides for an attribute date_last_mod which is associated with the "set" (or file) as a whole, and not with any particular element (or record) in it. 4.4. Implementation of a Network Model The network model, as defined by the CODASYL/DBTG report <ref> [AAA75, NNN73] </ref>, expli citly used the concept of a "set", but only as the set of elements which were the image of a one to many map. But the term "map" was never used. Instead, every set was "owned" by an element of some other class.
Reference: [ACO85] <author> A. Albano, L. Cardelli and R. Orsini, </author> <title> Galileo: A Strongly Typed Interactive Conceptual Lanugage, </title> <journal> ACM Trans. Database Systems 10,2 (June 1985), </journal> <pages> 230-260. </pages>
Reference-contexts: The second names a specific instance (thing or object) within a class. Notice that the is a construct used to define new classes is a general class definition operator. It is not a specific inheritance operator as in <ref> [ACO85] </ref> or [BuA86] even though the defined class does inherit the properties of &lt;class&gt;. The &lt;class_name&gt; or &lt;instance_name&gt;, together with its corresponding definition is automatically entered into the users local dictionary. It is now part of the user's own database language.
Reference: [BBK87] <author> F. Bancilhon, T. Briggs, S. Khoshafian and P. Valduriez, </author> <title> FAD, a Powerful and Simple Database Language, </title> <booktitle> Proc. 13th VLDB Conf., </booktitle> <address> Brighton, England, </address> <month> Sep. </month> <year> 1987, </year> <pages> 97-105. </pages>
Reference-contexts: The concepts of element and object are so nearly synomous that we frequently use them interchangeably. "Objects" may be regarded as concrete representations of abstract "elements". We have chosen to use the term "element" simply because the term "object" has so many existing connotations in the computer literature <ref> [BBK87, CoM84, SSE87] </ref>. Even so, most of those connotations are completely compatible with our usage. All elements (or objects, if you prefer) in an ADAMS database must be typed, that is belong to a known class.
Reference: [BuA86] <author> P. Buneman and M. Atkinson, </author> <title> Inheritance and Persistence in Database Programming Languages, </title> <booktitle> Proc. ACM SIGMOD Conf. </booktitle> <month> 15,2 (May </month> <year> 1986), </year> <pages> 4-15. </pages>
Reference-contexts: The second names a specific instance (thing or object) within a class. Notice that the is a construct used to define new classes is a general class definition operator. It is not a specific inheritance operator as in [ACO85] or <ref> [BuA86] </ref> even though the defined class does inherit the properties of &lt;class&gt;. The &lt;class_name&gt; or &lt;instance_name&gt;, together with its corresponding definition is automatically entered into the users local dictionary. It is now part of the user's own database language.
Reference: [Cod70] <author> E. F. Codd, </author> <title> A Relational Model for Large Shared Data Banks, </title> <journal> Comm. ACM 13,6 (June 1970), </journal> <pages> 377-387. </pages>
Reference-contexts: A second purpose is to provide an abundance of ADAMS examples in juxtaposition with known database organizations. 4.1. Implementation of a Relational Model During the last few years, the majority of formal database theory has been couched in terms of the "relational" model, e.g. <ref> [Cod70, MaU83] </ref>. It has proven itself to be a flexible context for expressing a wide range of database queries and operations. And because of this flexibility, an increasing number of actual databases are being implemented using relational database software. <p> The relational model does not require a "map" concept, which is at once both its great strength and its weakness. Mapping concepts are unfamiliar to many database users; so a database model which is based on only flat tables is much easier to explain and to visualize <ref> [Cod70] </ref>. But invariably relationships must be created between data sets; and the relational join is not always the most effective way of implementing the relationship. An attribute function defined on an ADAMS element functionally associates a single co-domain value with that element.
Reference: [CAD87] <author> R. L. Cooper, M. P. Atkinson, A. Dearie and D. Abderrahmane, </author> <title> Constructing Database Systems in a Persistent Environment, </title> <booktitle> Proc. 13th VLDB Conf., </booktitle> <address> Brighton, England, </address> <month> Sep. </month> <year> 1987, </year> <pages> 117-125. </pages>
Reference-contexts: These ways of referencing co-domain values correspond to getDomVal and putDomVal in <ref> [CAD87] </ref>. We observe that many computational processes using ADAMS as their database interface do not manipulate strings. They typically manipulate numeric values, reals and integers.
Reference: [CoM84] <author> G. Copeland and D. Maier, </author> <title> Making Smalltalk a Database System, </title> <booktitle> Proc. SIGMOD Conf., </booktitle> <address> Boston, </address> <month> June </month> <year> 1984, </year> <pages> 316-325. </pages>
Reference-contexts: The concepts of element and object are so nearly synomous that we frequently use them interchangeably. "Objects" may be regarded as concrete representations of abstract "elements". We have chosen to use the term "element" simply because the term "object" has so many existing connotations in the computer literature <ref> [BBK87, CoM84, SSE87] </ref>. Even so, most of those connotations are completely compatible with our usage. All elements (or objects, if you prefer) in an ADAMS database must be typed, that is belong to a known class.
Reference: [MaU83] <author> D. Maier and J. D. Ullman, </author> <title> Maximal Objects and the Semantics of Universal Relation Databases, </title> <journal> ACM Trans. Database Systems 8,1 (Mar. </journal> <year> 1983), </year> <pages> 1-14. </pages>
Reference-contexts: A second purpose is to provide an abundance of ADAMS examples in juxtaposition with known database organizations. 4.1. Implementation of a Relational Model During the last few years, the majority of formal database theory has been couched in terms of the "relational" model, e.g. <ref> [Cod70, MaU83] </ref>. It has proven itself to be a flexible context for expressing a wide range of database queries and operations. And because of this flexibility, an increasing number of actual databases are being implemented using relational database software.
Reference: [NNN73] <institution> CODASYL Data Description Language, National Bureau of Standards Handbook 113, U.S. Dept. of Commerce, </institution> <address> Washington, DC, </address> <year> 1973. </year>
Reference-contexts: Also our definition provides for an attribute date_last_mod which is associated with the "set" (or file) as a whole, and not with any particular element (or record) in it. 4.4. Implementation of a Network Model The network model, as defined by the CODASYL/DBTG report <ref> [AAA75, NNN73] </ref>, expli citly used the concept of a "set", but only as the set of elements which were the image of a one to many map. But the term "map" was never used. Instead, every set was "owned" by an element of some other class.
Reference: [SSE87] <author> A. Sernadas, C. Sernadas and H. Ehrich, </author> <title> Object-Oriented Specification of Databases: An Algebraic Approach, </title> <booktitle> Proc. 13th VLDB Conf., </booktitle> <address> Brighton, England, </address> <month> Sep. </month> <year> 1987, </year> <pages> 107-116. </pages>
Reference-contexts: The concepts of element and object are so nearly synomous that we frequently use them interchangeably. "Objects" may be regarded as concrete representations of abstract "elements". We have chosen to use the term "element" simply because the term "object" has so many existing connotations in the computer literature <ref> [BBK87, CoM84, SSE87] </ref>. Even so, most of those connotations are completely compatible with our usage. All elements (or objects, if you prefer) in an ADAMS database must be typed, that is belong to a known class.
Reference: [ShI85] <author> D. G. Shin and K. B. Irani, </author> <title> Partitioning a Relational Database Horizontally Using a Knowledge-based Approach, </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <address> Austin TX, </address> <month> Dec. </month> <year> 1985, </year> <pages> 95-105. </pages>
Reference-contexts: In many systems (e.g. <ref> [ShI85] </ref>) horizontal distribution is a defacto partition of the set of distributed data elements.

References-found: 11

