URL: ftp://ftp.sei.cmu.edu/pub/case-env/config_mgt/papers/cm_concepts.ps
Refering-URL: http://www.cs.gatech.edu/computing/SW_Eng/people/Phd/Configmgt.html
Root-URL: 
Email: dart@sei.cmu.edu  
Title: Concepts in Configuration Management Systems ality in terminology concerning CM functionality through CM system. A
Author: Susan Dart 
Note: Sponsored by the U.S. Department of Defense reflects the structure of the product, identifies  Control: controlling the release of a product concept presented is described as it exists in one particular and changes to it throughout the lifecycle by  
Address: Pittsburgh, PA. 15123-3890 USA  
Affiliation: Software Engineering Institute Carnegie-Mellon University  
Abstract: There has been considerable progress con- 1.1 Definition of Configuration Management cerning support for software configuration management Software CM is a discipline for controlling the evolution (CM) in environments and tools. This paper's intent is to of software systems. Classic discussions about CM are highlight the user concepts provided by existing CM sys- given in texts such as [3] and [4]. A standard definition tems. These are shown as a spectrum. In the spectrum, taken from IEEE standard 729-1983 [16] highlights the fol-concepts are seen as extensions to, or generalizations of, lowing operational aspects of CM: other concepts. There is difficulty associated with extract Identification: an identification scheme ing concepts from CM systems since there is no common components and their type, making them out the software engineering community and many CM unique and accessible in some form. systems implement variations on concepts. As a result, each software via the creation of a baseline product. discussing the scope of issues important to users of CM systems. No single CM system provides all the function- Status Accounting: recording and reporting the status of components and change requests, ality required by the different kinds of users of CM sys-and gathering vital statistics about components tems. Rather, each CM system addresses some part of the in the product. spectrum of concepts. To complete the report, the CM ca Audit and review: validating the complete-pabilities of the systems used as examples are briefly de ness of a product and maintaining consistency scribed. among the components by ensuring that the product is a well-defined collection of compo nents. 1 Introduction 
Abstract-found: 1
Intro-found: 1
Reference: <institution> dispersed software teams use the same CM system for local CM and for system integration? This is a major problem in 1. Software Maintenance & Development Systems, Inc. Aide-De-Camp Software Management System, Product industry, particularly for Department of Defense contrac Overview. </institution> <address> Concord, MA, </address> <year> 1989. </year> <title> tors. Is it possible to support cross-development of soft </title>
Reference: 2. <author> Estublier, J. </author> <title> A Configuration Manager: The Adele Data ware? Can engineers developing a product on a host ma Base of Programs. Proceedings of the Workshop on Soft-chine easily move it to the target machine while still main-ware Engineering Environments for Programming-in-the-taining CM control over the product? Is scale a limiting Large, </title> <month> June </month> <year> 1985, </year> <pages> pp. </pages> <month> 140-147. </month> <title> factor for CM systems? Is the CM support for a million </title>
Reference-contexts: The classes of attri-need for regenerating components and maximizes the butes represent user-defined characteristics such as con-amount of sharing derived objects. straints, types, and versions. Classes of relationships repre sent kinds of dependencies, such as logical, compatible, 3.4.5 Attribution component, instance, and inheritable dependencies. Every The Adele <ref> [2] </ref> system generalizes upon the repository time a new configuration is constructed, CMA utilizes the and system modelling by using an entity relationship data- information that accumulated in the database via the previ-base with data modelling capabilities. A product is de- ous use of the components forming the configuration.
Reference: 3. <author> Babich, W.. </author> <title> Software Configuration Management. line product the same as that for a 100 million line product? Addison-Wesley, 1986. Is it possible to model all aspects of the CM process, </title> <booktitle> in </booktitle>
Reference: 4. <author> Bersoff, E. H., Henderson, V.D., and Siegel, S. G.. </author> <title> cluding the people-intensive parts, and implement those in Software Configuration Management. </title> <publisher> Prentice-Hall, </publisher> <year> 1980. </year> <title> a CM system? </title>
Reference: 5. <author> Softool. </author> <title> CCC: Change and Configuration Control Envi ronment. A Functional Overview. 1987. Answers to the above questions are not yet obvious. It is likely that progress will come from various sourcesfrom 6. Ploedereder, </title> <editor> E. and Fergany, A. </editor> <title> A Configuration Man agement Assistant. Proceedings of the Second Internation-CM system vendors, environment architects and resear al Workshop on Software Version and Configuration Con-chers, tool integrators, the software process modelling trol, </title> <publisher> ACM, </publisher> <address> USA, </address> <month> October </month> <year> 1989, </year> <pages> pp. 5-14. </pages> <booktitle> forum, and from the computer-aided design/engineering, </booktitle>
Reference-contexts: The user specifies a formula to create a particular instance of a configuration. The formula 3.3.4 Lifecycle Model designates a baseline to which selected change sets are ap Change and Configuration Control (CCC) <ref> [5] </ref> provides plied.
Reference: 7. <author> Deitz. D. </author> <title> "Pulling the Data Together". Mechanical computer-integrated manufacturing worlds. </title> <note> Engineering , (February 1990). </note>
Reference-contexts: The user can perform actions on different granularities such as a single 3.2.2 Distributed Component data item or a configuration, of the context's data. The user The Sherpa Design Management System (DMS) <ref> [7] </ref> pro- does not have to worry about such tasks as version control vides a repository for files distributed on different hardware or relationships between files, since the system, knowing platforms.
Reference: 8. <author> Leblang, D. and McLean, G. </author> <title> Configuration Manage 5 Conclusions ment for Large-Scale Software Development Efforts. GTE Workshop on Software Engineering Environments for Pro-CM is management of the evolution of a software prod gramming in the Large, </title> <month> June </month> <year> 1985, </year> <pages> pp. 122-127. </pages> <month> uct. </month> <title> At the operational level for CM systems, CM is identi </title>
Reference-contexts: A family describes the succession of versions of the components. Various user-specified versions of the 3.4.4 Object Pool product make up a family. Associated with each version Using its notions for system modelling, the Domain Soft-are attributes such as creation date and author. Queries, ware Engineering Environment (DSEE) <ref> [8] </ref> has all the nec-version selection, and rules are based upon the attributes. essary information to recognize what is required to generate Construction rules record how existing components were a particular version of a derived object.
Reference: 9. <author> Graham, M. and Miller, D. </author> <title> ISTAR Evaluation. </title> <type> Tech. </type> <month> fication, </month> <title> control, status accounting, audit, </title> <journal> review, manufac Rept. CMU/SEI-88-TR-3, Software Engineering Institute, </journal> <month> ture, </month> <title> process management and team work. It is an area in Carnegie-Mellon University, </title> <month> July </month> <year> 1988. </year> <title> software engineering environments where progress has </title>
Reference-contexts: A team of users geographically dispersed can 3.3.2 Contract be working on the same configuration of files. Multiple The ISTAR <ref> [9] </ref> environment provides for modelling copies of files can exist on different workstations. Sherpa some parts of a software development process in terms of a DMS is aware of the location of the most recent version of formal agreement a contract to perform tasks with a file.
Reference: 10. <author> Marzullo, K. and Wiebe, D. Jasmine: </author> <title> A Software Sys-been made. That is evident from the spectrum of concepts, tem Modelling Facility. Proceedings of the ACM as well as from the number of existing CM systems and SIGSOFT/SIGPLAN Software Engineering Symposium on their capabilities. The spectrum presented in this paper Practical Software Development Environments, December represents a snapshot of many concepts implemented by 1986, pp. 121-130. various CM systems. Each system addresses differently, </title> <booktitle> the </booktitle>
Reference-contexts: Components within a subsystem are not structure, its components and how to build it. The Jasmine visible to components in other subsystems unless they are <ref> [10] </ref> system model is a textual description that the user can designated, via the interface specification, to be exported. alter and that tools can access to carry out their tasks.
Reference: 11. <author> Whitgift, D.. </author> <title> Software Configuration Management: user issues roles, integration, control, automation level, Methods and Tools. </title> <publisher> John Wiley and Sons, </publisher> <editor> England, </editor> <title> To be process versus product support, when is the best time to published June 1991. start using CM and what functionality is provided by the </title>
Reference-contexts: That is, the product is developed as a sequence of 3.3.3 Change Request baselines. Each baseline exists as four configurations: de-In LIFESPAN <ref> [11] </ref>, a change request represents a docu velopment, test, approved and production. The configura-mented request for a change and an associated process tion is a hierarchy of components. Each baseline evolves in model for change. LIFESPAN models the change request a particular way.
Reference: 12. <author> Feiler, P. and Downey, G. </author> <title> Transaction-Oriented Con system. It is hoped that presenting the spectrum may aid in figuration Management. </title> <type> Tech. </type> <institution> Rept. CMU/SEI-90-TR-23, Software Engineering Institute, Carnegie-Mellon Universi-understanding the capabilities of CM systems and in pro ty, </institution> <month> November </month> <year> 1990. </year> <title> viding a common framework for discussing CM tool sup port. 13. </title> <editor> Johnson, W. </editor> <title> Bringing Design Management to the Open Environment. High Performance Systems, </title> <month> June </month> <year> 1989, </year> <pages> pp. 66-70. </pages>
Reference-contexts: These con 3.5.3 Transaction cepts represent advances in CM system functionality. The transaction notion of the Network Software Environ ment (NSE) <ref> [12] </ref> represents a co-ordinated unit of work. It The topology of the spectrum is intended to show an reflects the structure of a product and supports the isolation evolution of concepts. For instance, from left to right of of work, interactions between users, and the merging of changes.
Reference: 14. <author> Feiler, P., Dart, S. and Downey, G. </author> <title> Evaluation of the I.2 Aide-De-Camp (ADC) Rational Environment. </title> <type> Tech. </type> <institution> Rept. CMU/SEI-88-TR-15, ADC, from Software Maintenance and Development Software Engineering Institute, Carnegie-Mellon Universi-Systems, Inc., consists of the basic ADC system and a ty, </institution> <month> July </month> <year> 1988. </year> <title> turnkey system. The basic ADC provides a database for </title>
Reference-contexts: They use tools that help build a consis-CM system is sold in that manner as part of a package. For tent software product and they communicate and coordinate instance, the Rational <ref> [14] </ref> environment has CM function by notifying one another about tasks required and tasks ality that is an integral part of it. A CM tool can be consid-completed. Changes are propagated across each other's ered a stand-alone tool. <p> Much of this information is seen when the user browses each file or change set. In 3.4.3 Subsystem sum, the change set represents a logical change to a product The Rational <ref> [14] </ref> environment provides for partitioning and a means of creating any version of a configuration that a large Ada product into parts, allowing for confining the is not necessarily dependent on the latest version of that scope of the effects of changes. The parts are called configuration. subsystems.
Reference: 15. <author> Tichy, W. </author> <title> Design, Implementation and Evaluation of a capturing CM information. The user defines attributes and Revision Control System. 6th International Conference on relationships on files. The database can store source and Software Engineering Tokyo, </title> <month> September </month> <year> 1982, </year> <pages> pp. </pages> <month> 58-67. </month> <title> binary code and it stores mutable ("plastic") and immutable </title>
Reference-contexts: A CM tool can be consid-completed. Changes are propagated across each other's ered a stand-alone tool. For instance, the Revision Control work by merging them and resolving and conflicts. A his-System (RCS) <ref> [15] </ref>) is a CM tool since it is intended to be tory is kept of the evolution of all components in the prod-installed into an existing environment. <p> It should be noted though, that some of the CM sys- 3.2.1 Repository tems actually provide many of the concepts shown in the The notion of a repository is fundamental to a CM sys-spectrum. Concepts are taken directly from specific CM tem. The Revision Control System (RCS) <ref> [15] </ref> provides the systems since there is no common terminology when deal- notion of a repository for ASCII files. In effect, the reposing with automated CM functionality each CM system itory is a centralized library of files and provides version has its own concepts and semantics.
Reference: 16. <editor> IEEE Guide to Software Configuration Management. </editor> <title> ("installed") information. ADC's list processing language 1987. IEEE/ANSI Standard 1042-1987. effectively allows the user to work on one file or a group of </title>
Reference: 17. <author> Mahler, A. and Lampen, A. </author> <title> shapeA Software Con- files. ADC performs conflict resolution at the moment of figuration Management Tool. Proceedings of the Interna-check-in and flags any conflicts. Change sets captures tional Workshop on Software Version and Configuration changes to configurations and allow users to designate any Control, </title> <institution> Siemens Germany, </institution> <month> January </month> <year> 1988, </year> <pages> pp. </pages> <month> 228-243. </month> <title> version of a configuration via a list of change sets thereby </title>
Reference-contexts: One and are described below. predefined, special kind of attribute is "type". This "type" attribute is mandatory and immutable for each object. It 3.5.1 Workspace represents the main CM entities in Adele (such as the com The notion of a workspace in "shape" <ref> [17] </ref> is designed to posed object, the document, the revision and the element). prevent users from interfering with one another's work. It Relationships define dependencies between objects, for ex provides the notion that work can proceed on mutable ob ample, object B is derived from object A.

References-found: 15

