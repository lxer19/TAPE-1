URL: ftp://ftp.cc.gatech.edu/pub/people/schulman/update.ps
Refering-URL: http://www.cs.gatech.edu/people/home/schulman/
Root-URL: 
Title: The Maintenance of Common Data in a Distributed System  
Author: Baruch Awerbuch Leonard J. Schulman 
Keyword: Computing Reviews Category C.2 (Computer-Communication Networks). Keywords: distributed computing, distributed databases, network management, topology update, routing.  
Address: Cambridge, MA  Atlanta GA 30332-0280.  
Note: Presented at the 32nd Annual Symposium on Foundations of Computer Science.  02139. Supported by Air Force Contract TNDGAFOSR-86-0078, ARO contract DAAL03-86-K-0171, NSF contract CCR8611442, and a special grant from IBM.  Supported by an ONR Graduate Fellowship. Current address:  
Affiliation: M.I.T.  M.I.T.  Dept. of Mathematics and Lab. for Computer Science, MIT,  Dept. of Mathematics and Lab. for Computer Science, MIT.  College of Computing, Georgia Institute of Technology,  
Abstract: A basic task in distributed computation is the maintenance at each processor of the network, of a current and accurate copy of a common database. A primary example is the maintenance, for routing and other purposes, of a record of the current topology of the system. Such a database must be updated in the wake of locally generated changes to its contents. Due to previous disconnections of parts of the network, a maintenance protocol may need to update processors holding widely varying versions of the database. We provide a deterministic protocol for this problem, with only polylogarithmic overhead in both time and communication complexities. Previous deterministic solutions required polynomial overhead in at least one of these measures. 
Abstract-found: 1
Intro-found: 1
Reference: [ACG + 90] <author> Baruch Awerbuch, Israel Cidon, Inder Gopal, Marc Kaplan, and Shay Kutten. </author> <title> Distributed control for paris. </title> <booktitle> In Proc. 9th ACM Symp. on Principles of Distributed Computing, </booktitle> <pages> pages 145-160, </pages> <year> 1990. </year>
Reference-contexts: Topology Update protocols constitute a key component of the major commercial and governmental networks such as the ARPANET [MRR80], DECNET [Wec80], and SNA [BGJ + 85], as well as in new high-speed networks such as IBM's PARIS <ref> [CG88, ACG + 90] </ref> and NSF/DARPA's AURORA gigabit-rate testbed. The update protocols are used to handle management tasks such as routing and bandwidth reservations. <p> For, processors need be informed of relatively few changes if they already hold a nearly correct view of the database. The Incremental Update strategy in <ref> [ACK90, ACG + 90] </ref> exploits fully the prior knowledge available in the system, sending each processor only one message per error. While Incremental Update is clearly superior to Full Broadcast in terms of communication complexity, it can be significantly inferior in terms of time complexity. <p> For detail see [ACK90]. We need consider only the case in which the topology of the network is a tree, with the source node being its root. This fits into the framework of <ref> [ACK90, ACG + 90] </ref> in which topology changes are broadcast over a spanning tree. Furthermore it will be sufficient to solve the problem on a chain, with the source at one of its ends.
Reference: [ACK90] <author> Baruch Awerbuch, Israel Cidon, and Shay Kutten. </author> <title> Optimal maintenance of replicated information. </title> <booktitle> In Proc. 31st IEEE Symp. on Foundations of Computer Science, </booktitle> <year> 1990. </year>
Reference-contexts: The update protocols are used to handle management tasks such as routing and bandwidth reservations. As further motivation for the study of the Topology Update problem, it was shown in <ref> [ACK90] </ref> that it is in fact the hardest instance of a database update problem. <p> For, processors need be informed of relatively few changes if they already hold a nearly correct view of the database. The Incremental Update strategy in <ref> [ACK90, ACG + 90] </ref> exploits fully the prior knowledge available in the system, sending each processor only one message per error. While Incremental Update is clearly superior to Full Broadcast in terms of communication complexity, it can be significantly inferior in terms of time complexity. <p> A formal statement of the problem will be given below. A key result of <ref> [ACK90] </ref> is that the Topology Update problem effectively reduces to the Broadcast with Partial Knowledge problem. <p> This assumption is justified in the context of Topology Update because the cost of exchanging information among the two processors on a new "bridge edge" can be charged to the topology change, without effect on the asymptotic communication or time complexities for Topology Update. For detail see <ref> [ACK90] </ref>. We need consider only the case in which the topology of the network is a tree, with the source node being its root. This fits into the framework of [ACK90, ACG + 90] in which topology changes are broadcast over a spanning tree. <p> For detail see [ACK90]. We need consider only the case in which the topology of the network is a tree, with the source node being its root. This fits into the framework of <ref> [ACK90, ACG + 90] </ref> in which topology changes are broadcast over a spanning tree. Furthermore it will be sufficient to solve the problem on a chain, with the source at one of its ends. <p> This can be achieved by broadcasting a message from the source of the tree, with minimal overhead. Note that we assume the network is static. Entry or departure of links or nodes must be handled by an underlying topology protocol (as in <ref> [ACK90] </ref> and [ACK + 91]), and our protocol may need to be restarted on a new tree of processors. <p> In the Incremental Update <ref> [ACK90] </ref> solution, machines are brought one at a time into complete agreement with the source's database. Neighbor-knowledge is assumed and therefore a machine holding the correct database can correct the errors in its neighbor's database with just one message per error. <p> See figure 2. 3 Reference Commun. Time Full Broadcast nm n + m Incr. Upd. <ref> [ACK90] </ref> (n + ) log m (n + ) log m This paper (n + ) log m (n + minfm; g) log 3 m Lower Bd. n + n + minfm; g The intuition behind our solution is as follows.
Reference: [ACK + 91] <author> Baruch Awerbuch, Israel Cidon, Shay Kutten, Yishay Mansour, and David Peleg. </author> <title> Broadcast with partial knowledge. </title> <booktitle> In Proc. 10th ACM Symp. on Principles of Distributed Computing, </booktitle> <year> 1991. </year>
Reference-contexts: While Incremental Update is clearly superior to Full Broadcast in terms of communication complexity, it can be significantly inferior in terms of time complexity. This is due to the fact that the Full Broadcast method takes advantage of message pipelining, while the Incremental Update method does not <ref> [ACK + 91] </ref>. The Broadcast with Partial Knowledge problem, formulated in [ACK + 91], is that of updating the views of all the processors, while taking advantage of prior knowledge and of the possibility of pipelining | in order that both the message and time complexities of the protocol be minimized. <p> This is due to the fact that the Full Broadcast method takes advantage of message pipelining, while the Incremental Update method does not <ref> [ACK + 91] </ref>. The Broadcast with Partial Knowledge problem, formulated in [ACK + 91], is that of updating the views of all the processors, while taking advantage of prior knowledge and of the possibility of pipelining | in order that both the message and time complexities of the protocol be minimized. A formal statement of the problem will be given below. <p> This can be achieved by broadcasting a message from the source of the tree, with minimal overhead. Note that we assume the network is static. Entry or departure of links or nodes must be handled by an underlying topology protocol (as in [ACK90] and <ref> [ACK + 91] </ref>), and our protocol may need to be restarted on a new tree of processors. <p> In order to quantify the possibility of exploiting local knowledge, we use a measure that captures the level of "correctness" of the knowledge held by each processor <ref> [ACK + 91] </ref>. Let the local discrepancy of a given processor be the number of bits in which the local input at this processor differs from the source's input. Define the total discrepancy (which is not assumed to be known to the processors) as the sum of the local discrepancies. <p> Since the network is asynchronous, there is no way for a processor to determine that a bit is correct on the basis, say, that a sufficient amount of time has elapsed for receipt of a correction message. A nearly optimal randomized solution was given in <ref> [ACK + 91] </ref>. That algorithm does not assume "neighbor knowledge", uses O ( log m + n log m " ) communication and O (n log (2 + n ) + " ) time, and achieves error probability ". <p> By comparison, in the absence of neighbor knowledge there is an (n + m) time lower bound (even for randomized algorithms); and <ref> [ACK + 91] </ref> provides an (n + log mn ) communication lower bound. 1.5 Our Solution We provide a deterministic solution to the Broadcast with Partial Knowledge problem which uses O ((n + ) log m) communication and O ((n + minfm; g) log 3 m) time.
Reference: [BGJ + 85] <author> A. E. Baratz, J. P. Gray, P. E. Green Jr., J. M. Jaffe, </author> <title> and D.P. Pozefski. SNA networks of small systems. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> SAC-3(3):416-426, </volume> <month> May </month> <year> 1985. </year>
Reference-contexts: A Topology Update protocol must communicate such changes (which are initially known only locally) throughout the asynchronous network (and in spite of possible temporary network disconnections). Topology Update protocols constitute a key component of the major commercial and governmental networks such as the ARPANET [MRR80], DECNET [Wec80], and SNA <ref> [BGJ + 85] </ref>, as well as in new high-speed networks such as IBM's PARIS [CG88, ACG + 90] and NSF/DARPA's AURORA gigabit-rate testbed. The update protocols are used to handle management tasks such as routing and bandwidth reservations.
Reference: [CG88] <author> I. Cidon and I. S. Gopal. PARIS: </author> <title> An approach to integrated high-speed private networks. </title> <journal> International Journal of Digital & Analog Cabled Systems, </journal> <volume> 1(2) </volume> <pages> 77-86, </pages> <month> April-June </month> <year> 1988. </year>
Reference-contexts: Topology Update protocols constitute a key component of the major commercial and governmental networks such as the ARPANET [MRR80], DECNET [Wec80], and SNA [BGJ + 85], as well as in new high-speed networks such as IBM's PARIS <ref> [CG88, ACG + 90] </ref> and NSF/DARPA's AURORA gigabit-rate testbed. The update protocols are used to handle management tasks such as routing and bandwidth reservations.
Reference: [KT59] <author> A. N. Kolmogorov and V. M. Tihomirov. </author> <title> Epsilon-entropy and epsilon-capacity of sets in functional spaces. </title> <editor> Uspekhi Matematicheskikh Nauk (N. S.), </editor> <volume> 14 </volume> <pages> 3-86, </pages> <year> 1959. </year> <booktitle> Translated in American Mathematical Society Translations (Series 2) </booktitle> 17:277-364 (1961). 
Reference-contexts: has no interpretation in terms of our protocol as it requires m to be infinite), the quantity dim (fl) = lim !1 lg a , measuring the rate of growth of the a , is a fractal measure of the dimension of the path fl, known as its Pontrjagin-Schnirelman dimension <ref> [KT59, Man82, PS32] </ref>. In our finite scenario, let us set d = sup lg a by analogy.
Reference: [Man82] <author> B. Mandelbrot. </author> <title> The Fractal Geometry of Nature. </title> <editor> W. H. </editor> <publisher> Freeman and Company, </publisher> <address> San Francisco, </address> <year> 1982. </year>
Reference-contexts: has no interpretation in terms of our protocol as it requires m to be infinite), the quantity dim (fl) = lim !1 lg a , measuring the rate of growth of the a , is a fractal measure of the dimension of the path fl, known as its Pontrjagin-Schnirelman dimension <ref> [KT59, Man82, PS32] </ref>. In our finite scenario, let us set d = sup lg a by analogy.
Reference: [MRR80] <author> John McQuillan, Ira Richer, and Eric Rosen. </author> <title> The new routing algorithm for the arpanet. </title> <journal> IEEE Trans. on Commun., </journal> <volume> 28(5) </volume> <pages> 711-719, </pages> <month> May </month> <year> 1980. </year>
Reference-contexts: A Topology Update protocol must communicate such changes (which are initially known only locally) throughout the asynchronous network (and in spite of possible temporary network disconnections). Topology Update protocols constitute a key component of the major commercial and governmental networks such as the ARPANET <ref> [MRR80] </ref>, DECNET [Wec80], and SNA [BGJ + 85], as well as in new high-speed networks such as IBM's PARIS [CG88, ACG + 90] and NSF/DARPA's AURORA gigabit-rate testbed. The update protocols are used to handle management tasks such as routing and bandwidth reservations.
Reference: [PS32] <author> L. Pontrjagin and L. Schnirelman. </author> <title> Sur une propriete metrique de la dimension. </title> <journal> Annals of Mathematics, </journal> <volume> 33 </volume> <pages> 156-162, </pages> <year> 1932. </year> <month> 15 </month>
Reference-contexts: has no interpretation in terms of our protocol as it requires m to be infinite), the quantity dim (fl) = lim !1 lg a , measuring the rate of growth of the a , is a fractal measure of the dimension of the path fl, known as its Pontrjagin-Schnirelman dimension <ref> [KT59, Man82, PS32] </ref>. In our finite scenario, let us set d = sup lg a by analogy.
Reference: [Wec80] <author> S. Wecker. </author> <title> DNA: the digital network architecture. </title> <journal> IEEE Transactions on Communication, </journal> <volume> COM-28:510-526, </volume> <month> April </month> <year> 1980. </year> <month> 16 </month>
Reference-contexts: A Topology Update protocol must communicate such changes (which are initially known only locally) throughout the asynchronous network (and in spite of possible temporary network disconnections). Topology Update protocols constitute a key component of the major commercial and governmental networks such as the ARPANET [MRR80], DECNET <ref> [Wec80] </ref>, and SNA [BGJ + 85], as well as in new high-speed networks such as IBM's PARIS [CG88, ACG + 90] and NSF/DARPA's AURORA gigabit-rate testbed. The update protocols are used to handle management tasks such as routing and bandwidth reservations.
References-found: 10

