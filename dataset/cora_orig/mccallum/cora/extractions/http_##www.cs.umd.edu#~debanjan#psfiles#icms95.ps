URL: http://www.cs.umd.edu/~debanjan/psfiles/icms95.ps
Refering-URL: http://www.cs.umd.edu/~debanjan/pages/publication.html
Root-URL: 
Title: A Video Conferencing Testbed on ATM: Design, Implementation and Optimizations  
Author: D. Saha D. Kandlur T. Barzilai Z. Shae M. Willebeek-LeMair 
Abstract: This paper describes our experiences with the design and implementation of a very high-end video conferencing testbed on an ATM network. Our system is built on an IBM RISC System/6000 equipped with prototype hardware for video and audio capture and compression, and an IBM 100 Mb/s ATM adapter. In our early experiments we used UDP/IP running over ATM Adaptation Layer 5 (AAL5) for data transfer between peers. Our initial experiences with the system indicated that the overall system performance did not match our expectations even though most of the video, audio, and network processing was performed in hardware. A thorough profiling of the system revealed that the protocol processing and data handling overheads in the end-host are responsible for the poor video/audio quality. Based on these observations, we have proposed and implemented changes to the protocol data path that can significantly improve the performance of the system. Although we discuss our solution in the context of a video conferencing application, our approach is general and can be applied to many other applications. It is particularly useful for applications that are required to handle large volumes of time-critical data, such as multimedia servers. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <editor> Calls and Subroutine Reference: </editor> <booktitle> Base Operating System, </booktitle> <volume> Vol. </volume> <pages> 1. </pages> <note> AIX Version 3 for RISC System/6000. </note>
Reference-contexts: In order to avoid domain boundary crossing we selected a simple approach | doing an in-kernel data transfer. We separated the data and control path for the video conferencing application. While control was still trusted with the application, we moved the data path inside the kernel <ref> [1, 2] </ref>. The MMT device driver was modified to communicate directly with the ATM driver. The MMT driver can open an ATM VC inside the kernel and data transfer can happen from the MMT driver directly to the ATM driver without going through the user buffer 3 .
Reference: [2] <author> Technical Reference: </author> <title> Kernel and Subsystems. AIX Version 3.2 for RISC System/6000. </title>
Reference-contexts: In order to avoid domain boundary crossing we selected a simple approach | doing an in-kernel data transfer. We separated the data and control path for the video conferencing application. While control was still trusted with the application, we moved the data path inside the kernel <ref> [1, 2] </ref>. The MMT device driver was modified to communicate directly with the ATM driver. The MMT driver can open an ATM VC inside the kernel and data transfer can happen from the MMT driver directly to the ATM driver without going through the user buffer 3 .
Reference: [3] <institution> MMTplus Functional Description. IBM Internal Document, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: Our experiments are based on the Multimedia Mul-tiparty Teleconferencing (MMT) System, a prototype desktop collaboration system developed at the IBM T. J. Watson Research Center [6]. We have developed a prototype adapter to perform video and audio capture, compression and decompression in hardware <ref> [3] </ref>. This adapter can support compression/decompression of up to 30 frames per second in real-time. The MMT desktop conferencing system has been developed on IBM PS/2 machines [5] and is deployed in the Aurora Gigabit Testbed.
Reference: [4] <institution> ATM Turboways 100 Adapter. IBM Internal Document, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: This delay period can be adjusted to compensate for possible network jitter. A detailed description of the MMT hardware can be found in [8]. 2.1.2 Turboways ATM Interface The IBM ATM adapter <ref> [4] </ref> is responsible for performing the AAL5 functionalities. It features a dedicated i960 processor and a specialized chipset to handle AAL5 segmentation and reassembly in hardware.
Reference: [5] <author> M-S. Chen, Z-Y. Shae, D. D. Kandlur, T. Barzi-lai, and H. Vin. </author> <title> A multimedia desktop collaboration system. </title> <type> Research Report RC 17951, </type> <institution> IBM Research, T. J. Watson Research Center, </institution> <address> York-town Heights, NY 10598, </address> <month> May </month> <year> 1992. </year>
Reference-contexts: J. Watson Research Center [6]. We have developed a prototype adapter to perform video and audio capture, compression and decompression in hardware [3]. This adapter can support compression/decompression of up to 30 frames per second in real-time. The MMT desktop conferencing system has been developed on IBM PS/2 machines <ref> [5] </ref> and is deployed in the Aurora Gigabit Testbed. Our objective was to migrate this system to an IBM RS/6000 and provide a full motion, high resolution, video conferencing system running over ATM links.
Reference: [6] <author> M-S. Chen, Z-Y. Shae, D. D. Kandlur, T. Barzi-lai, and H. M. Vin. </author> <title> A multimedia desktop collaboration system. </title> <booktitle> In Proceedings GLOBECOM 92. IEEE, </booktitle> <month> December </month> <year> 1992. </year>
Reference-contexts: Our experiments are based on the Multimedia Mul-tiparty Teleconferencing (MMT) System, a prototype desktop collaboration system developed at the IBM T. J. Watson Research Center <ref> [6] </ref>. We have developed a prototype adapter to perform video and audio capture, compression and decompression in hardware [3]. This adapter can support compression/decompression of up to 30 frames per second in real-time.
Reference: [7] <author> M-S. Chen, H. Vin, and T. Barzilai. </author> <title> Designing a distributed collaborative environment. </title> <booktitle> In Proceedings GLOBECOM. IEEE, </booktitle> <month> December </month> <year> 1992. </year>
Reference: [8] <author> D. D. Kandlur, M. Willebeek-Lemair, T. Barzi-lai, Z-Y. Shae, and J-T. Liu. </author> <title> Supporting timing requirements of digital video and audio in desktop conferencing systems. </title> <institution> Research Report RC 19479, IBM, </institution> <month> March </month> <year> 1994. </year>
Reference-contexts: To guarantee continuous playback, the first audio packet received from a given source is held for a predefined delay period. This delay period can be adjusted to compensate for possible network jitter. A detailed description of the MMT hardware can be found in <ref> [8] </ref>. 2.1.2 Turboways ATM Interface The IBM ATM adapter [4] is responsible for performing the AAL5 functionalities. It features a dedicated i960 processor and a specialized chipset to handle AAL5 segmentation and reassembly in hardware.
Reference: [9] <author> M. Laubach. </author> <title> Classical IP and ARP over ATM. </title> <institution> Internet RFC-1577, </institution> <month> January </month> <year> 1994. </year>
Reference-contexts: Currently, the standard interface for the ATM device is the IP network interface and the device supports the classical IP over ATM model <ref> [9] </ref>. In addition to this IP interface, the ATM device driver also provides a low-level UNIX device interface. Hence, the VASU can access the ATM network using either one of these two mechanisms. While using the low-level interface, the device is opened via the open system call.
Reference: [10] <author> S. J. Le*er, M. K. McKusick, M. J. Karels, and J. S. Quarterman. </author> <title> The Design and Implementation of the 4.3BSD Operating System. </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: This anomaly can be attributed to the strategy for allocation and use of Mbufs. For small packet sizes a chain of Mbufs is used, whereas a cluster Mbuf is used for larger packets <ref> [10] </ref>. 3.2 Receive Processing The receive side data path is similar to the transmit data path in reverse. Once a complete packet is received it is DMAed into a chain of Mbufs in the kernel space in main memory. It is then copied into the user buffer of the VASU.
Reference: [11] <author> Z-Y. Shae and M-S. Chen. </author> <title> Mixing and playback of JPEG compressed packet videos. </title> <booktitle> In Proceedings GLOBECOM 92. IEEE, </booktitle> <month> December </month> <year> 1992. </year>
Reference-contexts: The data rate of the compressed data stream can be controlled by programming the quantizer to as low as 128 Kbits/sec and as high as 10 Mbits/sec. The CODEC is capable of mixing several video streams <ref> [11] </ref> in the compressed domain and presenting these in multiple video windows. The CODEC converts a PCM/ADPCM audio data stream into 8 bit parallel data for transmission. The on-board DSP processor uses two buffer areas in the SRAM to smooth out the traffic jitter and perform audio mixing.
Reference: [12] <author> G. K. Wallace. </author> <title> The JPEG Still Picture Compression Standard. </title> <journal> Communications of the ACM, </journal> <volume> 34, </volume> <month> April </month> <year> 1991. </year>
Reference-contexts: The DSP has access to a 256 Kbyte SRAM and a 16 Kbyte dual port memory (DP-RAM). The SRAM is used for smoothing and mixing of video and audio streams. The dual port memory is used to communicate with the system. The adapter currently supports the ISO Motion-JPEG <ref> [12] </ref> standard. The video processing unit consists of two motion JPEG engines, one for compression and the other for decompression. They can support 2 DSP stands for Digital Signal Processor. different frame rates and resolutions.
References-found: 12

