URL: http://www.cs.gmu.edu:80/research/gag/papers/sarma-icga95.ps
Refering-URL: http://www.cs.gmu.edu:80/research/gag/pubs.html
Root-URL: 
Email: kdejong@gmu.edu  jsarma@gmu.edu  
Title: On Decentralizing Selection Algorithms  
Author: Kenneth De Jong Jayshree Sarma 
Address: Fairfax, VA 22030  Fairfax, VA 22030  
Affiliation: Computer Science Department George Mason University  Computer Science Department George Mason University  
Abstract: The increasing availability of parallel computing architectures provides an opportunity to exploit this power as we scale up evolutionary algorithms (EAs) to solve more complex problems. To effectively exploit fine grained parallel architectures, the control structure of an EA must be decentralized. This is difficult to achieve without also changing the semantics of the selection algorithm used, which in turn generally produces changes in an EA's problem solving behavior. In this paper we analyze the implications of various decentralized selection algorithms by studying the changes they produce on the characteristics of the selection pressure they induce on the entire population. This approach has resulted in significant insight into the importance of selection variance and local elitism in designing effective distributed selection al gorithms.
Abstract-found: 1
Intro-found: 1
Reference: <author> Baker, J. E. </author> <year> (1987). </year> <title> Reducing bias and inefficiency in the selection algorithm. </title> <booktitle> In Proceedings of the Second International Conference on Genetic Algorithms, </booktitle> <address> Cambridge, MA, </address> <pages> pp. 14-21. </pages> <publisher> Lawrence Erl-baum Associates. </publisher>
Reference: <author> Baluja, S. </author> <year> (1993). </year> <title> Structure and performance of fine-grained parallelism in genetic search. </title> <booktitle> In Proceedings of the Fifth International Conference on Genetic Algorithms, </booktitle> <address> Urbana-Champaign, IL, </address> <pages> pp. 155-162. </pages> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> Cohoon, J. P., W. N. Martin, and D. S. </author> <title> Richards (1991). A multi-population genetic algorithms for solving the k-partition problem on hypercubes. </title> <booktitle> In Proceedings of the Fourth International Conference on Genetic Algorithms, </booktitle> <address> San Diego, CA, </address> <pages> pp. 244-248. </pages> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> Collins, R. J. and D. R. </author> <title> Jefferson (1991). Selection in massively parallel genetic algorithms. </title> <booktitle> In Proceedings of the Fourth International Conference on Genetic Algorithms, </booktitle> <address> San Diego, CA, </address> <pages> pp. 249-256. </pages> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> De Jong, K. A. </author> <year> (1975). </year> <title> An Analysis of the Behavior of a Class of Genetic Adaptive Systems. </title> <type> Ph. D. thesis, </type> <institution> University of Michigan, </institution> <address> Ann Arbor. </address>
Reference-contexts: Just as in the centralized cases, increased selection variance increases genetic drift in finite populations which in turn can have negative effects on search performance <ref> (De Jong 1975) </ref>. This suggests that these "anomalous" results should diminish with increasing population size, and that is what was observed when the experiments were rerun with larger population sizes (Figure 6). tournament selection with different population sizes for function HC10.
Reference: <author> De Jong, K. A. and W. M. </author> <title> Spears (1989). Using genetic algorithms to solve NP-Complete problems. </title> <booktitle> In Proceedings of the Third International Conference on Genetic Algorithms, </booktitle> <address> Fairfax, VA, </address> <pages> pp. 124-132. </pages> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: These observations came from an initial set of experiments using a modified version of GENESIS 5.0. The test suite consisted of De Jong's functions F3, F4, Peak problems (Peak 1, Peak 2, and Peak 6) and Hamilto-nian circuit (HC) problems (HC12 and HC10). (See <ref> (De Jong and Spears 1989) </ref> for a description of these functions.) We used the standard settings for crossover (0.60) and mutation (0.001), no elitism, a population size of 100, and averaged the results over 100 independent runs. Figures 1 and 2 give typical examples of the results obtained. <p> In a centralized environment, tournament selection can also be implemented as an expected value model by guaranteeing that all individuals participate in exactly k tournaments <ref> (Goldberg, Korb, and Deb 1989) </ref>. However, this is difficult to implement in any efficient way in a distributed environment, resulting in much higher variance in the actual number of offspring produced. for function HC10. using proportional selection, population size 100 for function HC10. <p> This requires introducing some sort of distance metric and/or topology on the population so that the concept of a neighborhood can be defined. Metrics involving distance in genotype or phenotype spaces (such as sharing functions <ref> (Deb and Goldberg 1989) </ref>) generally require global statistics and are not easy to implement efficiently in a decentralized form. For finely grained parallel architectures a more natural approach is to introduce a topology in which individuals live on grid points and neighborhoods defined in terms of nearby grid points.
Reference: <author> Deb, K. and D. E. </author> <title> Goldberg (1989). An investigation of niche and species formation in genetic function optimization. </title> <booktitle> In Proceedings of the Third International Conference on Genetic Algorithms, </booktitle> <address> Fairfax, VA, </address> <pages> pp. 42-50. </pages> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: In a centralized environment, tournament selection can also be implemented as an expected value model by guaranteeing that all individuals participate in exactly k tournaments <ref> (Goldberg, Korb, and Deb 1989) </ref>. However, this is difficult to implement in any efficient way in a distributed environment, resulting in much higher variance in the actual number of offspring produced. for function HC10. using proportional selection, population size 100 for function HC10. <p> This requires introducing some sort of distance metric and/or topology on the population so that the concept of a neighborhood can be defined. Metrics involving distance in genotype or phenotype spaces (such as sharing functions <ref> (Deb and Goldberg 1989) </ref>) generally require global statistics and are not easy to implement efficiently in a decentralized form. For finely grained parallel architectures a more natural approach is to introduce a topology in which individuals live on grid points and neighborhoods defined in terms of nearby grid points.
Reference: <author> Fogel, D. B. </author> <year> (1994). </year> <title> Evolutionary programming: an introduction and some current directions. </title> <journal> Statistics and Computing 4, </journal> <pages> 113-129. </pages>
Reference: <author> Goldberg, D. E. and K. </author> <title> Deb (1991). A comparative analysis of selection schemes used in genetic algorithms. </title> <booktitle> In Foundations of Genetic Algorithms, </booktitle> <address> San Mateo, CA, </address> <pages> pp. 69-93. </pages> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: It is quite straightforward to show that binary tournament selection (k = 2) is equivalent in expectation to the standard linear ranking scheme in which the best individual gets 2 offspring and the worst gets none <ref> (Goldberg and Deb 1991) </ref>. Hence, binary tournament selection is an attractive candidate for decentralized selection. It is easily implemented by assigning each member of the population to a separate processor.
Reference: <author> Goldberg, D. E., B. Korb, and K. </author> <title> Deb (1989). Messy genetic algorithms: Motivation, analysis, and first results. </title> <booktitle> Complex Systems 3, </booktitle> <pages> 493-530. </pages>
Reference-contexts: In a centralized environment, tournament selection can also be implemented as an expected value model by guaranteeing that all individuals participate in exactly k tournaments <ref> (Goldberg, Korb, and Deb 1989) </ref>. However, this is difficult to implement in any efficient way in a distributed environment, resulting in much higher variance in the actual number of offspring produced. for function HC10. using proportional selection, population size 100 for function HC10. <p> This requires introducing some sort of distance metric and/or topology on the population so that the concept of a neighborhood can be defined. Metrics involving distance in genotype or phenotype spaces (such as sharing functions <ref> (Deb and Goldberg 1989) </ref>) generally require global statistics and are not easy to implement efficiently in a decentralized form. For finely grained parallel architectures a more natural approach is to introduce a topology in which individuals live on grid points and neighborhoods defined in terms of nearby grid points.
Reference: <author> Gorges-Schleuter, M. </author> <year> (1989). </year> <title> ASPARGOS an asynchronous parallel genetic optimization strategy. </title> <booktitle> In Proceedings of the Third International Conference on Genetic Algorithms, </booktitle> <address> Fairfax, VA, </address> <pages> pp. 422-427. </pages> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> McInerney, J. </author> <year> (1992). </year> <title> Biologically Influenced Algorithms and Parallelism in Non-linear Optimization. </title> <type> Ph. D. thesis, </type> <institution> University of California, </institution> <address> San Diego. </address>
Reference: <author> Muhlenbein, H. </author> <year> (1991). </year> <title> Evolution in time and space the parallel genetic algorithm. In Foundations of Genetic Algorithm, </title> <address> San Mateo, CA, </address> <pages> pp. 316-337. </pages> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> Spiessens, P. and B. </author> <title> Manderick (1991). A massively parallel genetic algorithm: Implementation and first analysis. </title> <booktitle> In Proceedings of the Fourth International Conference on Genetic Algorithms, </booktitle> <address> San Diego, CA, </address> <pages> pp. 279-287. </pages> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> Tanese, R. </author> <year> (1989). </year> <title> Distributed genetic algorithms. </title> <booktitle> In Proceedings of the Third International Conference on Genetic Algorithms, </booktitle> <address> Fairfax, VA, </address> <pages> pp. 434-439. </pages> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> Whitley, D. and T. </author> <title> Starkweather (1990). Genitor II: A distributed genetic algorithm. </title> <journal> Journal Expt. Theor. Artificial Intelligence 2, </journal> <pages> 189-214. </pages>
References-found: 16

