URL: http://www.cs.wisc.edu/~rcarl/paid98.ps
Refering-URL: http://www.cs.wisc.edu/~rcarl/prof.html
Root-URL: http://www.cs.wisc.edu
Email: rcarl@cs.wisc.edu  jes@ece.wisc.edu  
Title: Modeling Superscalar Processors via Statistical Simulation  
Author: Richard Carl James E. Smith 
Date: May 19, 1998  
Address: Wisconsin Madison  Wisconsin Madison  
Affiliation: Computer Science Dept. Univ. of  Dept. of Elec. and Comp. Engr. Univ. of  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Derek B. Noonburg, John Paul Shen, </author> <title> "A Framework for Statistical Modeling of Superscalar Processor Performance".Proc. </title> <booktitle> Third International Symposium on High Performance Computer Architecture (HPCA-3) </booktitle>
Reference-contexts: An alternative is to use an analytical model. For example, the work in <ref> [1] </ref> develops a markov model that includes a processor plus program. However, when extended to superscalar processors this approach leads to very complicated models, for which the solution is likely to be extremely difficult. In [1], this process is carried out only for a very simple processor model much simpler than <p> An alternative is to use an analytical model. For example, the work in <ref> [1] </ref> develops a markov model that includes a processor plus program. However, when extended to superscalar processors this approach leads to very complicated models, for which the solution is likely to be extremely difficult. In [1], this process is carried out only for a very simple processor model much simpler than today's superscalar processors. We have been studying a hybrid approach, where certain processor and program statistics are collected or otherwise generated, and a processor model is then probabilistically simulated with these statistics as input.
Reference: [2] <author> Pradeep K. Dubey, George B. Adams III, and Michael J. Flynn, </author> <title> "Instruction Window Size Trade-Offs and Characterization of Program Parallelism". </title> <journal> IEEE Transactions on Computers,43(4):431-442, </journal> <month> April </month> <year> 1994 </year>
Reference-contexts: The frequencies (mix) of these instruction groups are calculated from the original instruction trace and are used to create the synthetic instruction stream via simple random number generation. To model the dependences between the individual instructions a dependence matrix is used <ref> [2] </ref>. <p> The second dimension gives the dependence distance for the first register dependence of an instruction. Given this first distance, the third dimension is used to calculate the distance of the second register dependence for an instruction, if there is one. This is similar how dependence distances were computed in <ref> [2] </ref> but with two differences. In [2] there was no differentiation between various instruction types, and different distributions for the second register dependence distance were not used. A synthetic instruction is created by generating a random number and looking up in the table of instruction frequencies to find its type. <p> Given this first distance, the third dimension is used to calculate the distance of the second register dependence for an instruction, if there is one. This is similar how dependence distances were computed in <ref> [2] </ref> but with two differences. In [2] there was no differentiation between various instruction types, and different distributions for the second register dependence distance were not used. A synthetic instruction is created by generating a random number and looking up in the table of instruction frequencies to find its type.
Reference: [3] <institution> The SimpleScalar Architectural Research Tool Set, </institution> <note> Version 2.0, http://www.cs.wisc.edu/ mscalar/simplescalar.html 5 </note>
Reference-contexts: When an instruction's dependence counter is zero and a functional unit is free, it can issue from the instruction window. The implementation of the processor core is decoupled from the instruction generation. We chose to model an out-of-order superscalar processor that very closely resembles sim-outorder in SimpleScalar <ref> [3] </ref>. By closely modeling the processor of SimpleScalar we can achieve a baseline from which to measure the accuracy of the statistical simulation method. The synthetic instructions that are fed into the processor are very simple and only contain dependence information.
References-found: 3

