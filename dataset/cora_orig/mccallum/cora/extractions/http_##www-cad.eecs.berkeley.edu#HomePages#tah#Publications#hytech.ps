URL: http://www-cad.eecs.berkeley.edu/HomePages/tah/Publications/hytech.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/tah/Publications/hytech.html
Root-URL: http://www.cs.berkeley.edu
Email: tah@eecs.berkeley.edu pho@ichips.intel.com howard@cadence.com  
Title: HyTech: A Model Checker for Hybrid Systems  
Author: Thomas A. Henzinger Pei-Hsin Ho Howard Wong-Toi 
Address: Berkeley, California  
Affiliation: EECS Department Strategic CAD Labs Cadence Berkeley Labs Univ. of California, Berkeley Intel Corp., Hillsboro, Oregon  
Abstract: A hybrid system is a dynamical system whose behavior exhibits both discrete and continuous change. A hybrid automaton is a mathematical model for hybrid systems, which combines, in a single formalism, automaton transitions for capturing discrete change with differential equations for capturing continuous change. HyTech is a symbolic model checker for linear hybrid automata, a subclass of hybrid automata that can be analyzed automatically by computing with polyhedral state sets. A key feature of HyTech is its ability to perform parametric analysis, i.e. to determine the values of design parameters for which a linear hybrid automaton satisfies a temporal-logic requirement.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Alur, C. Courcoubetis, and D. Dill. </author> <title> Model checking in dense real time. </title> <journal> Information and Computation, </journal> <volume> 104(1) </volume> <pages> 2-34, </pages> <year> 1993. </year>
Reference-contexts: Because of its ability to deal with very large state spaces, symbolic model checking has been proven an effective technique for the automatic analysis of complex finite state-transition systems [10]. In recent years, the model-checking approach has been extended to several classes of infinite state-transition systems, including timed automata <ref> [1] </ref>. Since clock values range over the infinite domain of the nonnegative reals, it is impossible to enumerate all states of a timed automaton, and symbolic representations of state sets must be employed. <p> Hence the flow condition _x = x + 5 can be relaxed to the linear condition _x 2 [2; 4]. Similarly, for the control mode off , the nonlinear flow condition can be relaxed to the linear condition _x 2 <ref> [3; 1] </ref>. While clock translation preserves the trajectories of a system, linear phase-portrait approximation adds trajectories to a system. Hence, if we prove that the relaxed system satisfies a safety property, we can be sure that the original system also satisfies the property. <p> automaton can be split into two control modes, on 1 and on 2 , each with the flow condition _x = x + 5, mode on 1 with the invariant condition 1 x 2, mode on 2 with the invariant condition 2 x 3, and a 9 off _x 2 <ref> [3; 1] </ref> turn on x = 1 turn off on 1 x 3 x = 2 off _x 2 [3; 1] turn on x = 3 turn off x = 2 on 2 on 1 2 x 3 x = 2 control switch from on 1 to on 2 labeled x <p> _x = x + 5, mode on 1 with the invariant condition 1 x 2, mode on 2 with the invariant condition 2 x 3, and a 9 off _x 2 <ref> [3; 1] </ref> turn on x = 1 turn off on 1 x 3 x = 2 off _x 2 [3; 1] turn on x = 3 turn off x = 2 on 2 on 1 2 x 3 x = 2 control switch from on 1 to on 2 labeled x = 2. <p> 2:5 low mid range 1:5 x 2:5 high 2:5 x 3 ^ _z = 0 ^ _z = 1 ^ _z = 0 x = 1:5 x = 2:5 x = 2:5 x = 1:5 1:5 x 2:5 (on, mid range) _x 2 [2; 4] (off, mid range) _x 2 <ref> [3; 1] </ref> (on,low) _x 2 [2; 4] (off, low) 2:5 x 3 (on, high) _x 2 [2; 4] (off, high) _x 2 [3; 1] ^ _y = 1 ^ 0 y 60 ^ _z = 1 ^ _y = 1 ^ 0 y 60 ^ _z = 0 ^ _y = <p> 0 x = 1:5 x = 2:5 x = 2:5 x = 1:5 1:5 x 2:5 (on, mid range) _x 2 [2; 4] (off, mid range) _x 2 <ref> [3; 1] </ref> (on,low) _x 2 [2; 4] (off, low) 2:5 x 3 (on, high) _x 2 [2; 4] (off, high) _x 2 [3; 1] ^ _y = 1 ^ 0 y 60 ^ _z = 1 ^ _y = 1 ^ 0 y 60 ^ _z = 0 ^ _y = 1 ^ 0 y 60 ^ _z = 0 turn on x = 1 turn off The first disjunct of the on
Reference: [2] <author> R. Alur, C. Courcoubetis, N. Halbwachs, T. Henzinger, P.-H. Ho, X. Nicollin, A. Olivero, J. Sifakis, and S. Yovine. </author> <title> The algorithmic analysis of hybrid systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 138 </volume> <pages> 3-34, </pages> <year> 1995. </year>
Reference-contexts: For modeling more general kinds of hybrid systems, we use the hybrid automaton|a finite automaton with a finite number of real-valued variables that change continuously, as specified by differential equations and differential inequalities, in more general ways than clocks <ref> [3, 36, 2] </ref>. <p> 1 x 3 of both operating modes prescribe that a mode switch must occur before the temperature leaves the operating interval of [1,3] degrees. 2.2 Formal definition A hybrid automaton is a system A = (X; V; flow; inv; init; E; jump; ; syn) that consists of the following components <ref> [2] </ref>: Variables A finite ordered set X = fx 1 ; x 2 ; : : : ; x n g of real-valued variables. For example, the thermostat automaton of Figure 1 uses the variable x to model the plant temperature (in this case, n = 1). <p> Hence the flow condition _x = x + 5 can be relaxed to the linear condition _x 2 <ref> [2; 4] </ref>. Similarly, for the control mode off , the nonlinear flow condition can be relaxed to the linear condition _x 2 [3; 1]. While clock translation preserves the trajectories of a system, linear phase-portrait approximation adds trajectories to a system. <p> Relaxation, then, yields the linear flow conditions _x 2 [3; 4] for on 1 and _x 2 <ref> [2; 3] </ref> for on 2 . The resulting linear hybrid automaton appears in Figure 5. It has strictly more trajectories than the original nonlinear automaton, but strictly fewer than the earlier approximation from Figure 4. <p> We compute the state 10 _x 2 <ref> [2; 4] </ref> ^ _y = 1 ^ _z = 1 x = 2 ^ y = 0 1 x 3 ^ y 60 _y = 1 ^ _z = 0 turn on x = 1 turn off y; z ' 0 -state assertion ' 1 = Post (' 0 ) in <p> ) 12 x = 1:5 x = 2:5 low mid range 1:5 x 2:5 high 2:5 x 3 ^ _z = 0 ^ _z = 1 ^ _z = 0 x = 1:5 x = 2:5 x = 2:5 x = 1:5 1:5 x 2:5 (on, mid range) _x 2 <ref> [2; 4] </ref> (off, mid range) _x 2 [3; 1] (on,low) _x 2 [2; 4] (off, low) 2:5 x 3 (on, high) _x 2 [2; 4] (off, high) _x 2 [3; 1] ^ _y = 1 ^ 0 y 60 ^ _z = 1 ^ _y = 1 ^ 0 y 60 <p> x 2:5 high 2:5 x 3 ^ _z = 0 ^ _z = 1 ^ _z = 0 x = 1:5 x = 2:5 x = 2:5 x = 1:5 1:5 x 2:5 (on, mid range) _x 2 <ref> [2; 4] </ref> (off, mid range) _x 2 [3; 1] (on,low) _x 2 [2; 4] (off, low) 2:5 x 3 (on, high) _x 2 [2; 4] (off, high) _x 2 [3; 1] ^ _y = 1 ^ 0 y 60 ^ _z = 1 ^ _y = 1 ^ 0 y 60 ^ _z = 0 ^ _y = 1 ^ 0 y 60 <p> _z = 1 ^ _z = 0 x = 1:5 x = 2:5 x = 2:5 x = 1:5 1:5 x 2:5 (on, mid range) _x 2 <ref> [2; 4] </ref> (off, mid range) _x 2 [3; 1] (on,low) _x 2 [2; 4] (off, low) 2:5 x 3 (on, high) _x 2 [2; 4] (off, high) _x 2 [3; 1] ^ _y = 1 ^ 0 y 60 ^ _z = 1 ^ _y = 1 ^ 0 y 60 ^ _z = 0 ^ _y = 1 ^ 0 y 60 ^ _z = 0 turn on x = 1 turn off
Reference: [3] <author> R. Alur, C. Courcoubetis, T. Henzinger, and P.-H. Ho. </author> <title> Hybrid automata: an algorithmic approach to the specification and verification of hybrid systems. </title> <editor> In R. Grossman, A. Nerode, A. Ravn, and H. Rischel, editors, </editor> <title> Hybrid Systems I, </title> <booktitle> Lecture Notes in Computer Science 736, </booktitle> <pages> pages 209-229. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: For modeling more general kinds of hybrid systems, we use the hybrid automaton|a finite automaton with a finite number of real-valued variables that change continuously, as specified by differential equations and differential inequalities, in more general ways than clocks <ref> [3, 36, 2] </ref>. <p> The nondeterministic evolution of real-valued variables can be prescribed using differential inequalities, such as _x 2 <ref> [3; 4] </ref>. By contrast, a boolean dynamical system prescribes how a set of boolean-valued variables evolve over time. <p> Hence the flow condition _x = x + 5 can be relaxed to the linear condition _x 2 [2; 4]. Similarly, for the control mode off , the nonlinear flow condition can be relaxed to the linear condition _x 2 <ref> [3; 1] </ref>. While clock translation preserves the trajectories of a system, linear phase-portrait approximation adds trajectories to a system. Hence, if we prove that the relaxed system satisfies a safety property, we can be sure that the original system also satisfies the property. <p> automaton can be split into two control modes, on 1 and on 2 , each with the flow condition _x = x + 5, mode on 1 with the invariant condition 1 x 2, mode on 2 with the invariant condition 2 x 3, and a 9 off _x 2 <ref> [3; 1] </ref> turn on x = 1 turn off on 1 x 3 x = 2 off _x 2 [3; 1] turn on x = 3 turn off x = 2 on 2 on 1 2 x 3 x = 2 control switch from on 1 to on 2 labeled x <p> _x = x + 5, mode on 1 with the invariant condition 1 x 2, mode on 2 with the invariant condition 2 x 3, and a 9 off _x 2 <ref> [3; 1] </ref> turn on x = 1 turn off on 1 x 3 x = 2 off _x 2 [3; 1] turn on x = 3 turn off x = 2 on 2 on 1 2 x 3 x = 2 control switch from on 1 to on 2 labeled x = 2. <p> Relaxation, then, yields the linear flow conditions _x 2 <ref> [3; 4] </ref> for on 1 and _x 2 [2; 3] for on 2 . The resulting linear hybrid automaton appears in Figure 5. It has strictly more trajectories than the original nonlinear automaton, but strictly fewer than the earlier approximation from Figure 4. <p> Relaxation, then, yields the linear flow conditions _x 2 [3; 4] for on 1 and _x 2 <ref> [2; 3] </ref> for on 2 . The resulting linear hybrid automaton appears in Figure 5. It has strictly more trajectories than the original nonlinear automaton, but strictly fewer than the earlier approximation from Figure 4. <p> 2:5 low mid range 1:5 x 2:5 high 2:5 x 3 ^ _z = 0 ^ _z = 1 ^ _z = 0 x = 1:5 x = 2:5 x = 2:5 x = 1:5 1:5 x 2:5 (on, mid range) _x 2 [2; 4] (off, mid range) _x 2 <ref> [3; 1] </ref> (on,low) _x 2 [2; 4] (off, low) 2:5 x 3 (on, high) _x 2 [2; 4] (off, high) _x 2 [3; 1] ^ _y = 1 ^ 0 y 60 ^ _z = 1 ^ _y = 1 ^ 0 y 60 ^ _z = 0 ^ _y = <p> 0 x = 1:5 x = 2:5 x = 2:5 x = 1:5 1:5 x 2:5 (on, mid range) _x 2 [2; 4] (off, mid range) _x 2 <ref> [3; 1] </ref> (on,low) _x 2 [2; 4] (off, low) 2:5 x 3 (on, high) _x 2 [2; 4] (off, high) _x 2 [3; 1] ^ _y = 1 ^ 0 y 60 ^ _z = 1 ^ _y = 1 ^ 0 y 60 ^ _z = 0 ^ _y = 1 ^ 0 y 60 ^ _z = 0 turn on x = 1 turn off The first disjunct of the on
Reference: [4] <author> R. Alur and D. Dill. </author> <title> A theory of timed automata. </title> <journal> Theoretical Computer Science, </journal> <volume> 126 </volume> <pages> 183-235, </pages> <year> 1994. </year>
Reference-contexts: The first extensions of discrete state-transition models toward mixed discrete-continuous behavior concentrated on the single most important environment parameter|real time. One such model is the timed automaton|a finite automaton augmented with a finite number of clocks, which are real-valued variables whose values change continuously with the constant rate 1 <ref> [4] </ref>. Timed automata have been used successfully to analyze real-time protocols and asynchronous circuits. <p> The nondeterministic evolution of real-valued variables can be prescribed using differential inequalities, such as _x 2 <ref> [3; 4] </ref>. By contrast, a boolean dynamical system prescribes how a set of boolean-valued variables evolve over time. <p> Hence the flow condition _x = x + 5 can be relaxed to the linear condition _x 2 <ref> [2; 4] </ref>. Similarly, for the control mode off , the nonlinear flow condition can be relaxed to the linear condition _x 2 [3; 1]. While clock translation preserves the trajectories of a system, linear phase-portrait approximation adds trajectories to a system. <p> Relaxation, then, yields the linear flow conditions _x 2 <ref> [3; 4] </ref> for on 1 and _x 2 [2; 3] for on 2 . The resulting linear hybrid automaton appears in Figure 5. It has strictly more trajectories than the original nonlinear automaton, but strictly fewer than the earlier approximation from Figure 4. <p> We compute the state 10 _x 2 <ref> [2; 4] </ref> ^ _y = 1 ^ _z = 1 x = 2 ^ y = 0 1 x 3 ^ y 60 _y = 1 ^ _z = 0 turn on x = 1 turn off y; z ' 0 -state assertion ' 1 = Post (' 0 ) in <p> ) 12 x = 1:5 x = 2:5 low mid range 1:5 x 2:5 high 2:5 x 3 ^ _z = 0 ^ _z = 1 ^ _z = 0 x = 1:5 x = 2:5 x = 2:5 x = 1:5 1:5 x 2:5 (on, mid range) _x 2 <ref> [2; 4] </ref> (off, mid range) _x 2 [3; 1] (on,low) _x 2 [2; 4] (off, low) 2:5 x 3 (on, high) _x 2 [2; 4] (off, high) _x 2 [3; 1] ^ _y = 1 ^ 0 y 60 ^ _z = 1 ^ _y = 1 ^ 0 y 60 <p> x 2:5 high 2:5 x 3 ^ _z = 0 ^ _z = 1 ^ _z = 0 x = 1:5 x = 2:5 x = 2:5 x = 1:5 1:5 x 2:5 (on, mid range) _x 2 <ref> [2; 4] </ref> (off, mid range) _x 2 [3; 1] (on,low) _x 2 [2; 4] (off, low) 2:5 x 3 (on, high) _x 2 [2; 4] (off, high) _x 2 [3; 1] ^ _y = 1 ^ 0 y 60 ^ _z = 1 ^ _y = 1 ^ 0 y 60 ^ _z = 0 ^ _y = 1 ^ 0 y 60 <p> _z = 1 ^ _z = 0 x = 1:5 x = 2:5 x = 2:5 x = 1:5 1:5 x 2:5 (on, mid range) _x 2 <ref> [2; 4] </ref> (off, mid range) _x 2 [3; 1] (on,low) _x 2 [2; 4] (off, low) 2:5 x 3 (on, high) _x 2 [2; 4] (off, high) _x 2 [3; 1] ^ _y = 1 ^ 0 y 60 ^ _z = 1 ^ _y = 1 ^ 0 y 60 ^ _z = 0 ^ _y = 1 ^ 0 y 60 ^ _z = 0 turn on x = 1 turn off
Reference: [5] <author> R. Alur, T. Henzinger, and P.-H. Ho. </author> <title> Automatic symbolic verification of embedded systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 22(3) </volume> <pages> 181-201, </pages> <year> 1996. </year>
Reference-contexts: general linear constraints on continuous variables, namely, disjunctions of inequalities of the form Ax ~ c, where A is a constant matrix and c is a constant vector, the symbolic model-checking method for timed automata can be extended to a more general class of hybrid automata called linear hybrid automata <ref> [5] </ref>. <p> A convex linear predicate is a finite conjunction of linear inequalities. A linear predicate is a finite disjunction of convex linear predicates. The hybrid automaton A is a linear hybrid automaton if it satisfies the following two requirements <ref> [5] </ref>: 1. Linearity: For every control mode v 2 V , the flow condition flow (v), the invariant condition inv (v), and the initial condition init (v) are convex linear predicates. For every control switch e 2 E, the jump condition jump (e) is a convex linear predicate. 7 2. <p> A state assertion ' for A is linear if for every control mode v 2 V , the predicate '(v) is linear. For linear hybrid automata, we have the following theorem <ref> [5] </ref>: if A is a linear hybrid automaton, and ' is a linear state assertion for A, then Post (') can be computed and the result is again a linear state assertion for A.
Reference: [6] <author> R. Alur, T. A. Henzinger, and P. W. Kopke. </author> <title> Real-time system = discrete system + clock variables. Software Tools for Technology Transfer, </title> <type> 1(1), </type> <year> 1997. </year>
Reference-contexts: 5 closing 0:9 _x 1:1 train present x := 0 x = 5 train leaves closed near d 100 d = 100 train leaves d = 1000 train present approaching d 1000 55 _ d 45 Example: railroad-gate controller We consider the railroad-gate controller from Figures 17 and 19 of <ref> [6] </ref>. The controller, modeled by the automaton of Figure 11, lowers and raises a gate at a railroad crossing. Whenever it detects the presence of an oncoming train, it closes the gate after 5 time units, as measured with the local clock x.
Reference: [7] <author> R. Alur and R. P. Kurshan. </author> <title> Timing analysis in Cospan. </title> <editor> In R. Alur, T. Henzinger, and E. Sontag, editors, </editor> <booktitle> Hybrid Systems III, Lecture Notes in Computer Science 1066, </booktitle> <pages> pages 220-231. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year> <month> 20 </month>
Reference-contexts: For the verification of hybrid systems that are primarily discrete but include clocks, we recommend the use of specialized tools for the restricted class of timed automata. Symbolic model checkers for timed automata include Kronos [13], timed Cospan <ref> [7] </ref>, timed Hsis [8], Uppaal [9], and Veriti [15]. These systems use algorithms that are specific to clocks, and therefore are more efficient for clock systems than the more general algorithms of HyTech.
Reference: [8] <author> F. Balarin and A. L. Sangiovanni-Vincentelli. </author> <title> Iterative algorithms for formal verification of embedded real-time systems. </title> <booktitle> In ICCAD 94: International Conference on Computer Aided Design, </booktitle> <pages> pages 450-457, </pages> <year> 1994. </year>
Reference-contexts: For the verification of hybrid systems that are primarily discrete but include clocks, we recommend the use of specialized tools for the restricted class of timed automata. Symbolic model checkers for timed automata include Kronos [13], timed Cospan [7], timed Hsis <ref> [8] </ref>, Uppaal [9], and Veriti [15]. These systems use algorithms that are specific to clocks, and therefore are more efficient for clock systems than the more general algorithms of HyTech.
Reference: [9] <author> J. Bengtsson, K. Larsen, F. Larsson, P. Pettersson, and W. Yi. Uppaal: </author> <title> a tool-suite for automatic verification of real-time systems. </title> <editor> In R. Alur, T. Henzinger, and E. Sontag, editors, </editor> <booktitle> Hybrid Systems III, Lecture Notes in Computer Science 1066, </booktitle> <pages> pages 232-243. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: For the verification of hybrid systems that are primarily discrete but include clocks, we recommend the use of specialized tools for the restricted class of timed automata. Symbolic model checkers for timed automata include Kronos [13], timed Cospan [7], timed Hsis [8], Uppaal <ref> [9] </ref>, and Veriti [15]. These systems use algorithms that are specific to clocks, and therefore are more efficient for clock systems than the more general algorithms of HyTech. <p> The HyTech home page http://www.eecs.berkeley.edu/~tah/HyTech includes the source code, executables, an online demo, a user guide, a graphical front end (courtesy of members of the Uppaal project <ref> [9] </ref>), numerous examples, online versions of papers, and pointers to additional literature. Requests may also be sent to hytech@eecs.berkeley.edu.
Reference: [10] <author> J. Burch, E. Clarke, K. McMillan, D. Dill, and L. Hwang. </author> <title> Symbolic model checking: 10 20 states and beyond. </title> <journal> Information and Computation, </journal> <volume> 98(2) </volume> <pages> 142-70, </pages> <year> 1992. </year>
Reference-contexts: This can be done enumeratively, by considering each state individually, or symbolically, by computing with constraints that represent state sets. Because of its ability to deal with very large state spaces, symbolic model checking has been proven an effective technique for the automatic analysis of complex finite state-transition systems <ref> [10] </ref>. In recent years, the model-checking approach has been extended to several classes of infinite state-transition systems, including timed automata [1].
Reference: [11] <author> E. Clarke and E. Emerson. </author> <title> Design and synthesis of synchronization skeletons using branching-time temporal logic. </title> <booktitle> In Workshop on Logic of Programs, Lecture Notes in Computer Science 131. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1981. </year>
Reference-contexts: This research was supported in part by the ONR YIP award N00014-95-1-0520, by the NSF CAREER award CCR-9501708, by the NSF grant CCR-9504469, by the AFOSR contract F49620-93-1-0056, by the ARO MURI grant DAAH-04-96-1-0341, by the ARPA grant NAG2-892, and by the SRC contract 95-DC-324.036. 1 expressed in temporal logic <ref> [11, 37] </ref>. For this purpose, the entire state space of the system is ex-plored. This can be done enumeratively, by considering each state individually, or symbolically, by computing with constraints that represent state sets.
Reference: [12] <author> J. C. Corbett. </author> <title> Timing analysis of Ada tasking programs. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 22(7) </volume> <pages> 461-483, </pages> <year> 1996. </year>
Reference-contexts: Corbett <ref> [12] </ref> has verified robot controllers written in a subset of Ada by automatically translating them into linear hybrid automata for analysis with HyTech. We are currently experimenting with the modeling and analysis of timed circuits.
Reference: [13] <author> C. Daws, A. Olivero, S. Tripakis, and S. Yovine. </author> <title> The tool Kronos. </title> <editor> In R. Alur, T. Henzinger, and E. Sontag, editors, </editor> <booktitle> Hybrid Systems III, Lecture Notes in Computer Science 1066, </booktitle> <pages> pages 208-219. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Abstract-interpretation techniques can enforce the convergence of fixpoint computations by relaxing state assertions. For the verification of hybrid systems that are primarily discrete but include clocks, we recommend the use of specialized tools for the restricted class of timed automata. Symbolic model checkers for timed automata include Kronos <ref> [13] </ref>, timed Cospan [7], timed Hsis [8], Uppaal [9], and Veriti [15]. These systems use algorithms that are specific to clocks, and therefore are more efficient for clock systems than the more general algorithms of HyTech.
Reference: [14] <author> A. Deshpande, A. Gollu, and L. Semenzato. </author> <title> The Shift programming language and run-time system for dynamic networks of hybrid automata. </title> <journal> IEEE Transactions on Automatic Control, </journal> <note> 1997. To appear. </note>
Reference-contexts: Corbett [12] has verified robot controllers written in a subset of Ada by automatically translating them into linear hybrid automata for analysis with HyTech. We are currently experimenting with the modeling and analysis of timed circuits. Tools are also available for the simulation of hybrid automata, such as Shift <ref> [14] </ref>, and for the abstract interpretation of linear hybrid automata, such as Polka [16]. Abstract-interpretation techniques can enforce the convergence of fixpoint computations by relaxing state assertions.
Reference: [15] <author> D. Dill and H. Wong-Toi. </author> <title> Verification of real-time systems by successive over- and underap-proximation. </title> <editor> In P. Wolper, editor, </editor> <booktitle> CAV 95: Computer-aided Verification, Lecture Notes in Computer Science 939, </booktitle> <pages> pages 409-422. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: For the verification of hybrid systems that are primarily discrete but include clocks, we recommend the use of specialized tools for the restricted class of timed automata. Symbolic model checkers for timed automata include Kronos [13], timed Cospan [7], timed Hsis [8], Uppaal [9], and Veriti <ref> [15] </ref>. These systems use algorithms that are specific to clocks, and therefore are more efficient for clock systems than the more general algorithms of HyTech.
Reference: [16] <author> N. Halbwachs, P. Raymond, and Y.-E. Proy. </author> <title> Verification of linear hybrid systems by means of convex approximation. </title> <editor> In B. LeCharlier, editor, </editor> <booktitle> SAS 94: Static Analysis Symposium, Lecture Notes in Computer Science 864, </booktitle> <pages> pages 223-237. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: We are currently experimenting with the modeling and analysis of timed circuits. Tools are also available for the simulation of hybrid automata, such as Shift [14], and for the abstract interpretation of linear hybrid automata, such as Polka <ref> [16] </ref>. Abstract-interpretation techniques can enforce the convergence of fixpoint computations by relaxing state assertions. For the verification of hybrid systems that are primarily discrete but include clocks, we recommend the use of specialized tools for the restricted class of timed automata. <p> Based on the observation that a linear predicate over n variables defines a union of polyhedra in R n , the current, more efficient generation of HyTech [23] manipulates linear predicates via calls to a library for polyhedral operations <ref> [16] </ref>. HyTech has been ported to the following platforms: Digital workstations running Ultrix V4.5 and Digital Unix V3.2D-1, HP 9000 workstations running HP-UX, Sun workstations running SunOS 4.x and Solaris 5.4, and x86 PCs running Linux.
Reference: [17] <author> M. Henzinger, T. Henzinger, and P. Kopke. </author> <title> Computing simulations on finite and infinite graphs. </title> <booktitle> In Proceedings of the 36rd Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 453-462. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1995. </year>
Reference-contexts: The convergence issue, therefore, is not discussed further, and we refer the interested reader to the literature, where decidability results for several subclasses of linear hybrid automata can be found <ref> [18, 17, 28, 26, 34, 27] </ref>. 3.2 Linear hybrid automata The hybrid automaton model is very expressive. While convenient for providing formal descriptions of hybrid systems, the very generality of the model prohibits automatic analysis.
Reference: [18] <author> T. Henzinger. </author> <title> Hybrid automata with finite bisimulations. </title> <editor> In Z. Fulop and F. Gecseg, editors, </editor> <booktitle> ICALP 95: Automata, Languages, and Programming, Lecture Notes in Computer Science 944, </booktitle> <pages> pages 324-335. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: The convergence issue, therefore, is not discussed further, and we refer the interested reader to the literature, where decidability results for several subclasses of linear hybrid automata can be found <ref> [18, 17, 28, 26, 34, 27] </ref>. 3.2 Linear hybrid automata The hybrid automaton model is very expressive. While convenient for providing formal descriptions of hybrid systems, the very generality of the model prohibits automatic analysis.
Reference: [19] <author> T. Henzinger. </author> <title> The theory of hybrid automata. </title> <booktitle> In Proceedings of the 11th Annual Symposium on Logic in Computer Science, </booktitle> <pages> pages 278-292. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1996. </year> <type> Invited tutorial. </type>
Reference-contexts: For more involved model-checking procedures of general temporal-logic requirements, as well as for theoretical results on timed automata, the interested reader is encouraged to consult other literature <ref> [19] </ref>. 2 Hybrid Automata 2.1 Example: a simple thermostat A euclidean dynamical system prescribes how a set of real-valued variables evolve over time.
Reference: [20] <author> T. Henzinger and P.-H. Ho. </author> <title> Algorithmic analysis of nonlinear hybrid systems. </title> <editor> In P. Wolper, editor, </editor> <booktitle> CAV 95: Computer-aided Verification, Lecture Notes in Computer Science 939, </booktitle> <pages> pages 225-238. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year> <month> 21 </month>
Reference-contexts: 2 minutes of elapsed time. 4.2 Applications HyTech has been used in a number of case studies|primarily control-based applications|including a distri-buted robot controller [21], a robot system in manufacturing [21], the Philips audio control protocol [33], an active structure controller [23], a generalized railroad controller [23], a nonlinear temperature controller <ref> [20] </ref>, a predator-prey ecology [30], an aircraft landing-gear system [35], a steam-boiler controller [31], and an automotive engine chassis-level controller [38]. Corbett [12] has verified robot controllers written in a subset of Ada by automatically translating them into linear hybrid automata for analysis with HyTech.
Reference: [21] <author> T. Henzinger and P.-H. Ho. HyTech: </author> <title> The Cornell Hybrid Technology Tool. </title> <editor> In P. Antsaklis, A. Nerode, W. Kohn, and S. Sastry, editors, </editor> <booktitle> Hybrid Systems II, Lecture Notes in Computer Science 999, </booktitle> <pages> pages 265-293. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: From the last state of the trajectory, we infer that the heater has been active for exactly 2=3 of the first 2 minutes of elapsed time. 4.2 Applications HyTech has been used in a number of case studies|primarily control-based applications|including a distri-buted robot controller <ref> [21] </ref>, a robot system in manufacturing [21], the Philips audio control protocol [33], an active structure controller [23], a generalized railroad controller [23], a nonlinear temperature controller [20], a predator-prey ecology [30], an aircraft landing-gear system [35], a steam-boiler controller [31], and an automotive engine chassis-level controller [38]. <p> From the last state of the trajectory, we infer that the heater has been active for exactly 2=3 of the first 2 minutes of elapsed time. 4.2 Applications HyTech has been used in a number of case studies|primarily control-based applications|including a distri-buted robot controller <ref> [21] </ref>, a robot system in manufacturing [21], the Philips audio control protocol [33], an active structure controller [23], a generalized railroad controller [23], a nonlinear temperature controller [20], a predator-prey ecology [30], an aircraft landing-gear system [35], a steam-boiler controller [31], and an automotive engine chassis-level controller [38]. <p> HyTech has been most successful when applied to systems that involve an intricate interplay between discrete and continuous dynamics. 4.3 Availability Early versions of HyTech were built using Mathematica <ref> [21, 32] </ref>, and linear predicates were represented and manipulated as symbolic formulas.
Reference: [22] <author> T. Henzinger and P.-H. Ho. </author> <title> A note on abstract-interpretation strategies for hybrid automata. </title> <editor> In P. Antsaklis, A. Nerode, W. Kohn, and S. Sastry, editors, </editor> <booktitle> Hybrid Systems II, Lecture Notes in Computer Science 999, </booktitle> <pages> pages 252-264. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: This gives the user a flexible framework for writing state-space exploration programs. For added convenience, there are built-in macros for reachability analysis, parametric analysis, the conservative approximation of state assertions <ref> [22] </ref>, and the generation of error trajectories (see below).
Reference: [23] <author> T. Henzinger, P.-H. Ho, and H. Wong-Toi. HyTech: </author> <title> the next generation. </title> <booktitle> In Proceedings of the 16th Annual Real-time Systems Symposium, </booktitle> <pages> pages 56-65. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1995. </year>
Reference-contexts: heater has been active for exactly 2=3 of the first 2 minutes of elapsed time. 4.2 Applications HyTech has been used in a number of case studies|primarily control-based applications|including a distri-buted robot controller [21], a robot system in manufacturing [21], the Philips audio control protocol [33], an active structure controller <ref> [23] </ref>, a generalized railroad controller [23], a nonlinear temperature controller [20], a predator-prey ecology [30], an aircraft landing-gear system [35], a steam-boiler controller [31], and an automotive engine chassis-level controller [38]. <p> exactly 2=3 of the first 2 minutes of elapsed time. 4.2 Applications HyTech has been used in a number of case studies|primarily control-based applications|including a distri-buted robot controller [21], a robot system in manufacturing [21], the Philips audio control protocol [33], an active structure controller <ref> [23] </ref>, a generalized railroad controller [23], a nonlinear temperature controller [20], a predator-prey ecology [30], an aircraft landing-gear system [35], a steam-boiler controller [31], and an automotive engine chassis-level controller [38]. Corbett [12] has verified robot controllers written in a subset of Ada by automatically translating them into linear hybrid automata for analysis with HyTech. <p> Based on the observation that a linear predicate over n variables defines a union of polyhedra in R n , the current, more efficient generation of HyTech <ref> [23] </ref> manipulates linear predicates via calls to a library for polyhedral operations [16]. HyTech has been ported to the following platforms: Digital workstations running Ultrix V4.5 and Digital Unix V3.2D-1, HP 9000 workstations running HP-UX, Sun workstations running SunOS 4.x and Solaris 5.4, and x86 PCs running Linux.
Reference: [24] <author> T. Henzinger, P.-H. Ho, and H. Wong-Toi. </author> <title> A user guide to HyTech. </title> <editor> In E. Brinksma, W. Cleaveland, K. Larsen, T. Margaria, and B. Steffen, editors, </editor> <booktitle> TACAS 95: Tools and Algorithms for the Construction and Analysis of Systems, Lecture Notes in Computer Science 1019, </booktitle> <pages> pages 41-71. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: When ln 3 and ln (3=2) are likewise approximated to the nearest 1=100, HyTech computes an upper bound of 23:51 minutes of heater utilization. 4 HyTech We give only a very brief introduction to HyTech|a detailed tutorial appears in the user guide <ref> [24] </ref>. A HyTech input file consists of two parts. The first part contains the textual description of a collection of linear hybrid automata, which are automatically composed for the analysis. The second part of the input contains a sequence of analysis commands.
Reference: [25] <author> T. Henzinger, P.-H. Ho, and H. Wong-Toi. </author> <title> Algorithmic analysis of nonlinear hybrid systems. </title> <journal> IEEE Transactions on Automatic Control, </journal> <note> 1998. To appear. </note>
Reference-contexts: Since we have no direct means of automatically verifying nonlinear hybrid automata, we have developed two techniques for replacing a nonlinear hybrid automaton by a linear hybrid automaton <ref> [25] </ref>. The first technique, called clock translation, replaces variables that cause nonlinearity by clocks. The second technique, called linear phase-portrait approximation, replaces nonlinear predicates by more relaxed linear predicates.
Reference: [26] <author> T. Henzinger and P. Kopke. </author> <title> State equivalences for rectangular hybrid automata. </title> <editor> In U. Monta-nari and V. Sassone, editors, </editor> <booktitle> CONCUR 96: Concurrency Theory, Lecture Notes in Computer Science 1119, </booktitle> <pages> pages 530-545. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: The convergence issue, therefore, is not discussed further, and we refer the interested reader to the literature, where decidability results for several subclasses of linear hybrid automata can be found <ref> [18, 17, 28, 26, 34, 27] </ref>. 3.2 Linear hybrid automata The hybrid automaton model is very expressive. While convenient for providing formal descriptions of hybrid systems, the very generality of the model prohibits automatic analysis.
Reference: [27] <author> T. Henzinger and P. Kopke. </author> <title> Discrete-time control for rectangular hybrid automata. </title> <editor> In P. Degano, R. Gorrieri, and A. Marchetti-Spaccamela, editors, </editor> <booktitle> ICALP 97: Automata, Languages, and Programming, Lecture Notes in Computer Science 1256, </booktitle> <pages> pages 582-593. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: The convergence issue, therefore, is not discussed further, and we refer the interested reader to the literature, where decidability results for several subclasses of linear hybrid automata can be found <ref> [18, 17, 28, 26, 34, 27] </ref>. 3.2 Linear hybrid automata The hybrid automaton model is very expressive. While convenient for providing formal descriptions of hybrid systems, the very generality of the model prohibits automatic analysis.
Reference: [28] <author> T. Henzinger, P. Kopke, A. Puri, and P. Varaiya. </author> <booktitle> What's decidable about hybrid automata? In Proceedings of the 27th Annual Symposium on Theory of Computing, </booktitle> <pages> pages 373-382. </pages> <publisher> ACM Press, </publisher> <year> 1995. </year>
Reference-contexts: The convergence issue, therefore, is not discussed further, and we refer the interested reader to the literature, where decidability results for several subclasses of linear hybrid automata can be found <ref> [18, 17, 28, 26, 34, 27] </ref>. 3.2 Linear hybrid automata The hybrid automaton model is very expressive. While convenient for providing formal descriptions of hybrid systems, the very generality of the model prohibits automatic analysis.
Reference: [29] <author> T. Henzinger, X. Nicollin, J. Sifakis, and S. Yovine. </author> <title> Symbolic model checking for real-time systems. </title> <journal> Information and Computation, </journal> <volume> 111(2) </volume> <pages> 193-244, </pages> <year> 1994. </year> <note> Special issue for LICS 92. </note>
Reference-contexts: manipulation of certain linear constraints on clock values, namely, disjunctions of inequalities of the form x ~ b and x y ~ b, for clock vectors x and y, an inequality operator ~ 2 f; g, and a constant integer vector b, whose components are bounded for any given automaton <ref> [29] </ref>. Since there are only finitely many of these constraints, all computations required for model checking are guaranteed to terminate.
Reference: [30] <author> T. Henzinger and H. Wong-Toi. </author> <title> Linear phase-portrait approximations for nonlinear hybrid systems. </title> <editor> In R. Alur, T. Henzinger, and E. Sontag, editors, </editor> <booktitle> Hybrid Systems III, Lecture Notes in Computer Science 1066, </booktitle> <pages> pages 377-388. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: time. 4.2 Applications HyTech has been used in a number of case studies|primarily control-based applications|including a distri-buted robot controller [21], a robot system in manufacturing [21], the Philips audio control protocol [33], an active structure controller [23], a generalized railroad controller [23], a nonlinear temperature controller [20], a predator-prey ecology <ref> [30] </ref>, an aircraft landing-gear system [35], a steam-boiler controller [31], and an automotive engine chassis-level controller [38]. Corbett [12] has verified robot controllers written in a subset of Ada by automatically translating them into linear hybrid automata for analysis with HyTech.
Reference: [31] <author> T. Henzinger and H. Wong-Toi. </author> <title> Using HyTech to synthesize control parameters for a steam boiler. </title> <editor> In J.-R. Abrial, E. Borger, and H. Langmaack, editors, </editor> <title> Formal Methods for Industrial Applications: Specifying and Programming the Steam Boiler Control, </title> <booktitle> Lecture Notes in Computer Science 1165, </booktitle> <pages> pages 265-282. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: number of case studies|primarily control-based applications|including a distri-buted robot controller [21], a robot system in manufacturing [21], the Philips audio control protocol [33], an active structure controller [23], a generalized railroad controller [23], a nonlinear temperature controller [20], a predator-prey ecology [30], an aircraft landing-gear system [35], a steam-boiler controller <ref> [31] </ref>, and an automotive engine chassis-level controller [38]. Corbett [12] has verified robot controllers written in a subset of Ada by automatically translating them into linear hybrid automata for analysis with HyTech. We are currently experimenting with the modeling and analysis of timed circuits.
Reference: [32] <author> P.-H. Ho. </author> <title> Automatic Analysis of Hybrid Systems. </title> <type> PhD thesis, </type> <institution> Cornell University, </institution> <year> 1995. </year>
Reference-contexts: HyTech has been most successful when applied to systems that involve an intricate interplay between discrete and continuous dynamics. 4.3 Availability Early versions of HyTech were built using Mathematica <ref> [21, 32] </ref>, and linear predicates were represented and manipulated as symbolic formulas.
Reference: [33] <author> P.-H. Ho and H. Wong-Toi. </author> <title> Automated analysis of an audio control protocol. </title> <editor> In P. Wolper, editor, </editor> <booktitle> CAV 95: Computer-aided Verification, Lecture Notes in Computer Science 939, </booktitle> <pages> pages 381-394. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: trajectory, we infer that the heater has been active for exactly 2=3 of the first 2 minutes of elapsed time. 4.2 Applications HyTech has been used in a number of case studies|primarily control-based applications|including a distri-buted robot controller [21], a robot system in manufacturing [21], the Philips audio control protocol <ref> [33] </ref>, an active structure controller [23], a generalized railroad controller [23], a nonlinear temperature controller [20], a predator-prey ecology [30], an aircraft landing-gear system [35], a steam-boiler controller [31], and an automotive engine chassis-level controller [38].
Reference: [34] <author> P. Kopke. </author> <title> The Theory of Rectangular Hybrid Automata. </title> <type> PhD thesis, </type> <institution> Cornell University, </institution> <year> 1996. </year> <month> 22 </month>
Reference-contexts: The convergence issue, therefore, is not discussed further, and we refer the interested reader to the literature, where decidability results for several subclasses of linear hybrid automata can be found <ref> [18, 17, 28, 26, 34, 27] </ref>. 3.2 Linear hybrid automata The hybrid automaton model is very expressive. While convenient for providing formal descriptions of hybrid systems, the very generality of the model prohibits automatic analysis.
Reference: [35] <author> S. Nadjm-Tehrani and J.-E. Stromberg. </author> <title> Proving dynamic properties in an aerospace appli-cation. </title> <booktitle> In Proceedings of the 16th Annual Real-time Systems Symposium, </booktitle> <pages> pages 2-10. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1995. </year>
Reference-contexts: been used in a number of case studies|primarily control-based applications|including a distri-buted robot controller [21], a robot system in manufacturing [21], the Philips audio control protocol [33], an active structure controller [23], a generalized railroad controller [23], a nonlinear temperature controller [20], a predator-prey ecology [30], an aircraft landing-gear system <ref> [35] </ref>, a steam-boiler controller [31], and an automotive engine chassis-level controller [38]. Corbett [12] has verified robot controllers written in a subset of Ada by automatically translating them into linear hybrid automata for analysis with HyTech. We are currently experimenting with the modeling and analysis of timed circuits.
Reference: [36] <author> X. Nicollin, A. Olivero, J. Sifakis, and S. Yovine. </author> <title> An approach to the description and analysis of hybrid systems. </title> <editor> In R. Grossman, A. Nerode, A. Ravn, and H. Rischel, editors, </editor> <title> Hybrid Systems I, </title> <booktitle> Lecture Notes in Computer Science 736, </booktitle> <pages> pages 149-178. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: For modeling more general kinds of hybrid systems, we use the hybrid automaton|a finite automaton with a finite number of real-valued variables that change continuously, as specified by differential equations and differential inequalities, in more general ways than clocks <ref> [3, 36, 2] </ref>.
Reference: [37] <author> J. Queille and J. Sifakis. </author> <title> Specification and verification of concurrent systems in Cesar. </title> <editor> In M. Dezani-Ciancaglini and U. Montanari, editors, </editor> <booktitle> Fifth International Symposium on Programming, Lecture Notes in Computer Science 137, </booktitle> <pages> pages 337-351. </pages> <publisher> Springer-Verlag, </publisher> <year> 1981. </year>
Reference-contexts: This research was supported in part by the ONR YIP award N00014-95-1-0520, by the NSF CAREER award CCR-9501708, by the NSF grant CCR-9504469, by the AFOSR contract F49620-93-1-0056, by the ARO MURI grant DAAH-04-96-1-0341, by the ARPA grant NAG2-892, and by the SRC contract 95-DC-324.036. 1 expressed in temporal logic <ref> [11, 37] </ref>. For this purpose, the entire state space of the system is ex-plored. This can be done enumeratively, by considering each state individually, or symbolically, by computing with constraints that represent state sets.
Reference: [38] <author> T. Stauner, O. Muller, and M. Fuchs. </author> <title> Using HyTech to verify an automotive control system. </title> <editor> In O. Maler, editor, </editor> <booktitle> HART 97: International Workshop on Hybrid and Real-Time Systems, Lecture Notes in Computer Science 1201, </booktitle> <pages> pages 139-153. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year> <month> 23 </month>
Reference-contexts: distri-buted robot controller [21], a robot system in manufacturing [21], the Philips audio control protocol [33], an active structure controller [23], a generalized railroad controller [23], a nonlinear temperature controller [20], a predator-prey ecology [30], an aircraft landing-gear system [35], a steam-boiler controller [31], and an automotive engine chassis-level controller <ref> [38] </ref>. Corbett [12] has verified robot controllers written in a subset of Ada by automatically translating them into linear hybrid automata for analysis with HyTech. We are currently experimenting with the modeling and analysis of timed circuits.
References-found: 38

