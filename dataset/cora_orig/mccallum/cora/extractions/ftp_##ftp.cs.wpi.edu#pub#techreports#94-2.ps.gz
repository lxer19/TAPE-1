URL: ftp://ftp.cs.wpi.edu/pub/techreports/94-2.ps.gz
Refering-URL: http://cs.wpi.edu/Resources/techreports/index.html
Root-URL: 
Title: Experience with an Interactive Attribute-Based User Information Environment  
Author: Craig E. Wills Dominic Giampaolo* Michael Mackovitch* 
Note: *Current address:  
Address: Worcester, MA 01609 WPI-CS-TR-94-2  Mountain View, CA.  
Affiliation: Computer Science Department Worcester Polytechnic Institute  Silicon Graphics, Inc.  
Abstract: This paper explores an attribute-based approach to storing information in the context of a file system that supports extended attributes about files and a mechanism to manipulate files based on logical queries and comparisons of attributes. The novel aspects of our system are that it is sophisticated enough to operate as a user's primary method of interaction with the operating system and that it supports derived attributes whose values are derived at look-up time. Organizational mechanisms are explored to aid in the navigation of the system. We implemented our system as a user-level NFS server that supports attribute-based naming of files and other objects. We discuss its details, our experiences with it and performance comparisons between it and a traditional hierarchical file system. 
Abstract-found: 1
Intro-found: 1
Reference: [BPY90] <author> Mic Bowman, Larry L. Peterson, and Andrey Yeatts. Univers: </author> <title> An attribute-based name server. </title> <journal> Software-Practice and Experience, </journal> <volume> 20(4) </volume> <pages> 403-424, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: In each case the resulting name space is hierarchical. Attribute-based naming has been used in such applications as directory lookup services for access to information contained in a directory or phone-book like database <ref> [BPY90, Neu89] </ref>. However these systems do not work on everyday information such as files. More specific to our work are previous efforts at attribute-based naming of files [Mog86, GJSO91, Sec91, Ols93]. Mogul did early work on exploring the use of properties with files [Mog86].
Reference: [Gia93] <author> Dominic Giampaolo. </author> <title> CATFS|a content addressable, typed file system. </title> <type> Master's thesis, </type> <institution> Computer Science Department, Worcester Polytechnic Institute, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: The performance of the system is compared with a traditional hierarchical file system. The paper concludes with a description of related work, our experiences and future work to be done on the project. 2 Overview Initial work on the system concentrated on designing and building an attribute-based file system <ref> [Gia93] </ref>.
Reference: [GJSO91] <author> David K. Gifford, Pierre Jouvelot, Mark A. Shelton, and James O'Toole Jr. </author> <title> Semantic file systems. </title> <journal> Operating Systems Review, </journal> <volume> 25(5) </volume> <pages> 15-25, </pages> <month> Oc-tober </month> <year> 1991. </year>
Reference-contexts: However these systems do not work on everyday information such as files. More specific to our work are previous efforts at attribute-based naming of files <ref> [Mog86, GJSO91, Sec91, Ols93] </ref>. Mogul did early work on exploring the use of properties with files [Mog86]. Properties represent information about files, but do not store information based on derivations of the contents of the files. <p> Properties represent information about files, but do not store information based on derivations of the contents of the files. The Semantic File System (SFS) interfaces to the rest of the computer as a regular, read-only file system, overlaying its extended semantics on top of standard operations <ref> [GJSO91] </ref>. The SFS processes path names as requests about files and uses the components of the path name to specify attributes. It determines which files match the criteria and creates a pseudo-directory containing the files that match. It only allows conjunctions of attributes.
Reference: [Mac94] <author> Michael S. Mackovitch. </author> <title> Organization and extension of an attribute based naming mechanism. </title> <type> Master's thesis, </type> <institution> Computer Science Department, Worcester Polytechnic Institute, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: are not always easy to compute and can degenerate into a search of many files. 16&gt; cd /attrfs/proj1 17&gt; ls ATTR: Tag=RCS:9 Tag=src:27 Type=C source:3 Tag=proj1:40 Type=C header:1 Type=Text:7 Problems with organization and orientation within an attribute-based name space led to followup work on the system to explore better mechanisms <ref> [Mac94] </ref>. The principal result of this work was the development of a view object. This mechanism allows for an organization structure to be incorporated in the environment without losing the flexibility of an attribute-based system.
Reference: [Mog86] <author> Jeffrey C. Mogul. </author> <title> Representing Information about Files. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Stanford University, </institution> <month> March </month> <year> 1986. </year> <note> Also available as Technical Report STAN-CS-86-1103. </note>
Reference-contexts: However these systems do not work on everyday information such as files. More specific to our work are previous efforts at attribute-based naming of files <ref> [Mog86, GJSO91, Sec91, Ols93] </ref>. Mogul did early work on exploring the use of properties with files [Mog86]. Properties represent information about files, but do not store information based on derivations of the contents of the files. <p> However these systems do not work on everyday information such as files. More specific to our work are previous efforts at attribute-based naming of files [Mog86, GJSO91, Sec91, Ols93]. Mogul did early work on exploring the use of properties with files <ref> [Mog86] </ref>. Properties represent information about files, but do not store information based on derivations of the contents of the files. The Semantic File System (SFS) interfaces to the rest of the computer as a regular, read-only file system, overlaying its extended semantics on top of standard operations [GJSO91].
Reference: [Neu89] <author> Gerald W. Neufeld. </author> <title> Descriptive names in X.500. </title> <booktitle> In SIGCOMM '89 Symposium, Communications Architectures and Protocols, </booktitle> <pages> pages 64-71, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: In each case the resulting name space is hierarchical. Attribute-based naming has been used in such applications as directory lookup services for access to information contained in a directory or phone-book like database <ref> [BPY90, Neu89] </ref>. However these systems do not work on everyday information such as files. More specific to our work are previous efforts at attribute-based naming of files [Mog86, GJSO91, Sec91, Ols93]. Mogul did early work on exploring the use of properties with files [Mog86].
Reference: [NR94] <author> Michael N. Nelson and Sanjay R. Radia. </author> <title> A uniform name service for spring's unix environment. </title> <booktitle> In Proceedings of the 1994 Winter USENIX Conference, </booktitle> <pages> pages 201-209, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: sec extended query (chdir) 0.11 sec create file (creat) 0.38 sec 0.05 sec delete file (unlink) 0.22 sec 0.02 sec 7 Related Work The integration of naming environments within a hierarchical environment has been explored in previous work such as Plan9 [PPT + 93] and the Spring operating 12 system <ref> [NR94] </ref>. The Plan9 work integrates objects using the existing the Unix operating system file space while the Spring work uses name objects, which are contexts in which objects can be placed. In each case the resulting name space is hierarchical.
Reference: [Ols93] <author> Michael A. Olson. </author> <title> The design and implementation of the Inversion file system. </title> <booktitle> In Proceedings of the 1993 Winter USENIX Conference, </booktitle> <pages> pages 205-217, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: However these systems do not work on everyday information such as files. More specific to our work are previous efforts at attribute-based naming of files <ref> [Mog86, GJSO91, Sec91, Ols93] </ref>. Mogul did early work on exploring the use of properties with files [Mog86]. Properties represent information about files, but do not store information based on derivations of the contents of the files. <p> Other work by Sechrest [SM92] explores a hybrid approach that blends attribute-based naming and hierarchical naming so as to impose structure on a attribute-based system, 13 although little experience is reported with actual use. The InversionFS <ref> [Ols93] </ref> provides a set of file manipulation function calls that interface with the postgres database [SK91]. Although the focus of the Inver-sionFS is not specifically attribute-based naming of information, it is one of the features they support.
Reference: [PPT + 93] <author> Rob Pike, Dave Presotto, Ken Thompson, Howard Trickey, and Phil Winterbottom. </author> <title> The use of name spaces in plan 9. </title> <journal> Operating Systems Review, </journal> <volume> 27(2) </volume> <pages> 72-76, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: 0.002 sec create view (chdir with view objects) 0.004 sec extended query (chdir) 0.11 sec create file (creat) 0.38 sec 0.05 sec delete file (unlink) 0.22 sec 0.02 sec 7 Related Work The integration of naming environments within a hierarchical environment has been explored in previous work such as Plan9 <ref> [PPT + 93] </ref> and the Spring operating 12 system [NR94]. The Plan9 work integrates objects using the existing the Unix operating system file space while the Spring work uses name objects, which are contexts in which objects can be placed. In each case the resulting name space is hierarchical.
Reference: [Sec91] <author> Stuart Sechrest. </author> <title> Attribute-based naming of files. </title> <type> Technical Report CSE TR-78-91, </type> <institution> Department of Electrical Engineering and Computer Science, University of Michigan, </institution> <month> January </month> <year> 1991. </year>
Reference-contexts: However these systems do not work on everyday information such as files. More specific to our work are previous efforts at attribute-based naming of files <ref> [Mog86, GJSO91, Sec91, Ols93] </ref>. Mogul did early work on exploring the use of properties with files [Mog86]. Properties represent information about files, but do not store information based on derivations of the contents of the files. <p> This approach results in much storage being used and the chance of these pseudo-directories becoming out-of-date, which limits their use on information users are manipulating on a daily basis. The work done by Sechrest in <ref> [Sec91] </ref> describes a simulation that implements a flexible attribute-based approach to naming of files. Their system supports attribute rules that define implicit attributes for a file. If the attributes of a file satisfy a rule then additional attributes are defined for the file.
Reference: [SK91] <author> Michael Stonebraker and Greg Kemnitz. </author> <title> The postgres next gener ation database management system. </title> <journal> Communications of the ACM, </journal> <volume> 34(10) </volume> <pages> 78-92, </pages> <month> October </month> <year> 1991. </year> <month> 16 </month>
Reference-contexts: The InversionFS [Ols93] provides a set of file manipulation function calls that interface with the postgres database <ref> [SK91] </ref>. Although the focus of the Inver-sionFS is not specifically attribute-based naming of information, it is one of the features they support. Because file data are stored in a database, full logical queries about file attributes are possible.
Reference: [SM92] <author> Stuart Sechrest and Michael McClennen. </author> <title> Blending hierarchical and attribute-based file naming. </title> <booktitle> In Proceedings of the 12th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 572-580, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: Their system supports attribute rules that define implicit attributes for a file. If the attributes of a file satisfy a rule then additional attributes are defined for the file. Other work by Sechrest <ref> [SM92] </ref> explores a hybrid approach that blends attribute-based naming and hierarchical naming so as to impose structure on a attribute-based system, 13 although little experience is reported with actual use. The InversionFS [Ols93] provides a set of file manipulation function calls that interface with the postgres database [SK91].
References-found: 12

