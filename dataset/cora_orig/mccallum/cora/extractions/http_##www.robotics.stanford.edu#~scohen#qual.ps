URL: http://www.robotics.stanford.edu/~scohen/qual.ps
Refering-URL: http://www.robotics.stanford.edu/~scohen/
Root-URL: http://www.robotics.stanford.edu
Title: Measuring Point Set Similarity with the Hausdorff Distance: Theory and Applications  
Author: Scott D. Cohen 
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> L. Paul Chew, Dorit Dor, Alon Efrat, and Klara Kedem. </author> <title> Geometric pattern matching in d-dimensional space. </title> <note> Unpublished. </note>
Reference-contexts: In this case we would use the directed Hausdorff distance from the query set to the database figure set. This paper is intended to be a summary and synthesis of four papers: 1. Geometric Pattern Matching under Euclidean Motion [2] 2. Geometric Pattern Matching in d-Dimensional Space <ref> [1] </ref> 3. Comparing Images Using the Hausdorff Distance [12] 4. Locating Objects Using the Hausdorff Distance [15]. Papers 1 and 2 are "theory" papers concerned with the exact computation of the Hausdorff distance.
Reference: [2] <author> L. Paul Chew, Michael T. Goodrich, Daniel P. Huttenlocher, Klara Kedem, Jon M. Kleinberg, and Dina Kravets. </author> <title> Geometric pattern matching under euclidean motion. </title> <booktitle> In Proceedings of the Fifth Canadian Conference on Computational Geometry, </booktitle> <pages> pages 151-156, </pages> <year> 1993. </year>
Reference-contexts: In this case we would use the directed Hausdorff distance from the query set to the database figure set. This paper is intended to be a summary and synthesis of four papers: 1. Geometric Pattern Matching under Euclidean Motion <ref> [2] </ref> 2. Geometric Pattern Matching in d-Dimensional Space [1] 3. Comparing Images Using the Hausdorff Distance [12] 4. Locating Objects Using the Hausdorff Distance [15]. Papers 1 and 2 are "theory" papers concerned with the exact computation of the Hausdorff distance. <p> time for the algorithm is O (P log P + T S log 2 P ). "The important property here is that * fl is a critical value for both the sorting algorithm and our sequential algorithm A S , ensuring that it will be discovered during the parametric search." <ref> [2] </ref> The value of * fl is the left endpoint of the final interval constraint.
Reference: [3] <author> L. Paul Chew and Klara Kedem. </author> <title> Improvements on geometric pattern matching problems. </title> <editor> In O. Nurmi and E. Ukkonen, editors, </editor> <booktitle> Algorithm Theory SWAT '92, </booktitle> <pages> pages 318-325. </pages> <publisher> Springer-Verlag, </publisher> <month> July </month> <year> 1992. </year>
Reference-contexts: the optimization problem for Euclidean motion may be solved in time O (m 2 n 2 (m + n) log 2 mn). 5 The Optimization Problem: d 2, G = T , = L 1 The planar case for the L 1 metric with G = T is considered in <ref> [3] </ref>.
Reference: [4] <author> Richard Cole. </author> <title> Parallel merge sort. </title> <journal> SIAM Journal of Computing, </journal> <volume> 17(4) </volume> <pages> 770-785, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: Putting P = O (mn) and T S = O (m 2 n 2 (m + n) log (mn)), we see that we can solve the optimization problem in time O (m 2 n 2 (m + n) log 3 mn). Using Cole's parallel sorting algorithm and sequential simulation <ref> [4] </ref>, we can remove one log mn factor.
Reference: [5] <author> Greg N. Frederickson. </author> <title> Optimal algorithms for tree partitioning. </title> <booktitle> In Proceedings of the Second Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 168-177, </pages> <year> 1991. </year>
Reference-contexts: Simple modifications to the above proof show that this is also the bound for the undirected problem. A form of parametric search due to Frederickson and Johnson <ref> [5, 6] </ref> is used to obtain an algo rithm for the optimization problem from the algorithm given above for the decision problem.
Reference: [6] <author> Greg N. Frederickson and Donald B. Johnson. </author> <title> Finding kth paths and p-centers by generating and searching good data structures. </title> <journal> Journal of Algorithms, </journal> <volume> 4 </volume> <pages> 61-80, </pages> <year> 1983. </year>
Reference-contexts: Simple modifications to the above proof show that this is also the bound for the undirected problem. A form of parametric search due to Frederickson and Johnson <ref> [5, 6] </ref> is used to obtain an algo rithm for the optimization problem from the algorithm given above for the decision problem.
Reference: [7] <author> Leonidas J. Guibas. </author> <title> Parametric search. In CS368: Geometric Algorithms. </title> <institution> Stanford University, </institution> <year> 1994. </year>
Reference: [8] <author> Leonidas J. Guibas and Lyle Ramshaw. </author> <title> The wonders of segment trees. In CS348a: </title> <institution> Computer Graphics Mathematical Foundations. Stanford University, </institution> <year> 1993. </year> <month> 15 </month>
Reference-contexts: Thus we have a total of O (mn) rectangles. The maximum depth over all points in the union of O (mn) rectangles can be computed in O (mn log mn) time by sweeping a segment tree <ref> [8] </ref> over the arrangement of rectangles. The events are the O (mn) y coordinates of the horizontal sides of the rectangles, and the intervals inserted and deleted from the segment tree are the horizontal sides.
Reference: [9] <author> L.J. Guibas, J.S.B. Mitchell, and T. Roos. </author> <title> Voronoi diagrams of moving points in the plane. </title> <booktitle> In Seventeenth International Workshop on Graph-Theoretic Concepts in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <month> June </month> <year> 1991. </year>
Reference-contexts: We can compute a superset of the creation/deletion and depth change events by computing all pairwise and triplewise dynamic Voronoi diagrams of fS j ()g n j=1 . Using a result from Guibas et. al. <ref> [9] </ref>, each pairwise or triplewise dynamic Voronoi diagram can be computed in time O (m 2 log m) : O (m) sources, O (m log m) to compute the initial Voronoi diagram at = 0, and O (log m) per update for O (m 2 ) topological events.
Reference: [10] <author> Daniel P. Huttenlocher, Klara Kedem, and Jon M. Kleinberg. </author> <title> On dynamic voronoi diagrams and the minimum hausdorff distance for point sets under euclidean motion in the plane. </title> <booktitle> In Proceedings of the Eighth Annual ACM Symposium on Computational Geometry, </booktitle> <pages> pages 110-119, </pages> <year> 1992. </year>
Reference-contexts: Considering all depth change events, no vertex of a pairwise or triplewise diagram is charged more than a constant number of times. A result from Huttenlocher et. al. <ref> [10] </ref> states that there are O (m 2 k 2 s (k)) topological changes in the dynamic Voronoi diagram of [ k i=1 T i when each set of points T i , jT i j = m, moves rigidly (here s is a small constant).
Reference: [11] <author> Daniel P. Huttenlocher, Klara Kedem, and Micha Sharir. </author> <title> The upper envelope of voronoi surfaces and its applications. </title> <journal> Discrete and Computational Geometry, </journal> <volume> 9(3) </volume> <pages> 267-291. </pages>
Reference-contexts: The algorithm to solve the directed decision problem is as follows: Directed Decision Problem Algorithm * For = 0, compute the minimum Hausdorff distance under translation from B to A. For () = k k 2 , this can be done in time O (mn 2 log mn) <ref> [11] </ref>.
Reference: [12] <author> Daniel P. Huttenlocher, Gregory A. Klanderman, and William J. Rucklidge. </author> <title> Comparing images using the hausdorff distance. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 15(9) </volume> <pages> 850-863, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: This paper is intended to be a summary and synthesis of four papers: 1. Geometric Pattern Matching under Euclidean Motion [2] 2. Geometric Pattern Matching in d-Dimensional Space [1] 3. Comparing Images Using the Hausdorff Distance <ref> [12] </ref> 4. Locating Objects Using the Hausdorff Distance [15]. Papers 1 and 2 are "theory" papers concerned with the exact computation of the Hausdorff distance. Both present algorithms for the optimization problem: find min g2G H (A; g (B)), where G is some transformation group. <p> Distance transforms can be computed very efficiently on an integer grid with the help of a rendering engine and z-buffer <ref> [12] </ref>. 7 Locating a Model within an Image: G = T We now consider the model location problem with G = T ; i.e., the model is only allowed to translate with respect to the image. <p> This verification phase is usually not a bottleneck. 7.4 An Example within a hotel image (using the efficient algorithm described in the previous subsections). This example is similar in complexity and timing results to the examples given in Section VI of <ref> [12] </ref>.
Reference: [13] <author> Nimrod Megiddo. </author> <title> Applying parallel computation algorithms in the design of serial algorithms. </title> <journal> Journal of the ACM, </journal> <volume> 30(4) </volume> <pages> 852-865, </pages> <month> October </month> <year> 1983. </year>
Reference-contexts: The general strategy used in both theory papers is to develop an algorithm for the decision problem and then use this algorithm in some form of parametric search <ref> [13] </ref> to get an algorithm for the optimization problem. A common framework is used in attacking the decision problem. This framework turns the decision problem into a geometric intersection problem. For the moment we assume G = T .
Reference: [14] <author> Mark H. Overmars and Chee-Keng Yap. </author> <title> New upper bounds in klee's measure problem. </title> <journal> SIAM Journal of Computing, </journal> <volume> 20(6) </volume> <pages> 1034-1045, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: A higher dimensional data structure to play the role of the segment tree is needed for this task. The authors use a modified version of the Orthogonal Partition Tree (OPT) first introduced by Overmars and Yap <ref> [14] </ref>.
Reference: [15] <author> William J. Rucklidge. </author> <title> Locating objects using the hausdorff distance. </title> <booktitle> In Fifth International Conference on Computer Vision, </booktitle> <pages> pages 457-464, </pages> <year> 1995. </year> <month> 16 </month>
Reference-contexts: This paper is intended to be a summary and synthesis of four papers: 1. Geometric Pattern Matching under Euclidean Motion [2] 2. Geometric Pattern Matching in d-Dimensional Space [1] 3. Comparing Images Using the Hausdorff Distance [12] 4. Locating Objects Using the Hausdorff Distance <ref> [15] </ref>. Papers 1 and 2 are "theory" papers concerned with the exact computation of the Hausdorff distance. Both present algorithms for the optimization problem: find min g2G H (A; g (B)), where G is some transformation group. <p> Decreasing the value of t used in computing P B [R] strengthens the pruning process. Similarly, in the search for the best fraction match, we increase f 1 as the search progresses. Examples in <ref> [15] </ref> show that the method is accurate it correctly locates affinely transformed versions of a model within an image. The time taken is quite low (seconds) when the point set sizes are small or when the transformation range to be searched is strongly restricted. <p> The author points out: "While this time is not as good as might be hoped for, it should be noted that the number of points in the image and model are many times larger than can be handled by other methods that search under affine transformation : : : ." <ref> [15] </ref> 9 Conclusion We have considered three types of Hausdorff point set matching problems: the decision problem, the optimization problem, and the reporting problem.
References-found: 15

