URL: ftp://ftp.elis.rug.ac.be/pub/prolog/iclp94_workshop/jacquet.ps.Z
Refering-URL: http://www.informatik.uni-trier.de/~ley/db/conf/iclp/iclp94-w1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Towards Resource Handling in Logic Programming: the PPL Framework and its Semantics  
Author: Jean-Marie Jacquet and Lus Monteiro 
Abstract: The PPL framework is proposed as a simple extension to logic programming aiming at handling resources. It is argued that the separation between logical treatments and resource handling is desirable and, to that end, resources are proposed to be manipulated by means of pre- and post-conditions associated with usual Horn clauses. The expressiveness of the resulting framework is evidenced through the coding of several applications involving objects, databases, actions and changes. Operational and declarative semantics are presented as well. The operational semantics rests on a derivation relation stating how goals and conditions are evaluated. The declarative semantics extends the classical model and fixed-point theories to take into account the evaluation of pre- and post-conditions, and in particular the non-monotonic behavior of the world of resources they induce in general. As suggested, an effort has been made to keep the work close to the classical logic programming setting. In particular, the semantics are in the main streams of logic programming semantics. However, the PPL framework raises new problems for which fresh solutions are proposed. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.-M. Andreoli and R. Pareschi. </author> <title> Linear Objects: Logical Processes with Built-in Inheritance. </title> <editor> In D.H.D. Warren and P. Szeredi, editors, </editor> <booktitle> Proc. 7 th Int. Conf. on Logic Programming, </booktitle> <pages> pages 495-510, </pages> <address> Jerusalem, Israel, 1990. </address> <publisher> The MIT Press. </publisher>
Reference-contexts: Finally, to conclude this non-exhaustive list of examples, the synchronous communication mechanism introduced in <ref> [5, 1, 15, 16] </ref> can also be viewed as another instance of this general resource-based scheme. There, processes are simultaneously reduced to others and thus act as resources for their synchronizing partners. <p> However, taking profit of its specificity, we have been able to design semantics that, although they borrow from imperative techniques, still constitute reasonable extensions to the classical logic programming framework. Linear logic provides an alternative way of handling resources (see e.g. <ref> [1, 18, 26] </ref>). Although it is certainly promising, we have preferred to follow the lines of an extension of classical logic programming. This paper proves that this is possible and does not lead to intricacies. However, the connections with linear logic will be explored in future work.
Reference: [2] <author> A. Baker. </author> <title> Nonmonotonic Reasoning in the Framework of the Situation Calculus. </title> <journal> Artificial Intelligence, </journal> <volume> 49 </volume> <pages> 5-23, </pages> <year> 1991. </year>
Reference: [3] <author> K. De Bosschere and J.-M. Jacquet. </author> <title> Comparative Semantics of log. </title> <editor> In D. Etiemble and J.-C. Syre, editors, </editor> <booktitle> Proceedings of the PARLE'92 Conference, volume 605 of Lecture Notes in Computer Science, </booktitle> <pages> pages 911-926, </pages> <address> Paris, 1992. </address> <publisher> Springer-Verlag. </publisher> <pages> 14 </pages>
Reference-contexts: In PPL which facts are true actually depend on the considered world of resources. Moreover, because of the pre- and post-conditions, this world may have a non-monotonic behavior and, because of the parallel composition inside pp-goals it may be influenced by concurrent evaluations. Hence, following previous work <ref> [24, 3] </ref>, an interpretation should define the truth of an atom not in absolute terms nor with respect to a given world of resources but with respect to traces reporting the successive states of this world. We are thus naturally lead to the following definitions.
Reference: [4] <author> K. De Bosschere and J.-M. Jacquet. Multi-Prolog: </author> <title> Definition, Operational Semantics, and Implementation. </title> <editor> In D.S. Warren, editor, </editor> <booktitle> Proceedings of the ICLP'93 Conference, </booktitle> <pages> pages 299-314, </pages> <address> Budapest, Hungary, 1993. </address> <publisher> The MIT Press. </publisher>
Reference-contexts: Examples of this trend include the tell and ask primitives of [27] and the blackboard primitives of <ref> [4] </ref> which may be inserted at any place inside clause bodies and queries. From a software engineering point of view, this is quite regrettable since one better separate different issues clearly, and, consequently here, separate resource handling and logical treatments clearly.
Reference: [5] <author> A. Brogi. </author> <title> And-Parallelism without Shared Variables. </title> <editor> In D.H.D. Warren and P. Szeredi, editors, </editor> <booktitle> Proc. 7 th Int. Conf. on Logic Programming, </booktitle> <pages> pages 306-321, </pages> <address> Jerusalem, Israel, 1990. </address> <publisher> The MIT Press. </publisher>
Reference-contexts: Finally, to conclude this non-exhaustive list of examples, the synchronous communication mechanism introduced in <ref> [5, 1, 15, 16] </ref> can also be viewed as another instance of this general resource-based scheme. There, processes are simultaneously reduced to others and thus act as resources for their synchronizing partners. <p> As noted in [8], finding a way to represent parallel and non-deterministic actions is a real challenge, to which we believe to have given a solution. Finally, this paper grew up as a continuation of our previous work [15, 16] and its related work <ref> [9, 5] </ref>. As already suggested, one difference with this work is the clear separation between resource handling and logical treatment. As an interesting consequence, resource need not be considered as active data when they are not actually. Compare for instance the stack example of section 2 and that of [15]. <p> Compare for instance the stack example of section 2 and that of [15]. Moreover, the semantics are quite different from that presented in previously cited work. On the one hand, with respect to [9] and <ref> [5] </ref>, one should note that, in addition to the richer context of pre- and post-conditions handled here, arbitrary mixing of sequential and parallel compositions inside goals are treated here as well as an unrestricted form of variable sharing.
Reference: [6] <author> A. Brogi and P. Ciancarini. </author> <title> The Concurrent Language Shared Prolog. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 13(1) </volume> <pages> 99-123, </pages> <month> January </month> <year> 1991. </year>
Reference: [7] <author> F.S. de Boer, J. Kok, C. Palamidessi, and J.J.M.M. Rutten. </author> <title> Non-Monotonic Concurrent Constraint Programming. </title> <editor> In D. Miller, editor, </editor> <booktitle> Proc. Int. Symp. on Logic Programming, </booktitle> <pages> pages 315-334, </pages> <address> Vancouver, Canada, </address> <year> 1993. </year>
Reference-contexts: Primitives for non-monotonically modifying the store are proposed in addition in <ref> [7] </ref>. As a third example, in a new approach to parallelism in logic programming ([6, 4]), a blackboard is used as means of communication between concurrent logic processes and is accessed by means of Linda-like primitives putting, testing and removing both passive data structures and active processes from it. <p> In particular, aggregating resources by means of resource-dedicated clauses is support in PPL but is not supported in such a clear way in <ref> [7, 27] </ref>. Another difference with [27] is the non-monotonic behavior of the world of resources. Compared with [7], which also proposes non-monotonic stores, the main difference with our work rests in the handling of unconsumed resources and in the communication of bindings. <p> In particular, aggregating resources by means of resource-dedicated clauses is support in PPL but is not supported in such a clear way in [7, 27]. Another difference with [27] is the non-monotonic behavior of the world of resources. Compared with <ref> [7] </ref>, which also proposes non-monotonic stores, the main difference with our work rests in the handling of unconsumed resources and in the communication of bindings. <p> In fact, these preconditions embody basic operations on mutlisets implicitly. Moreover, while checking these constraints, some unification may take place and be propagated. Again, it is not obvious to achieve this effect by using the primitives proposed in <ref> [7] </ref>. It remains that the language L proposed in [7] is so general that the semantics proposed for it can be used to design semantics for the PPL framework. <p> In fact, these preconditions embody basic operations on mutlisets implicitly. Moreover, while checking these constraints, some unification may take place and be propagated. Again, it is not obvious to achieve this effect by using the primitives proposed in <ref> [7] </ref>. It remains that the language L proposed in [7] is so general that the semantics proposed for it can be used to design semantics for the PPL framework. However, taking profit of its specificity, we have been able to design semantics that, although they borrow from imperative techniques, still constitute reasonable extensions to the classical logic programming framework.
Reference: [8] <author> P.M. Dung. </author> <title> Representing Actions in Logic Programming and its Applications in Database Updates. </title> <editor> In D.S. Warren, editor, </editor> <booktitle> Proc. 10 th Int. Conf. on Logic Programming, </booktitle> <pages> pages 222-238, </pages> <address> Budapest, Hungary, June 1993. </address> <publisher> The MIT Press. </publisher>
Reference-contexts: However, the connections with linear logic will be explored in future work. The concept of resource handling is closely related to the notions ofhe concept of resource handling is closely related to the notions of action and change, which have recently been the subjects of many researches: see e.g. <ref> [20, 22, 21, 19, 13, 11, 14, 23, 10, 8, 25] </ref>. Our work differs from them as follows. The language AbstrAct [25] specifies the activities of systems by action rules characterizing agents capable of performing actions that operate on a global shared data space. <p> The paper [23] has employed linear logic to describe actions and changes. The paper [10] has used extended logic programs with both classical negation and negation-as 3 failure for that purpose. The paper <ref> [8] </ref> has used normal logic programs with abduction. Our work differs from all of them by using a slight extension of Horn clause programs involving no negation and remaining in the (classical) mainstreams of logic programming. The work reported in [13, 11, 14] is the closest to ours. <p> Another difference with our work is that we care here for the execution of the "^" connector and provide semantics for both its sequential and parallel versions. As noted in <ref> [8] </ref>, finding a way to represent parallel and non-deterministic actions is a real challenge, to which we believe to have given a solution. Finally, this paper grew up as a continuation of our previous work [15, 16] and its related work [9, 5].
Reference: [9] <author> M. Falaschi, G. Levi, and C. Palamidessi. </author> <title> A Synchronization Logic: Axiomatics and Formal Semantics of Generalized Horn Clauses. </title> <journal> Information and Control, </journal> <volume> 60 </volume> <pages> 36-69, </pages> <year> 1984. </year>
Reference-contexts: As noted in [8], finding a way to represent parallel and non-deterministic actions is a real challenge, to which we believe to have given a solution. Finally, this paper grew up as a continuation of our previous work [15, 16] and its related work <ref> [9, 5] </ref>. As already suggested, one difference with this work is the clear separation between resource handling and logical treatment. As an interesting consequence, resource need not be considered as active data when they are not actually. Compare for instance the stack example of section 2 and that of [15]. <p> Compare for instance the stack example of section 2 and that of [15]. Moreover, the semantics are quite different from that presented in previously cited work. On the one hand, with respect to <ref> [9] </ref> and [5], one should note that, in addition to the richer context of pre- and post-conditions handled here, arbitrary mixing of sequential and parallel compositions inside goals are treated here as well as an unrestricted form of variable sharing.
Reference: [10] <author> M. Gelfond and V. Lifschitz. </author> <title> Representing Actions in Extended Logic Programming. </title> <editor> In K.R. Apt, editor, </editor> <booktitle> Proc. Joint International Conference and Symposium on Logic Programming, </booktitle> <pages> pages 559-573, </pages> <address> Washington, USA, November 1992. </address> <publisher> The MIT Press. </publisher>
Reference-contexts: However, the connections with linear logic will be explored in future work. The concept of resource handling is closely related to the notions ofhe concept of resource handling is closely related to the notions of action and change, which have recently been the subjects of many researches: see e.g. <ref> [20, 22, 21, 19, 13, 11, 14, 23, 10, 8, 25] </ref>. Our work differs from them as follows. The language AbstrAct [25] specifies the activities of systems by action rules characterizing agents capable of performing actions that operate on a global shared data space. <p> The article [21] has proposed to use nonmonotonic inference rules and a default law of inertia to tackle the frame problem. The paper [23] has employed linear logic to describe actions and changes. The paper <ref> [10] </ref> has used extended logic programs with both classical negation and negation-as 3 failure for that purpose. The paper [8] has used normal logic programs with abduction.
Reference: [11] <author> G. Grofie, S. Holldobler, J. Schneeberger, U. Sigmund, and M. Tielscher. </author> <title> Equational Logic Programming, Actions, and Change. </title> <editor> In K.R. Apt, editor, </editor> <booktitle> Proc. Joint International Conference and Symposium on Logic Programming, </booktitle> <pages> pages 177-191, </pages> <address> Washington, USA, November 1992. </address> <publisher> The MIT Press. </publisher>
Reference-contexts: However, the connections with linear logic will be explored in future work. The concept of resource handling is closely related to the notions ofhe concept of resource handling is closely related to the notions of action and change, which have recently been the subjects of many researches: see e.g. <ref> [20, 22, 21, 19, 13, 11, 14, 23, 10, 8, 25] </ref>. Our work differs from them as follows. The language AbstrAct [25] specifies the activities of systems by action rules characterizing agents capable of performing actions that operate on a global shared data space. <p> The paper [8] has used normal logic programs with abduction. Our work differs from all of them by using a slight extension of Horn clause programs involving no negation and remaining in the (classical) mainstreams of logic programming. The work reported in <ref> [13, 11, 14] </ref> is the closest to ours. Rephrased in our terms, it proposes to describe each action by incorporating our pre- and post-conditions as predicate arguments and the non-consumption problem by extending normal unification to cope with multisets. <p> There, the database has been manipulated as an argument of the air syst predicate. However, databases can also be tackled as worlds of resources. As an illustration, let us consider the education database of <ref> [11] </ref>.
Reference: [12] <author> S. Hanks and D. Mac Dermott. </author> <title> Nonmonotonic Logic and Temporal Projection. </title> <journal> Artificial Intelligence, </journal> <volume> 33(3) </volume> <pages> 379-412, </pages> <year> 1987. </year>
Reference-contexts: As a support to this claim, we now show how to code the classical Yale Shooting problem of <ref> [12] </ref>. It has as actors a gun, which is either unloaded or loaded, and a turkey, which is either alive or dead.
Reference: [13] <author> S. Holldobler and J. Schneeberger. </author> <title> A New Deductive Approach to Planning. </title> <journal> New Generation Computing, </journal> <volume> 8 </volume> <pages> 225-244, </pages> <year> 1990. </year>
Reference-contexts: However, the connections with linear logic will be explored in future work. The concept of resource handling is closely related to the notions ofhe concept of resource handling is closely related to the notions of action and change, which have recently been the subjects of many researches: see e.g. <ref> [20, 22, 21, 19, 13, 11, 14, 23, 10, 8, 25] </ref>. Our work differs from them as follows. The language AbstrAct [25] specifies the activities of systems by action rules characterizing agents capable of performing actions that operate on a global shared data space. <p> The paper [8] has used normal logic programs with abduction. Our work differs from all of them by using a slight extension of Horn clause programs involving no negation and remaining in the (classical) mainstreams of logic programming. The work reported in <ref> [13, 11, 14] </ref> is the closest to ours. Rephrased in our terms, it proposes to describe each action by incorporating our pre- and post-conditions as predicate arguments and the non-consumption problem by extending normal unification to cope with multisets.
Reference: [14] <author> S. Holldobler and M. Thielscher. </author> <title> Actions and Specificity. </title> <editor> In D. Miller, editor, </editor> <booktitle> Proc. Int. Symp. on Logic Programming, </booktitle> <pages> pages 164-180, </pages> <address> Vancouver, Canada, October 1993. </address> <publisher> The MIT Press. </publisher>
Reference-contexts: However, the connections with linear logic will be explored in future work. The concept of resource handling is closely related to the notions ofhe concept of resource handling is closely related to the notions of action and change, which have recently been the subjects of many researches: see e.g. <ref> [20, 22, 21, 19, 13, 11, 14, 23, 10, 8, 25] </ref>. Our work differs from them as follows. The language AbstrAct [25] specifies the activities of systems by action rules characterizing agents capable of performing actions that operate on a global shared data space. <p> As noted in <ref> [14] </ref>, the essential problem with this solution is that the number of frame axioms rapidly increases with the number of actions and resources. This number has been reduced in [19] and has become linear with respect to the number of actions. <p> The paper [8] has used normal logic programs with abduction. Our work differs from all of them by using a slight extension of Horn clause programs involving no negation and remaining in the (classical) mainstreams of logic programming. The work reported in <ref> [13, 11, 14] </ref> is the closest to ours. Rephrased in our terms, it proposes to describe each action by incorporating our pre- and post-conditions as predicate arguments and the non-consumption problem by extending normal unification to cope with multisets. <p> The work reported in [13, 11, 14] is the closest to ours. Rephrased in our terms, it proposes to describe each action by incorporating our pre- and post-conditions as predicate arguments and the non-consumption problem by extending normal unification to cope with multisets. As an example (taken from <ref> [14] </ref>), the clause action (P re; load; P ost) P re = AC1 unloaded ^ P ost = AC1 loaded (3) states that the action of loading a gun assumes that the gun is unloaded and, if so, it moves the gun in a loaded status.
Reference: [15] <author> J.-M. Jacquet and L. Monteiro. </author> <title> Extended Horn Clauses: the Framework and its Semantics. </title> <editor> In J.C.M. Baeten and J.F. Groote, editors, </editor> <booktitle> Proc. 2 nd Int. Conf. on Concurrency Theory (Concur'91), volume 527 of Lecture Notes in Computer Science, </booktitle> <pages> pages 281-297, </pages> <address> Amsterdam, The Netherlands, 1991. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Finally, to conclude this non-exhaustive list of examples, the synchronous communication mechanism introduced in <ref> [5, 1, 15, 16] </ref> can also be viewed as another instance of this general resource-based scheme. There, processes are simultaneously reduced to others and thus act as resources for their synchronizing partners. <p> As noted in [8], finding a way to represent parallel and non-deterministic actions is a real challenge, to which we believe to have given a solution. Finally, this paper grew up as a continuation of our previous work <ref> [15, 16] </ref> and its related work [9, 5]. As already suggested, one difference with this work is the clear separation between resource handling and logical treatment. As an interesting consequence, resource need not be considered as active data when they are not actually. <p> As already suggested, one difference with this work is the clear separation between resource handling and logical treatment. As an interesting consequence, resource need not be considered as active data when they are not actually. Compare for instance the stack example of section 2 and that of <ref> [15] </ref>. Moreover, the semantics are quite different from that presented in previously cited work. <p> On the other hand, pre- and post-conditions handling and the discard for synchronous communication makes the semantics reported in this paper quite different from that of <ref> [15] </ref> and of [16]. The remainder of this paper is organized as follows. Section 2 suggests the interest of pp-clauses through the coding of examples of actions, database manipulations, and programs integrating the object and logic programming styles.
Reference: [16] <author> J.-M. Jacquet and L. Monteiro. </author> <title> Communicating Clauses: the Framework and its Semantics. </title> <editor> In K.R. Apt, editor, </editor> <booktitle> Proc. Joint International Conference and Symposium on Logic Programming, Series in Logic Programming, </booktitle> <pages> pages 98-112, </pages> <address> Washington, USA, November 1992. </address> <publisher> The MIT Press. </publisher>
Reference-contexts: Finally, to conclude this non-exhaustive list of examples, the synchronous communication mechanism introduced in <ref> [5, 1, 15, 16] </ref> can also be viewed as another instance of this general resource-based scheme. There, processes are simultaneously reduced to others and thus act as resources for their synchronizing partners. <p> As noted in [8], finding a way to represent parallel and non-deterministic actions is a real challenge, to which we believe to have given a solution. Finally, this paper grew up as a continuation of our previous work <ref> [15, 16] </ref> and its related work [9, 5]. As already suggested, one difference with this work is the clear separation between resource handling and logical treatment. As an interesting consequence, resource need not be considered as active data when they are not actually. <p> On the other hand, pre- and post-conditions handling and the discard for synchronous communication makes the semantics reported in this paper quite different from that of [15] and of <ref> [16] </ref>. The remainder of this paper is organized as follows. Section 2 suggests the interest of pp-clauses through the coding of examples of actions, database manipulations, and programs integrating the object and logic programming styles. Section 3 describes the basic constructs of the language and explains our terminology.
Reference: [17] <author> H. Kautz. </author> <title> The Logic of Persistence. </title> <booktitle> In Proc. AAAI, </booktitle> <pages> pages 401-405, </pages> <year> 1986. </year>
Reference: [18] <author> N. Kobayashi and A. Yonezawa. </author> <title> ACL | A Concurrent Linear Logic Programming Paradigm. </title> <editor> In D. Miller, editor, </editor> <booktitle> Proc. Int. Symp. on Logic Programming, </booktitle> <pages> pages 295-314, </pages> <address> Vancouver, Canada, </address> <year> 1993. </year>
Reference-contexts: However, taking profit of its specificity, we have been able to design semantics that, although they borrow from imperative techniques, still constitute reasonable extensions to the classical logic programming framework. Linear logic provides an alternative way of handling resources (see e.g. <ref> [1, 18, 26] </ref>). Although it is certainly promising, we have preferred to follow the lines of an extension of classical logic programming. This paper proves that this is possible and does not lead to intricacies. However, the connections with linear logic will be explored in future work.
Reference: [19] <author> R. Kowalski. </author> <title> Logic for Problem Solving. </title> <publisher> North Holland, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: However, the connections with linear logic will be explored in future work. The concept of resource handling is closely related to the notions ofhe concept of resource handling is closely related to the notions of action and change, which have recently been the subjects of many researches: see e.g. <ref> [20, 22, 21, 19, 13, 11, 14, 23, 10, 8, 25] </ref>. Our work differs from them as follows. The language AbstrAct [25] specifies the activities of systems by action rules characterizing agents capable of performing actions that operate on a global shared data space. <p> As noted in [14], the essential problem with this solution is that the number of frame axioms rapidly increases with the number of actions and resources. This number has been reduced in <ref> [19] </ref> and has become linear with respect to the number of actions. Our proposal does not suffer from these problems since the non-consumption of resources is expressed either by default or by means of non-destructive pre-conditions.
Reference: [20] <author> J. Mac Carthy. </author> <title> Situations and Actions and Causal Laws. </title> <booktitle> Standford Artificial Intelligence Project Memo 2, </booktitle> <address> Stanford University, Palo Alto, CA, USA, </address> <year> 1963. </year> <month> 15 </month>
Reference-contexts: However, the connections with linear logic will be explored in future work. The concept of resource handling is closely related to the notions ofhe concept of resource handling is closely related to the notions of action and change, which have recently been the subjects of many researches: see e.g. <ref> [20, 22, 21, 19, 13, 11, 14, 23, 10, 8, 25] </ref>. Our work differs from them as follows. The language AbstrAct [25] specifies the activities of systems by action rules characterizing agents capable of performing actions that operate on a global shared data space. <p> Our work differs from this work in that we do not have an explicit notion of agent, relying rather on the more logic-based notion of goal, and use an aggregation technique of resources based on Horn clauses. The works <ref> [20, 22] </ref> have introduced the so-called situation calculus.
Reference: [21] <author> J. Mac Carthy. </author> <title> Applications of Circumscription to Formalizing Commonsense Knowledge. </title> <journal> Artificial Intelligence, </journal> <volume> 28 </volume> <pages> 89-116, </pages> <year> 1986. </year>
Reference-contexts: However, the connections with linear logic will be explored in future work. The concept of resource handling is closely related to the notions ofhe concept of resource handling is closely related to the notions of action and change, which have recently been the subjects of many researches: see e.g. <ref> [20, 22, 21, 19, 13, 11, 14, 23, 10, 8, 25] </ref>. Our work differs from them as follows. The language AbstrAct [25] specifies the activities of systems by action rules characterizing agents capable of performing actions that operate on a global shared data space. <p> This number has been reduced in [19] and has become linear with respect to the number of actions. Our proposal does not suffer from these problems since the non-consumption of resources is expressed either by default or by means of non-destructive pre-conditions. The article <ref> [21] </ref> has proposed to use nonmonotonic inference rules and a default law of inertia to tackle the frame problem. The paper [23] has employed linear logic to describe actions and changes. The paper [10] has used extended logic programs with both classical negation and negation-as 3 failure for that purpose.
Reference: [22] <author> J. Mac Carthy and P.J. Hayes. </author> <title> Some Philosophical Problems from the Standpoint of Artificial Intelligence. </title> <journal> Machine Intelligence, </journal> <volume> 4 </volume> <pages> 463-502, </pages> <year> 1969. </year>
Reference-contexts: However, the connections with linear logic will be explored in future work. The concept of resource handling is closely related to the notions ofhe concept of resource handling is closely related to the notions of action and change, which have recently been the subjects of many researches: see e.g. <ref> [20, 22, 21, 19, 13, 11, 14, 23, 10, 8, 25] </ref>. Our work differs from them as follows. The language AbstrAct [25] specifies the activities of systems by action rules characterizing agents capable of performing actions that operate on a global shared data space. <p> Our work differs from this work in that we do not have an explicit notion of agent, relying rather on the more logic-based notion of goal, and use an aggregation technique of resources based on Horn clauses. The works <ref> [20, 22] </ref> have introduced the so-called situation calculus.
Reference: [23] <author> M. Masseron, C. Tollu, and J. Vauzeilles. </author> <title> Generating Plans in Linear Logic. </title> <booktitle> In Foundations of Software Technology and Theoretical Computer Science, volume 472 of Lecture Notes in Computer Science, </booktitle> <pages> pages 63-75. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: However, the connections with linear logic will be explored in future work. The concept of resource handling is closely related to the notions ofhe concept of resource handling is closely related to the notions of action and change, which have recently been the subjects of many researches: see e.g. <ref> [20, 22, 21, 19, 13, 11, 14, 23, 10, 8, 25] </ref>. Our work differs from them as follows. The language AbstrAct [25] specifies the activities of systems by action rules characterizing agents capable of performing actions that operate on a global shared data space. <p> Our proposal does not suffer from these problems since the non-consumption of resources is expressed either by default or by means of non-destructive pre-conditions. The article [21] has proposed to use nonmonotonic inference rules and a default law of inertia to tackle the frame problem. The paper <ref> [23] </ref> has employed linear logic to describe actions and changes. The paper [10] has used extended logic programs with both classical negation and negation-as 3 failure for that purpose. The paper [8] has used normal logic programs with abduction.
Reference: [24] <author> L. Monteiro. </author> <title> Distributed Logic, A Theory of Distributed Programming in Logic. </title> <type> Research report, </type> <institution> Departamento de Informatica, Universidade de Lisboa, </institution> <address> 2885 Monte da Caparica, Lisbon, Portugal, </address> <year> 1986. </year>
Reference-contexts: In PPL which facts are true actually depend on the considered world of resources. Moreover, because of the pre- and post-conditions, this world may have a non-monotonic behavior and, because of the parallel composition inside pp-goals it may be influenced by concurrent evaluations. Hence, following previous work <ref> [24, 3] </ref>, an interpretation should define the truth of an atom not in absolute terms nor with respect to a given world of resources but with respect to traces reporting the successive states of this world. We are thus naturally lead to the following definitions.
Reference: [25] <author> A. Porto and P. Rosado. </author> <title> The AbstrAct Scheme for Concurrent Programming. </title> <editor> In E. Lamma and P. Mello, editors, </editor> <booktitle> Extensions of Logic Programming, volume 660 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 216-241, </pages> <address> Berlin, 1993. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: However, the connections with linear logic will be explored in future work. The concept of resource handling is closely related to the notions ofhe concept of resource handling is closely related to the notions of action and change, which have recently been the subjects of many researches: see e.g. <ref> [20, 22, 21, 19, 13, 11, 14, 23, 10, 8, 25] </ref>. Our work differs from them as follows. The language AbstrAct [25] specifies the activities of systems by action rules characterizing agents capable of performing actions that operate on a global shared data space. <p> Our work differs from them as follows. The language AbstrAct <ref> [25] </ref> specifies the activities of systems by action rules characterizing agents capable of performing actions that operate on a global shared data space. A feature of AbstrAct is that it distinguishes between actions to induce state transformations and deductions that can be performed in each state.
Reference: [26] <author> V. Saraswat and P. Lincoln. </author> <title> Higher-Order, Linear, Concurrent Constraint Programming. </title> <type> Research report, </type> <institution> Xerox Palo Research Center, </institution> <address> Palo Alto, CA, USA, </address> <year> 1992. </year>
Reference-contexts: For simplicity, this paper has been kept in the classical lines of logic programming but a generalization to constraints is appealing and is planned for future work. However, it should be noted that such a generalization leads to higher-order constructs (as in <ref> [26] </ref>) since the state of the PPL computations to be generalized is composed of a substitution, describing the values computed for the variables, but also of a world of resources composed of atoms namely of first-order constructs. <p> However, taking profit of its specificity, we have been able to design semantics that, although they borrow from imperative techniques, still constitute reasonable extensions to the classical logic programming framework. Linear logic provides an alternative way of handling resources (see e.g. <ref> [1, 18, 26] </ref>). Although it is certainly promising, we have preferred to follow the lines of an extension of classical logic programming. This paper proves that this is possible and does not lead to intricacies. However, the connections with linear logic will be explored in future work.
Reference: [27] <author> V.A. Saraswat. </author> <title> Concurrent Constraint Programming Languages. </title> <publisher> The MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: As a second example, constraint logic languages (see e.g. <ref> [27] </ref>) have a so-called store of constraints as world of resources. <p> Examples of this trend include the tell and ask primitives of <ref> [27] </ref> and the blackboard primitives of [4] which may be inserted at any place inside clause bodies and queries. From a software engineering point of view, this is quite regrettable since one better separate different issues clearly, and, consequently here, separate resource handling and logical treatments clearly. <p> In particular, aggregating resources by means of resource-dedicated clauses is support in PPL but is not supported in such a clear way in <ref> [7, 27] </ref>. Another difference with [27] is the non-monotonic behavior of the world of resources. Compared with [7], which also proposes non-monotonic stores, the main difference with our work rests in the handling of unconsumed resources and in the communication of bindings. <p> In particular, aggregating resources by means of resource-dedicated clauses is support in PPL but is not supported in such a clear way in [7, 27]. Another difference with <ref> [27] </ref> is the non-monotonic behavior of the world of resources. Compared with [7], which also proposes non-monotonic stores, the main difference with our work rests in the handling of unconsumed resources and in the communication of bindings.
Reference: [28] <author> L. Schubert. </author> <title> Monotonic Solution for the Frame Problem in the Situation Calculus: an Efficient Method for Worlds with Fully Specified Actions. In H.E. </title> <editor> Kyburg, R. Loui, and G. Carlson, editors, </editor> <booktitle> Knowledge Representation and Defeasible Reasoning, </booktitle> <pages> pages 23-67. </pages> <publisher> Kluwer, </publisher> <year> 1990. </year> <month> 16 </month>
References-found: 28

