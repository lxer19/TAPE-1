URL: ftp://ftp.cs.brown.edu/pub/techreports/94/cs94-35.ps.Z
Refering-URL: http://www.cs.brown.edu/publications/techreports/reports/CS-94-35.html
Root-URL: http://www.cs.brown.edu/
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Adams, J., Balas, E., and Zawack, D., </author> <title> The Shifting Bottleneck Procedure for Job Shop Scheduling, </title> <booktitle> Management Science, </booktitle> <month> 34(3) </month> <year> (1988) </year> <month> 391-401. </month>
Reference-contexts: Instead, we employ Monte Carlo simulation on a stochastic model of the environment to construct partial policies for a subset of reachable states and provide default reflexes to handle the remaining states. We then apply bottleneck-centered scheduling heuristics <ref> [1] </ref> to improve initial policies. Additionally, we employ a variant of Drummond's [6] situated control rules to constrain the space of possible actions. Monte Carlo simulation addresses both the large action space and the large state space issues. <p> In phase two we constrain bottleneck assignments from the phase one policy in order to move toward a more globally optimal solution. Our technique for propagating constraints is based on bottleneck-centered heuristics <ref> [1, 13] </ref>, a form of opportunistic scheduling in which critical points of resource contention are located and used to identify and remove potential for negative interactions between activities. First, find a critical interaction (bottleneck) among activities; namely one which contributes directly to a high expected cost policy. <p> The work of Dean et al. [4] introduces a general approach to planning in stochastic domains and several models of deliberation scheduling. We extend the work of [4] to handle more combinatorial scheduling problems and borrow from the bottleneck-centered heuristics developed by Adams et al. <ref> [1] </ref> and analyzed by Muscettola [13]. The approach described in this paper borrows from and extends the anytime projection approach of Drum-mond and Bresina [7, 6]. There have been a variety of planning systems that are related to the problem.
Reference: [2] <author> Boddy, Mark and Dean, Thomas, </author> <title> Solving Time-Dependent Planning Problems, </title> <booktitle> Proceedings IJCAI 11, </booktitle> <address> Detroit, Michigan, IJCAII, </address> <year> 1989, </year> <pages> 979-984. </pages>
Reference-contexts: Deliberation scheduling is aided by the use of decision procedures that can be interrupted at any time to return a solution whose quality improves 2 with more computation time. These interruptible algorithms are often re-ferred to as anytime algorithms <ref> [3, 2] </ref> because they can output some result, of varying quality, at any time. Our solution to scheduling in stochastic domains involves two levels of processing, each of which employs deliberation scheduling. At the lower level are the actual decision procedures for computing policies for particular problem instances.
Reference: [3] <author> Dean, Thomas and Boddy, Mark, </author> <title> An Analysis of Time-Dependent Planning, </title> <booktitle> Proceedings AAAI-88, </booktitle> <address> St. Paul, Minnesota, </address> <publisher> AAAI, </publisher> <year> 1988, </year> <pages> 49-54. </pages>
Reference-contexts: Deliberation scheduling is aided by the use of decision procedures that can be interrupted at any time to return a solution whose quality improves 2 with more computation time. These interruptible algorithms are often re-ferred to as anytime algorithms <ref> [3, 2] </ref> because they can output some result, of varying quality, at any time. Our solution to scheduling in stochastic domains involves two levels of processing, each of which employs deliberation scheduling. At the lower level are the actual decision procedures for computing policies for particular problem instances. <p> Performing deliberation scheduling on-line as part of component may introduce unacceptable delays. In [9] we describe a way to take advantage of domain regularity to perform deliberation scheduling off-line. However, in some problems it is not possible to perform deliberation scheduling off-line. In particular, in the approach of <ref> [3] </ref> in which precursor events indicate sequences of problem instances only at run-time, deliberation scheduling must be performed on-line. In these cases the on-line cost of deliberation scheduling must be considered.
Reference: [4] <author> Dean, Thomas, Kaelbling, Leslie, Kirman, Jak, and Nicholson, Ann, </author> <title> Deliberation Scheduling for Time-Critical Sequential Decision Making, </title> <booktitle> 14 Proceedings of the Ninth Workshop on Uncertainty in AI, </booktitle> <address> Washington, D.C., </address> <year> 1993, </year> <pages> 309-316. </pages>
Reference-contexts: These domains can be modeled by stochastic processes with very large state and action spaces and uncertainty in predicting future states. A scheduling solution that is designed to respond in a timely manner to all possible states is called a policy. Complementary work <ref> [9, 4] </ref> describe deliberation scheduling approaches to planning problems. However, there are fundamental differences between traditional planning domains and more combinatorial scheduling domains. When generating policies in planning domains, the large state space issue may be addressed by considering alternative actions (trajectories) within a restricted state space. <p> In this case much care must be taken in interpolating profiles from the data. In some domains a stochastic model of the environment may be used to simulate the system and gather data offline. This approach is taken in <ref> [4] </ref>. Another option is to dynamically alter (or learn) profiles as the scheduling system is executing. Deliberation scheduling with conditional performance profiles is a combinatorial problem. Performing deliberation scheduling on-line as part of component may introduce unacceptable delays. <p> The above discussion focuses on off-line construction of deliberation schedules for to execute on-line. However, in some domains it may be advantageous to reallocate processor time on-line in response to system dynamics. This corresponds to the recurrent deliberation model of <ref> [4] </ref>. 4.2 Allocating Processor Time Among Anytime Phases Our time-critical scheduling solution is completed by instantiating the prediction and decision procedure component f of the scheduling and execution architecture of Section 2. f performs the policy generation algorithm central to our solution. <p> Second, identify an assignment of activities to resources that, if constrained, will both reduce the bottleneck and guarantee that an improved policy exists that may be found through dispatch scheduling. The deliberation scheduling task for this algorithm is equivalent to the precursor deliberation of <ref> [4] </ref>. Whether the phases should be iterated once 12 or many times is determined by whether or not one phase of the algorithm "informs" the other phase. Bottleneck detection always "informs" dispatch scheduling. <p> For k iterations we have t TOT = t P 1 1 + t P 2 1 + + t P 1 k + t P 2 k <ref> [4] </ref>. Deliberation scheduling requires conditional performance profiles for dispatch scheduling that model policy improvement as a function of constraint quality, previous policy quality and processor allocation; and conditional performance profiles for bottleneck detection that model constraint quality with similar parameters. <p> The work of Dean et al. <ref> [4] </ref> introduces a general approach to planning in stochastic domains and several models of deliberation scheduling. We extend the work of [4] to handle more combinatorial scheduling problems and borrow from the bottleneck-centered heuristics developed by Adams et al. [1] and analyzed by Muscettola [13]. <p> The work of Dean et al. <ref> [4] </ref> introduces a general approach to planning in stochastic domains and several models of deliberation scheduling. We extend the work of [4] to handle more combinatorial scheduling problems and borrow from the bottleneck-centered heuristics developed by Adams et al. [1] and analyzed by Muscettola [13]. The approach described in this paper borrows from and extends the anytime projection approach of Drum-mond and Bresina [7, 6].
Reference: [5] <author> Dean, Thomas and Wellman, Michael, </author> <title> Planning and Control, </title> <publisher> (Morgan Kaufmann, </publisher> <address> San Mateo, California, </address> <year> 1991). </year>
Reference-contexts: In particular, in the approach of [3] in which precursor events indicate sequences of problem instances only at run-time, deliberation scheduling must be performed on-line. In these cases the on-line cost of deliberation scheduling must be considered. See <ref> [5] </ref> for a relevant discussion. 4.1 Allocating Processor Time Across Infinite Schedul ing Horizons In constructing policies that change over time the high-level deliberation scheduler must determine how to partition the infinite problem temporally into a series of fixed horizon problem instances (time windows).
Reference: [6] <author> Drummond, Mark, </author> <title> Situated Control Rules, </title> <editor> Brachman, Ronald J., Levesque, Hector J., and Reiter, Raymond, (Eds.), </editor> <booktitle> Proceedings of the First International Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <publisher> (Morgan-Kaufmann, </publisher> <address> Los Altos, California, </address> <year> 1989). </year>
Reference-contexts: We then apply bottleneck-centered scheduling heuristics [1] to improve initial policies. Additionally, we employ a variant of Drummond's <ref> [6] </ref> situated control rules to constrain the space of possible actions. Monte Carlo simulation addresses both the large action space and the large state space issues. <p> The phase one dispatch scheduler determines local assignments of activities to resources for a given state using greedy rules such as first-come first-served, latest release date first or earliest deadline first. We augment the dispatch scheduler by borrowing from the work of Drummond <ref> [6] </ref>. For any state, a set of constraints limits the possible assignments. These limitations implicitly disable a subset of the action space. Constrained dispatch scheduling solves the problem of scheduling in the face of a large action space. <p> We extend the work of [4] to handle more combinatorial scheduling problems and borrow from the bottleneck-centered heuristics developed by Adams et al. [1] and analyzed by Muscettola [13]. The approach described in this paper borrows from and extends the anytime projection approach of Drum-mond and Bresina <ref> [7, 6] </ref>. There have been a variety of planning systems that are related to the problem. Georgeff's procedural reasoning system [8] was designed for on-line use in evolving situations, but it simply executes user-supplied procedures rather than constructing plans of action on its own.
Reference: [7] <author> Drummond, Mark and Bresina, John, </author> <title> Anytime Synthetic Projection: Maximizing the Probability of Goal Satisfaction, </title> <booktitle> Proceedings AAAI-90, </booktitle> <address> Boston, Massachusetts, </address> <publisher> AAAI, </publisher> <year> 1990, </year> <pages> 138-144. </pages>
Reference-contexts: We extend the work of [4] to handle more combinatorial scheduling problems and borrow from the bottleneck-centered heuristics developed by Adams et al. [1] and analyzed by Muscettola [13]. The approach described in this paper borrows from and extends the anytime projection approach of Drum-mond and Bresina <ref> [7, 6] </ref>. There have been a variety of planning systems that are related to the problem. Georgeff's procedural reasoning system [8] was designed for on-line use in evolving situations, but it simply executes user-supplied procedures rather than constructing plans of action on its own. <p> Georgeff's procedural reasoning system [8] was designed for on-line use in evolving situations, but it simply executes user-supplied procedures rather than constructing plans of action on its own. Systems for synthesizing plans in stochastic domains, such as those by Drummond and Bresina <ref> [7] </ref>, and Kushmerick, Hanks and Weld [11] do not directly address the problem of execution in dynamic situations or generating plans given time and quality constraints. Lansky [12] has developed planning systems for deterministic domains that exploit structural properties of the state space to expedite planning.
Reference: [8] <author> Georgeff, Michael P. and Lansky, Amy L., </author> <title> Reactive Reasoning and Planning, </title> <booktitle> Proceedings AAAI-87, </booktitle> <address> Seattle, Washington, </address> <publisher> AAAI, </publisher> <year> 1987, </year> <pages> 677-682. </pages>
Reference-contexts: The approach described in this paper borrows from and extends the anytime projection approach of Drum-mond and Bresina [7, 6]. There have been a variety of planning systems that are related to the problem. Georgeff's procedural reasoning system <ref> [8] </ref> was designed for on-line use in evolving situations, but it simply executes user-supplied procedures rather than constructing plans of action on its own.
Reference: [9] <author> Greenwald, Lloyd and Dean, Thomas, </author> <title> Anticipating Computational Demands when Solving Time-Critical Decision-Making Problems, </title> <booktitle> The First Workshop on the Algorithmic Foundations of Robotics, </booktitle> <editor> A. K. Peters, </editor> <address> Boston, MA, </address> <year> 1994. </year>
Reference-contexts: These domains can be modeled by stochastic processes with very large state and action spaces and uncertainty in predicting future states. A scheduling solution that is designed to respond in a timely manner to all possible states is called a policy. Complementary work <ref> [9, 4] </ref> describe deliberation scheduling approaches to planning problems. However, there are fundamental differences between traditional planning domains and more combinatorial scheduling domains. When generating policies in planning domains, the large state space issue may be addressed by considering alternative actions (trajectories) within a restricted state space. <p> We also present a way to model the environmental dynamics as a stochastic process. These topics are treated in more detail in <ref> [9, 10] </ref>. We model the stochastic scheduling domain as a state space S made up of random variables. To represent the dependence of state on time we represent the state space as S (t) = fX (t) (t) n g. <p> In this section we focus on some tools and features of deliberation scheduling in general, including the construction of conditional performance profiles and the compilation of anytime algorithms. Refer to <ref> [9, 15] </ref> for more detailed presentations. Performance profiles are used to model the expected performance of different decision procedures for varying computation time allocations. These expectations are typically derived from past performance of the decision procedures applied to similar problem instances. <p> This approach is taken in [4]. Another option is to dynamically alter (or learn) profiles as the scheduling system is executing. Deliberation scheduling with conditional performance profiles is a combinatorial problem. Performing deliberation scheduling on-line as part of component may introduce unacceptable delays. In <ref> [9] </ref> we describe a way to take advantage of domain regularity to perform deliberation scheduling off-line. However, in some problems it is not possible to perform deliberation scheduling off-line. <p> This profile may then be used by to determine how to partition the problem temporally and allocate processing across windows to achieve some level of global performance. 5 Related Work In <ref> [9] </ref> we describe a way to take advantage of domain regularity to perform deliberation scheduling off-line and execute as a fixed deliberation strategy. 13 In this solution we assume that while we only have stochastic knowledge of the actual state trajectory, we have deterministic knowledge of the sequence of equivalence classes
Reference: [10] <author> Greenwald, Lloyd and Dean, Thomas, </author> <title> Monte Carlo Simulation and Bottleneck-Centered Heuristics for Time-Critical Scheduling in Stochastic Domains, </title> <booktitle> ARPI Planning Initiative Workshop, </booktitle> <year> 1994. </year>
Reference-contexts: 1 Introduction In <ref> [10] </ref> we describe a scheduling and execution architecture and an iterative decision procedure for time-critical scheduling in stochastic domains. In this paper we develop the deliberation scheduling components of that approach. <p> We also present a way to model the environmental dynamics as a stochastic process. These topics are treated in more detail in <ref> [9, 10] </ref>. We model the stochastic scheduling domain as a state space S made up of random variables. To represent the dependence of state on time we represent the state space as S (t) = fX (t) (t) n g. <p> Our policy generation algorithm is a two-phase iterative algorithm that employs deliberation scheduling methods to allocate computation time across phases and iterations. These phases are briefly outlined here and described in detail in <ref> [10] </ref>. 11 The first phase makes use of Monte Carlo simulation and constrained dispatch scheduling to define a policy within a given time window.
Reference: [11] <author> Kushmerick, Nicholas, Hanks, Steve, and Weld, Daniel, </author> <title> An Algorithm for Probabilistic Planning, </title> <type> Unpublished Manuscript, </type> <year> 1993. </year>
Reference-contexts: Georgeff's procedural reasoning system [8] was designed for on-line use in evolving situations, but it simply executes user-supplied procedures rather than constructing plans of action on its own. Systems for synthesizing plans in stochastic domains, such as those by Drummond and Bresina [7], and Kushmerick, Hanks and Weld <ref> [11] </ref> do not directly address the problem of execution in dynamic situations or generating plans given time and quality constraints. Lansky [12] has developed planning systems for deterministic domains that exploit structural properties of the state space to expedite planning.
Reference: [12] <author> Lansky, Amy L., </author> <title> Localized Event-Based Reasoning for Multiagent Domains, </title> <booktitle> Computational Intelligence, </booktitle> <month> 4(4) </month> <year> (1988). </year>
Reference-contexts: Systems for synthesizing plans in stochastic domains, such as those by Drummond and Bresina [7], and Kushmerick, Hanks and Weld [11] do not directly address the problem of execution in dynamic situations or generating plans given time and quality constraints. Lansky <ref> [12] </ref> has developed planning systems for deterministic domains that exploit structural properties of the state space to expedite planning. Smith et al. [14] describe some initial efforts at building systems that modify plans incrementally.
Reference: [13] <author> Muscettola, Nicola, </author> <title> An Experimental Analysis of Bottleneck-Centered Opportunistic Scheduling, </title> <booktitle> Proceedings of the Second European Workshop on Planning, </booktitle> <address> Vadstena, Sweden, </address> <year> 1993. </year>
Reference-contexts: In phase two we constrain bottleneck assignments from the phase one policy in order to move toward a more globally optimal solution. Our technique for propagating constraints is based on bottleneck-centered heuristics <ref> [1, 13] </ref>, a form of opportunistic scheduling in which critical points of resource contention are located and used to identify and remove potential for negative interactions between activities. First, find a critical interaction (bottleneck) among activities; namely one which contributes directly to a high expected cost policy. <p> First, find a critical interaction (bottleneck) among activities; namely one which contributes directly to a high expected cost policy. In practice <ref> [13] </ref> critical interactions occur during time intervals in which there is a high demand/supply ratio for resources. Second, identify an assignment of activities to resources that, if constrained, will both reduce the bottleneck and guarantee that an improved policy exists that may be found through dispatch scheduling. <p> We extend the work of [4] to handle more combinatorial scheduling problems and borrow from the bottleneck-centered heuristics developed by Adams et al. [1] and analyzed by Muscettola <ref> [13] </ref>. The approach described in this paper borrows from and extends the anytime projection approach of Drum-mond and Bresina [7, 6]. There have been a variety of planning systems that are related to the problem.
Reference: [14] <author> Ow, P. S., Smith, S. F., and Thiriez, A., </author> <title> Reactive Plan Revision, </title> <booktitle> Proceedings AAAI-88, </booktitle> <address> St. Paul, Minnesota, </address> <publisher> AAAI, </publisher> <year> 1988. </year>
Reference-contexts: Lansky [12] has developed planning systems for deterministic domains that exploit structural properties of the state space to expedite planning. Smith et al. <ref> [14] </ref> describe some initial efforts at building systems that modify plans incrementally. Neither Lansky or Smith et al.'s systems deal with uncertainty and Lansky's system cannot handle concurrent planning and execution.
Reference: [15] <author> Zilberstein, Shlomo, </author> <title> Operational Rationality through Compilation of Anytime Algorithms, </title> <type> PhD thesis, </type> <institution> University of California at Berkeley, </institution> <year> 1993. </year>
Reference-contexts: At the lower level are the actual decision procedures for computing policies for particular problem instances. These decision procedures are composed of phases (anytime algorithms). Allocating computation across phases of a decision procedure is a deliberation scheduling problem often referred to as the compilation of anytime algorithms <ref> [15] </ref>. At the higher level, deliberation scheduling combines decision procedures for a predicted sequence of problem instances to generate a complete policy that optimizes some measure of global performance. 2 Scheduling and Execution In this section we outline an architecture for on-line interaction of scheduling and execution. <p> In this section we focus on some tools and features of deliberation scheduling in general, including the construction of conditional performance profiles and the compilation of anytime algorithms. Refer to <ref> [9, 15] </ref> for more detailed presentations. Performance profiles are used to model the expected performance of different decision procedures for varying computation time allocations. These expectations are typically derived from past performance of the decision procedures applied to similar problem instances. <p> In deliberation scheduling, reducing time allocated to any decision procedure may have non-local effects. Deliberation scheduling is a special case of the general problem of compiling anytime algorithms <ref> [15] </ref> in which multiple algorithms with separate profiles are combined into a single module and profile. For example, we may compose anytime algorithms g (x) and h (y) into a new algorithm f (g (x); h (y)) that combines the properties of both to optimize combined performance. <p> By anticipating the sequence of problem instances that will be realized we can anticipate the computational demands of decision procedures applied to these problem instances. We can then reason about the tradeoffs between allocating time among the procedures and the subsequent overall quality. Zilberstein <ref> [15] </ref> shows that the general problem of compiling anytime algorithms is strongly NP-complete.
References-found: 15

