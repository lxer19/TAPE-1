URL: ftp://ftp.docs.uu.se/docs/papers/exrt_group/bjornfot.AE-94.ps.Z
Refering-URL: http://www.csd.uu.se/~stinal/publications.html
Root-URL: 
Email: E-mail: -bjornfot, stinal, goranw, asplund-@docs.uu.se  
Phone: Phone: +46 18 18 25 00, Fax: +46 18 55 02 25  
Title: Distribution of Tasks Within a Centrally Scheduled Local Area Network  
Author: Lars Bjrnfot, Kristina Lundqvist, Gran Wall and Lars Asplund 
Date: September 1994.  
Address: Denmark,  P.O. Box 325, S-751 05 Uppsala, Sweden  
Affiliation: Copenhagen  Department of Computer Systems, Uppsala University  
Note: This work is sponsored by NUTEK, project number P1221-2 Presented at the First Symposium 'Ada in Europe',  
Abstract: Distribution of a single Ada program on a local area network is accomplished by partitioning the run-time system into two parts. A central scheduling module is responsible for task management. Distributed run-time executives handle context switches and remote entry calls; however all activities are supervised by the scheduler. The scheduler can be implemented in hardware in order to achieve high efficiency. A network based on optical fibers is necessary due to the high speed required for system calls. Asynchronous Transfer Mode is suggested as the protocol for the communication. We describe an implementation of the divided run-time system on an Ethernet network, using MC68030-based micro computers as targets and an Ada program executing on a Rational host as the scheduler.
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> United States Department of Defence, </institution> <note> Reference Manual for the Ada Pro gramming Language, ANSI/MIL-STD-1815A, </note> <year> 1983. </year>
Reference-contexts: 1 Introduction Ada <ref> [1] </ref> requires a complex run-time system (RTS). To achieve a higher efficiency, the RTS could be implemented in hardware rather than in software. Such hardware has previously been developed for single processor systems, e.g. the Ada tasking co-processor ATAC [2].
Reference: [2] <author> J. Roos and F. Gmez-Molinero, </author> <title> A complete version of the Ada tasking coprocessor, Real-time embedded processing for space applications, </title> <month> Nov. </month> <year> 1992, </year> <pages> pp 101-110. </pages>
Reference-contexts: 1 Introduction Ada [1] requires a complex run-time system (RTS). To achieve a higher efficiency, the RTS could be implemented in hardware rather than in software. Such hardware has previously been developed for single processor systems, e.g. the Ada tasking co-processor ATAC <ref> [2] </ref>. The current trend is to distribute Ada units over a local network, to increase performance and/or reliability. One way to distribute Ada is to have separate programs that run on different nodes.
Reference: [3] <author> D80A, </author> <title> An Ericsson computer with Ada adapted micro code, Ericsson Radar, </title> <address> Mlndal, Sweden. </address>
Reference-contexts: The development of computer hardware is currently in the direction of high speed, general purpose computers, such as reduced instruction set computers (RISC). This is in the opposite direction of the requirements for an Ada computer such as the D80A <ref> [3] </ref>, Thor [4] or Rational. However, in these designs the most complex instructions apart from constraint checks are the instructions for tasking. Since the tasking is so closely related to the language, a separation of the execution of the task administration and scheduling from the RTS can be more optimal.
Reference: [4] <author> S. </author> <title> Asserhll,A Microprocessor with Ada Real Time Support, </title> <booktitle> Ada in Swe den symposium, </booktitle> <address> Uppsala, </address> <month> April </month> <year> 1991. </year>
Reference-contexts: The development of computer hardware is currently in the direction of high speed, general purpose computers, such as reduced instruction set computers (RISC). This is in the opposite direction of the requirements for an Ada computer such as the D80A [3], Thor <ref> [4] </ref> or Rational. However, in these designs the most complex instructions apart from constraint checks are the instructions for tasking. Since the tasking is so closely related to the language, a separation of the execution of the task administration and scheduling from the RTS can be more optimal.
Reference: [5] <author> L. Bjrnfot, L. Asplund, K. Lundqvist, and G. Wall, </author> <title> Distributed Run-Time Systems, a Protocol for Ada, </title> <publisher> LNCS 688, </publisher> <pages> pp. 249 - 263, </pages> <year> 1993, </year> <note> Springer-Ver lag. 12 </note>
Reference-contexts: A drawback with Ada is its complex tasking model with rendezvous as communication and synchronization mechanism. The goal is to distribute a single Ada program on this system. In an earlier paper <ref> [5] </ref>, the following idea of a distributed Ada model was presented, fig. 1. It is still valid as a conceptual model, but as will be shown below the actual network topology will look somewhat different. <p> Although the function of the original RTS is partitioned between the Controller and the local RTS it must still function as one run-time system. There must be some glue that unifies these two parts. In an earlier paper <ref> [5] </ref> the general tasking primitives of a run-time system was described in terms of a communication protocol between the Controller and the local RTS. <p> which uses remote rendezvous for inter-task communication, the 9X remote procedure call (RPC) communication model can be used to connect multiple LANs. 7 Conclusion The restrictions forced upon us by the existing RTS interface and the compiler have forced us away from the original idea of a Protocol for Ada <ref> [5] </ref>. The current implementation is too tightly coupled to the RTS being modified. Future work should strive towards a less RTS implementation dependent system, based on the semantics of Ada tasking and general properties of RTSs.
Reference: [6] <author> J. Boudec, </author> <title> The Asynchronous Transfer Mode: a tutorial, Computer Net works and ISDN Systems, </title> <booktitle> 24(4) </booktitle> <pages> 279-309, </pages> <year> 1992. </year>
Reference-contexts: This requires a very high speed communication network. Examples of networks that can supply this kind of performance are ATM <ref> [6] </ref>, and DTM [7]. ATM is a natural first choice since we have a group at the department working with it. Fig 1 Schematic view of a system. The hardware chip for the distributed RTS is represented by Controllers 1 and 2 (master and backup). <p> This enables the system to be reconfigured without recompiling the program but requires that the code of the tasks eligible for distributed execution be replicated on several nodes. 3 ATM Network The Asynchronous Transfer Mode (ATM) <ref> [6] </ref> is intended to be the basis for a future Broadband Integrated Services Digital Network (B-ISDN). ATM is a packet-oriented switching and multiplexing technique designed to meet different bandwidth and Quality Of Service (QOS) demands of B-ISDN services [8].
Reference: [7] <author> C. Bohm, </author> <title> The DTM Protocol Design and Implementation, </title> <type> Licentiate Thesis, </type> <month> February </month> <year> 1994, </year> <institution> Telecommunication System Laboratory, Department of Teleinformatics, Royal Institute of Technology, Sweden. </institution>
Reference-contexts: This requires a very high speed communication network. Examples of networks that can supply this kind of performance are ATM [6], and DTM <ref> [7] </ref>. ATM is a natural first choice since we have a group at the department working with it. Fig 1 Schematic view of a system. The hardware chip for the distributed RTS is represented by Controllers 1 and 2 (master and backup).
Reference: [8] <author> R. Hndel & M. N. Huber, </author> <title> Integrated Broadband Networks: An Introduction to ATM-based Networks, </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year>
Reference-contexts: ATM is a packet-oriented switching and multiplexing technique designed to meet different bandwidth and Quality Of Service (QOS) demands of B-ISDN services <ref> [8] </ref>.
Reference: [9] <author> N. K. Cheung, </author> <title> The Infrastructure for Gigabit Computer Networks, </title> <journal> IEEE Communication Magazine, </journal> <month> April </month> <year> 1992. </year>
Reference-contexts: Depending on the distance between the nodes, the traffic has to pass one or more ATM-switches, as can be seen in Fig. 2. 3.2 Communication Limitations The feasibility of this systems is partly due to the high bandwidth in an ATM-network. For example, in SONET/SDH <ref> [9] </ref>, the line rate is a multiple of 51.84 Mbit/s, for the so-called OC-1 level in SONET, which corresponds to a multiple of 155.52 Mbit/s for STM-1 level in SDH. Common multiples for STM levels are 1, 4, 8 and 16.
Reference: [10] <author> Intermetrics Inc., </author> <title> Ada 9X Rationale, </title> <type> draft, </type> <note> version 4.0, </note> <month> September </month> <year> 1993, </year> <title> Intermetrics, </title> <publisher> Inc. </publisher>
Reference: [11] <author> Intermetrics Inc., </author> <title> Ada 9X Reference Manual, </title> <type> draft, </type> <note> version 4.0, </note> <month> September </month> <year> 1993, </year> <title> Intermetrics, </title> <publisher> Inc. </publisher>
References-found: 11

