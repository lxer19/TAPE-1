URL: http://www.cs.wisc.edu/~donjerko/SRQL.ps
Refering-URL: http://www.cs.wisc.edu/~donjerko/donjerko.html
Root-URL: 
Title: SRQL: Sorted Relational Query Language  
Author: Raghu Ramakrishnan Donko Donjerkovic Arvind Ranganathan Kevin S. Beyer Muralidhar Krishnaprasad 
Affiliation: Department of Computer Sciences University of Wisconsin-Madison  
Abstract: A relation is an unordered collection of records. Often, however, there is an underlying order (e.g., a sequence of stock prices), and users want to pose queries that reflect this order (e.g., find a weekly moving average). SQL provides no support for posing such queries. In this paper, we show how a rich class of queries reflecting sort order can be naturally expressed and efficiently executed with simple extensions to SQL. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Chatziantoniou and K. A. Ross. </author> <title> Querying multiple features of groups in relational databases. </title> <booktitle> In Proceedings of the 22nd VLDB Conference, </booktitle> <address> Mumbai, India, </address> <year> 1996. </year>
Reference-contexts: d f 2 9 f f If we let T be this result, notice that the SQL query: SELECT g,MAX (x) FROM R GROUP BY g is equal to Distinct ( g;MAX (x) (T )). ! is similar to, yet distinct from, the operator defined by Chatziantoniou and Ross in <ref> [1] </ref>. The operator was also introduced to define aggregation windows, although for different motivating problems. We defined ! because it allows a more natural treatment of SRQL. As described in Section 4.3, SRQL currently restricts the use of ! to ensure efficient evaluation.
Reference: [2] <author> M. Gruber. </author> <title> SQL Instance Reference. </title> <address> Sybex, Alameda, CA, </address> <year> 1993. </year>
Reference-contexts: These applications require DBMS support to store, manipulate, and query sequences efficiently, and such support is missing in RDBMSs since the relational model provides sets of tuples as its only data structure. SQL <ref> [2] </ref>, the most widely used query language for relational systems is incapable of answering some common queries posed by commercial and scientific applications, such as moving aggregates. One approach that is being explored in many commercial systems is support for sequences as a new ADT.
Reference: [3] <institution> Illustra Information Technolgies, Inc., </institution> <address> 1111 Broadway, Suite 2000, Oakland, CA 94607. </address> <publisher> Illustra's User Guide, </publisher> <month> June </month> <year> 1994. </year>
Reference-contexts: also supports powerful visualization features. (In this paper, we will not discuss any aspects of DEVise other than SRQL.) The main contributions of this paper are: * The approach to modelling sequences as sorted relations, rather than as ADTs, as is commonly being done in Object-Relational DBMSs or ORDBMSs (e.g., <ref> [3] </ref>), or as EADTs. This leads to easier querying of a combination of relations and sequences, and enables more integrated optimization and evaluation. * An algebra over sequences that extends relational al gebra to address sort order. * The extension of SQL to query sorted relations in SRQL.
Reference: [4] <author> Y. E. Ioannidis and R. Ramakrishnan. </author> <title> Containment of conjunctive queries: Beyond relations as sets. </title> <journal> TODS, </journal> <volume> 20(3):288324, </volume> <month> Sept. </month> <year> 1995. </year>
Reference-contexts: Sequence Algebra The algebra operates on sequences, of which unsorted relations are just a special case having empty sets of grouping and sequencing attributes. Thus, we begin with the basic relational operators (defined on multisets, as in the algebra underlying SQL, e.g., <ref> [6, 4] </ref>, and extend them to work on sequences: select (), project (), cross-product (fi), union ([), and set-difference ().
Reference: [5] <author> M. Livny, R. Ramakrishnan, K. Beyer, G. Chen, D. Don-jerkovic, S. Lawande, J. Myllymaki, and K. Wenger. </author> <title> DEVise: Integrated querying and visual exploration of large datasets. </title> <booktitle> In Proceedings of the ACM SIGMOD Conference on Management of Data, </booktitle> <month> May </month> <year> 1997. </year>
Reference-contexts: We emphasize how a few simple extensions allow sort order to be effectively exploited at both the language and optimization/evaluation levels. We have implemented SRQL as part of the data transformation engine of the DEVise system <ref> [5] </ref>, which also supports powerful visualization features. (In this paper, we will not discuss any aspects of DEVise other than SRQL.) The main contributions of this paper are: * The approach to modelling sequences as sorted relations, rather than as ADTs, as is commonly being done in Object-Relational DBMSs or ORDBMSs
Reference: [6] <author> M. Negri, G. Pelagatti, and L. Sbattella. </author> <title> Formal semantics of SQL queries. </title> <journal> TODS, </journal> <volume> 16(3):513534, </volume> <month> Sept. </month> <year> 1991. </year>
Reference-contexts: Sequence Algebra The algebra operates on sequences, of which unsorted relations are just a special case having empty sets of grouping and sequencing attributes. Thus, we begin with the basic relational operators (defined on multisets, as in the algebra underlying SQL, e.g., <ref> [6, 4] </ref>, and extend them to work on sequences: select (), project (), cross-product (fi), union ([), and set-difference ().
Reference: [7] <institution> Red Brick Systems, Inc. Decision-Makers, Business Data and RISQL, </institution> <month> August </month> <year> 1996. </year> <note> White paper. http://www.redbrick.com/rbs-g/whitepapers/risql wp.html. </note>
Reference-contexts: Performance results of our initial SRQL implementation are presented in Section 5. We talk of related work, especially with respect to ORDBMSs, TSQL [10] and RISQL <ref> [7] </ref> in Section 6. Section 7 concludes the paper. 2. Motivation Sequence data is encountered in a wide variety of scientific and commercial applications, e.g., experimental traces, process evolution, satellite observations over time, stock market prices, and salary histories. <p> We have shown that it is possible to express a large class of sequence queries very naturally using SRQL. Moreover, 4 There is no published description of RISQL, and our knowledge of the language is based on the white paper on Red Brick's home pages <ref> [7] </ref>, and on discussions with Donovan Schneider at Red Brick. we have demonstrated that it is possible to evaluate these queries very efficiently with a few simple extensions to the standard relational query optimizer and evaluation engine.
Reference: [8] <author> P. Seshadri, M. Livny, and R. Ramakrishnan. </author> <title> Sequence query processing. </title> <booktitle> In Proceedings of the ACM SIGMOD Conference on Management of Data, </booktitle> <pages> pages 430441, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: One approach that is being explored in many commercial systems is support for sequences as a new ADT. Users can store a sequence in a field of a tuple, and manipulate it using associated system-defined methods such as moving averages. In earlier work <ref> [8] </ref>, we argued that the ADT approach was inadequate for supporting bulk data types (such as sequences) over which users might want to ask a rich class of queries. The approach limits both the ease with which queries can be formulated, and the degree of query c fl 1998 IEEE. <p> We extend the earlier results of SEQUIN <ref> [8, 9] </ref> significantly, and define SRQL semantics in terms of our algebra. * An implementation demonstrating that efficient and scalable query evaluation is feasible for SRQL. The rest of this paper is organized as follows.
Reference: [9] <author> P. Seshadri, M. Livny, and R. Ramakrishnan. </author> <title> The design and implementation of a sequence database system. </title> <booktitle> In Proceedings of the 22nd VLDB Conference, </booktitle> <address> Mumbai, India, </address> <year> 1996. </year>
Reference-contexts: We extend the earlier results of SEQUIN <ref> [8, 9] </ref> significantly, and define SRQL semantics in terms of our algebra. * An implementation demonstrating that efficient and scalable query evaluation is feasible for SRQL. The rest of this paper is organized as follows. <p> We expect the behavior of the remaining SRQL operators that we have not presented results for (in particular, queries involving joins) to follow the same pattern. For more detailed experimental results we refer you to the related work on SEQ presented in <ref> [9] </ref>. 6. Related Work Object-relational (O-R) systems handle sequences by considering them as another ADT. Sequences are stored as objects in the database and methods are provided for performing operations on sequences. <p> In particular, since each invocation of a method for the sequence ADT is typically executed independently of other methods, certain queries requiring interaction of these methods may not be optimized. This point was experimentally demonstrated in the SEQ system <ref> [9] </ref>. SEQ extended the ADT approach of O-R systems by treating the sequence type as an enhanced ADT (EADT) with its own query optimizer and evaluator.

References-found: 9

