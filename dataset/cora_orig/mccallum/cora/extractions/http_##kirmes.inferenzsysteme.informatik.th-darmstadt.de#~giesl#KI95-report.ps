URL: http://kirmes.inferenzsysteme.informatik.th-darmstadt.de/~giesl/KI95-report.ps
Refering-URL: http://www.inferenzsysteme.informatik.tu-darmstadt.de/~giesl/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: Email: giesl@inferenzsysteme.informatik.th-darmstadt.de  
Title: Automated Termination Proofs with Measure Functions  
Author: Jurgen Giesl 
Address: Alexanderstr. 10, 64283 Darmstadt, Germany  
Affiliation: FB Informatik, Technische Hochschule Darmstadt,  
Abstract: This paper deals with the automation of termination proofs for recursively defined algorithms (i.e. algorithms in a pure functional language). Previously developed methods for their termination proofs either had a low degree of automation or they were restricted to one single fixed measure function to compare data objects. To overcome these drawbacks we introduce a calculus for automated termination proofs which is able to handle arbitrary measure functions based on polynomial norms.
Abstract-found: 1
Intro-found: 1
Reference: [BL87] <author> A. Ben Cherifa & P. Lescanne. </author> <title> Termination of Rewriting Systems by Polynomial Interpretations and its Implementation. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 9(2) </volume> <pages> 137-159, </pages> <year> 1987. </year>
Reference-contexts: While most work on the automation of termination proofs has been done in the areas of term rewriting systems (e.g. [Lan79], [Der87], <ref> [BL87] </ref>, [Ste92]) and logic programs (e.g. [Plu90], [DSF93]), a well-known method for automated termination proofs of lisp functions has been implemented in the nqthm system of R. S. Boyer and J S. Moore [BM79]. <p> Therefore in this area several methods have been developed to automatically prove that given polynomial inequalities hold for all instantiations of the variables with natural numbers greater than some minimal value. One of the best known approaches has been developed by A. Ben Cherifa and P. Lescanne <ref> [BL87] </ref> and has been refined by J. Steinbach [Ste92]. Recently, we have presented a simpler and slightly more powerful alternative approach for proving polynomial inequalities which is based on Lankford's partial derivative technique [Gie95a].
Reference: [BL93] <author> E. Bevers & J. Lewi. </author> <title> Proving Termination of (Conditional) Rewrite Systems. </title> <journal> Acta Informatica, </journal> <volume> 30 </volume> <pages> 537-568, </pages> <year> 1993. </year>
Reference-contexts: It has also been adapted for termination proofs in other areas, e.g. an adaption of this technique for termination proofs of general 2 conditional term rewriting systems can be found in <ref> [BL93] </ref>. But a disadvantage of Boyer and Moore's induction lemma technique is a low degree of automation. Induction lemmata which specify that certain operations decrease measures have to be formulated by the user of the system. So the human has to find the idea why an algorithm terminates.
Reference: [BM79] <author> R. S. Boyer & J S. Moore. </author> <title> A Computational Logic. </title> <publisher> Academic Press, </publisher> <year> 1979. </year>
Reference-contexts: S. Boyer and J S. Moore <ref> [BM79] </ref>. For such an algorithm f (x) one has to prove that in each recursive call f (t) a given measure is decreased. More precisely, Boyer and Moore use a measure function m which maps data objects to natural numbers. <p> As an example regard the following normalization algorithm for conditional expressions which constitutes one of the hardest termination problems in <ref> [BM79] </ref>. To represent conditional expressions we use a data structure cexpr whose objects are built with the constructors atomic and cond. The nullary function atomic represents an atomic expression and the function cond : cexpr fi cexpr fi cexpr ! cexpr is used to represent a conditional. <p> The main idea of this technique is to extend the approach of Walther [Wal94] by a procedure for proving polynomial inequalities. In this way our technique combines the advantages of the methods of Walther and of Boyer and Moore <ref> [BM79] </ref>, i.e. it is a fully automated procedure which works for arbitrary measure functions based on polynomial norms. The technique has been implemented within the induction theorem prover inka and proved successful, i.e. termination of all 82 algorithms in the data base of [BM79] could be proved automatically 6 . <p> of Walther and of Boyer and Moore <ref> [BM79] </ref>, i.e. it is a fully automated procedure which works for arbitrary measure functions based on polynomial norms. The technique has been implemented within the induction theorem prover inka and proved successful, i.e. termination of all 82 algorithms in the data base of [BM79] could be proved automatically 6 . While in the system of Boyer and Moore any measure function defined by an algorithm can be used, up to now our approach can only deal with measure functions which are based on polynomial norms.
Reference: [DSF93] <author> S. Decorte, D. De Schreye & M. Fabris. </author> <title> Automatic Inference of Norms: A Missing Link in Automatic Termination Analysis. </title> <booktitle> In Proc. Int. Logic Programming Symp., </booktitle> <address> Vancouver, Canada, </address> <year> 1993. </year>
Reference-contexts: While most work on the automation of termination proofs has been done in the areas of term rewriting systems (e.g. [Lan79], [Der87], [BL87], [Ste92]) and logic programs (e.g. [Plu90], <ref> [DSF93] </ref>), a well-known method for automated termination proofs of lisp functions has been implemented in the nqthm system of R. S. Boyer and J S. Moore [BM79]. For such an algorithm f (x) one has to prove that in each recursive call f (t) a given measure is decreased.
Reference: [Der87] <author> N. Dershowitz. </author> <title> Termination of Rewriting. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 3(1, </volume> 2):69-115, 1987. 
Reference-contexts: While most work on the automation of termination proofs has been done in the areas of term rewriting systems (e.g. [Lan79], <ref> [Der87] </ref>, [BL87], [Ste92]) and logic programs (e.g. [Plu90], [DSF93]), a well-known method for automated termination proofs of lisp functions has been implemented in the nqthm system of R. S. Boyer and J S. Moore [BM79]. <p> Note that in general it is undecidable whether a polynomial inequality is true for all instantiations of its variables with naturals [Lan79]. The use of polynomial mappings j:j for termination proofs is a technique often used for termination proofs of term rewriting systems [Lan79], <ref> [Der87] </ref>. Therefore in this area several methods have been developed to automatically prove that given polynomial inequalities hold for all instantiations of the variables with natural numbers greater than some minimal value. One of the best known approaches has been developed by A. Ben Cherifa and P.
Reference: [Gie95a] <author> J. Giesl. </author> <title> Generating Polynomial Orderings for Termination Proofs. </title> <booktitle> Proc. 6th Int. Conf. Rewriting Tech. & Applications, </booktitle> <address> Kaiserslautern, Germany, </address> <year> 1995. </year>
Reference-contexts: One of the best known approaches has been developed by A. Ben Cherifa and P. Lescanne [BL87] and has been refined by J. Steinbach [Ste92]. Recently, we have presented a simpler and slightly more powerful alternative approach for proving polynomial inequalities which is based on Lankford's partial derivative technique <ref> [Gie95a] </ref>. The main idea of this approach is that instead of proving inequality (6) for all natural numbers juj; jyj; jzj 1 it is sufficient if this inequality holds for juj = 1 and if juj (jyj + jzj) is not decreasing when juj is increasing.
Reference: [Gie95b] <author> J. Giesl. </author> <title> Termination Analysis for Functional Programs using Term Order-ings. </title> <booktitle> Proc. 2nd Int. Static Analysis Symposium, </booktitle> <address> Glasgow, Scotland, </address> <year> 1995. </year>
Reference-contexts: But due to their special form and due to this evaluation strategy it is possible to use a different approach for termination proofs of algorithms than it is necessary for term rewriting systems <ref> [Gie95b] </ref>. <p> In this paper we introduced a technique to synthesize induction lemmata for given measure functions automatically. To increase the level of automation we are also working on a method to generate suited measure functions by machine <ref> [Gie95b] </ref>. Acknowledgements I would like to thank Jurgen Brauburger, Stefan Gerberding, Thomas Kolbe, Martin Protzen, Christoph Walther and the referees for helpful comments.
Reference: [Lan79] <author> D. S. Lankford. </author> <title> On Proving Term Rewriting Systems are Noetherian. </title> <type> Technical Report Memo MTP-3, </type> <institution> Louisiana Tech. Univ., Ruston, LA, </institution> <year> 1979. </year>
Reference-contexts: While most work on the automation of termination proofs has been done in the areas of term rewriting systems (e.g. <ref> [Lan79] </ref>, [Der87], [BL87], [Ste92]) and logic programs (e.g. [Plu90], [DSF93]), a well-known method for automated termination proofs of lisp functions has been implemented in the nqthm system of R. S. Boyer and J S. Moore [BM79]. <p> The central idea of our extension is to adapt a technique from the area of term rewriting systems <ref> [Lan79] </ref> and to replace the estimation calculus by a technique for proving polynomial inequalities automatically. While the estimation calculus only works for the size measure function, our approach allows the use of any measure function based on so-called polynomial norms. <p> So instead of the estimation calculus (which only works for the special measure function j:j # ) we now need a method to prove polynomial inequalities. Note that in general it is undecidable whether a polynomial inequality is true for all instantiations of its variables with naturals <ref> [Lan79] </ref>. The use of polynomial mappings j:j for termination proofs is a technique often used for termination proofs of term rewriting systems [Lan79], [Der87]. <p> Note that in general it is undecidable whether a polynomial inequality is true for all instantiations of its variables with naturals <ref> [Lan79] </ref>. The use of polynomial mappings j:j for termination proofs is a technique often used for termination proofs of term rewriting systems [Lan79], [Der87]. Therefore in this area several methods have been developed to automatically prove that given polynomial inequalities hold for all instantiations of the variables with natural numbers greater than some minimal value. One of the best known approaches has been developed by A. Ben Cherifa and P.
Reference: [Pau86] <author> L. C. Paulson. </author> <title> Proving Termination of Normalization Functions for Conditional Expressions. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 2(1) </volume> <pages> 63-74, </pages> <year> 1986. </year>
Reference-contexts: When examining several methods to prove termination of normalize, L. Paul-son suggested to use the following mapping j:j from objects of the data structure cexpr to natural numbers <ref> [Pau86] </ref>. Atomic expressions should be mapped to the number 1 (i.e. jatomicj = 1) and the mapping for conditionals is jcond (x; y; z)j = jxj (1 + jyj + jzj). So for example jcond (atomic; atomic; atomic)j = 1 (1 + 1 + 1) = 3.
Reference: [Plu90] <author> L. Plumer. </author> <title> Termination Proofs for Logic Programs. </title> <publisher> Springer, </publisher> <year> 1990. </year>
Reference-contexts: While most work on the automation of termination proofs has been done in the areas of term rewriting systems (e.g. [Lan79], [Der87], [BL87], [Ste92]) and logic programs (e.g. <ref> [Plu90] </ref>, [DSF93]), a well-known method for automated termination proofs of lisp functions has been implemented in the nqthm system of R. S. Boyer and J S. Moore [BM79]. For such an algorithm f (x) one has to prove that in each recursive call f (t) a given measure is decreased.
Reference: [Ste92] <author> J. Steinbach. </author> <title> Proving Polynomials Positive. </title> <booktitle> In Proc. 12th Conf. Foundations Software Technology & Theoretical Comp. </booktitle> <address> Sc., New Delhi, India, </address> <year> 1992. </year>
Reference-contexts: While most work on the automation of termination proofs has been done in the areas of term rewriting systems (e.g. [Lan79], [Der87], [BL87], <ref> [Ste92] </ref>) and logic programs (e.g. [Plu90], [DSF93]), a well-known method for automated termination proofs of lisp functions has been implemented in the nqthm system of R. S. Boyer and J S. Moore [BM79]. <p> One of the best known approaches has been developed by A. Ben Cherifa and P. Lescanne [BL87] and has been refined by J. Steinbach <ref> [Ste92] </ref>. Recently, we have presented a simpler and slightly more powerful alternative approach for proving polynomial inequalities which is based on Lankford's partial derivative technique [Gie95a].
Reference: [Wal88] <author> C. Walther. </author> <title> Argument-Bounded Algorithms as as Basis for Automated Termination Proofs. </title> <booktitle> Proc. 9th Int. Conf. Aut. Deduction, </booktitle> <address> Argonne, Illinois, </address> <year> 1988. </year>
Reference-contexts: Moreover, to ensure the soundness of the user supplied induction lemmata, these lemmata have to be verified by the system. This verification may be hard, as in general an inductive proof is needed. Therefore an alternative method for automated termination proofs of algorithms has been developed by C. Walther <ref> [Wal88] </ref>, [Wal94]. With this method a certain class of induction lemmata can be synthesized automatically and the soundness of these induction lemmata is guaranteed by construction. So compared to the technique of Boyer and Moore the advantage of Walther's method is a much higher degree of automation.
Reference: [Wal94] <author> C. Walther. </author> <title> On Proving the Termination of Algorithms by Machine. </title> <journal> Artificial Intelligence, </journal> <volume> 71(1) </volume> <pages> 101-157, </pages> <year> 1994. </year> <note> 6 As mentioned in [Wal94] one algorithm (greatest.factor) must be slightly modified. </note>
Reference-contexts: This verification may be hard, as in general an inductive proof is needed. Therefore an alternative method for automated termination proofs of algorithms has been developed by C. Walther [Wal88], <ref> [Wal94] </ref>. With this method a certain class of induction lemmata can be synthesized automatically and the soundness of these induction lemmata is guaranteed by construction. So compared to the technique of Boyer and Moore the advantage of Walther's method is a much higher degree of automation. <p> A proof procedure for this calculus is obtained by using the inference rules in reverse direction, cf. <ref> [Wal94] </ref>. 4 Synthesis of Induction Lemmata Our termination proof calculus is based on induction lemmata stating that certain operations are argument-bounded under the given norm j:j. Unlike the method of Boyer and Moore, our method is able to synthesize such induction lemmata automatically. <p> Another refinement concerns the optimization of difference algorithms. Several techniques for their simplification have been presented in <ref> [Wal94] </ref>. These optimizations considerably ease the proof that the difference formula is valid under the condition of the algorithm's recursive case. It is also possible to use measure functions based on lexicographic combinations of polynomial norms. This would for instance enable a termination proof for Ackermann's well-known function. <p> The main idea of this technique is to extend the approach of Walther <ref> [Wal94] </ref> by a procedure for proving polynomial inequalities. In this way our technique combines the advantages of the methods of Walther and of Boyer and Moore [BM79], i.e. it is a fully automated procedure which works for arbitrary measure functions based on polynomial norms.
References-found: 13

