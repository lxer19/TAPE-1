URL: http://www.isi.edu/sims/papers/94-sims-parplan.ps
Refering-URL: http://www.isi.edu/~knoblock/
Root-URL: 
Email: knoblock@isi.edu  
Title: Generating Parallel Execution Plans with a Partial-Order Planner  
Author: Craig A. Knoblock 
Date: 1994  
Note: To appear in the Proceedings of the Second Inter-nation Conference on Artificial Intelligence Planning Systems, Morgan Kaufmann,  
Address: 4676 Admiralty Way Marina del Rey, CA 90292  San Mateo, CA,  
Affiliation: Information Sciences Institute and Department of Computer Science University of Southern California  
Abstract: Many real-world planning problems require generating plans that maximize the parallelism inherent in a problem. There are a number of partial-order planners that generate such plans; however, in most of these planners it is unclear under what conditions the resulting plans will be correct and whether the planner can even find a plan if one exists. This paper identifies the underlying assumptions about when a partial plan can be executed in parallel, defines the classes of parallel plans that can be generated by different partial-order planners, and describes the changes required to turn ucpop into a parallel execution planner. In addition, we describe how this planner can be applied to the problem of query access planning, where parallel execution produces substantial reductions in overall execution time. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Allen, J. F.; Kautz, H. A.; Pelavin, R. N.; and Tenen-berg, J. D. </author> <year> 1991. </year> <title> Reasoning About Plans. </title> <address> San Mateo: </address> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> Backstrom, C. </author> <year> 1993. </year> <title> Finding least constrained plans and optimal parallel executions is harder than we thought. </title> <booktitle> In Current Trends in AI Planning: EWSP'93-2nd European Workshop on Planning. </booktitle> <address> Amsterdam: </address> <publisher> IOS Press. </publisher>
Reference: <author> Barrett, A.; Golden, K.; Penberthy, S.; and Weld, D. </author> <year> 1993. </year> <note> UCPOP user's manual (version 2.0). Technical Report 93-09-06, </note> <institution> Department of Computer Science and Engineering, University of Washington. </institution>
Reference: <author> Chapman, D. </author> <year> 1987. </year> <title> Planning for conjunctive goals. </title> <booktitle> Artificial Intelligence 32(3) </booktitle> <pages> 333-377. </pages>
Reference-contexts: Simultaneous execution requires that potential resource conflicts between unordered actions be made explicit and avoided. There are numerous partial-order planners presented in the literature, including sipe (Wilkins 1984), non-lin (Tate 1976), snlp (McAllester & Rosenblitt 1991), ucpop (Penberthy & Weld 1992), tweak <ref> (Chapman 1987) </ref>, o-plan (Currie & Tate 1991), etc. Many fl The research reported here was supported by Rome Laboratory of the Air Force Systems Command and the Advanced Research Projects Agency under contract no. F30602-91-C-0081. <p> Independent Subplans Relative to a Goal Not all partial-order planners enforce the property that two actions can remain unordered only if there are no threats between them. In particular, those planners that implement some form of Chapman's white knight <ref> (Chapman 1987) </ref> require only that there exist some operator that establishes a given precondition, but do not commit to which operator. More specifically, the white knight operation allows plans with the following conditions: There exists some operator op 1 that achieves a goal or precondition g. <p> If we are interested in producing totally-ordered plans, then the white knight operator is not required for completeness. However, the use of the white knight operator allows a planner to generate a slightly more general class of parallel plans. The planners in this class include tweak <ref> (Chapman 1987) </ref>, nonlin (Tate 1976), o-plan (Currie & Tate 1991), mp, and mpi (Kambhampati 1994). The class of parallel plans produced by these planners are those with independent subplans relative to a goal. <p> The implementation of the white knight, which allows a planner to generate this more general class of parallel plans, also makes it difficult to extend the operator language to efficiently handle more expressive constructs, such as conditional effects and universal quantification <ref> (Chapman 1987) </ref>. These more expressive language constructs are often required for representing and solving real problems. Interacting Actions The most general class of parallel plans are those where the parallel actions interact in some way.
Reference: <author> Currie, K., and Tate, A. </author> <year> 1991. </year> <title> O-Plan: The open planning architecture. </title> <booktitle> Artificial Intelligence 52(1) </booktitle> <pages> 49-86. </pages>
Reference-contexts: Simultaneous execution requires that potential resource conflicts between unordered actions be made explicit and avoided. There are numerous partial-order planners presented in the literature, including sipe (Wilkins 1984), non-lin (Tate 1976), snlp (McAllester & Rosenblitt 1991), ucpop (Penberthy & Weld 1992), tweak (Chapman 1987), o-plan <ref> (Currie & Tate 1991) </ref>, etc. Many fl The research reported here was supported by Rome Laboratory of the Air Force Systems Command and the Advanced Research Projects Agency under contract no. F30602-91-C-0081. <p> They do so by either assuming the actions are independent (Tate 1976), augmenting the action representation to avoid resource conflicts (Wilkins 1984), or requiring the user to explicitly represent the conflicts in the preconditions and effects of the operators <ref> (Currie & Tate 1991) </ref>. The approach of simply assuming that the actions are independent could lead to unexpected resource conflicts. <p> However, the use of the white knight operator allows a planner to generate a slightly more general class of parallel plans. The planners in this class include tweak (Chapman 1987), nonlin (Tate 1976), o-plan <ref> (Currie & Tate 1991) </ref>, mp, and mpi (Kambhampati 1994). The class of parallel plans produced by these planners are those with independent subplans relative to a goal.
Reference: <author> Horz, A. </author> <year> 1993. </year> <title> On the relation of classical and temporal planning. </title> <booktitle> In Proceedings of the Spring Symposium on Foundations of Automatic Planning. </booktitle>
Reference: <author> Kambhampati, S. </author> <year> 1994. </year> <title> Multi-contributor causal structures for planning: A formalization and evaluation. </title> <journal> Artificial Intelligence. </journal>
Reference-contexts: However, the use of the white knight operator allows a planner to generate a slightly more general class of parallel plans. The planners in this class include tweak (Chapman 1987), nonlin (Tate 1976), o-plan (Currie & Tate 1991), mp, and mpi <ref> (Kambhampati 1994) </ref>. The class of parallel plans produced by these planners are those with independent subplans relative to a goal. <p> can be generated by the planners in this class, but cannot be generated by the planners in the previous class are those where there are actions that are not independent, but the subplans in which the actions occur are independent. subplans relative to the goal (adapted from an example in <ref> (Kambhampati 1994) </ref>). In this example, before the table and chair can be painted red, they must be primed, and priming them has a side effect of painting the floor white. The final goal of the problem is to get the table, chair, and floor all painted red.
Reference: <author> Knoblock, C., and Arens, Y. </author> <year> 1994. </year> <title> Cooperating agents for information retrieval. </title> <booktitle> In Proceedings of the Second International Conference on Cooperative Information Systems. </booktitle> <publisher> University of Toronto Press. </publisher>
Reference-contexts: As such, the plan generation and scheduling cannot be done independently since this would potentially result in highly suboptimal plans. We applied the parallel execution planner to a query access planning problem that involves multiple distributed information sources <ref> (Knoblock & Arens 1994) </ref>. In this domain, a plan is produced that specifies how to retrieve and generate the requested set of data.
Reference: <author> McAllester, D., and Rosenblitt, D. </author> <year> 1991. </year> <title> Systematic nonlinear planning. </title> <booktitle> In Proceedings of the Ninth National Conference on Artificial Intelligence. </booktitle>
Reference-contexts: The semantics of a partially-ordered plan provide that the two actions can be executed in either order. Simultaneous execution requires that potential resource conflicts between unordered actions be made explicit and avoided. There are numerous partial-order planners presented in the literature, including sipe (Wilkins 1984), non-lin (Tate 1976), snlp <ref> (McAllester & Rosenblitt 1991) </ref>, ucpop (Penberthy & Weld 1992), tweak (Chapman 1987), o-plan (Currie & Tate 1991), etc. Many fl The research reported here was supported by Rome Laboratory of the Air Force Systems Command and the Advanced Research Projects Agency under contract no. F30602-91-C-0081. <p> Since the actions of painting the table and painting the chair are independent, they can be executed in parallel. Independent Actions Relative to a Goal In a variety of partial-order planners, such as sipe (Wilkins 1984), snlp <ref> (McAllester & Rosenblitt 1991) </ref>, and ucpop (Penberthy & Weld 1992), the planners enforce the property that two actions can only remain unordered if there is no threat between them.
Reference: <author> Minton, S.; Bresina, J.; and Drummond, M. </author> <year> 1991. </year> <title> Commitment strategies in planning: A comparative analysis. </title> <booktitle> In Proceedings of the Twelfth International Joint Conference on Artificial Intelligence. </booktitle>
Reference-contexts: A planner that can only generate plans with independent actions is ua <ref> (Minton, Bresina, & Drummond 1991) </ref>, which imposes ordering constraints between any pair of unordered actions that could possibly interact. painted red and the chair painted blue. Since the actions of painting the table and painting the chair are independent, they can be executed in parallel.
Reference: <author> Penberthy, J. S., and Weld, D. S. </author> <year> 1992. </year> <title> UCPOP: A sound, complete, partial order planner for ADL. </title> <booktitle> In Third International Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> 189-197. </pages>
Reference-contexts: Simultaneous execution requires that potential resource conflicts between unordered actions be made explicit and avoided. There are numerous partial-order planners presented in the literature, including sipe (Wilkins 1984), non-lin (Tate 1976), snlp (McAllester & Rosenblitt 1991), ucpop <ref> (Penberthy & Weld 1992) </ref>, tweak (Chapman 1987), o-plan (Currie & Tate 1991), etc. Many fl The research reported here was supported by Rome Laboratory of the Air Force Systems Command and the Advanced Research Projects Agency under contract no. F30602-91-C-0081. <p> Since the actions of painting the table and painting the chair are independent, they can be executed in parallel. Independent Actions Relative to a Goal In a variety of partial-order planners, such as sipe (Wilkins 1984), snlp (McAllester & Rosenblitt 1991), and ucpop <ref> (Penberthy & Weld 1992) </ref>, the planners enforce the property that two actions can only remain unordered if there is no threat between them.
Reference: <author> Penberthy, J. S. </author> <year> 1993. </year> <title> Planning with Continuous Change. </title> <type> Ph.D. Thesis, </type> <institution> Department of Computer Science and Engineering, University Washington. </institution>
Reference: <author> Regnier, P., and Fade, B. </author> <year> 1991. </year> <title> Complete determination of parallel actions and temporal optimization in linear plans of action. </title> <editor> In Hertzberg, J., ed., </editor> <booktitle> European Workshop on Planning. </booktitle> <publisher> Springer-Verlag. </publisher> <pages> 100-111. </pages>
Reference: <author> Tate, A. </author> <year> 1976. </year> <title> Project planning using a hierarchic non-linear planner. </title> <type> Research Report 25, </type> <institution> Department of Artificial Intelligence, University of Edinburgh, </institution> <address> Ed-inburgh, Scotland. </address>
Reference-contexts: The semantics of a partially-ordered plan provide that the two actions can be executed in either order. Simultaneous execution requires that potential resource conflicts between unordered actions be made explicit and avoided. There are numerous partial-order planners presented in the literature, including sipe (Wilkins 1984), non-lin <ref> (Tate 1976) </ref>, snlp (McAllester & Rosenblitt 1991), ucpop (Penberthy & Weld 1992), tweak (Chapman 1987), o-plan (Currie & Tate 1991), etc. Many fl The research reported here was supported by Rome Laboratory of the Air Force Systems Command and the Advanced Research Projects Agency under contract no. F30602-91-C-0081. <p> Despite the problem of potential resource conflicts, a number of partial-order planners have allowed simultaneous execution. They do so by either assuming the actions are independent <ref> (Tate 1976) </ref>, augmenting the action representation to avoid resource conflicts (Wilkins 1984), or requiring the user to explicitly represent the conflicts in the preconditions and effects of the operators (Currie & Tate 1991). The approach of simply assuming that the actions are independent could lead to unexpected resource conflicts. <p> Two actions are defined to be independent if and only if the effects of the two actions executed simultaneously are the union of the individual effects of the actions done in isolation. Allen (1991) notes that various partial-order planners, such as nonlin <ref> (Tate 1976) </ref>, deviser (Vere 1983), and sipe (Wilkins 1984), all "allow simultaneous action when the two actions are completely independent of each other." While this statement is correct, it is a bit misleading since these planners can generate plans for a less restrictive class of parallel plans. <p> If we are interested in producing totally-ordered plans, then the white knight operator is not required for completeness. However, the use of the white knight operator allows a planner to generate a slightly more general class of parallel plans. The planners in this class include tweak (Chapman 1987), nonlin <ref> (Tate 1976) </ref>, o-plan (Currie & Tate 1991), mp, and mpi (Kambhampati 1994). The class of parallel plans produced by these planners are those with independent subplans relative to a goal.
Reference: <author> Tjaden, G. S., and Flynn, M. J. </author> <year> 1970. </year> <title> Detection and parallel execution of independent instructions. </title> <journal> IEEE Transactions on Computers C-19(10):889-895. </journal>
Reference-contexts: This section identifies the conditions under which it is possible to execute two actions in parallel. The work on parallelizing execution of machine instructions <ref> (Tjaden & Flynn 1970) </ref> provides some insight on the types of dependencies that arise between actions. Tjaden and Flynn identify three types of dependencies that must be considered in parallelizing machine instructions: procedural, operational, and data.
Reference: <author> Veloso, M. M.; Perez, M. A.; and Carbonell, J. G. </author> <year> 1990. </year> <title> Nonlinear planning with parallel resource allocation. </title> <booktitle> In Proceedings of the Workshop on Innovative Approaches to Planning, Scheduling and Control, </booktitle> <pages> 207-212. </pages>
Reference: <author> Vere, S. A. </author> <year> 1983. </year> <title> Planning in time: Windows and durations for activities and goals. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intell. </journal> <volume> 5(3) </volume> <pages> 246-267. </pages>
Reference-contexts: Two actions are defined to be independent if and only if the effects of the two actions executed simultaneously are the union of the individual effects of the actions done in isolation. Allen (1991) notes that various partial-order planners, such as nonlin (Tate 1976), deviser <ref> (Vere 1983) </ref>, and sipe (Wilkins 1984), all "allow simultaneous action when the two actions are completely independent of each other." While this statement is correct, it is a bit misleading since these planners can generate plans for a less restrictive class of parallel plans.
Reference: <author> Vilain, M.; Kautz, H.; and van Beek, P. </author> <year> 1989. </year> <title> Constraint propagation algorithms for temporal reasoning: </title> <note> A revised report. In Weld, </note> <editor> D., and de Kleer, J., eds., </editor> <booktitle> Readings in Qualitative Reasoning about Physical Systems, </booktitle> <pages> 373-381. </pages> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: A temporal planner can handle the general problem of simultaneous parallel execution, but this general solution has a cost, since just testing the satisfiability of a set of assertions is NP-hard <ref> (Vilain, Kautz, & van Beek 1989) </ref>. The capabilities of a full-fledged temporal planner are necessary only if we need to explicitly reason about the interaction between parallel actions.
Reference: <author> Weld, D. S. </author> <year> 1994. </year> <title> An introduction to partial-order planning. </title> <journal> AI Magazine. </journal>
Reference-contexts: Fifth, we compare the use of a partial-order planner to other approaches to building parallel execution plans. Finally, we review the contributions of the paper and describe some directions for future research. Executing Actions in Parallel Classical planners assume that the execution of an action is indivisible and uninterruptible <ref> (Weld 1994) </ref>. This is referred to as the atomic action assumption and stems from the fact that the strips-style representation only models the preconditions and effects of an action.
Reference: <author> Wilkins, D. E. </author> <year> 1984. </year> <title> Domain-independent planning: Representation and plan generation. </title> <booktitle> Artificial Intelligence 22(3) </booktitle> <pages> 269-301. </pages>
Reference-contexts: The semantics of a partially-ordered plan provide that the two actions can be executed in either order. Simultaneous execution requires that potential resource conflicts between unordered actions be made explicit and avoided. There are numerous partial-order planners presented in the literature, including sipe <ref> (Wilkins 1984) </ref>, non-lin (Tate 1976), snlp (McAllester & Rosenblitt 1991), ucpop (Penberthy & Weld 1992), tweak (Chapman 1987), o-plan (Currie & Tate 1991), etc. Many fl The research reported here was supported by Rome Laboratory of the Air Force Systems Command and the Advanced Research Projects Agency under contract no. <p> Despite the problem of potential resource conflicts, a number of partial-order planners have allowed simultaneous execution. They do so by either assuming the actions are independent (Tate 1976), augmenting the action representation to avoid resource conflicts <ref> (Wilkins 1984) </ref>, or requiring the user to explicitly represent the conflicts in the preconditions and effects of the operators (Currie & Tate 1991). The approach of simply assuming that the actions are independent could lead to unexpected resource conflicts. <p> The most natural approach is to augment the action representation to describe the explicit resource needs of the different actions. This approach was proposed in sipe <ref> (Wilkins 1984) </ref>, where each operator can be annotated to explicitly state if something is a resource. In the next section we will assume that the resource constraints have been made explicit and in the following section we will describe our approach to representing and reasoning about resources. <p> Two actions are defined to be independent if and only if the effects of the two actions executed simultaneously are the union of the individual effects of the actions done in isolation. Allen (1991) notes that various partial-order planners, such as nonlin (Tate 1976), deviser (Vere 1983), and sipe <ref> (Wilkins 1984) </ref>, all "allow simultaneous action when the two actions are completely independent of each other." While this statement is correct, it is a bit misleading since these planners can generate plans for a less restrictive class of parallel plans. <p> Since the actions of painting the table and painting the chair are independent, they can be executed in parallel. Independent Actions Relative to a Goal In a variety of partial-order planners, such as sipe <ref> (Wilkins 1984) </ref>, snlp (McAllester & Rosenblitt 1991), and ucpop (Penberthy & Weld 1992), the planners enforce the property that two actions can only remain unordered if there is no threat between them.
References-found: 20

