URL: http://www.cs.umd.edu/~nau/search/its-aaai94.ps
Refering-URL: http://www.cs.umd.edu/~nau/publications.html
Root-URL: 
Email: nau@cs.umd.edu  
Title: ITS: An Efficient Limited-Memory Heuristic Tree Search Algorithm  
Author: Subrata Ghosh Ambuj Mahanti Dana S. Nau 
Address: College Park,MD 20742 India  subrata@cs.umd.edu iimcal!am@veccal.ernet.in College Park, MD 20742  
Affiliation: Department of Computer Science IIM, Calcutta Dept. of Computer Science, and University of Maryland Calcutta 700 027 Institute for Systems Research  University of Maryland  
Abstract: This paper describes a new admissible tree search algorithm called Iterative Threshold Search (ITS). ITS can be viewed as a much-simplified version of MA* [1], and a generalized version of MREC [12]. We also present the following results: 1. Every node generated by ITS is also generated 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. P. Chakrabarti, S. Ghosh, A. Acharya, and S. C. De Sarkar. </author> <title> Heuristic search in restricted memory. </title> <journal> Artif. Intel., </journal> <volume> 47 </volume> <pages> 197-221, </pages> <year> 1989. </year>
Reference: [2] <author> R. Dechter and J. Pearl. </author> <title> Generalized best-first search strategies and the optimality of A*. </title> <journal> JACM, </journal> <volume> 32(3) </volume> <pages> 505-536, </pages> <year> 1985. </year>
Reference-contexts: Introduction Although A* is usually very efficient in terms of number of node expansions <ref> [2] </ref>, it requires an exponential amount of memory, and thus runs out of memory even on problem instances of moderate size. This problem led to Korf's development of IDA* [6].
Reference: [3] <author> M. Evett, J. Hendler, A. Mahanti, and D. Nau. PRA*: </author> <title> A memory-limited heuristic search procedure for the connection machine. </title> <booktitle> In Frontiers'90: Frontiers of Massively Parallel Computation, </booktitle> <year> 1990. </year>
Reference-contexts: These algorithms can be categorized into two classes: (1) the first class uses additional memory to store more nodes than IDA*, and thereby reduce regeneration of some nodes. The algorithms which belong to this class are MREC, MA*, RA* <ref> [3] </ref>, SMA* [10], and ITS, and (2) the second class of algorithms attempts to reduce node regenerations by reducing the number of iterations, by increasing the threshold more liberally than IDA*. IDA* CR [11], DFS* [9], and MIDA* [13] belong to this class.
Reference: [4] <author> S. Ghosh. </author> <title> Heuristic Search with Limited Resources. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, U. of Maryland, </institution> <year> 1994 </year> <month> (forthcoming). </month>
Reference-contexts: ITS can be viewed as a much simplified version of MA*, and a generalized version of MREC. ITS's node selection and retraction (pruning) overhead is much less expensive than MA*'s. 2. We have proved (for proofs, see <ref> [4] </ref>) that ITS dominates IDA*; i.e., even if ITS is given no more memory than IDA*, every node generated by ITS is also generated by IDA*.
Reference: [5] <author> E. Ignall and L. </author> <title> Schrage. Applications of the branch and bound technique to some flow-shop scheduling problems. </title> <journal> Operations Research, </journal> <volume> 13(3) </volume> <pages> 400-412, </pages> <year> 1965. </year>
Reference-contexts: We used a search-space representation and admissible node evaluation function of Ignall and Schrage <ref> [5] </ref>. For ITS (0), there is a special case to consider. In the flow-shop scheduling problem, it is very easy to generate the successor n 0 of a node n.
Reference: [6] <author> R. E. Korf. </author> <title> Depth first iterative deepening: An optimal admissible tree search. </title> <journal> Artif. Intel., </journal> <volume> 27 </volume> <pages> 97-109, </pages> <year> 1985. </year>
Reference-contexts: Introduction Although A* is usually very efficient in terms of number of node expansions [2], it requires an exponential amount of memory, and thus runs out of memory even on problem instances of moderate size. This problem led to Korf's development of IDA* <ref> [6] </ref>. IDA*'s memory requirement is only linear in the depth of the search, enabling it to solve larger problems than A* can solve in practice. However, when additional memory is available, IDA* does not make use of this memory to reduce the number of node expansions.
Reference: [7] <author> J. D. Little, K. G. Murty, D. W. Sweeney, and C. Karel. </author> <title> An algorithm for the traveling salesman problem. </title> <journal> Operations Research, </journal> <volume> 11 </volume> <pages> 972-989, </pages> <year> 1963. </year>
Reference-contexts: A tour is a path that starting at some initial city visits every city once and only once, and returns to the initial city. We chose the well known method of Little et al. <ref> [7] </ref> to represent the search space and the lower bound heuristic for the traveling salesman problem.
Reference: [8] <author> B. G. Patrick, M. Almulla, and M. M. Newborn. </author> <title> An upper bound on the complexity of iterative-deepening-A*. </title> <booktitle> In Symp. on Artif. </booktitle> <publisher> Intel. and Math., </publisher> <address> Fort Lauderdale, FL, </address> <year> 1989. </year>
Reference-contexts: Our experiments suggest that in the average case both IDA* and ITS are asymptotically optimal on the traveling salesman problem. Although Patrick et al. <ref> [8] </ref> showed that there exists a class of traveling salesman problems in which IDA* is not asymptotically optimal, our results suggest that such problems are not common enough to affect IDA*'s average performance over a large number of problem instances.
Reference: [9] <author> V. N. Rao and V. Kumar R. E. Korf. </author> <title> Depth-first vs. best-first search. </title> <booktitle> In AAAI-1991, </booktitle> <pages> pages 434-440, </pages> <address> Anaheim, California, </address> <year> 1991. </year>
Reference-contexts: The algorithms which belong to this class are MREC, MA*, RA* [3], SMA* [10], and ITS, and (2) the second class of algorithms attempts to reduce node regenerations by reducing the number of iterations, by increasing the threshold more liberally than IDA*. IDA* CR [11], DFS* <ref> [9] </ref>, and MIDA* [13] belong to this class. Like IDA*, MREC is a recursive search algorithm. The difference between MREC and other algorithms in its class is that MREC allocates its memory statically, in the order in which nodes are generated.
Reference: [10] <author> S. Russell. </author> <title> Efficient memory-bounded search methods. </title> <booktitle> In ECAI-1992, </booktitle> <address> Vienna, Austria, </address> <year> 1992. </year>
Reference-contexts: These algorithms can be categorized into two classes: (1) the first class uses additional memory to store more nodes than IDA*, and thereby reduce regeneration of some nodes. The algorithms which belong to this class are MREC, MA*, RA* [3], SMA* <ref> [10] </ref>, and ITS, and (2) the second class of algorithms attempts to reduce node regenerations by reducing the number of iterations, by increasing the threshold more liberally than IDA*. IDA* CR [11], DFS* [9], and MIDA* [13] belong to this class. Like IDA*, MREC is a recursive search algorithm.
Reference: [11] <author> U. K. Sarkar, P. P. Chakrabarti, S. Ghose, and S. C. De Sarkar. </author> <title> Reducing reexpansions in iterative deepening search by controlling cutoff bounds. </title> <journal> Artif. Intel., </journal> <volume> 50(2) </volume> <pages> 207-221, </pages> <year> 1991. </year>
Reference-contexts: The algorithms which belong to this class are MREC, MA*, RA* [3], SMA* [10], and ITS, and (2) the second class of algorithms attempts to reduce node regenerations by reducing the number of iterations, by increasing the threshold more liberally than IDA*. IDA* CR <ref> [11] </ref>, DFS* [9], and MIDA* [13] belong to this class. Like IDA*, MREC is a recursive search algorithm. The difference between MREC and other algorithms in its class is that MREC allocates its memory statically, in the order in which nodes are generated.
Reference: [12] <author> A. Sen and A. Bagchi. </author> <title> Fast recursive formulations for best-first search that allow controlled use of memory. </title> <booktitle> In IJCAI-89, </booktitle> <pages> pages 274-277, </pages> <year> 1989. </year>
Reference: [13] <author> B. W. Wah. MIDA*, </author> <title> an IDA* search with dynamic control. </title> <type> Technical Report UILU-ENG-91-2216, </type> <institution> U. of Illinois, Champaign-Urbana, IL, </institution> <year> 1991. </year>
Reference-contexts: The algorithms which belong to this class are MREC, MA*, RA* [3], SMA* [10], and ITS, and (2) the second class of algorithms attempts to reduce node regenerations by reducing the number of iterations, by increasing the threshold more liberally than IDA*. IDA* CR [11], DFS* [9], and MIDA* <ref> [13] </ref> belong to this class. Like IDA*, MREC is a recursive search algorithm. The difference between MREC and other algorithms in its class is that MREC allocates its memory statically, in the order in which nodes are generated.
References-found: 13

