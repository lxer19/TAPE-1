URL: http://www.cs.utah.edu/~mjones/papers/rty.paper.ps.gz
Refering-URL: http://www.cs.utah.edu/~mjones/papers/
Root-URL: 
Title: Restricted Types for HOL  
Author: Michael Jones 
Address: Provo UT 84602, USA  
Affiliation: Computer Science Department, Brigham Young University,  
Abstract: Restricted types is a method for incorporating the expressiveness of predicate types in HOL without modifying the HOL type langauge. Restricted types allow predicate restrictions to be placed on the values of HOL constants. Dependant and predicate typing can be approximated using restricted types. The work presented here has been implemented in SML as an extra-logical aid to the development of HOL theories.
Abstract-found: 1
Intro-found: 1
Reference: [BJLW97] <author> Annette Bunker, Michael Jones, Trent Larson, and Phillip Windley. </author> <title> A case study in heirarchical verification using types. </title> <note> submitted to TPHOLs 1997, </note> <year> 1997. </year>
Reference-contexts: This example was inspired by Leeser and Aagard's use of nuprl dependant types to create a methodology for reusing previously verified devices into ongoing verificaiton attempts [LA92]. We have also used rty to develope the tools for creating entire libraries of verified devices organized by type in HOL <ref> [BJLW97] </ref>. 6 Discussion While the rty package as described in this paper can be used to approximate dependant predicate types in the HOL theorem prover, the rty package does not support true predicate subtypes as found in other theorem provers such as PVS and nuprl. rty comes close to providing the
Reference: [FKH90] <author> Mark Longley F. Keith Hanna, Neil Daeche. </author> <title> Specification and verification using dependant types. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-16(9), </volume> <month> September </month> <year> 1990. </year>
Reference: [LA92] <author> Miriam Leeser and Mark Aagard. </author> <title> A methodology for reusable hardware proofs. </title> <editor> In Luc Claeson and Michael J.C. Gordon, editors, </editor> <booktitle> Proceedings of the 1992 International Workshop on the HOL Theorem Prover and its Applications, </booktitle> <month> November </month> <year> 1992. </year>
Reference-contexts: Several papers highlighting the advantages of predicate and dependant types have appeared in the literature ([FKH90], [MS95], <ref> [LA92] </ref>). HOL on the other hand uses a simple traditional type system. Despite efforts to approximate predicate subtypes using restricted quantification, the HOL community has not taken full advantage of predicate and dependant types. Incorporating a rich type system into HOL presents an interesting problem. <p> The user must ensure that only restriction correct terms are used in later verification attempts. This example was inspired by Leeser and Aagard's use of nuprl dependant types to create a methodology for reusing previously verified devices into ongoing verificaiton attempts <ref> [LA92] </ref>.
Reference: [Mel91] <author> T. F. Melham. </author> <title> A package for inductive relation definitions in HOL. </title> <editor> In Karl N. Levitt Myla Archer, Jeffrey J. Joyce and Phillip J. Windley, editors, </editor> <booktitle> Proceedings of the 1991 International Workshop on the HOL Theorem Proving System and its Aplications. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1991. </year>
Reference-contexts: In this section we use this technique to specify and verify a half-adder. First, we create the :full adder type space in HOL using the type definition package created by Melham <ref> [Mel91] </ref>: # val fulladder_ty = define_type type_spec = `fulladder_ty = fulladder_of of (bool # bool # bool) -&gt; (bool # bool) -&gt; bool`, name = "fulladder_ty_DEF", fixities = [Prefix];; At this point, any device with the right combination of boolean inputs and outputs qualifies for inclusion in type :full adder.
Reference: [MS95] <author> Steven P. Miller and Mandayam Srivas. </author> <title> Formal verification of the AAMP5 microprocessor: A case study in the industrial use of formal methods. </title> <booktitle> In WIFT '95: Workshop on Industrial-Strength Formal Specification Techniques, </booktitle> <pages> pages 2-16, </pages> <address> Boca Raton, FL, 1995. </address> <publisher> IEEE Computer Society. </publisher>
Reference-contexts: Several papers highlighting the advantages of predicate and dependant types have appeared in the literature ([FKH90], <ref> [MS95] </ref>, [LA92]). HOL on the other hand uses a simple traditional type system. Despite efforts to approximate predicate subtypes using restricted quantification, the HOL community has not taken full advantage of predicate and dependant types. Incorporating a rich type system into HOL presents an interesting problem.
Reference: [OS] <author> Sam Owre and Natarajan Shankar. </author> <title> Formal semantics of PVS. </title> <note> Available at http://www.csl.sri.com/shankar/PVS-semantics.ps.gz. </note>
Reference-contexts: PVS contains a well-thought out and usefull implementation of dependent predicate subtypes <ref> [OS] </ref>. In PVS, users create types which are subtypes (or subsets) of existing types using predicates to further narrow the scope of the type. For example, a suitably defined predicate can be used to create a subtype of the integers which contains only even numbers.
Reference: [Won93] <author> Wai Wong. </author> <title> The HOL res quan Library, 1993. Documentation available with HOL library distribution. This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: The PVS algorithm for generating type correctness conditions was very influential in the development of the rty RCC generator. The RCC interface was also modeled after PVS type restriction condition handler and extended to allow user-defined tactics in autmatic RCC proofs. In HOL, the restricted quantification package <ref> [Won93] </ref> and rty are very dif-ferent approaches to achieving the same goal. Restricted quantification allows the use of predicates to restrict the applicability of quantified variables. 5 Examples In this section, we present two examples to illustrate the use and capabilites of restricted types in HOL.
References-found: 7

