URL: http://www.cs.mu.oz.au/tr_db/mu_95_10.ps.gz
Refering-URL: http://www.cs.mu.oz.au/tr_db/TR.html
Root-URL: 
Email: fjbailey,kemp,dnk,raog@cs.mu.oz.au  georgeff@aaii.oz.au  
Phone: 2  
Title: Active Databases and Agent Systems A Comparison  
Author: James Bailey Michael Georgeff David Kemp David Kinny Kotagiri Ramamohanarao 
Note: 1  3 Appears in T.Sellis, editor, Proceedings of the Second International Workshop on Rules in Database Sys tems, Lecture Notes in Computer Science 985, pages 342-356, Athens, Greece, 1995.  
Address: Parkville 3052  
Affiliation: Department of Computer Science University of Melbourne  
Pubnum: Technical Report 95/10 3  
Abstract: This paper examines Active Databases and Agent Systems, comparing their purpose, structure, functionality, and implementation. Our presentation is aimed primarily at an audience familiar with active database technology. We show that they draw upon very similar paradigms in their quest to supply reactivity. This presents opportunities for migration of techniques and formalisms between the two fields. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Philip E. Agre and David Chapman. Pengi: </author> <title> An implementation of a theory of activity. </title> <booktitle> In Proceedings of the Sixth National Conference on Artificial Intelligence, AAAI-87, </booktitle> <pages> pages 268-272, </pages> <address> Seattle, WA, </address> <year> 1987. </year>
Reference-contexts: trends in each field and propose topics for future research. 1 Detailed descriptions of ADBs may be found elsewhere [12, 3]. 1 2 Agent System Architectures The term agent has been used in AI to label a multitude of systems, ranging from simple reactive systems devoid of explicit symbolic representations <ref> [29, 1, 14, 26] </ref> through to complex heterogeneous multi-agent systems with individual and shared representations [21, 10, 13]. The term has recently achieved the status of "flavour of the month", with many commercial software developers offering or promising "software agents" that will act intelligently and autonomously to perform useful tasks.
Reference: [2] <author> A. Aiken, J. Widom, and J. M. Hellerstein. </author> <title> Behavior of database production rules: Termination, confluence and observable determinism. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <year> 1992. </year>
Reference-contexts: A question related to rule design is the possibility of reasoning about rule sets and testing them for certain properties. Active database research has examined properties such as confluence and termination <ref> [2] </ref>, albeit in a restricted way. For agent systems these properties may be less relevant, since intentions can be persistent and hence non-terminating, but there 14 is still much to be gained from such efforts.
Reference: [3] <author> J. A. Bailey and K. Ramamohanarao. </author> <title> Issues in active databases. </title> <booktitle> In Proceedings of the Sixth Australasian Database Conference, </booktitle> <pages> pages 27-35, </pages> <address> Glenelg, South Australia, </address> <year> 1995. </year>
Reference-contexts: After making comparisons in several other areas, we look at research trends in each field and propose topics for future research. 1 Detailed descriptions of ADBs may be found elsewhere <ref> [12, 3] </ref>. 1 2 Agent System Architectures The term agent has been used in AI to label a multitude of systems, ranging from simple reactive systems devoid of explicit symbolic representations [29, 1, 14, 26] through to complex heterogeneous multi-agent systems with individual and shared representations [21, 10, 13].
Reference: [4] <author> Grady Booch. </author> <title> Object-Oriented Analysis and Design with Applications. </title> <address> Ben-jamin/Cummings, Redwood City, CA, 2nd edition, </address> <year> 1994. </year>
Reference-contexts: Another issue is determining what agents are needed to solve a particular problem | this is similar to schema design in an ADB. One possibility is the adaptation of object-oriented design methodologies <ref> [30, 4] </ref> to the design of ASs; this is currently an active research area [24]. A question related to rule design is the possibility of reasoning about rule sets and testing them for certain properties.
Reference: [5] <author> Michael E. Bratman. </author> <title> Intentions, Plans, and Practical Reason. </title> <publisher> Harvard University Press, </publisher> <address> Cambridge, MA, </address> <year> 1987. </year>
Reference-contexts: This architecture has its origins in the study of mental attitudes; namely, Beliefs, Desires and Intentions that represent, respectively, the agent's information, motivational, and deliberative state. These mental attitudes directly determine the system's behaviour and are critical for achieving adequate performance when deliberation is subject to resource bounds <ref> [5, 23] </ref>. 2.1 BDI Agent Architecture containing current beliefs or facts about the world; a set of current desires (or goals) to be realized; a set of plans describing how certain sequences of actions and tests may be performed to achieve given goals or to react to particular situations; and an
Reference: [6] <author> B. Burmeister and K. Sundermeyer. </author> <title> Cooperative problem-solving guided by intentions and perception. </title> <booktitle> In Proceedings of the Third European Workshop on Modelling Autonomous Agents and Multi-Agent Worlds, MAAMAW '91, </booktitle> <address> Kaiserslautern, Germany, </address> <year> 1991. </year>
Reference-contexts: In this paper we will focus on a particular approach to software agency that has achieved considerable maturity, the Belief/Desire/Intention (BDI) architecture <ref> [16, 15, 11, 27, 6, 31, 25, 28] </ref>. This architecture has its origins in the study of mental attitudes; namely, Beliefs, Desires and Intentions that represent, respectively, the agent's information, motivational, and deliberative state.
Reference: [7] <author> S. Ceri, P. Fraternali, S. Paraboschi, and L. Tanca. </author> <title> Putting active databases to work. </title> <booktitle> In IEEE Data Engineering, </booktitle> <year> 1992. </year>
Reference-contexts: Applications of active databases are also diverse. They can range from simple database alerters to systems that perform complex database changes. Interestingly, initial applications of ADBs have been relatively unambitious and have concentrated on issues such as extending the handling of integrity constraints <ref> [7] </ref> and providing view maintenance [8, 20]; areas also of importance to passive databases. This reflects the inherent difficulty of reasoning about systems that react in a complicated way and perform a series of complex tasks, which is also the reason for the limited functionality of current commercial systems.
Reference: [8] <author> S. Ceri and J. Widom. </author> <title> Deriving incremental production rules for deductive data. </title> <journal> Information Systems, </journal> <volume> 19(6), </volume> <year> 1994. </year>
Reference-contexts: Applications of active databases are also diverse. They can range from simple database alerters to systems that perform complex database changes. Interestingly, initial applications of ADBs have been relatively unambitious and have concentrated on issues such as extending the handling of integrity constraints [7] and providing view maintenance <ref> [8, 20] </ref>; areas also of importance to passive databases. This reflects the inherent difficulty of reasoning about systems that react in a complicated way and perform a series of complex tasks, which is also the reason for the limited functionality of current commercial systems.
Reference: [9] <author> S. Chakravarthy, K. Karlapalem, S. B. Navathe, and A. Tanaka. </author> <title> Database supported cooperative problem solving. </title> <type> Technical Report UF-CIS-TR-92-046, </type> <institution> University of Florida, Gainesville, Florida, </institution> <year> 1992. </year>
Reference-contexts: Does the addition of extra rules destroy the correctness of existing rule sets, or perhaps degrade system performance unacceptably? Tractable theories that address these issues will be necessary if we are to construct robust, maintainable, large-scale systems. Another issue is the integration of the two paradigms (see <ref> [9] </ref> for an example of using both technologies co-operatively). For example, one could incorporate transactions into an AS to provide recovery and robustness. Alternatively, one could incorporate long lived processes and their associated maintenance conditions into an ADB.
Reference: [10] <author> Paul R. Cohen, Michael L. Greenberg, David M. Hart, and Adele E. Howe. </author> <title> Real-time problem solving in the phoenix environment. </title> <booktitle> In Proceedings of the Workshop on Real-Time Artificial Intelligence Problems at IJCAI-89, </booktitle> <year> 1989. </year>
Reference-contexts: may be found elsewhere [12, 3]. 1 2 Agent System Architectures The term agent has been used in AI to label a multitude of systems, ranging from simple reactive systems devoid of explicit symbolic representations [29, 1, 14, 26] through to complex heterogeneous multi-agent systems with individual and shared representations <ref> [21, 10, 13] </ref>. The term has recently achieved the status of "flavour of the month", with many commercial software developers offering or promising "software agents" that will act intelligently and autonomously to perform useful tasks.
Reference: [11] <author> Paul R. Cohen and Hector J. Levesque. </author> <title> Intention is choice with commitment. </title> <journal> Artificial Intelligence, </journal> <volume> 42(3) </volume> <pages> 213-261, </pages> <year> 1990. </year>
Reference-contexts: In this paper we will focus on a particular approach to software agency that has achieved considerable maturity, the Belief/Desire/Intention (BDI) architecture <ref> [16, 15, 11, 27, 6, 31, 25, 28] </ref>. This architecture has its origins in the study of mental attitudes; namely, Beliefs, Desires and Intentions that represent, respectively, the agent's information, motivational, and deliberative state.
Reference: [12] <author> U. Dayal, E. Hanson, and J. Widom. </author> <title> Active database systems. In Modern Database Systems: The Object Model, Interoperabilty and Beyond. </title> <publisher> Addison Wesley, </publisher> <address> Reading Mas-sachusetts, </address> <year> 1994. </year>
Reference-contexts: After making comparisons in several other areas, we look at research trends in each field and propose topics for future research. 1 Detailed descriptions of ADBs may be found elsewhere <ref> [12, 3] </ref>. 1 2 Agent System Architectures The term agent has been used in AI to label a multitude of systems, ranging from simple reactive systems devoid of explicit symbolic representations [29, 1, 14, 26] through to complex heterogeneous multi-agent systems with individual and shared representations [21, 10, 13].
Reference: [13] <author> Keith Decker and Victor Lesser. </author> <title> Analyzing the need for meta-level communication. </title> <booktitle> In Proceedings of the Twelfth International Workshop on Distributed Artificial Intelligence, DAI '93, </booktitle> <address> Hidden Valley, Pennsylvania, </address> <year> 1993. </year>
Reference-contexts: may be found elsewhere [12, 3]. 1 2 Agent System Architectures The term agent has been used in AI to label a multitude of systems, ranging from simple reactive systems devoid of explicit symbolic representations [29, 1, 14, 26] through to complex heterogeneous multi-agent systems with individual and shared representations <ref> [21, 10, 13] </ref>. The term has recently achieved the status of "flavour of the month", with many commercial software developers offering or promising "software agents" that will act intelligently and autonomously to perform useful tasks.
Reference: [14] <author> R. J. Firby. </author> <title> Adaptive Execution in Complex Dynamic Worlds. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Yale University, </institution> <address> New Haven, Connecticut, </address> <year> 1989. </year> <month> 16 </month>
Reference-contexts: trends in each field and propose topics for future research. 1 Detailed descriptions of ADBs may be found elsewhere [12, 3]. 1 2 Agent System Architectures The term agent has been used in AI to label a multitude of systems, ranging from simple reactive systems devoid of explicit symbolic representations <ref> [29, 1, 14, 26] </ref> through to complex heterogeneous multi-agent systems with individual and shared representations [21, 10, 13]. The term has recently achieved the status of "flavour of the month", with many commercial software developers offering or promising "software agents" that will act intelligently and autonomously to perform useful tasks.
Reference: [15] <author> R. James Firby. </author> <title> An investigation into reactive planning in complex domains. </title> <booktitle> In Proceed--ings of the Sixth National Conference on Artificial Intelligence, AAAI-87, </booktitle> <pages> pages 202-206, </pages> <address> Seattle, WA, </address> <year> 1987. </year>
Reference-contexts: In this paper we will focus on a particular approach to software agency that has achieved considerable maturity, the Belief/Desire/Intention (BDI) architecture <ref> [16, 15, 11, 27, 6, 31, 25, 28] </ref>. This architecture has its origins in the study of mental attitudes; namely, Beliefs, Desires and Intentions that represent, respectively, the agent's information, motivational, and deliberative state.
Reference: [16] <author> Michael P. Georgeff and Amy L. Lansky. </author> <title> Procedural knowledge. </title> <booktitle> In Proceedings of the IEEE Special Issue on Knowledge Representation, </booktitle> <volume> volume 74, </volume> <pages> pages 1383-1398, </pages> <year> 1986. </year>
Reference-contexts: In this paper we will focus on a particular approach to software agency that has achieved considerable maturity, the Belief/Desire/Intention (BDI) architecture <ref> [16, 15, 11, 27, 6, 31, 25, 28] </ref>. This architecture has its origins in the study of mental attitudes; namely, Beliefs, Desires and Intentions that represent, respectively, the agent's information, motivational, and deliberative state.
Reference: [17] <author> M.P. Georgeff and F.F. Ingrand. </author> <title> Real-time reasoning: The monitoring and control of spacecraft systems. </title> <booktitle> In Proceedings of the Sixth IEEE Conference on Artificial Intelligence Applications, </booktitle> <address> Santa Barbara, California, </address> <year> 1990. </year>
Reference-contexts: These changes in the system's goals and beliefs invoke (trigger) various plans. One or more of these applicable plans will then be chosen and placed on the intention structure. Finally, the interpreter selects an executable 2 The architecture described is based upon PRS <ref> [17] </ref>. 2 ? ? - 6 @R @ @I @R SENSORS BELIEF (Fact) DATABASE PLAN LIBRARY ENVIRONMENT INTERPRETER (Reasoner) EFFECTORS INTENTION STRUCTURE DESIRES (Goals) USER INTERFACE intention from the intention structure and executes one step of that intention.
Reference: [18] <author> T. Haerder and A. Reuter. </author> <title> Principles of transaction-oriented database recovery. Transaction on Database Systems, </title> <year> 1983. </year>
Reference-contexts: The intrinsic goals in an AS will commonly be defined by the designer at the agent's conception, but may also be established at runtime by the execution of the agent's plans, a user, or other agents. In an ADB, ACID properties <ref> [18] </ref> are an inherent part of the behaviour of transactions, whereas in an AS this functionality has to be explicitly considered in the design of plans.
Reference: [19] <editor> E. Hanson et al. </editor> <title> Flexible and recoverable interaction between applications and active databases. </title> <type> Technical Report UF-CIS-TR-94-033, </type> <institution> University of Florida, Gainesville, Florida, </institution> <year> 1994. </year>
Reference-contexts: ASs have a notion of success/failure associated with actions, plans, and goals. This is typically not supported in active databases, and limits the extent to which they can interact with the outside world, where it may be necessary to make several repeated attempts to achieve a desired outcome <ref> [19] </ref>. 4 Example: MicroBlue versus BigSoft Consider a system that tracks the stock market and is capable of sending buy and sell orders to a stock broker. Here we compare how this system might be implemented in an ADB and in an AS.
Reference: [20] <author> J. V. Harrison and S. W. Dietrich. </author> <title> Incremental view maintenance. </title> <booktitle> In Proceedings of the Fifth Australasian Database Conference, </booktitle> <address> Christchurch, New Zealand, </address> <year> 1994. </year>
Reference-contexts: Applications of active databases are also diverse. They can range from simple database alerters to systems that perform complex database changes. Interestingly, initial applications of ADBs have been relatively unambitious and have concentrated on issues such as extending the handling of integrity constraints [7] and providing view maintenance <ref> [8, 20] </ref>; areas also of importance to passive databases. This reflects the inherent difficulty of reasoning about systems that react in a complicated way and perform a series of complex tasks, which is also the reason for the limited functionality of current commercial systems.
Reference: [21] <author> F. Hayes-Roth, B., R. Washington, R. Hewett, M. Hewett, and A. Seiver. </author> <title> Intelligent monitoring and control. </title> <booktitle> In Proceedings of the Eleventh International Joint Conference on Artificial Intelligence, IJCAI-89, </booktitle> <pages> pages 243-249, </pages> <address> Detroit, MI, </address> <year> 1989. </year>
Reference-contexts: may be found elsewhere [12, 3]. 1 2 Agent System Architectures The term agent has been used in AI to label a multitude of systems, ranging from simple reactive systems devoid of explicit symbolic representations [29, 1, 14, 26] through to complex heterogeneous multi-agent systems with individual and shared representations <ref> [21, 10, 13] </ref>. The term has recently achieved the status of "flavour of the month", with many commercial software developers offering or promising "software agents" that will act intelligently and autonomously to perform useful tasks.
Reference: [22] <author> Felix Ingrand and Michael P. Georgeff. </author> <title> Managing deliberation and reasoning in real-time AI systems. </title> <type> Technical Report 10, </type> <institution> Australian Artificial Intelligence Institute, </institution> <address> Melbourne, Australia, </address> <year> 1990. </year>
Reference-contexts: In these systems it is necessary to impose constraints on the time taken to select and execute plans, and to guarantee that events are noticed sufficiently promptly <ref> [22] </ref>. One may need to choose a plan based on the criterion of how long it will take to execute as well as the quality of the result it produces | a suboptimal solution within the available time is better than an optimal solution delivered too late to be useful.
Reference: [23] <author> David Kinny and Michael Georgeff. </author> <title> Commitment and effectiveness of situated agents. </title> <booktitle> In Proceedings of the Twelfth International Joint Conference on Artificial Intelligence, IJCAI-91, </booktitle> <pages> pages 82-88, </pages> <address> Sydney, </address> <year> 1991. </year>
Reference-contexts: This architecture has its origins in the study of mental attitudes; namely, Beliefs, Desires and Intentions that represent, respectively, the agent's information, motivational, and deliberative state. These mental attitudes directly determine the system's behaviour and are critical for achieving adequate performance when deliberation is subject to resource bounds <ref> [5, 23] </ref>. 2.1 BDI Agent Architecture containing current beliefs or facts about the world; a set of current desires (or goals) to be realized; a set of plans describing how certain sequences of actions and tests may be performed to achieve given goals or to react to particular situations; and an <p> When actions fail, or the world changes in unexpected ways, the agent may need to reconsider these commitments. The right balance between commitment and reconsideration is an important agent design issue which depends sensitively on the properties of the world in which the agent exists <ref> [23] </ref>. 5 6 - @R @I DATABASE RULES & PROCEDURES ENVIRONMENT EXECUTION ENGINE INTEGRITY CONSTRAINTS & TRIGGERS TRANSACTIONS (Goals) USER INTERFACES 3 Comparison of Architectural Features The database component in an ADB is analogous to the belief database in an AS.
Reference: [24] <author> David Kinny and Michael Georgeff. </author> <title> A design methodology for BDI agent systems. </title> <type> Technical Report 55, </type> <institution> Australian Artificial Intelligence Institute, </institution> <address> Melbourne, Australia, </address> <year> 1995. </year>
Reference-contexts: Another issue is determining what agents are needed to solve a particular problem | this is similar to schema design in an ADB. One possibility is the adaptation of object-oriented design methodologies [30, 4] to the design of ASs; this is currently an active research area <ref> [24] </ref>. A question related to rule design is the possibility of reasoning about rule sets and testing them for certain properties. Active database research has examined properties such as confluence and termination [2], albeit in a restricted way.
Reference: [25] <author> David Kinny, Magnus Ljungberg, Anand Rao, Elizabeth Sonenberg, Gil Tidhar, and Eric Werner. </author> <title> Planned team activity. </title> <booktitle> In Proceedings of the Fourth European Workshop on Modelling Autonomous Agents in a Multi-Agent World, MAAMAW '92, </booktitle> <pages> page 20, </pages> <address> Viterbo, Italy, </address> <year> 1992. </year> <note> Also appears as Australian Artificial Intelligence Institute Technical Note 31, </note> <institution> Melbourne, Australia, </institution> <year> 1992. </year>
Reference-contexts: In this paper we will focus on a particular approach to software agency that has achieved considerable maturity, the Belief/Desire/Intention (BDI) architecture <ref> [16, 15, 11, 27, 6, 31, 25, 28] </ref>. This architecture has its origins in the study of mental attitudes; namely, Beliefs, Desires and Intentions that represent, respectively, the agent's information, motivational, and deliberative state.
Reference: [26] <author> Nils J. Nilsson. </author> <title> Towards agent programs with circuit semantics. </title> <type> Technical Report STAN-CS-92-1412, </type> <institution> Stanford University, Stanford, </institution> <address> CA, </address> <year> 1992. </year>
Reference-contexts: trends in each field and propose topics for future research. 1 Detailed descriptions of ADBs may be found elsewhere [12, 3]. 1 2 Agent System Architectures The term agent has been used in AI to label a multitude of systems, ranging from simple reactive systems devoid of explicit symbolic representations <ref> [29, 1, 14, 26] </ref> through to complex heterogeneous multi-agent systems with individual and shared representations [21, 10, 13]. The term has recently achieved the status of "flavour of the month", with many commercial software developers offering or promising "software agents" that will act intelligently and autonomously to perform useful tasks.
Reference: [27] <author> Anand S. Rao and Michael P. Georgeff. </author> <title> Modeling rational agents within a BDI-architecture. </title> <booktitle> In Proceedings of the Second International Conference on Principles of Knowledge Representation and Reasoning, KR '91, </booktitle> <pages> pages 473-484, </pages> <address> Cambridge, MA, </address> <year> 1991. </year>
Reference-contexts: In this paper we will focus on a particular approach to software agency that has achieved considerable maturity, the Belief/Desire/Intention (BDI) architecture <ref> [16, 15, 11, 27, 6, 31, 25, 28] </ref>. This architecture has its origins in the study of mental attitudes; namely, Beliefs, Desires and Intentions that represent, respectively, the agent's information, motivational, and deliberative state.
Reference: [28] <author> Anand S. Rao and Michael P. Georgeff. </author> <title> An Abstract Architecture for Rational Agents. </title> <booktitle> In Proceedings of the Third International Conference on Principles of Knowledge Representation and Reasoning, KR '92, </booktitle> <pages> pages 439-449, </pages> <address> Boston, MA, </address> <year> 1992. </year>
Reference-contexts: In this paper we will focus on a particular approach to software agency that has achieved considerable maturity, the Belief/Desire/Intention (BDI) architecture <ref> [16, 15, 11, 27, 6, 31, 25, 28] </ref>. This architecture has its origins in the study of mental attitudes; namely, Beliefs, Desires and Intentions that represent, respectively, the agent's information, motivational, and deliberative state.
Reference: [29] <author> S. J. Rosenschein and L. P. Kaelbling. </author> <title> The synthesis of digital machines with provable epistemic properties. </title> <editor> In J. Y. Halpern, editor, </editor> <booktitle> Proceedings of the First Conference on Theoretical Aspects of Reasoning about Knowledge, </booktitle> <address> San Mateo, CA, 1986. </address> <publisher> Morgan Kaufmann Publishers. </publisher>
Reference-contexts: trends in each field and propose topics for future research. 1 Detailed descriptions of ADBs may be found elsewhere [12, 3]. 1 2 Agent System Architectures The term agent has been used in AI to label a multitude of systems, ranging from simple reactive systems devoid of explicit symbolic representations <ref> [29, 1, 14, 26] </ref> through to complex heterogeneous multi-agent systems with individual and shared representations [21, 10, 13]. The term has recently achieved the status of "flavour of the month", with many commercial software developers offering or promising "software agents" that will act intelligently and autonomously to perform useful tasks.
Reference: [30] <author> James Rumbaugh, Michael Blaha, William Premerlani, Frederick Eddy, and William Lorensen. </author> <title> Object-Oriented Modeling and Design. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliifs, NJ, </address> <year> 1991. </year>
Reference-contexts: Another issue is determining what agents are needed to solve a particular problem | this is similar to schema design in an ADB. One possibility is the adaptation of object-oriented design methodologies <ref> [30, 4] </ref> to the design of ASs; this is currently an active research area [24]. A question related to rule design is the possibility of reasoning about rule sets and testing them for certain properties.
Reference: [31] <author> Yoav Shoham. Agent0: </author> <title> A simple agent language and its interpreter. </title> <booktitle> In Proceedings of the Ninth National Conference on Artificial Intelligence, AAAI-91, </booktitle> <pages> pages 704-709, </pages> <address> San Jose, CA, </address> <year> 1991. </year> <month> 18 </month>
Reference-contexts: In this paper we will focus on a particular approach to software agency that has achieved considerable maturity, the Belief/Desire/Intention (BDI) architecture <ref> [16, 15, 11, 27, 6, 31, 25, 28] </ref>. This architecture has its origins in the study of mental attitudes; namely, Beliefs, Desires and Intentions that represent, respectively, the agent's information, motivational, and deliberative state.
References-found: 31

