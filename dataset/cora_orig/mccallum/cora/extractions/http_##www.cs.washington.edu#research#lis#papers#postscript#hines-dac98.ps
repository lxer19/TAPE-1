URL: http://www.cs.washington.edu/research/lis/papers/postscript/hines-dac98.ps
Refering-URL: http://www.cs.washington.edu/research/projects/lis/chinook/www/HB98a.html
Root-URL: http://www.cs.washington.edu
Email: fhineskj,gaetanog@cs.washington.edu  
Title: A Geographically Distributed Framework for Embedded System Design and Validation  
Author: Ken Hines and Gaetano Borriello 
Address: Box 352350  Seattle, WA 98195-2350  
Affiliation: Department of Computer Science Engineering,  University of Washington,  
Abstract: The difficulty of embedded system co-design is increasing rapidly due to the increasing complexity of individual parts, the variety of parts available and pressure to use multiple processors to meet performance criteria. Validation tools should contain several features in order to keep up with this trend, including the ability to dynamically change detail levels, built in protection for intellectual property, and support for gradual migration of functionality from a simulation environment to the real hardware. In this paper, we present our approach to the problem which includes a geographically distributed co-simulation framework. This framework is a system of nodes such that each can include either portions of the simulator or real hardware. In support of this, the framework includes a mechanism for maintaining consistent versions of virtual time. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Chan, F. L., Spiller, M. D., and Newton, A. R. </author> <title> Weld an environment for web-based electronic design. </title> <booktitle> In Proceedings of the 35th Annual Design Automation Conference (1998). </booktitle>
Reference-contexts: To improve the speed of simulation and to reduce network bandwidth, Pia allows for multiple levels of detail and provides a mechanism for dynamically switching between them. There are other projects involving frameworks for geographically distributed electronic design, such as WELD <ref> [1] </ref>, but Pia differs from these in that its primary focus is in facilitating hardware/software co-design through geographically distributed co-simulation and in integrating remotely located hardware into a co-simulation environment (rather than in facilitating distributed design of arbitrary hardware).
Reference: [2] <author> Chandy, K., and L., L. </author> <title> Distributed snapshots: Determining global states in distributed systems. </title> <journal> ACM Transactions on Computer Systems 3, </journal> <volume> 1 (1985), </volume> <pages> 63-75. </pages>
Reference-contexts: This is because there may be some delay between the time when the scheduler requests a checkpoint, and all components receive the request. Since all channels between subsystems are FIFO channels, we can solve this problem with the Chandy-Lamport algorithm <ref> [2] </ref>. After a subsystem receives (or generates) a checkpoint request, it performs a local checkpoint and transmits a mark on all of its outgoing channels. Upon receipt of a mark, a subsystem immediately performs a local checkpoint, before receiving anything else on that same channel.
Reference: [3] <author> Chou, P., and Borriello, G. </author> <title> Software architecture synthesis for retargetable real-time embedded systems. </title> <note> In Codes/CASHE '97 (1997). </note>
Reference-contexts: There is also research into including actual hardware in simulation, for example, the UWTester [10], CATFISH [11] and EagleI. In this paper, we present the approach taken in Pia, the co-simulator of the Chinook project <ref> [3, 12] </ref>. Pia provides a distributed hardware-software co-simulator and tools for schematic capture as well as a means of connecting these to synthesis tools and actual hardware.
Reference: [4] <institution> DEC Pamette Board http://www.research.digital.com/SRC/pamette/. [5] http://www.viewlogic.com/products/eagletools.html. </institution>
Reference-contexts: One possibility is to use a DEC Pamette board <ref> [4] </ref> to provide the hardware side of this, and the software side could be written using the Pamette control library.
Reference: [6] <author> Hines, K., and Borriello, G. </author> <title> Dynamic communication models in embedded system co-simulation. </title> <booktitle> In Proceedings of the 34th Design Automation Conference (June 1997). </booktitle>
Reference-contexts: It is intended to provide background for the distributed version of Pia, but for the complete details see <ref> [6] </ref>. From the designer's point a view, a system simulated through Pia consists of components, interfaces, ports and nets. Components are containers for some basic functionality, interfaces connect components to ports, and ports are interconnected through nets. <p> Although this solution could conceivably cause problems with performance, we showed how the principles of selective focus introduced in <ref> [6] </ref> can be used to offset this. Current work is in the extension of Pia to include a debugger and changing the checkpoint mechanism to use incremental rather than total checkpoints. Additional current and future work involves setting up Pia socket versions of hardware servers, and building additional examples.
Reference: [7] <author> Hines, K., and Borriello, G. </author> <title> Optimizing communication in hardware-software co-simulation. </title> <booktitle> In Codes/CASHE '97 (1997), IEEE, ACM. </booktitle>
Reference-contexts: In the cases where the user must provide additional instructions for levels of detail not currently in any library, we allow these to be entered as a set of assertions which describe the activating conditions, and results of any action <ref> [7] </ref>. 2.1 Pia on a single host This section gives a brief overview of Pia's operation on a single host. It is intended to provide background for the distributed version of Pia, but for the complete details see [6].
Reference: [8] <institution> Intel Remote Evaluation Facility, </institution> <address> http://developer.intel.com/design/i960/testcntr/ ref/INDEX.HTM. </address>
Reference-contexts: Parts vendors have already begun to use the Internet to provide users with access to parts for evaluation. Intel, for example now has a remote evaluation facility <ref> [8] </ref> that permits designers to evaluate various i960 processors over the web. Users can enter, compile and run programs on the desired processor and observe the results allover the web.
Reference: [9] <author> Klein, R. </author> <title> Miami: a hardware software co-simulation environment. In Proceedings. Seventh IEEE International Workshop on Rapid System Prototyping. Shortening the path from specification to prototyping (June 1996). </title>
Reference-contexts: Finally, it should include debugging support for the parts of the system that are in hardware, the parts in software, the parts that are in simulation, as well as the system as a whole. Most of these have been individually addressed, for example, Mentor Graphics' Seamless CVE <ref> [9] </ref>, Viewlogic's Ea-gleI [5], and the previous version of Pia all allow dynamic changes in the detail levels. Viper technology allows the use of IP in simulation, through use of encrypted, unsyn-thesizable models.
Reference: [10] <author> McKenzie, N. R., Ebeling, C., McMurchie, L., and Borriello, G. </author> <title> Experiences with the mactester in computer science and engineering education. </title> <journal> IEEE Transactions on Education. </journal> <month> (February </month> <year> 1997), </year> <pages> 12-21. </pages>
Reference-contexts: Viper technology allows the use of IP in simulation, through use of encrypted, unsyn-thesizable models. There is also research into including actual hardware in simulation, for example, the UWTester <ref> [10] </ref>, CATFISH [11] and EagleI. In this paper, we present the approach taken in Pia, the co-simulator of the Chinook project [3, 12]. Pia provides a distributed hardware-software co-simulator and tools for schematic capture as well as a means of connecting these to synthesis tools and actual hardware.
Reference: [11] <author> Mueller, A., Groetker, T., Post, G., and Meyr, H. </author> <title> Catfish a configurable atm testbench for interfacing simulation and hardware. </title> <month> DATE'98 </month> <year> (1998). </year>
Reference-contexts: Viper technology allows the use of IP in simulation, through use of encrypted, unsyn-thesizable models. There is also research into including actual hardware in simulation, for example, the UWTester [10], CATFISH <ref> [11] </ref> and EagleI. In this paper, we present the approach taken in Pia, the co-simulator of the Chinook project [3, 12]. Pia provides a distributed hardware-software co-simulator and tools for schematic capture as well as a means of connecting these to synthesis tools and actual hardware.
Reference: [12] <author> Ortega, R., and Borriello, G. </author> <title> Communication synthesis for embedded systems with global considerations. </title> <note> In Codes/CASHE '97 (1997). </note>
Reference-contexts: There is also research into including actual hardware in simulation, for example, the UWTester [10], CATFISH [11] and EagleI. In this paper, we present the approach taken in Pia, the co-simulator of the Chinook project <ref> [3, 12] </ref>. Pia provides a distributed hardware-software co-simulator and tools for schematic capture as well as a means of connecting these to synthesis tools and actual hardware.
Reference: [13] <author> Russell, D. L. </author> <title> State restoration in systems of communicating processes. </title> <journal> IEEE Transactions of Software Engineering SE-6, </journal> <month> 2 (March </month> <year> 1980), </year> <pages> 183-194. </pages>
Reference-contexts: A checkpoint request does not require all components to save images with the same local time, instead components save at the earliest local time possible after the request. These semantics introduce the danger of a domino effect hazard <ref> [13] </ref>. This effect occurs if it's possible for a state restoral to require any component to load more than one checkpoint to obtain a causally consistent state. In the worst case, this can force all processes to roll back to their initial state.
Reference: [14] <institution> WubbleU hand held PDA benchmark for co-design, </institution> <note> http://www.it.dtu.dk/jan/WubbleU. </note>
Reference-contexts: The example we will use is the "WubbleU" application, a suggested benchmark for embedded system design tools <ref> [14] </ref>. WubbleU is essentially a hand held Web Browser, or, more accurately, a Web Browser that consists of a hand held unit and a wireless connection to a dedicated server. The specification allows for a certain amount of flexibility in assigning tasks to the server or handheld unit.
References-found: 13

