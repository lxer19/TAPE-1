URL: ftp://ftp-pubs.lcs.mit.edu/pub/lcs-pubs/tr.outbox/MIT-LCS-TR-662.ps.gz
Refering-URL: ftp://ftp-pubs.lcs.mit.edu/pub/lcs-pubs/listings/tr600.html
Root-URL: 
Title: Computationally Efficient Error-Correcting Codes and Holographic Proofs  
Author: by Daniel Alan Spielman Michael Sipser 
Degree: (1992) Submitted to the Department of Mathematics in partial fulfillment of the requirements for the degree of Doctor of Philosophy at the  All rights reserved. Signature of Author  Certified by  Professor of Mathematics Thesis Supervisor Accepted by Richard Stanley, Chairman Applied Mathematics Committee Accepted by David Vogan, Chairman Departmental Graduate Committee  
Date: June 1995  May 5, 1995  
Affiliation: B.A., Mathematics and Computer Science Yale University  MASSACHUSETTS INSTITUTE OF TECHNOLOGY  c Massachusetts Institute of Technology 1995.  Department of Mathematics  
Abstract-found: 0
Intro-found: 1
Reference: [ABN + 92] <author> Noga Alon, Jehoshua Bruck, Joseph Naor, Moni Naor, and Ron M. Roth. </author> <title> Construction of asymptotically good low-rate error-correcting codes through pseudo-random graphs. </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> 38(2) </volume> <pages> 509-516, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: We wish to point out that Alon, Bruck, Naor, Naor, and Roth <ref> [ABN + 92] </ref> used expander graphs in a different way to construct asymptotically good families of error-correcting codes that lie above the Zyablov bound [MS77].
Reference: [ABSS93] <author> S. Arora, L. Babai, J. Stern, and Z. Sweedyk. </author> <title> The hardness of approximate optima in lattices, codes and linear equations. </title> <booktitle> In Proceedings of the 34th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 724-733, </pages> <year> 1993. </year>
Reference: [AC88] <author> Noga Alon and F.R.K. Chung. </author> <title> Explicit construction of linear sized tolerant networks. </title> <journal> Discrete Mathematics, </journal> <volume> 72 </volume> <pages> 15-19, </pages> <year> 1988. </year>
Reference-contexts: that graphs with a similar eigenvalue separation have even better expansion. 2.4 Explicit constructions of expander graphs 45 The property of expander graphs that will be most useful to us in this dissertation is that small subsets of vertices in an expander have very small induced subgraphs: Lemma 2.4.6 [Alon-Chung <ref> [AC88] </ref>] Let G be a d-regular graph on n vertices such that all eigenvalues other than d have absolute value at most . Let X be a subset of the vertices of G of size fln.
Reference: [AFWZ] <author> Noga Alon, Uriel Feige, Avi Wigderson, and David Zuckerman. </author> <title> Derandomized graph products. Computational Complexity. </title> <note> To appear. </note>
Reference-contexts: Then, the number of paths of length k contained in the subgraph induced by S in G n;d is at most flnd k (fl + (1 fl)) k A proof of this fact can also be found in <ref> [AFWZ] </ref>.
Reference: [AHU74] <author> A. V. Aho, J. E. Hopcroft, and J. D. Ullman. </author> <title> The design and analysis of computer algorithms. </title> <booktitle> Addison-Wesley series in computer science and information processing. </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1974. </year>
Reference-contexts: Suggestions for how to analyze the complexity issues special to error-correcting codes appeared in the work of Savage [Sav69, Sav71] and Bassalygo, Zyablov, and Pinsker [BZP77]. For more general studies of the complexity of algorithms, we point the reader to <ref> [AHU74] </ref> and [CLR90]. <p> For each of the four types of operations that the checker needs to perform (listed at the beginning of Section 4.4) we present a holographic proof that this operation has been performed correctly. Aho, Hopcroft and Ullman <ref> [AHU74, Chapter 8.5] </ref> show that a polynomial can be efficiently evaluated at any reasonable set of points in a field using a few discrete fourier transforms.
Reference: [AKS87] <author> Miklos Ajtai, Janos Komlos, and Endre Szemeredi. </author> <title> Deterministic simulation in logspace. </title> <booktitle> In Proceedings of the 19th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 132-139, </pages> <year> 1987. </year>
Reference-contexts: For some constructions, we will want graphs of higher degree. To construct these, we use a more general construction due to Ajtai, Komlos and Szemeredi <ref> [AKS87] </ref>: Definition 2.4.13 Let G be a graph with edge set E and vertex set V . <p> We use such a code as the subcode in the construction of Theorem 2.5.2. 2.5.1 A generalization Noga Alon has pointed out that the "edge to vertex" construction that we use to construct expander codes is a special case of a construction due to Ajtai, Komlos and Sze-meredi <ref> [AKS87] </ref>. They construct unbalanced expander graphs from regular expander graphs by identifying the large side of their graph with all paths of length k in the original graph and the small side of their graph with the vertices of the original graph.
Reference: [ALM + 92] <author> S. Arora, C. Lund, R. Motwani, M. Sudan, and M. Szegedy. </author> <title> Proof verification and hardness of approximation problems. </title> <booktitle> In Proceedings of the 33rd IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 14-23, </pages> <year> 1992. </year>
Reference-contexts: In a related series of papers by Feige, Goldwasser, Lovasz, Safra, and Szegedy [FGL + 91], Arora and Safra [AS92b], and Arora, Lund, Motwani, Sudan, and Szegedy <ref> [ALM + 92] </ref>, proofs were created that could be probabilistically verified by examining only a constant number of randomly chosen bits of the proof. 3 However, the size of 3 These types of proofs have gone by the names transparent proofs, probabilistically checkable proofs, and holographic proofs. <p> Remarkably, any theorem that has a conventional proof has a holographic proof. Constructions of holographic proofs 1 , which are also known as transparent proofs and probabilistically checkable proofs, were developed in a series of papers <ref> [BFL91, BFLS91, FGL + 91, AS92b, ALM + 92] </ref> which culminated in the following theorem: Theorem 4.0.1 [PCP-Theorem] Let E be an asymptotically good error-correcting code of 1 Some authors use the terms holographic and transparent to describe proof systems in which the theorem to be proved is presented in an <p> In Section 4.4, we recursively apply the holographic proof system of Section 4.3 to itself to obtain the first variation of our construction of nearly linear size holographic proofs, Theorem 4.4.1. The recursion that we use differs from those in [AS92b] and <ref> [ALM + 92] </ref> in that it does not need consistency checking. We do not show that the proofs in this first variation have checkers that run in poly-logarithmic time. <p> This idea was vital to the recursions in the work of Arora and Safra [AS92b] and Arora, Lund, Motwani, Sudan, and Szegedy <ref> [ALM + 92] </ref>, and we will make use of it as well. In Section 4.3, we saw how to create a holographic proof that a circuit has a satisfying assignment. A weakness of this construction is that the satisfying assignment appears within the holographic proof.
Reference: [Alo86] <author> N. Alon. </author> <title> Eigenvalues and expanders. </title> <journal> Combinatorica, </journal> <volume> 6(2) </volume> <pages> 83-96, </pages> <year> 1986. </year>
Reference-contexts: Remark 2.4.8 LPS-M graphs are Cayley graphs of P SL (2; Z=qZ). One can find a representation of these graphs so that the names of the neighbors of a vertex can be computed in poly-logarithmic time from the name of that vertex. Alon and Boppana <ref> [Alo86] </ref> have proved that the separation of eigenvalues achieved by LPS-M graphs is optimal: Theorem 2.4.9 [Alon-Boppana] Let G n be a sequence of k-regular graphs on n vertices and let n be the second-largest eigenvalue of G n . <p> Then lim sup n 2 k 1: 46 Expander codes Alon <ref> [Alo86] </ref> has proved that every expander graph must have some separation of eigen-values.
Reference: [AR94] <author> Noga Alon and Yuval Roichman. </author> <title> Random cayley graphs and expanders. Random Structures and Algorithms, </title> <booktitle> 5(2) </booktitle> <pages> 271-284, </pages> <month> April </month> <year> 1994. </year> <note> 139 140 Bibliography </note>
Reference-contexts: We wish to point out that Alon, Bruck, Naor, Naor, and Roth [ABN + 92] used expander graphs in a different way to construct asymptotically good families of error-correcting codes that lie above the Zyablov bound [MS77]. Also, Alon and Roichman <ref> [AR94] </ref> use error-correcting codes to construct expander graphs. 2.1.1 The expansion of random graphs In this section, we will prove upper and lower bounds on the expansion factors achieved by random graphs that become tight as the degrees of the graphs become large.
Reference: [Aro94] <author> Sanjeev Arora. </author> <title> Reductions, codes, PCPs, and inapproximability. </title> <type> Manuscript, </type> <month> November </month> <year> 1994. </year>
Reference-contexts: Moreover, Corollary 4.0.2 does not say that there must be one holographic proof for each satisfying assignment of C or that these holographic proofs must be far apart. Thus, it is not clear that Corollary 4.0.2 leads to a construction of checkable codes. Arora <ref> [Aro94] </ref> takes a big step towards showing that statements such as Corollary 4.0.2 actually do imply the existence of checkable codes.
Reference: [AS92a] <author> Noga Alon and Joel H. Spencer. </author> <title> The Probabilistic Method. </title> <publisher> John Wiley & Sons, </publisher> <address> New York, </address> <year> 1992. </year>
Reference-contexts: The probability that a given constraint is a neighbor of V is at least 1 (1 ff) c . Thus, the expected number of neighbors of V is at least n d c (1 (1 ff) c ). Noga Alon suggested that we form a martingale (See <ref> [AS92a] </ref>) to bound the probability that the size of the set of neighbors deviates from this expectation. Each node in V will have d outgoing edges. We will consider the process in which the destinations of these edges are revealed one at a time. <p> X 1 ; : : : ; X dffn form a martingale such that jX i+1 X i j 1; for all 0 i &lt; dffn. Thus, by Azuma's Inequality (See <ref> [AS92a] </ref>), Prob [E [X dffn ] X dffn &gt; p dffn] &lt; e 2 =2 : But, E [X dffn ] is just the expected number of neighbors of V .
Reference: [AS92b] <author> Sanjeev Arora and Shmuel Safra. </author> <title> Probabilistic checking of proofs. </title> <booktitle> In Proceedings of the 33rd IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 2-13, </pages> <year> 1992. </year>
Reference-contexts: In a related series of papers by Feige, Goldwasser, Lovasz, Safra, and Szegedy [FGL + 91], Arora and Safra <ref> [AS92b] </ref>, and Arora, Lund, Motwani, Sudan, and Szegedy [ALM + 92], proofs were created that could be probabilistically verified by examining only a constant number of randomly chosen bits of the proof. 3 However, the size of 3 These types of proofs have gone by the names transparent proofs, probabilistically checkable <p> Remarkably, any theorem that has a conventional proof has a holographic proof. Constructions of holographic proofs 1 , which are also known as transparent proofs and probabilistically checkable proofs, were developed in a series of papers <ref> [BFL91, BFLS91, FGL + 91, AS92b, ALM + 92] </ref> which culminated in the following theorem: Theorem 4.0.1 [PCP-Theorem] Let E be an asymptotically good error-correcting code of 1 Some authors use the terms holographic and transparent to describe proof systems in which the theorem to be proved is presented in an <p> Arora and Safra <ref> [AS92b] </ref>|it shows that the testing works over a domain whose size is linear in the degree being tested. We present the material in this section using the language we developed in Section 4.1. In Section 4.3, we combine the analysis from Section 4.2 with ideas from [BFLS91], [AS92b], and [Sud92] to develop relatively simple holographic proofs that can be checked by examining a constant number of segments of the proofs, each of size p proofs in this system can be used to provide proofs of many types of statments, including circuit satisfiability. This section has three parts. <p> In Section 4.4, we recursively apply the holographic proof system of Section 4.3 to itself to obtain the first variation of our construction of nearly linear size holographic proofs, Theorem 4.4.1. The recursion that we use differs from those in <ref> [AS92b] </ref> and [ALM + 92] in that it does not need consistency checking. We do not show that the proofs in this first variation have checkers that run in poly-logarithmic time. <p> We will later use these codes in a recursive construction to obtain codes that are checkable by examining fewer bits in more segments. Versions of these polynomial codes and their checking and verification algorithms first appeared in <ref> [AS92b] </ref> and [Sud92]. Our contribution is an improvement in their analysis (Theorem 4.2.19) which enables us to use versions of these codes that have much less redundancy than was previously possible. The codes we construct in this section are polynomial codes over a field. <p> Our contribution is that we prove this for domains whose size is greater than de by only a constant factor. Previously, Arora and Safra <ref> [AS92b] </ref> proved such a statement for domains whose size was cubic in de. Sudan [Sud92] later improved this to quadratic. In order to obtain nearly-linear size holographic proofs, we needed to improve their bounds. <p> This idea was vital to the recursions in the work of Arora and Safra <ref> [AS92b] </ref> and Arora, Lund, Motwani, Sudan, and Szegedy [ALM + 92], and we will make use of it as well. In Section 4.3, we saw how to create a holographic proof that a circuit has a satisfying assignment.
Reference: [Bab85] <author> Laszlo Babai. </author> <title> Trading group theory for randomness. </title> <booktitle> In Proceedings of the 17th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 421-429, </pages> <year> 1985. </year>
Reference-contexts: used to construct and analyze holographic proofs, we would like to point out the importance of those derived from the study of: checkable, self-testable/self-correctable, and random-self-reducible functions [BK89, RS92, BLR90, Rub90, GLR + 91, GS92, Lip91, BF90, Sud92, She91]; techniques for reducing our dependence on randomness [IZ89, Zuc91]; interactive proofs <ref> [Bab85, BM88, GMR89, GMR85, BoGKW88, FRS88, LFKN90, Sha90, FL92, LS91, BFL91] </ref>; and error-correcting codes [GS92, BW, BFLS91]. Through many of these works one finds a common algebraic thread inspired by the work of Schwartz [Sch80]. The crux of our construction of holographic proofs is a purely algebraic statement|Theorem 4.2.19.
Reference: [Bab94] <author> Laszlo Babai. </author> <title> Transparent proofs and limits to approximation. </title> <booktitle> In First Eu-ropean Congress of Mathematics: </booktitle> <address> (Paris, </address> <month> July 6-10, </month> <journal> 1992), </journal> <volume> volume 2, </volume> <pages> pages 31-92. </pages> <publisher> Birkhauser, </publisher> <year> 1994. </year>
Reference-contexts: Such codes have played an important role in the construction of holographic proofs and were used implicitly in the work of [LFKN90] and [BFL91]. However, we first saw them explicitly defined in <ref> [Bab94] </ref> and [BF93].
Reference: [BF90] <author> D. Beaver and J. Feigenbaum. </author> <title> Hiding instances in multioracle queries. </title> <booktitle> In Proceedings of the 7th Annual Symposium on Theoretical Aspects of Computer Science, </booktitle> <volume> volume 415, </volume> <pages> pages 171-176. </pages> <publisher> Springer LNCS, </publisher> <year> 1990. </year>
Reference: [BF93] <author> Laszlo Babai and Katalin Friedl. </author> <title> On slightly superlinear transparent proofs. </title> <type> CS 93-13, </type> <institution> The University of Chicago, Department of Computer Science, Chicago, IL, </institution> <year> 1993. </year>
Reference-contexts: Such codes have played an important role in the construction of holographic proofs and were used implicitly in the work of [LFKN90] and [BFL91]. However, we first saw them explicitly defined in [Bab94] and <ref> [BF93] </ref>.
Reference: [BFL91] <author> Laszlo Babai, Lance Fortnow, and Carsten Lund. </author> <title> Nondeterministic exponential time has two-prover interactive protocols. </title> <journal> Computational Complexity, </journal> <volume> 1 </volume> <pages> 3-40, </pages> <year> 1991. </year>
Reference-contexts: Similarly, the class non-deterministic exponential time, NEXP, captures the set of facts that have proofs whose size is exponential in the size of the statement of the fact. In their proof that NEXP = MIP, Babai, Fortnow, and Lund <ref> [BFL91] </ref> demonstrated that it is possible to probabilistically verify the truth of one of these exponentially long proofs while only reading a polynomial number of the bits of the proof. Without reading the whole proof, the verifier cannot be certain that it is true. <p> used to construct and analyze holographic proofs, we would like to point out the importance of those derived from the study of: checkable, self-testable/self-correctable, and random-self-reducible functions [BK89, RS92, BLR90, Rub90, GLR + 91, GS92, Lip91, BF90, Sud92, She91]; techniques for reducing our dependence on randomness [IZ89, Zuc91]; interactive proofs <ref> [Bab85, BM88, GMR89, GMR85, BoGKW88, FRS88, LFKN90, Sha90, FL92, LS91, BFL91] </ref>; and error-correcting codes [GS92, BW, BFLS91]. Through many of these works one finds a common algebraic thread inspired by the work of Schwartz [Sch80]. The crux of our construction of holographic proofs is a purely algebraic statement|Theorem 4.2.19. <p> Remarkably, any theorem that has a conventional proof has a holographic proof. Constructions of holographic proofs 1 , which are also known as transparent proofs and probabilistically checkable proofs, were developed in a series of papers <ref> [BFL91, BFLS91, FGL + 91, AS92b, ALM + 92] </ref> which culminated in the following theorem: Theorem 4.0.1 [PCP-Theorem] Let E be an asymptotically good error-correcting code of 1 Some authors use the terms holographic and transparent to describe proof systems in which the theorem to be proved is presented in an <p> PhD thesis, U.C. Berkeley, Oct. 1992. 4.1 Checkable and verifiable codes 83 4.1 Checkable and verifiable codes In this section, we define checkable and verifiable codes. Such codes have played an important role in the construction of holographic proofs and were used implicitly in the work of [LFKN90] and <ref> [BFL91] </ref>. However, we first saw them explicitly defined in [Bab94] and [BF93].
Reference: [BFLS91] <author> Laszlo Babai, Lance Fortnow, Leonid Levin, and Mario Szegedy. </author> <title> Checking computations in polylogarithmic time. </title> <booktitle> In Proceedings of the 23rd Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 21-31, </pages> <year> 1991. </year>
Reference-contexts: That is, the verifier will always accept a correct proof of a true statement; but, if the verifier examines a purported proof of a false statement, then the verifier will reject the purported proof with high probability. The following year, Babai, Fortnow, Levin, and Szegedy <ref> [BFLS91] </ref> explained how similar techniques could be combined with some new ideas to construct transparent proofs of any mathematical statement. <p> importance of those derived from the study of: checkable, self-testable/self-correctable, and random-self-reducible functions [BK89, RS92, BLR90, Rub90, GLR + 91, GS92, Lip91, BF90, Sud92, She91]; techniques for reducing our dependence on randomness [IZ89, Zuc91]; interactive proofs [Bab85, BM88, GMR89, GMR85, BoGKW88, FRS88, LFKN90, Sha90, FL92, LS91, BFL91]; and error-correcting codes <ref> [GS92, BW, BFLS91] </ref>. Through many of these works one finds a common algebraic thread inspired by the work of Schwartz [Sch80]. The crux of our construction of holographic proofs is a purely algebraic statement|Theorem 4.2.19. <p> Remarkably, any theorem that has a conventional proof has a holographic proof. Constructions of holographic proofs 1 , which are also known as transparent proofs and probabilistically checkable proofs, were developed in a series of papers <ref> [BFL91, BFLS91, FGL + 91, AS92b, ALM + 92] </ref> which culminated in the following theorem: Theorem 4.0.1 [PCP-Theorem] Let E be an asymptotically good error-correcting code of 1 Some authors use the terms holographic and transparent to describe proof systems in which the theorem to be proved is presented in an <p> To derive our assertion about proofs of theorems, we observe that the problem of deciding whether any statement has a proof of a given length can be converted into a problem of deciding whether a certain circuit has a satisfying assignment. Using the techniques of <ref> [BFLS91] </ref>, one can show that the size of this circuit will be greater than the size of the statement of the theorem and its proof by at most a poly-logarithmic factor. <p> If we allow the proof checker to make as many as O (log jCj) queries, then we will be able to construct proofs of size jCj (log jCj) O (log log jCj) . 4.0.1 Outline of Chapter Our construction of holographic proofs follows the general plan used in <ref> [BFLS91] </ref>. The authors of that paper explained how to construct holographic proofs of size O (jCj 1+* ), for any * &gt; 0, in which the proof checker reads O (log jCj) bits of the proof. <p> In Section 4.3.1, we present a simpler but slightly weaker means of achieving this translation. The framework presented in this section should be sufficient for most applications. In Section 4.6, we explain how our techniques can be fully integrated with the framework of <ref> [BFLS91] </ref>. Our holographic proofs are built from special polynomial error-correcting codes that have efficient checkers and verifiers. In Section 4.1, we define checkers and verifiers, and develop the terminology we will use to discuss them. <p> We present the material in this section using the language we developed in Section 4.1. In Section 4.3, we combine the analysis from Section 4.2 with ideas from <ref> [BFLS91] </ref>, [AS92b], and [Sud92] to develop relatively simple holographic proofs that can be checked by examining a constant number of segments of the proofs, each of size p proofs in this system can be used to provide proofs of many types of statments, including circuit satisfiability. <p> Essentially, this table captures computations that the proof checker would perform regardless of its input. That is the second variation of our construction. In Section 4.6, we use a technique from <ref> [BFLS91] </ref> to construct checkers that do not need such a table. This statement, Theorem 4.6.1, is the final variation of our main theorem. We conclude by stating a weaker but simpler corollary of this theorem. <p> The two main tools that we will use to implement this idea are "encoded inputs" and the Fast Fourier Transform. 4.4.1 Encoded inputs When Babai, Fortnow, Levin, and Szegedy <ref> [BFLS91] </ref> introduced transparent proofs, they presented the theorem candidate in an error-correcting code so that the proof checker would 126 Holographic Proofs only have to read a constant number its bits. <p> The table of encodings of coloring problem instances can be written once and accessed forever. However, the need for this table can be eliminated if we use a coloring problem developed in <ref> [BFLS91] </ref>. 4.6 The coloring problem of Babai, Fortnow, Levin, and Szegedy Babai, Fortnow, Levin, and Szegedy set out to provide holographic versions of any proof of any mathematical statement. <p> They translate these RAM computations into a coloring problem on a graph that is similar to the coloring problem we used in Section 4.3.1. 11 The advantage of the coloring problem in <ref> [BFLS91] </ref> is that the problem instance does not need to be as large as the problem solution. In the coloring problem of [BFLS91], each node receives only one color. The problem instance is described by a coloring of an initial set of the nodes in the graph. <p> computations into a coloring problem on a graph that is similar to the coloring problem we used in Section 4.3.1. 11 The advantage of the coloring problem in <ref> [BFLS91] </ref> is that the problem instance does not need to be as large as the problem solution. In the coloring problem of [BFLS91], each node receives only one color. The problem instance is described by a coloring of an initial set of the nodes in the graph. The problem instance is solvable if there exists a coloring of the rest of the nodes in the graph that satisfies all the coloring rules. <p> Moreover, given a proof of the theorem, one can easily construct a coloring of the rest of the graph that satisfies the coloring rules. Actually, the techniques developed in <ref> [BFLS91] </ref> are even more general|they show that for any non-deterministic RAM algorithm, there is a finite set of coloring rules under which the rest of the nodes of the graph can be legally colored only if there is a computation of the algorithm that accepts on the input indicated by the <p> Thus, instances of their graph coloring problem can be checked using algebraic techniques similar to those used in Sections 4.2, and 4.3.1. The advantage of using the coloring problem of <ref> [BFLS91] </ref> in our recursion is that it eliminates the need for the checker to write coloring problem instances to check the recursion. For each type of relation that the checker needs to check, there is one uniform RAM algorithm that can perform the check. <p> Thus, by combining the algebraic machinery developed in Section 4.2 and the recursion developed in Section 4.4 with the coloring problem of <ref> [BFLS91] </ref>, we can prove the final variation of our holographic proof theorem: Theorem 4.6.1 [Efficient holographic proofs, variation 3] For all polynomial-time constructible functions q (n) = O (log log n), there exists a probabilistic algorithm V (called a proof checker) that expects as input an encoding of a theorem T
Reference: [BGLR93] <author> M. Bellare, S. Goldwasser, C. Lund, and A. Russell. </author> <title> Efficient probabilistically checkable proofs: applications to approximation. </title> <booktitle> In Proceedings of the 25th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 294-304, </pages> <year> 1993. </year>
Reference: [Bie92] <author> Ernst W. Biersack. </author> <title> Performance evaluation of forward error correction in ATM networks. </title> <booktitle> In Proceedings, ACM SIGCOMM Conference, </booktitle> <pages> pages 248-257, </pages> <year> 1992. </year>
Reference-contexts: For an analysis of potential applications of long block length error-correcting codes, we direct the reader to <ref> [Bie92] </ref>. Those who desire to implement these codes should consider the issues discussed in Section 2.6. They should also be aware that our construction was optimized for ease of explication and that there are many parameters that one can vary which we have not discussed.
Reference: [BK89] <author> Manuel Blum and Sampath Kannan. </author> <title> Designing programs that check their work. </title> <booktitle> In Proceedings of the 21st Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 86-97, </pages> <year> 1989. </year>
Reference: [BLR90] <author> Manuel Blum, Michael Luby, and Ronitt Rubinfeld. </author> <title> Self-testing/correcting with applications to numerical problems. </title> <booktitle> In Proceedings of the 22nd Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 73-83, </pages> <year> 1990. </year>
Reference: [BM88] <author> L. Babai and S. Moran. </author> <title> Arthur-merlin games: a randomized proof system, and a hierarchy of complexity classes. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 36 </volume> <pages> 254-276, </pages> <year> 1988. </year> <note> Bibliography 141 </note>
Reference-contexts: used to construct and analyze holographic proofs, we would like to point out the importance of those derived from the study of: checkable, self-testable/self-correctable, and random-self-reducible functions [BK89, RS92, BLR90, Rub90, GLR + 91, GS92, Lip91, BF90, Sud92, She91]; techniques for reducing our dependence on randomness [IZ89, Zuc91]; interactive proofs <ref> [Bab85, BM88, GMR89, GMR85, BoGKW88, FRS88, LFKN90, Sha90, FL92, LS91, BFL91] </ref>; and error-correcting codes [GS92, BW, BFLS91]. Through many of these works one finds a common algebraic thread inspired by the work of Schwartz [Sch80]. The crux of our construction of holographic proofs is a purely algebraic statement|Theorem 4.2.19.
Reference: [BoGKW88] <author> M. Ben-or, S. Goldwasser, J. Kilian, and A. Wigderson. </author> <title> Multi-prover interactive proofs: How to remove intractibity assumptions. </title> <booktitle> In Proceedings of the 20th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 113-121, </pages> <year> 1988. </year>
Reference-contexts: used to construct and analyze holographic proofs, we would like to point out the importance of those derived from the study of: checkable, self-testable/self-correctable, and random-self-reducible functions [BK89, RS92, BLR90, Rub90, GLR + 91, GS92, Lip91, BF90, Sud92, She91]; techniques for reducing our dependence on randomness [IZ89, Zuc91]; interactive proofs <ref> [Bab85, BM88, GMR89, GMR85, BoGKW88, FRS88, LFKN90, Sha90, FL92, LS91, BFL91] </ref>; and error-correcting codes [GS92, BW, BFLS91]. Through many of these works one finds a common algebraic thread inspired by the work of Schwartz [Sch80]. The crux of our construction of holographic proofs is a purely algebraic statement|Theorem 4.2.19.
Reference: [BS94] <author> M. Bellare and M. Sudan. </author> <title> Improved non-approximability results. </title> <booktitle> In Proceedings of the 26th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 184-193, </pages> <year> 1994. </year>
Reference: [BW] <author> E. R. Berlekamp and L. Welch. </author> <title> Error correction of algebraic block codes. </title> <type> US Patent Number 4,633,470. </type> <month> (filed </month> <year> 1986). </year>
Reference-contexts: importance of those derived from the study of: checkable, self-testable/self-correctable, and random-self-reducible functions [BK89, RS92, BLR90, Rub90, GLR + 91, GS92, Lip91, BF90, Sud92, She91]; techniques for reducing our dependence on randomness [IZ89, Zuc91]; interactive proofs [Bab85, BM88, GMR89, GMR85, BoGKW88, FRS88, LFKN90, Sha90, FL92, LS91, BFL91]; and error-correcting codes <ref> [GS92, BW, BFLS91] </ref>. Through many of these works one finds a common algebraic thread inspired by the work of Schwartz [Sch80]. The crux of our construction of holographic proofs is a purely algebraic statement|Theorem 4.2.19.
Reference: [BZP77] <author> L. A. Bassalygo, V. V. Zyablov, and M. S. Pinsker. </author> <title> Problems of complexity in the theory of correcting codes. </title> <journal> Problems of Information Transmission, </journal> <volume> 13(3) </volume> <pages> 166-175, </pages> <year> 1977. </year>
Reference-contexts: Suggestions for how to analyze the complexity issues special to error-correcting codes appeared in the work of Savage [Sav69, Sav71] and Bassalygo, Zyablov, and Pinsker <ref> [BZP77] </ref>. For more general studies of the complexity of algorithms, we point the reader to [AHU74] and [CLR90].
Reference: [CFLS93] <author> Anne Condon, Joan Feigenbaum, Carsten Lund, and Peter Shor. </author> <title> Probabilistically checkable debate systems and approximation algorithms for pspace-hard functions. </title> <booktitle> In Proceedings of the 25th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 305-314, </pages> <year> 1993. </year>
Reference-contexts: Notable papers in this direction include [PY91, FGL + 91, AS92b, ALM + 92, LY94, Zuc93, BGLR93, F 94, BS94, ABSS93]. Holographic proofs have also been applied to problems in many areas of complexity theory <ref> [CFLS93, CFLS94, Kil92, Kil94, Mic94, KLR + 94] </ref>. While not properly an application of holographic proof technology, our constructions of error-correcting codes were each bit of information in a holographic proof is reflected in the entire structure.
Reference: [CFLS94] <author> Anne Condon, Joan Feigenbaum, Carsten Lund, and Peter Shor. </author> <title> Random debaters and the hardness of approximating stochastic functions. </title> <booktitle> In Proceedings of the 9th Annual Conference on Structure in Complexity Theory, </booktitle> <pages> pages 280-293, </pages> <year> 1994. </year>
Reference-contexts: Notable papers in this direction include [PY91, FGL + 91, AS92b, ALM + 92, LY94, Zuc93, BGLR93, F 94, BS94, ABSS93]. Holographic proofs have also been applied to problems in many areas of complexity theory <ref> [CFLS93, CFLS94, Kil92, Kil94, Mic94, KLR + 94] </ref>. While not properly an application of holographic proof technology, our constructions of error-correcting codes were each bit of information in a holographic proof is reflected in the entire structure.
Reference: [CLR90] <author> Thomas H. Cormen, Charles E. Leiserson, and Ronald L. Rivest. </author> <title> Introduction to algorithms. </title> <publisher> The MIT electrical engineering and computer science series. MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1990. </year>
Reference-contexts: Suggestions for how to analyze the complexity issues special to error-correcting codes appeared in the work of Savage [Sav69, Sav71] and Bassalygo, Zyablov, and Pinsker [BZP77]. For more general studies of the complexity of algorithms, we point the reader to [AHU74] and <ref> [CLR90] </ref>.
Reference: [F 94] <author> M. Furer. </author> <title> Improved hardness results for approximating the chromatic number. </title> <type> manuscript, </type> <year> 1994. </year>
Reference: [FGL + 91] <author> U. Feige, S. Goldwasser, L. Lovasz, S. Safra, and M. Szegedy. </author> <title> Approximating clique is almost NP-complete. </title> <booktitle> In Proceedings of the 32nd IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 2-12, </pages> <year> 1991. </year>
Reference-contexts: In a related series of papers by Feige, Goldwasser, Lovasz, Safra, and Szegedy <ref> [FGL + 91] </ref>, Arora and Safra [AS92b], and Arora, Lund, Motwani, Sudan, and Szegedy [ALM + 92], proofs were created that could be probabilistically verified by examining only a constant number of randomly chosen bits of the proof. 3 However, the size of 3 These types of proofs have gone by <p> Remarkably, any theorem that has a conventional proof has a holographic proof. Constructions of holographic proofs 1 , which are also known as transparent proofs and probabilistically checkable proofs, were developed in a series of papers <ref> [BFL91, BFLS91, FGL + 91, AS92b, ALM + 92] </ref> which culminated in the following theorem: Theorem 4.0.1 [PCP-Theorem] Let E be an asymptotically good error-correcting code of 1 Some authors use the terms holographic and transparent to describe proof systems in which the theorem to be proved is presented in an
Reference: [FL92] <author> Uri Feige and Laszlo Lovasz. </author> <title> Two-prover one-round proof systems: Their power and their problems. </title> <booktitle> In Proceedings of the 24th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 733-744, </pages> <year> 1992. </year>
Reference-contexts: used to construct and analyze holographic proofs, we would like to point out the importance of those derived from the study of: checkable, self-testable/self-correctable, and random-self-reducible functions [BK89, RS92, BLR90, Rub90, GLR + 91, GS92, Lip91, BF90, Sud92, She91]; techniques for reducing our dependence on randomness [IZ89, Zuc91]; interactive proofs <ref> [Bab85, BM88, GMR89, GMR85, BoGKW88, FRS88, LFKN90, Sha90, FL92, LS91, BFL91] </ref>; and error-correcting codes [GS92, BW, BFLS91]. Through many of these works one finds a common algebraic thread inspired by the work of Schwartz [Sch80]. The crux of our construction of holographic proofs is a purely algebraic statement|Theorem 4.2.19.
Reference: [FRS88] <author> L. Fortnow, J. Rompel, and M. Sipser. </author> <title> On the power of multi-prover interactive protocols. </title> <booktitle> In Proceedings of the 3rd Annual Conference on Structure in Complexity Theory, </booktitle> <pages> pages 156-161, </pages> <year> 1988. </year> <booktitle> Erratum in Structures '90, </booktitle> <pages> pp. 318-319. </pages>
Reference-contexts: used to construct and analyze holographic proofs, we would like to point out the importance of those derived from the study of: checkable, self-testable/self-correctable, and random-self-reducible functions [BK89, RS92, BLR90, Rub90, GLR + 91, GS92, Lip91, BF90, Sud92, She91]; techniques for reducing our dependence on randomness [IZ89, Zuc91]; interactive proofs <ref> [Bab85, BM88, GMR89, GMR85, BoGKW88, FRS88, LFKN90, Sha90, FL92, LS91, BFL91] </ref>; and error-correcting codes [GS92, BW, BFLS91]. Through many of these works one finds a common algebraic thread inspired by the work of Schwartz [Sch80]. The crux of our construction of holographic proofs is a purely algebraic statement|Theorem 4.2.19.
Reference: [Gal63] <author> R. G. Gallager. </author> <title> Low Density Parity-Check Codes. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1963. </year> <note> 142 Bibliography </note>
Reference-contexts: However, they did not suggest algorithms for decoding their codes, and we suspect that a polynomial-time algorithm would be difficult to find. Zyablov and Pinsker [ZP76] showed that it is possible to decode Gallager's randomly chosen low-density parity-check codes <ref> [Gal63] </ref> in logarithmic time with a linear number of processors. These codes are essentially the same as those we present in Section 2.3. We are not aware of any algorithm for encoding these codes that uses less than O (n 2 ) work. <p> The best encoding algorithms that we know for these codes are the O (n 2 ) time algorithms that can be used for all linear codes. These codes fall into the category of low-density parity-check codes introduced by Gallager <ref> [Gal63] </ref>. The construction that we present in Section 2.5 is the first known explicit construction of an asymptotically good family of low-density codes. We begin by explaining what expander graphs are and prove that good expander graphs exist.
Reference: [GDP73] <author> S. I. Gelfand, R. L. Dobrushin, and M. S. Pinsker. </author> <title> On the complexity of coding. </title> <booktitle> In Second International Symposium on Information Theory, </booktitle> <pages> pages 177-184, </pages> <address> Akademiai Kiado, Budapest, </address> <year> 1973. </year>
Reference-contexts: Moreover, these algorithms are easily parallelized. Codes that have more efficient algorithms for one of these operations have suffered in the other. Gelfand, Dobrushin, and Pinsker <ref> [GDP73] </ref> presented randomized constructions 26 Introduction of asymptotically good codes that could be encoded in linear time. However, they did not suggest algorithms for decoding their codes, and we suspect that a polynomial-time algorithm would be difficult to find.
Reference: [GG81] <author> O. Gabber and Z. Galil. </author> <title> Explicit constructions of linear-sized superconcentra-tors. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 22 </volume> <pages> 407-420, </pages> <year> 1981. </year>
Reference-contexts: Pippenger [Pip93] points out that we can obtain a family of good expander graphs by exponentiating the expander graphs constructed by Gabber and Galil. Gabber and Galil <ref> [GG81] </ref> construct an infinite family of 5-regular expander graphs. By Theorem 2.4.10, all the eigenvalues of these graphs other than 5 must be bounded by some number &lt; 5. Consider the graphs obtained by exponentiating the adjacency matrices of these graphs k times.
Reference: [GLR + 91] <author> P. Gemmell, Richard Lipton, Ronitt Rubinfeld, Madhu Sudan, and Avi Wigderson. </author> <title> Self-testing/correcting for polynomials and for approximate functions. </title> <booktitle> In Proceedings of the 23rd Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 32-42, </pages> <year> 1991. </year>
Reference: [GMR85] <author> S. Goldwasser, S. Micali, and C. Rackoff. </author> <title> The knowledge complexity of interactive proof systems. </title> <booktitle> In Proceedings of the 17th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 291-304, </pages> <year> 1985. </year>
Reference-contexts: used to construct and analyze holographic proofs, we would like to point out the importance of those derived from the study of: checkable, self-testable/self-correctable, and random-self-reducible functions [BK89, RS92, BLR90, Rub90, GLR + 91, GS92, Lip91, BF90, Sud92, She91]; techniques for reducing our dependence on randomness [IZ89, Zuc91]; interactive proofs <ref> [Bab85, BM88, GMR89, GMR85, BoGKW88, FRS88, LFKN90, Sha90, FL92, LS91, BFL91] </ref>; and error-correcting codes [GS92, BW, BFLS91]. Through many of these works one finds a common algebraic thread inspired by the work of Schwartz [Sch80]. The crux of our construction of holographic proofs is a purely algebraic statement|Theorem 4.2.19.
Reference: [GMR89] <author> Shafi Goldwasser, Silvio Micali, and Charles Rackoff. </author> <title> The knowledge complexity of interactive proof systems. </title> <journal> SIAM Journal on Computing, </journal> <volume> 18 </volume> <pages> 186-208, </pages> <year> 1989. </year>
Reference-contexts: used to construct and analyze holographic proofs, we would like to point out the importance of those derived from the study of: checkable, self-testable/self-correctable, and random-self-reducible functions [BK89, RS92, BLR90, Rub90, GLR + 91, GS92, Lip91, BF90, Sud92, She91]; techniques for reducing our dependence on randomness [IZ89, Zuc91]; interactive proofs <ref> [Bab85, BM88, GMR89, GMR85, BoGKW88, FRS88, LFKN90, Sha90, FL92, LS91, BFL91] </ref>; and error-correcting codes [GS92, BW, BFLS91]. Through many of these works one finds a common algebraic thread inspired by the work of Schwartz [Sch80]. The crux of our construction of holographic proofs is a purely algebraic statement|Theorem 4.2.19.
Reference: [Gol93] <author> Oded Goldreich. </author> <title> A taxonomy of proof systems. </title> <journal> SIGACT News, </journal> <volume> 24(4), </volume> <month> De-cember </month> <year> 1993. </year>
Reference: [Gol94] <author> Oded Goldreich. </author> <title> A taxonomy of proof systems (part 2). </title> <journal> SIGACT News, </journal> <volume> 25(1), </volume> <month> March </month> <year> 1994. </year>
Reference: [GS92] <author> P. Gemmell and M. Sudan. </author> <title> Highly resilient correctors for polynomials. </title> <journal> Information Processing Letters, </journal> <volume> 43 </volume> <pages> 169-174, </pages> <year> 1992. </year>
Reference-contexts: importance of those derived from the study of: checkable, self-testable/self-correctable, and random-self-reducible functions [BK89, RS92, BLR90, Rub90, GLR + 91, GS92, Lip91, BF90, Sud92, She91]; techniques for reducing our dependence on randomness [IZ89, Zuc91]; interactive proofs [Bab85, BM88, GMR89, GMR85, BoGKW88, FRS88, LFKN90, Sha90, FL92, LS91, BFL91]; and error-correcting codes <ref> [GS92, BW, BFLS91] </ref>. Through many of these works one finds a common algebraic thread inspired by the work of Schwartz [Sch80]. The crux of our construction of holographic proofs is a purely algebraic statement|Theorem 4.2.19.
Reference: [Hei33] <author> Hans Heilbronn. </author> <title> Uber den primzahlsatz von Herrn Hoheisel. </title> <journal> Mathematische Zeitschrift, </journal> <volume> 36 </volume> <pages> 394-423, </pages> <year> 1933. </year>
Reference-contexts: Thus, for a given p, we can bound the gaps between successive q's that satisfy the conditions of Theorem 2.4.7 by bounding the sizes of gaps between successive primes in arithmetic progressions. One can do this using the following theorem of Heilbronn <ref> [Hei33] </ref>: Theorem 2.4.15 [Heilbronn] Let (x; k; l) denote the number of primes less than x and congruent to l modulo k.
Reference: [Ima90] <author> Hideki Imai. </author> <title> Essentials of Error-Control Coding Techniques. </title> <publisher> Academic Press, Inc., </publisher> <address> San Diego, CA, </address> <year> 1990. </year>
Reference-contexts: Expander codes should be especially useful for coding on write-once media, such as Compact Discs, where fast decoding is essential, the time required to encode is not critical, and codes of block length roughly 10; 000 are already being used <ref> [Ima90] </ref>. 2.6 Notes on implementation and experimental results 55 If one intends to implement expander codes, we suggest using the randomized construction presented in Sections 2.1.1 and 2.3. We obtained the best performance from graphs that had degree 5 at the variables.
Reference: [IZ89] <author> R. Impagliazzo and D. Zuckerman. </author> <title> How to recycle random bits. </title> <booktitle> In Proceedings of the -29th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 248-253, </pages> <year> 1989. </year>
Reference-contexts: Among the techniques used to construct and analyze holographic proofs, we would like to point out the importance of those derived from the study of: checkable, self-testable/self-correctable, and random-self-reducible functions [BK89, RS92, BLR90, Rub90, GLR + 91, GS92, Lip91, BF90, Sud92, She91]; techniques for reducing our dependence on randomness <ref> [IZ89, Zuc91] </ref>; interactive proofs [Bab85, BM88, GMR89, GMR85, BoGKW88, FRS88, LFKN90, Sha90, FL92, LS91, BFL91]; and error-correcting codes [GS92, BW, BFLS91]. Through many of these works one finds a common algebraic thread inspired by the work of Schwartz [Sch80].
Reference: [Jus76] <author> Jorn Justesen. </author> <title> On the complexity of decoding Reed-Solomon codes. </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> 22(2) </volume> <pages> 237-238, </pages> <month> March </month> <year> 1976. </year>
Reference-contexts: There were numerous improvements on these approaches. We will not attempt to survey the accomplishments of coding theory; we will just mention the most efficient coding algorithms known prior to our work: Using efficient implementations of the Finite Fourier Transform, Justesen <ref> [Jus76] </ref> and Sarwate [Sar77] have shown that certain Reed-Solomon and Goppa codes can be encoded in O (n log n) time and decoded in time O 2 While these codes are not necessarily asymptotically good, one can compose them with good codes to obtain asymptotically good codes with similar encoding and
Reference: [Kah93a] <author> Nabil Kahale. </author> <title> Exander Graphs. </title> <type> PhD thesis, </type> <institution> M.I.T., </institution> <month> September </month> <year> 1993. </year>
Reference-contexts: lies. (A path of length k is a sequence of vertices v 1 ; : : : ; v k+1 such that (v i ; v i+1 ) 2 E for each 1 i k.) We analyze the expansion properties of these graphs through the following fact proved by Kahale <ref> [Kah93a] </ref>. Lemma 2.4.14 [Kahale] Let G n;d be a d-regular graph on n nodes with second-largest eigenvalue bounded by . Let S be a subset of the vertices of G n;d of size fln. <p> The sequential decoding algorithm also benefits from a little randomness in the choice of which variable it flips next. We also found that we could decode more errors if we allow the 3 Computation of the eigenvalues of the graph does not work because Kahale <ref> [Kah93a] </ref> has proved that the eigenvalues cannot certify expansion greater than d=2. 56 Expander codes algorithm to make a limited amount of negative progress.
Reference: [Kah93b] <author> Nabil Kahale. </author> <title> On the second eigenvalue and linear expansion of regular graphs. </title> <booktitle> In Proceedings of the 33rd IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 296-303, </pages> <year> 1993. </year>
Reference-contexts: These results do not actually depend on the graph being d-regular. One can prove similar statements so long as there is a separation between the first and second largest eigenvalues. Remark 2.4.5 Kahale <ref> [Kah93b] </ref> improves this theorem by showing that graphs with a similar eigenvalue separation have even better expansion. 2.4 Explicit constructions of expander graphs 45 The property of expander graphs that will be most useful to us in this dissertation is that small subsets of vertices in an expander have very small
Reference: [Kil92] <author> Joe Kilian. </author> <title> A note on efficient zero-knowledge proofs and arguments. </title> <booktitle> In Proceedings of the 24th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 723-732, </pages> <year> 1992. </year> <note> Bibliography 143 </note>
Reference-contexts: Notable papers in this direction include [PY91, FGL + 91, AS92b, ALM + 92, LY94, Zuc93, BGLR93, F 94, BS94, ABSS93]. Holographic proofs have also been applied to problems in many areas of complexity theory <ref> [CFLS93, CFLS94, Kil92, Kil94, Mic94, KLR + 94] </ref>. While not properly an application of holographic proof technology, our constructions of error-correcting codes were each bit of information in a holographic proof is reflected in the entire structure.
Reference: [Kil94] <author> Joe Kilian. </author> <title> On the complexity of bounded-interaction and noninteractive zero-knowledge proofs. </title> <booktitle> In Proceedings of the 35th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 466-477, </pages> <year> 1994. </year>
Reference-contexts: Notable papers in this direction include [PY91, FGL + 91, AS92b, ALM + 92, LY94, Zuc93, BGLR93, F 94, BS94, ABSS93]. Holographic proofs have also been applied to problems in many areas of complexity theory <ref> [CFLS93, CFLS94, Kil92, Kil94, Mic94, KLR + 94] </ref>. While not properly an application of holographic proof technology, our constructions of error-correcting codes were each bit of information in a holographic proof is reflected in the entire structure.
Reference: [KLR + 94] <author> Marcos Kiwi, Carsten Lund, Alexander Russell, Daniel Spielman, and Ravi Sundaram. </author> <title> Alternation in interaction. </title> <booktitle> In Proceedings of the 9th Annual Conference on Structure in Complexity Theory, </booktitle> <pages> pages 294-303, </pages> <year> 1994. </year>
Reference-contexts: Notable papers in this direction include [PY91, FGL + 91, AS92b, ALM + 92, LY94, Zuc93, BGLR93, F 94, BS94, ABSS93]. Holographic proofs have also been applied to problems in many areas of complexity theory <ref> [CFLS93, CFLS94, Kil92, Kil94, Mic94, KLR + 94] </ref>. While not properly an application of holographic proof technology, our constructions of error-correcting codes were each bit of information in a holographic proof is reflected in the entire structure.
Reference: [KU58] <author> A. Kolmogorov and V. Uspenski i. </author> <title> On the definition of an algorithm. </title> <journal> Uspehi Math. Nauk, </journal> <volume> 13(4) </volume> <pages> 3-28, </pages> <year> 1958. </year> <note> Translation in [KU63]. </note>
Reference-contexts: To achieve this end, they rely on the Kolomorgorov-Uspenski i thesis which implies that any proof can be efficiently expressed by a computation of a certain type of non-deterministic pointer machine <ref> [KU58] </ref>. They then observe that the computations of these pointer machines can be efficiently witnessed by restricted computations on a RAM.
Reference: [KU63] <author> A. Kolmogorov and V. Uspenski i. </author> <title> On the definition of an algorithm. </title> <journal> American Mathematical Society Translations, </journal> <volume> 29 </volume> <pages> 217-245, </pages> <year> 1963. </year>
Reference: [Kuz73] <author> A. V. Kuznetsov. </author> <title> Information storage in a memory assembled from unreliable components. </title> <journal> Problems of Information Transmission, </journal> <volume> 9(3) </volume> <pages> 254-264, </pages> <year> 1973. </year>
Reference-contexts: These codes are essentially the same as those we present in Section 2.3. We are not aware of any algorithm for encoding these codes that uses less than O (n 2 ) work. Kuznetsov <ref> [Kuz73] </ref> used these codes to construct fault-tolerant memories. Pippenger has pointed out that Kuznetsov's proof of the correctness of these memories can serve as a proof of correctness of the parallel decoding algorithm that we present in Section 2.3.3.
Reference: [Lan93] <author> Serge Lang. </author> <title> Algebra. </title> <publisher> Addison-Wesley, 3rd edition, </publisher> <year> 1993. </year> <note> (material only in 3rd edition). </note>
Reference-contexts: This route is more direct, but may be accessible to fewer readers. 4.2.2 Resultants In this section, we will review some standard facts about resultants. A more complete presentation can be found in <ref> [Lan93, vdW53] </ref>. We note that Sudan [Sud92] introduced the idea of using the resultant to prove that E divides P .
Reference: [Lei92] <author> F. T. Leighton. </author> <title> Introduction to Parallel Algorithms and Archictectures. </title> <publisher> Mor-gan Kaufmann Publishers, Inc., </publisher> <address> San Mateo, CA, </address> <year> 1992. </year>
Reference-contexts: We view the task of assigning the switching actions that connect gates to their inputs as a routing problem in which each node has at most two 110 Holographic Proofs incoming packets. By using standard packet-routing techniques (see <ref> [Lei92] </ref>), we see that 5n steps through a de Bruijn graph of 2 n nodes are sufficient to solve the routing problem.
Reference: [LFKN90] <author> Carsten Lund, Lance Fortnow, Howard Karloff, and Noam Nisan. </author> <title> Algebraic methods for interactive proof systems. </title> <booktitle> In Proceedings of the 31st IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 2-10, </pages> <year> 1990. </year>
Reference-contexts: used to construct and analyze holographic proofs, we would like to point out the importance of those derived from the study of: checkable, self-testable/self-correctable, and random-self-reducible functions [BK89, RS92, BLR90, Rub90, GLR + 91, GS92, Lip91, BF90, Sud92, She91]; techniques for reducing our dependence on randomness [IZ89, Zuc91]; interactive proofs <ref> [Bab85, BM88, GMR89, GMR85, BoGKW88, FRS88, LFKN90, Sha90, FL92, LS91, BFL91] </ref>; and error-correcting codes [GS92, BW, BFLS91]. Through many of these works one finds a common algebraic thread inspired by the work of Schwartz [Sch80]. The crux of our construction of holographic proofs is a purely algebraic statement|Theorem 4.2.19. <p> PhD thesis, U.C. Berkeley, Oct. 1992. 4.1 Checkable and verifiable codes 83 4.1 Checkable and verifiable codes In this section, we define checkable and verifiable codes. Such codes have played an important role in the construction of holographic proofs and were used implicitly in the work of <ref> [LFKN90] </ref> and [BFL91]. However, we first saw them explicitly defined in [Bab94] and [BF93].
Reference: [Lip91] <author> R. J. Lipton. </author> <title> New directions in testing. </title> <editor> In J. Feigenbaum and M. Merritt, editors, </editor> <title> Distributed Computing and Cryptography, volume 2 of Dimacs Series in Disc. </title> <journal> Math. and Theor. Comp. Sci., </journal> <pages> pages 191-202. </pages> <publisher> A.M.S., </publisher> <year> 1991. </year>
Reference: [LPS88] <author> A. Lubotzky, R. Phillips, and P. Sarnak. </author> <title> Ramanujan graphs. </title> <journal> Combinatorica, </journal> <volume> 8(3) </volume> <pages> 261-277, </pages> <year> 1988. </year>
Reference-contexts: It is natural to ask how large a separation can exist between the eigenvalue d and the next-largest eigenvalue. Lubotzky, Phillips and Sarnak <ref> [LPS88] </ref> and, independently, Margulis [Mar88] provide an explicit construction of infinite families of graphs in which there is a very large separation.
Reference: [LS91] <author> Dror Lapidot and Adi Shamir. </author> <title> Fully parallelized multi prover protocols for NEXP-time. </title> <booktitle> In Proceedings of the 32nd IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 13-18, </pages> <year> 1991. </year>
Reference-contexts: used to construct and analyze holographic proofs, we would like to point out the importance of those derived from the study of: checkable, self-testable/self-correctable, and random-self-reducible functions [BK89, RS92, BLR90, Rub90, GLR + 91, GS92, Lip91, BF90, Sud92, She91]; techniques for reducing our dependence on randomness [IZ89, Zuc91]; interactive proofs <ref> [Bab85, BM88, GMR89, GMR85, BoGKW88, FRS88, LFKN90, Sha90, FL92, LS91, BFL91] </ref>; and error-correcting codes [GS92, BW, BFLS91]. Through many of these works one finds a common algebraic thread inspired by the work of Schwartz [Sch80]. The crux of our construction of holographic proofs is a purely algebraic statement|Theorem 4.2.19.
Reference: [LY94] <author> Carsten Lund and Mihalis Yannakakis. </author> <title> On the hardness of approximating minimization problems. </title> <journal> Journal of the ACM, </journal> <volume> 41(5) </volume> <pages> 960-981, </pages> <year> 1994. </year>
Reference: [Mar73] <author> G. A. Margulis. </author> <title> Explicit constructions of concentrators. </title> <journal> Problemy Peredachi Informatsii, </journal> <volume> 9(4) </volume> <pages> 71-80, </pages> <note> October-December 1973. English translation available (pp. 325-332). </note>
Reference-contexts: Following Gallager's lead, Tanner analyzed the performance of his codes by examining the girth of the bipartite graph. Margulis <ref> [Mar73] </ref> also used high-girth graphs to construct error-correcting codes.
Reference: [Mar88] <author> G. A. Margulis. </author> <title> Explict group theoretical constructions of combinatorial schemes and their application to the design of expanders and concentrators. </title> <journal> Problems of Information Transmission, </journal> <volume> 24(1) </volume> <pages> 39-46, </pages> <month> July </month> <year> 1988. </year>
Reference-contexts: It is natural to ask how large a separation can exist between the eigenvalue d and the next-largest eigenvalue. Lubotzky, Phillips and Sarnak [LPS88] and, independently, Margulis <ref> [Mar88] </ref> provide an explicit construction of infinite families of graphs in which there is a very large separation.
Reference: [Mic94] <author> Silvio Micali. </author> <title> CS (computationally sound) proofs. </title> <booktitle> In Proceedings of the 35th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 436-453, </pages> <year> 1994. </year> <note> 144 Bibliography </note>
Reference-contexts: Notable papers in this direction include [PY91, FGL + 91, AS92b, ALM + 92, LY94, Zuc93, BGLR93, F 94, BS94, ABSS93]. Holographic proofs have also been applied to problems in many areas of complexity theory <ref> [CFLS93, CFLS94, Kil92, Kil94, Mic94, KLR + 94] </ref>. While not properly an application of holographic proof technology, our constructions of error-correcting codes were each bit of information in a holographic proof is reflected in the entire structure.
Reference: [MS77] <author> F. J. MacWilliams and N. J. A. Sloane. </author> <title> The Theory of Error-Correcting Codes. </title> <publisher> North Holland, </publisher> <address> Amsterdam, </address> <year> 1977. </year>
Reference-contexts: Then lim sup rate (C n ) H 2 q Proofs of both of these can be found in <ref> [MS77] </ref>. 1.5 The complexity of coding 25 1.5 The complexity of coding Many of the foundations for the analysis of the complexity of algorithms were laid by Shan-non in his 1949 paper The synthesis of two-terminal switching circuits [Sha49]. <p> We wish to point out that Alon, Bruck, Naor, Naor, and Roth [ABN + 92] used expander graphs in a different way to construct asymptotically good families of error-correcting codes that lie above the Zyablov bound <ref> [MS77] </ref>. Also, Alon and Roichman [AR94] use error-correcting codes to construct expander graphs. 2.1.1 The expansion of random graphs In this section, we will prove upper and lower bounds on the expansion factors achieved by random graphs that become tight as the degrees of the graphs become large.
Reference: [Pip77] <author> Nicholas Pippenger. </author> <title> Superconcentrators. </title> <journal> SIAM Journal on Computing, </journal> <volume> 6 </volume> <pages> 298-304, </pages> <year> 1977. </year>
Reference-contexts: We call these codes superconcentrator codes because their encoding circuits resemble Pippenger's construction of superconcentrators <ref> [Pip77] </ref>. In Section 3.1, we explain why this resemblance is necessary. To aid in our construction of superconcentrator codes, we introduce the notion of an error-reducing code. <p> One will probably be left with half as many errors of the first type. 3.2 Error-reducing codes 61 decided that the easiest way to create linear-size encoding circuits would be to base them on Pippenger's <ref> [Pip77] </ref> construction of linear-size superconcentrators. 3.2 Error-reducing codes In this section, we introduce the concept of an error-reducing code. While we are not sure if this idea will have practical applications, it will be useful for understanding our main construction.
Reference: [Pip93] <author> Nicholas Pippenger. </author> <title> Self-routing superconcentrators. </title> <booktitle> In Proceedings of the 25th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 355-361, </pages> <year> 1993. </year>
Reference-contexts: Pippenger <ref> [Pip93] </ref> points out that we can obtain a family of good expander graphs by exponentiating the expander graphs constructed by Gabber and Galil. Gabber and Galil [GG81] construct an infinite family of 5-regular expander graphs.
Reference: [PS77] <author> F.P. Preparata and D.V. Sarwate. </author> <title> Computational complexity of Fourier transforms over finite fields. </title> <journal> Mathematics of Computation, </journal> <volume> 31(139) </volume> <pages> 740-751, </pages> <month> July </month> <year> 1977. </year>
Reference-contexts: Aho, Hopcroft and Ullman [AHU74, Chapter 8.5] show that a polynomial can be efficiently evaluated at any reasonable set of points in a field using a few discrete fourier transforms. Using the efficient implementation of the discrete fourier transform over a finite field presented by Preparata and Sarwate <ref> [PS77] </ref>, the univariate polynomials can be evaluated at each point in their domain by circuits of size n log O (1) n.
Reference: [PS94] <author> Alexander Polishchuk and Daniel A. Spielman. </author> <title> Nearly linear-size holographic proofs. </title> <booktitle> In Proceedings of the 26th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 194-203, </pages> <year> 1994. </year>
Reference: [PY91] <author> Christos H. Papadimitriou and Mihalis Yannakakis. </author> <title> Optimization, approximation, and complexity classes. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 43 </volume> <pages> 425-440, </pages> <year> 1991. </year>
Reference: [RS92] <author> Ronitt Rubinfeld and Madhu Sudan. </author> <title> Testing polynomial functions efficiently and over rational domains. </title> <booktitle> In Proceedings of the 3rd Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 23-32, </pages> <year> 1992. </year>
Reference: [Rub90] <author> Ronitt Rubinfeld. </author> <title> A Mathematical Theory of Self-Checking, Self-Testing and Self-Correcting Programs. </title> <type> PhD thesis, </type> <institution> University of California, Berkeley, </institution> <address> CA, </address> <year> 1990. </year>
Reference: [Sar77] <author> Dilip V. Sarwate. </author> <title> On the complexity of decoding Goppa codes. </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> 23(4) </volume> <pages> 515-516, </pages> <month> July </month> <year> 1977. </year>
Reference-contexts: There were numerous improvements on these approaches. We will not attempt to survey the accomplishments of coding theory; we will just mention the most efficient coding algorithms known prior to our work: Using efficient implementations of the Finite Fourier Transform, Justesen [Jus76] and Sarwate <ref> [Sar77] </ref> have shown that certain Reed-Solomon and Goppa codes can be encoded in O (n log n) time and decoded in time O 2 While these codes are not necessarily asymptotically good, one can compose them with good codes to obtain asymptotically good codes with similar encoding and decoding times.
Reference: [Sav69] <author> John E. Savage. </author> <title> The complexity of decoders-part I: Decoder classes. </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> 15 </volume> <pages> 689-695, </pages> <month> November </month> <year> 1969. </year>
Reference-contexts: Suggestions for how to analyze the complexity issues special to error-correcting codes appeared in the work of Savage <ref> [Sav69, Sav71] </ref> and Bassalygo, Zyablov, and Pinsker [BZP77]. For more general studies of the complexity of algorithms, we point the reader to [AHU74] and [CLR90].
Reference: [Sav71] <author> John E. Savage. </author> <title> The complexity of decoders-part II: Computational work and decoding time. </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> 17(1) </volume> <pages> 77-85, </pages> <month> January </month> <year> 1971. </year>
Reference-contexts: Suggestions for how to analyze the complexity issues special to error-correcting codes appeared in the work of Savage <ref> [Sav69, Sav71] </ref> and Bassalygo, Zyablov, and Pinsker [BZP77]. For more general studies of the complexity of algorithms, we point the reader to [AHU74] and [CLR90].
Reference: [Sch80] <author> J. T. Schwartz. </author> <title> Fast probabilistic algorithms for verification of polynomial identies. </title> <journal> J. ACM, </journal> <volume> 27 </volume> <pages> 701-717, </pages> <year> 1980. </year>
Reference-contexts: Through many of these works one finds a common algebraic thread inspired by the work of Schwartz <ref> [Sch80] </ref>. The crux of our construction of holographic proofs is a purely algebraic statement|Theorem 4.2.19. The main application of constructions of holographic proofs has been to prove the hardness of finding approximate solutions to certain optimization problems. <p> Presentations of distinct polynomials over sufficiently large domains are far apart. This follows easily from the following lemma by considering the polynomial which is their difference. Lemma 4.2.5 [Schwartz <ref> [Sch80] </ref>] Let p be a degree (d 1 ; : : :; d k ) polynomial over a domain D = D 1 fi fi D k where jD i j = n i for i = 1 k.
Reference: [Sha48] <author> C. E. Shannon. </author> <title> A mathematical theory of communication. </title> <journal> Bell System Technical Journal, </journal> <volume> 27(3) </volume> <pages> 379-423, </pages> <month> July </month> <year> 1948. </year>
Reference-contexts: Similarly, the amount of distortion that the receiver can tolerate increases as more redundant information is added to the transmitted message. In his seminal 1948 paper, A Mathematical Theory of Communication, Shannon <ref> [Sha48] </ref> proved tight bounds on the amount of redundancy needed to tolerate a given amount of corruption in discrete communication channels.
Reference: [Sha49] <author> C. E. Shannon. </author> <title> The synthesis of two terminal switching networks. </title> <journal> Bell System Technical Journal, </journal> <volume> 28(1) </volume> <pages> 59-98, </pages> <month> January </month> <year> 1949. </year>
Reference-contexts: H 2 q Proofs of both of these can be found in [MS77]. 1.5 The complexity of coding 25 1.5 The complexity of coding Many of the foundations for the analysis of the complexity of algorithms were laid by Shan-non in his 1949 paper The synthesis of two-terminal switching circuits <ref> [Sha49] </ref>. Suggestions for how to analyze the complexity issues special to error-correcting codes appeared in the work of Savage [Sav69, Sav71] and Bassalygo, Zyablov, and Pinsker [BZP77]. For more general studies of the complexity of algorithms, we point the reader to [AHU74] and [CLR90].
Reference: [Sha90] <author> Adi Shamir. </author> <title> IP = PSPACE. </title> <booktitle> In Proceedings of the 31st IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 11-15, </pages> <year> 1990. </year> <note> Bibliography 145 </note>
Reference-contexts: used to construct and analyze holographic proofs, we would like to point out the importance of those derived from the study of: checkable, self-testable/self-correctable, and random-self-reducible functions [BK89, RS92, BLR90, Rub90, GLR + 91, GS92, Lip91, BF90, Sud92, She91]; techniques for reducing our dependence on randomness [IZ89, Zuc91]; interactive proofs <ref> [Bab85, BM88, GMR89, GMR85, BoGKW88, FRS88, LFKN90, Sha90, FL92, LS91, BFL91] </ref>; and error-correcting codes [GS92, BW, BFLS91]. Through many of these works one finds a common algebraic thread inspired by the work of Schwartz [Sch80]. The crux of our construction of holographic proofs is a purely algebraic statement|Theorem 4.2.19.
Reference: [She91] <author> Shen. </author> <title> Multilinearity test made easy. </title> <type> Manuscript, </type> <year> 1991. </year>
Reference: [Spi95] <author> Daniel A. Spielman. </author> <title> Linear-time encodable and decodable error-correcting codes. </title> <booktitle> In Proceedings of the 27th Annual ACM Symposium on Theory of Computing, </booktitle> <year> 1995. </year> <note> To appear. </note>
Reference: [SS94] <author> Michael Sipser and Daniel A. Spielman. </author> <title> Expander codes. </title> <booktitle> In Proceedings of the 35th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 566-576, </pages> <year> 1994. </year>
Reference: [Sud92] <author> Madhu Sudan. </author> <title> Efficient checking of polynomials and proofs and the hardness of approximation problems. </title> <type> PhD thesis, </type> <institution> U.C. Berkeley, </institution> <month> Oct. </month> <year> 1992. </year>
Reference-contexts: We present the material in this section using the language we developed in Section 4.1. In Section 4.3, we combine the analysis from Section 4.2 with ideas from [BFLS91], [AS92b], and <ref> [Sud92] </ref> to develop relatively simple holographic proofs that can be checked by examining a constant number of segments of the proofs, each of size p proofs in this system can be used to provide proofs of many types of statments, including circuit satisfiability. This section has three parts. <p> We will later use these codes in a recursive construction to obtain codes that are checkable by examining fewer bits in more segments. Versions of these polynomial codes and their checking and verification algorithms first appeared in [AS92b] and <ref> [Sud92] </ref>. Our contribution is an improvement in their analysis (Theorem 4.2.19) which enables us to use versions of these codes that have much less redundancy than was previously possible. The codes we construct in this section are polynomial codes over a field. We will use F to denote this field. <p> Our contribution is that we prove this for domains whose size is greater than de by only a constant factor. Previously, Arora and Safra [AS92b] proved such a statement for domains whose size was cubic in de. Sudan <ref> [Sud92] </ref> later improved this to quadratic. In order to obtain nearly-linear size holographic proofs, we needed to improve their bounds. In order to state the checking algorithm, we will need to state precisely what we mean by "data" that could be a presentation of a bivariate polynomial. <p> "m 1" everywhere. 4.2 Bi and Trivariate codes 93 a polynomial Q (x; y) of degree (d; e) such that Prob (x;y)2XfiY [R (x; y) 6= Q (x; y) or C (x; y) 6= Q (x; y)] &lt; 2 Prob (x;y)2XfiY [R (x; y) 6= C (x; y)]: As in <ref> [Sud92] </ref>, we begin by finding a low-degree "error correcting" polynomial that is zero whenever R and C disagree. Lemma 4.2.13 Let S X fi Y be a set of size at most ffi 2 mn. <p> This route is more direct, but may be accessible to fewer readers. 4.2.2 Resultants In this section, we will review some standard facts about resultants. A more complete presentation can be found in [Lan93, vdW53]. We note that Sudan <ref> [Sud92] </ref> introduced the idea of using the resultant to prove that E divides P . <p> Proof: These facts follow from Lemma 4.2.5, Lemma 4.2.12 and Corollary 4.2.20. This verification algorithm appears in <ref> [Sud92] </ref>. Our contribution is the realization that it works over domains whose size is linear in the degree of the presentations. 106 Holographic Proofs 4.3 A simple holographic proof system 4.3.1 Choosing a key problem We will base our holographic proof system on a particular NP-complete problem. <p> To anthropomorphize the situation, we imagine that a proof provider wants to supply the proof checker with enough information to check that P solves T . The techniques that we use in this section are derived from <ref> [Sud92] </ref>. Remark 4.3.8 Various unspecified constants will appear in this discussion. It should be clear that sufficiently extreme choices for these constants will suffice to prove the lemma that concludes the section.
Reference: [Tan81] <author> R. Michael Tanner. </author> <title> A recursive approach to low complexity codes. </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> 27(5) </volume> <pages> 533-547, </pages> <month> September </month> <year> 1981. </year>
Reference-contexts: Remark 2.2.3 A construction of codes defined by identifying the nodes on one side of a bipartite graph with the bits of the code and identifying the nodes on the other side with subcodes first appeared in the work of Tanner <ref> [Tan81] </ref>. Following Gallager's lead, Tanner analyzed the performance of his codes by examining the girth of the bipartite graph. Margulis [Mar73] also used high-girth graphs to construct error-correcting codes.
Reference: [Tan84] <author> R. Michael Tanner. </author> <title> Explicit construction of concentrators from generalized n-gons. </title> <journal> SIAM Journal Alg. Disc. Meth., </journal> <volume> 5(3) </volume> <pages> 287-293, </pages> <month> September </month> <year> 1984. </year>
Reference-contexts: this with the observations that h~v; ~vi = ff (1 ff)n; 44 Expander codes ~v is perpendicular to the eigenvector corresponding to d to obtain jhA~v; ~wij n (ff ff 2 )(fi fi 2 ) ) jhA~x; ~yi dnfffij n q We will use this result to derive Tanner's theorem <ref> [Tan84] </ref>, which shows that if is small, then G is an expander. Theorem 2.4.3 [Tanner] Let G be a d-regular graph on n vertices such that all eigenvalues other than d have absolute value at most .
Reference: [vdW53] <author> B. L. van der Waerden. </author> <title> Modern Algebra, volume 1. </title> <publisher> Frederick Ungar Publishing Co., </publisher> <address> New York, </address> <year> 1953. </year>
Reference-contexts: This route is more direct, but may be accessible to fewer readers. 4.2.2 Resultants In this section, we will review some standard facts about resultants. A more complete presentation can be found in <ref> [Lan93, vdW53] </ref>. We note that Sudan [Sud92] introduced the idea of using the resultant to prove that E divides P .
Reference: [ZP76] <author> V. V. Zyablov and M. S. Pinsker. </author> <title> Estimation of the error-correction complexity of Gallager low-density codes. </title> <journal> Problems of Information Transmission, </journal> <volume> 11(1) </volume> <pages> 18-28, </pages> <month> May </month> <year> 1976. </year>
Reference-contexts: Gelfand, Dobrushin, and Pinsker [GDP73] presented randomized constructions 26 Introduction of asymptotically good codes that could be encoded in linear time. However, they did not suggest algorithms for decoding their codes, and we suspect that a polynomial-time algorithm would be difficult to find. Zyablov and Pinsker <ref> [ZP76] </ref> showed that it is possible to decode Gallager's randomly chosen low-density parity-check codes [Gal63] in logarithmic time with a linear number of processors. These codes are essentially the same as those we present in Section 2.3.
Reference: [Zuc91] <author> David Zuckerman. </author> <title> Simulating BPP using a general weak random source. </title> <booktitle> In Proceedings of the 32nd IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 79-89, </pages> <year> 1991. </year>
Reference-contexts: Among the techniques used to construct and analyze holographic proofs, we would like to point out the importance of those derived from the study of: checkable, self-testable/self-correctable, and random-self-reducible functions [BK89, RS92, BLR90, Rub90, GLR + 91, GS92, Lip91, BF90, Sud92, She91]; techniques for reducing our dependence on randomness <ref> [IZ89, Zuc91] </ref>; interactive proofs [Bab85, BM88, GMR89, GMR85, BoGKW88, FRS88, LFKN90, Sha90, FL92, LS91, BFL91]; and error-correcting codes [GS92, BW, BFLS91]. Through many of these works one finds a common algebraic thread inspired by the work of Schwartz [Sch80].

References-found: 89

