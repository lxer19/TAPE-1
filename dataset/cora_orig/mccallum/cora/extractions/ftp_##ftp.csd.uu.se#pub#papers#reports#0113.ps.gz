URL: ftp://ftp.csd.uu.se/pub/papers/reports/0113.ps.gz
Refering-URL: http://www.csd.uu.se/papers/reports.html
Root-URL: 
Email: e-mail: bjornc,mc@csd.uu.se  e-mail: sverker@sics.se  
Author: Bjorn Carlson and Mats Carlsson Sverker Janson 
Address: Box 311 751 05 Uppsala  Box 1263, S-164 28 KISTA, Sweden  
Affiliation: Computing Science Department, Uppsala University  Swedish Institute of Computer Science  
Web: AKL(FD)  
Note: The implementation of  
Abstract: UPMAIL Technical Report No. 113 August 22, 1995 ISSN 1100-0686 Abstract AKL(FD) is an integration of (an extension of) the finite domain constraint system FD in AKL, a deep concurrent constraint programming language [CJH94]. In this paper we describe the implementation of the FD solver and its adaptation to the generic constraint interface of the AGENTS implementation of AKL. We also describe compilation techniques used by the AKL(FD) compiler. 
Abstract-found: 1
Intro-found: 1
Reference: [Car95] <author> Bjorn Carlson. </author> <title> Compiling and Executing Finite Domain Constraints. </title> <institution> Uppsala Theses in Computing Science 21, Uppsala University, </institution> <month> May </month> <year> 1995. </year> <note> (Also available as SICS Dissertation Series 18.). </note>
Reference-contexts: This makes it possible to have a reactive process/object-oriented top-level in a program, with other encapsulated components performing constraint solving. AKL is a deep CCP language [JH91, Jan94] and AKL (FD) is an integration of (an extension of) the indexical-based finite domain constraint system FD [VHSD91] in AKL <ref> [CJH94, Car95] </ref>. That AKL (FD) is very expressive and that good performance can be achieved has been argued elsewhere [CJH94]. <p> Reinstallation is a special case of installation where the installed constraints cannot fail nor propagate. 3 FD integration We now explain the details of the internal structures used for representing FD indexicals and variables. First, we give a brief outline of FD. For more information see <ref> [Car95] </ref>. 3.1 FD The constraint system FD is based on domain constraints and functional rules called indexicals [VHSD91]. A domain constraint is an expression x 2 I, where I is a finite set of natural numbers. <p> We now present the basic solver. For a full description see elsewhere <ref> [Car95] </ref>. Let Q be a finite queue/set of variables, and let be a constraint store. <p> Complexity 4.1 The algorithm is O (mnecs) in time <ref> [Car95] </ref>. Note that in the AGENTS-implementation, installing l is postponed until the propagation in has terminated successfully. However, it is important to note that propagation between different levels of stores is performed. <p> Thus, we obtain the antimonotone indexical 5 in 0::(2 fl min (x) + 3 fl min (y)): The general translation for entailment is found in <ref> [Car95] </ref>. Also, two schemes are being developed which compile arbitrary propositional combinations of finite domain constraints into sets of indexicals and into sets of conditional clauses respectively. The compilation schemes for disjunction are described in detail elsewhere [CC95]. 14 6 Conclusion We describe the implementation of AKL (FD).
Reference: [CC95] <author> B. Carlson and M. Carlsson. </author> <title> Compiling and Executing Disjunctions of Finite Domain Constraints. </title> <booktitle> In Proceedings of the Twelfth International Conference on Logic Programming. </booktitle> <publisher> MIT Press, </publisher> <year> 1995. </year>
Reference-contexts: Also, two schemes are being developed which compile arbitrary propositional combinations of finite domain constraints into sets of indexicals and into sets of conditional clauses respectively. The compilation schemes for disjunction are described in detail elsewhere <ref> [CC95] </ref>. 14 6 Conclusion We describe the implementation of AKL (FD). The generic constraint interface, supporting hierarchical constraint stores, of AGENTS is explained, as well as its instantiation with FD. The FD solver, which exploits important optimizations, and supports both solving and checking constraints, is outlined.
Reference: [CCD94] <author> B. Carlson, M. Carlsson, and D. Diaz. </author> <title> Entailment of finite domain constraints. </title> <booktitle> In Proceedings of the Eleventh International Conference on Logic Programming. </booktitle> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: env is the identity of the store in which the indexical was added, ent is a flag set to true when the indexical is entailed, args is a vector of the arguments to the indexicals, and moninfo contains decision information used for deciding whether the indexical is monotone or antimonotone <ref> [CCD94] </ref>. A range is compiled into a postfix notation, which is then translated straightforwardly into byte code by the loader. The idea is simple: a range expression R 1 Op R 2 is translated into "code (R 2 ) code (R 1 ) instr (Op)". <p> It has been proven that antimonotone indexicals can be used for expressing such logical conditions <ref> [CCD94] </ref>. Hence, we use antimonotone indexicals to efficiently check entailment of finite domain constraints. This means that certain indexicals are marked as entailment checking, and treated correspondingly by the solver (see below). <p> Consider the example c 2x + 3y 5: A suitable condition which implies the truth of c is derived by replacing 2x + 3y with its lower bound <ref> [CCD94] </ref>. Thus, we obtain the antimonotone indexical 5 in 0::(2 fl min (x) + 3 fl min (y)): The general translation for entailment is found in [Car95].
Reference: [CJH94] <author> B. Carlson, S. Janson, and S. Haridi. AKL(FD): </author> <title> a concurrent language for finite domain programming. </title> <booktitle> In Logic Programming: Proceedings of the 1994 International Symposium. </booktitle> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: This makes it possible to have a reactive process/object-oriented top-level in a program, with other encapsulated components performing constraint solving. AKL is a deep CCP language [JH91, Jan94] and AKL (FD) is an integration of (an extension of) the indexical-based finite domain constraint system FD [VHSD91] in AKL <ref> [CJH94, Car95] </ref>. That AKL (FD) is very expressive and that good performance can be achieved has been argued elsewhere [CJH94]. <p> AKL is a deep CCP language [JH91, Jan94] and AKL (FD) is an integration of (an extension of) the indexical-based finite domain constraint system FD [VHSD91] in AKL [CJH94, Car95]. That AKL (FD) is very expressive and that good performance can be achieved has been argued elsewhere <ref> [CJH94] </ref>. The purpose of the present paper is to give the details of the implementation of the FD solver, which operates in a hierarchy of constraint stores, and its adaptation to the generic constraint interface of the AGENTS implementation of AKL. <p> We have experimented with extending AGENTS with a trailing mechanism used for solving finite domain constraints, such that AKL (FD) keeps up with CHIP in performance for a set of standard benchmarks <ref> [CJH94] </ref>. Previously, FD has been implemented in the CLP framework, e.g., the clp (FD) system by Diaz and Codognet [DC93]. <p> In contrast, AKL (FD) uses the concurrent constraint paradigm to show that by efficient implementation of the indexicals, the high-level combinators of cc (FD) can be programmed in the language itself with reasonable efficiency <ref> [CJH94] </ref>. The rest of the paper is structured as follows. In Section 2 we explain the constraint store model of AKL and the generic constraint interface of 2 AGENTS. In Section 3 we give the instantiation of the constraint interface with FD.
Reference: [DC93] <author> D. Diaz and P. Codognet. </author> <title> A Minimal Extension of the WAM for clp(FD). </title> <booktitle> In Proceedings of the International Conference on Logic Programming, </booktitle> <year> 1993. </year>
Reference-contexts: Previously, FD has been implemented in the CLP framework, e.g., the clp (FD) system by Diaz and Codognet <ref> [DC93] </ref>. This system is orthogonal to ours in that it extends the execution engine for Prolog with support for FD, and compiles all source code to C, thus demonstrating that indexical-based constraint systems can be very efficient. <p> If the indexical is monotone, x is forced to be a subset of r, and hence domain prunings are propagated. 4.1 Solver optimizations The solver exploits important optimizations, some of which are used in clp (FD) as well <ref> [DC93] </ref>. We now outline the ones specific to AKL (FD). 4.1.1 Equivalence marking Indexicals, known to be logically equivalent, are connected by references to a common flag (Section 3.2.1). Whenever one of the indexicals is decided entailed, the flag is set.
Reference: [Jan94] <author> Sverker Janson. </author> <title> AKL|A Multiparadigm Programming Language. </title> <institution> Uppsala Theses in Computing Science 19, Uppsala University, </institution> <month> June </month> <year> 1994. </year> <note> (Also available as SICS Dissertation Series 14.). </note>
Reference-contexts: Being deep means having a hierarchy of constraint stores, where a computation need not be affected by the failure of a subordinate store. This makes it possible to have a reactive process/object-oriented top-level in a program, with other encapsulated components performing constraint solving. AKL is a deep CCP language <ref> [JH91, Jan94] </ref> and AKL (FD) is an integration of (an extension of) the indexical-based finite domain constraint system FD [VHSD91] in AKL [CJH94, Car95]. That AKL (FD) is very expressive and that good performance can be achieved has been argued elsewhere [CJH94]. <p> The major obstacle to obtain efficiency in AKL (FD) is that don't know nondeterminism in AGENTS is implemented by copying parts of the state <ref> [Jan94] </ref>. We have experimented with extending AGENTS with a trailing mechanism used for solving finite domain constraints, such that AKL (FD) keeps up with CHIP in performance for a set of standard benchmarks [CJH94]. <p> Each conjunction P refers to a list of 4 suspended constraints P C . The environment of P is referred to as P . The worker rewrites the configurations according to the operational semantics of AKL <ref> [JH91, Jan94] </ref>. Suppose a constraint c is executed in P . If c and P are inconsistent, the execution fails and P is marked as dead. If c is entailed, the computation succeeds. Otherwise, c is simplified with respect to P , and added to P C .
Reference: [JH91] <author> Sverker Janson and Seif Haridi. </author> <title> Programming Paradigms of the Andorra Kernel Language. </title> <booktitle> In Logic Programming: Proceedings of the 1991 International Symposium, </booktitle> <address> San Diego, California, Oc-tober 1991. </address> <publisher> MIT Press. </publisher>
Reference-contexts: Being deep means having a hierarchy of constraint stores, where a computation need not be affected by the failure of a subordinate store. This makes it possible to have a reactive process/object-oriented top-level in a program, with other encapsulated components performing constraint solving. AKL is a deep CCP language <ref> [JH91, Jan94] </ref> and AKL (FD) is an integration of (an extension of) the indexical-based finite domain constraint system FD [VHSD91] in AKL [CJH94, Car95]. That AKL (FD) is very expressive and that good performance can be achieved has been argued elsewhere [CJH94]. <p> Each conjunction P refers to a list of 4 suspended constraints P C . The environment of P is referred to as P . The worker rewrites the configurations according to the operational semantics of AKL <ref> [JH91, Jan94] </ref>. Suppose a constraint c is executed in P . If c and P are inconsistent, the execution fails and P is marked as dead. If c is entailed, the computation succeeds. Otherwise, c is simplified with respect to P , and added to P C .
Reference: [SRP91] <author> Vijay A. Saraswat, Martin Rinard, and Prakash Panangaden. </author> <title> Semantic Foundations of Concurrent Constraint Programming. </title> <booktitle> In Symposium on the Principles of Programming Languages. </booktitle> <address> ACM/SIGPPLAN, </address> <year> 1991. </year> <month> 15 </month>
Reference-contexts: 1 Introduction Conceptually, a concurrent constraint programming (CCP <ref> [SRP91] </ref>) language is an ideal vehicle for constraint programming. The expressiveness of the constraint solver can be extended by user-defined entailment-driven propagation rules that execute concurrently and cooperate with the constraint solver. <p> In the design of AGENTS we have adopted a view of constraints mimicking the constraint view of Prolog, i.e., we represent the constraints through the variables they constrain. Thus, from the implementation point of view, we consider the store not to be a set of constraints <ref> [SRP91] </ref>, but a set of variables. Any constraint c (X) adds its information on X, ensuring that X contains enough information to recover the meaning of c. In the following we use C syntax in describing the outline of the structures involved.
Reference: [VHSD91] <author> Pascal Van Hentenryck, Vijay Saraswat, and Yves Deville. </author> <title> Con--straint processing in cc(fd). </title> <type> Technical report, </type> <institution> Computer Science Department, Brown University, </institution> <year> 1991. </year>
Reference-contexts: This makes it possible to have a reactive process/object-oriented top-level in a program, with other encapsulated components performing constraint solving. AKL is a deep CCP language [JH91, Jan94] and AKL (FD) is an integration of (an extension of) the indexical-based finite domain constraint system FD <ref> [VHSD91] </ref> in AKL [CJH94, Car95]. That AKL (FD) is very expressive and that good performance can be achieved has been argued elsewhere [CJH94]. <p> First, we give a brief outline of FD. For more information see [Car95]. 3.1 FD The constraint system FD is based on domain constraints and functional rules called indexicals <ref> [VHSD91] </ref>. A domain constraint is an expression x 2 I, where I is a finite set of natural numbers.
Reference: [VHSD92] <author> Pascal Van Hentenryck, Vijay Saraswat, and Yves Deville. </author> <title> Constraint Logic Programming over Finite Domains: the Design, Implementation, and Applications of cc(fd). </title> <type> Technical report, </type> <institution> Computer Science Department, Brown University, </institution> <year> 1992. </year> <month> 16 </month>
Reference-contexts: This system is orthogonal to ours in that it extends the execution engine for Prolog with support for FD, and compiles all source code to C, thus demonstrating that indexical-based constraint systems can be very efficient. The language cc (FD) is derived from FD <ref> [VHSD92] </ref>, and exploits high-level combinators for efficient constraint programming. In contrast, AKL (FD) uses the concurrent constraint paradigm to show that by efficient implementation of the indexicals, the high-level combinators of cc (FD) can be programmed in the language itself with reasonable efficiency [CJH94].
References-found: 10

