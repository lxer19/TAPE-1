URL: http://www.cs.virginia.edu/~jpg3u/uncertainty.ps
Refering-URL: http://www.cs.virginia.edu/~jpg3u/pubs.html
Root-URL: http://www.cs.virginia.edu
Email: gunders@Virginia.EDU  
Title: Integrating Uncertainty into Planners for Multi-Tier Autonomous Agent Architectures  
Author: J. P. Gunderson 
Address: Thornton Hall Charlottesville, VA 22903  
Affiliation: University of Virginia, Dept. of Computer Science  
Abstract: This paper addresses the issue of modifying planners to produce better plans in the face of uncertainty. The traditional planning paradigm has serious flaws in the face of a dynamic and uncertain world. As a result, integrated end-to-end mobile robotic systems must overcome numerous obstacles to integrate planners into a multi-tiered architecture. This paper explores the types of problems caused by uncertainty, and proposes several specific changes to be incorporated into planning systems. A proposal of future work is detailed. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Boddy, M., and Dean, T. L. </author> <year> 1994. </year> <title> Deliberation scheduling for problem solving in time-constrained environments. </title> <booktitle> Artificial Intelligence 67 </booktitle> <pages> 245-285. </pages>
Reference-contexts: If there is interaction between the operators, then the order does matter, and the problem becomes more complex. The system must be designed with the specific type of planner in mind to prevent an unsupportable increase in planning overhead <ref> (Boddy & Dean 1994) </ref>. When coupled with hierarchical planning (Durfee & Lesser 1988), the system can produce an abstract sequence of plan stages (Fikes, Hart, & Nilsson 1972), spanning from the current perceived world state to the desired goal state.
Reference: <author> Bonasso, R. P., and Kortenkamp, D. </author> <year> 1995. </year> <title> Characterizing an architecture for intelligent, reactive systems. </title> <booktitle> In AAAI-95 Spring Symposium. </booktitle>
Reference: <author> Brooks, R. A. </author> <year> 1986. </year> <title> A robust layered control system for a mobile robot. </title> <journal> IEEE Journal of Robotics and Automation RA-2(1):14 - 23. </journal>
Reference-contexts: By modifying the representation used by the planner to encompass some representation of uncertainty, improved performance should be possible. Background The traditional reactive system <ref> (Brooks 1986) </ref> has as its basis a stimulus/response model. Sensors feed information about the world into the system, and this triggers specific behaviors, which utilize effectors to change the world. Rather than developing and maintaining a 'world-model', behaviors are enabled by having their conditions met by immediate sensor data.
Reference: <author> Drabble, B. </author> <year> 1993. </year> <title> Excalibur: a program for planning and reasoning with processes. </title> <booktitle> Artificial Intelligence 62(1) </booktitle> <pages> 1-40. </pages>
Reference-contexts: The reactive system could automatically sense to confirm the preconditions of an operator before invocation, and the scheduler could detect that the current state obviates the need for a particular operator <ref> (Drabble 1993) </ref>. However, there are several problems with this. First, there is no guarantee that the preconditions are perceivable from the location, or at the time, at which the operator is applied.
Reference: <author> Durfee, E. H., and Lesser, V. R. </author> <year> 1988. </year> <title> Incremental planning to control time-constrained blackboard-based problem solver. </title> <journal> IEEE Trans. on Aerospace and Electronic Systems 24(5) </journal> <pages> 647-662. </pages>
Reference-contexts: If there is interaction between the operators, then the order does matter, and the problem becomes more complex. The system must be designed with the specific type of planner in mind to prevent an unsupportable increase in planning overhead (Boddy & Dean 1994). When coupled with hierarchical planning <ref> (Durfee & Lesser 1988) </ref>, the system can produce an abstract sequence of plan stages (Fikes, Hart, & Nilsson 1972), spanning from the current perceived world state to the desired goal state. These plan stages are abstract, and will need to be expanded into sequences of executable operators.
Reference: <author> Fikes, R. E.; Hart, P. E.; and Nilsson, N. J. </author> <year> 1972. </year> <title> Learning and executing generalized robot plans. </title> <booktitle> Artificial Intelligence 3(4) </booktitle> <pages> 251-288. </pages>
Reference-contexts: This allows the mobile agent to select which behaviors are appropriate, and to react effectively in a dynamic, uncertain world. In contrast, the deliberative system attempts to maintain a sufficiently complete model of the world to allow planning and to produce sequences of actions to meet a goal <ref> (Fikes, Hart, & Nilsson 1972) </ref>. In the classical versions, this abstract model of the world assumes both perfect knowledge and perfect operations: there is no uncertainty and operations are atomic and instantaneous. <p> Upon every invocation of the operator, the execution system returns a success/fail code. This is used to update the operator meta-data. If the planner supports compound operators (e.g. 'chunking' in SOAR (Laird et al. 1991), or MACOPS in Strips <ref> (Fikes, Hart, & Nilsson 1972) </ref>) these compound operators would have their own reliability meta-data, which can used to track the interactions between operations in a sequence. <p> The system must be designed with the specific type of planner in mind to prevent an unsupportable increase in planning overhead (Boddy & Dean 1994). When coupled with hierarchical planning (Durfee & Lesser 1988), the system can produce an abstract sequence of plan stages <ref> (Fikes, Hart, & Nilsson 1972) </ref>, spanning from the current perceived world state to the desired goal state. These plan stages are abstract, and will need to be expanded into sequences of executable operators.
Reference: <author> Gat, E. </author> <year> 1992. </year> <title> Integrating planning and reacting in a heterogeneous asynchronous architecture for controlling real-world mobile agents. </title> <booktitle> In AAAI-92. </booktitle>
Reference-contexts: However, in many end-to-end systems the goal is to use an existing planner as-is and integrate it with an existing reactive system. Fusing a traditional planner and a reactive system into a single mobile agent architecture has been problematic <ref> (Gat 1992) </ref>(Hormann, Meier, & Schloen 1991)(Bonasso & Kortenkamp 1995). This paper addresses modifying the planner to include notions of operator reliability and dynamic external events. Providing the deliberative layer with meta-data about the uncertainties of the real world can improve the planning process.
Reference: <author> Gat, E. </author> <year> 1997. </year> <title> Esl: A language for supporting robust plan execution in embedded autonomous agents. </title> <address> www aig.jpl.nasa.gov/public/home/gat/aero97.html. </address>
Reference: <author> Georgeff, M. P. </author> <year> 1991. </year> <title> Situated reasoning and rational behavior. </title> <type> Technical Report Technical Note 21, </type> <institution> Aus-tralian Artificial Intelligence Institute. </institution>
Reference-contexts: A mechanism of modeling temporally varying reliability has been implemented (Haigh 1998) by incorporating more complex reliability measures, which are temporally coded. While this supports situated reasoning <ref> (Georgeff 1991) </ref>, it also would increase the complexity of the meta-data, and increase the overhead of determining reliability. Planning for Failure As a planning space is being explored, situations arise where more than one operator can be used to achieve a necessary condition.
Reference: <author> Haigh, K. Z., and Velosos, M. M. </author> <year> 1998. </year> <title> Interleaving planning and robot execution for asynchronous user requests. </title> <booktitle> Autonomous Robots 5(1) </booktitle> <pages> 79-95. </pages>
Reference-contexts: Unfortunately, there is nothing to prevent the system from reaching an impasse, with the planner constantly suggesting an operator which just as constantly fails. Several systems address this issue by including a priori limits to the number of unsuccessful invocations of an operator <ref> (Haigh & Velosos 1998) </ref>(Gat 1997). Using reliability meta-data which is updated after each attempt, such an operator would have a very low reliability value. <p> A robot moving down a hallway might have a 99.99% reliability at 11 p.m. when the hallway is deserted, but just before lunch the reliability would be far lower. A mechanism of modeling temporally varying reliability has been implemented <ref> (Haigh 1998) </ref> by incorporating more complex reliability measures, which are temporally coded. While this supports situated reasoning (Georgeff 1991), it also would increase the complexity of the meta-data, and increase the overhead of determining reliability.
Reference: <author> Haigh, K. Z. </author> <year> 1998. </year> <title> Situation-Dependent Learning for Interleaved Planning and Robot Execution. </title> <type> Ph.D. Dissertation, </type> <institution> School of Computer Science, Carnegie Mel-lon University. CMU-CS-98-108. </institution>
Reference-contexts: Unfortunately, there is nothing to prevent the system from reaching an impasse, with the planner constantly suggesting an operator which just as constantly fails. Several systems address this issue by including a priori limits to the number of unsuccessful invocations of an operator <ref> (Haigh & Velosos 1998) </ref>(Gat 1997). Using reliability meta-data which is updated after each attempt, such an operator would have a very low reliability value. <p> A robot moving down a hallway might have a 99.99% reliability at 11 p.m. when the hallway is deserted, but just before lunch the reliability would be far lower. A mechanism of modeling temporally varying reliability has been implemented <ref> (Haigh 1998) </ref> by incorporating more complex reliability measures, which are temporally coded. While this supports situated reasoning (Georgeff 1991), it also would increase the complexity of the meta-data, and increase the overhead of determining reliability.
Reference: <author> Hormann, A.; Meier, W.; and Schloen, J. </author> <year> 1991. </year> <title> A control architecture for an advanced fault-tolerant robot system. </title> <booktitle> Robotics and Autonomous Systems 7 211-225. </booktitle>
Reference: <author> Ingrand, F. F., and Georgeff, M. P. </author> <year> 1990. </year> <title> Managing deliberation and reasoning in real-time ai systems. </title> <booktitle> In Proceedings of the 1990 DARPA Workshop on Innovative Approaches to Planning. </booktitle>
Reference: <author> Laird, J. E.; Yager, E. S.; Hucka, M.; and Tuck, C. M. </author> <year> 1991. </year> <title> Robo-Soar: An integration of external interaction, planning, and learning using Soar. </title> <booktitle> Robotics and Autonomous Systems 8 </booktitle> <pages> 113-129. </pages>
Reference-contexts: Upon every invocation of the operator, the execution system returns a success/fail code. This is used to update the operator meta-data. If the planner supports compound operators (e.g. 'chunking' in SOAR <ref> (Laird et al. 1991) </ref>, or MACOPS in Strips (Fikes, Hart, & Nilsson 1972)) these compound operators would have their own reliability meta-data, which can used to track the interactions between operations in a sequence.
Reference: <author> McDermott, D. </author> <year> 1998. </year> <note> Artificial intelligence planning systems - 1998 planning competition results. http://ftp.cs.yale.edu/pub/mcdermott/aipscomp-results.html. Accessed: </note> <month> July 21, </month> <year> 1998. </year>
Reference-contexts: A second difficulty lies in the concatenation of operators. As the number of steps needed to complete a plan grows, the cumulative probability of the plan succeeding drops. In the AI Planning Systems 1998 Competition some sample problems required over 100 individual steps to complete a solution <ref> (McDermott 1998) </ref>. If each step were independent and had a reliability of 99% such a plan would have a successful implementation rate of only 37%. A traditional planner attempts to produce an optimal plan, where optimal is defined as minimal number of steps.
Reference: <author> Sacerdoti, E. D. </author> <year> 1974. </year> <title> Planning in a hierarchy of abstraction spaces. </title> <booktitle> Artificial Intelligence 5 </booktitle> <pages> 115-135. </pages>
Reference-contexts: These plan stages are abstract, and will need to be expanded into sequences of executable operators. However, the smaller number of plan stages reduces the size of the abstract plan to manageable levels <ref> (Sacerdoti 1974) </ref>. If these abstract plan stages also support reliability meta-data, a complete plan can be selected to increase the probability of overall plan success. As each stage is elaborated into more detailed steps, the estimate of plan success can adjusted for every operator in the plan.
Reference: <author> Schreckenghost, D. L.; Edeen, M. A.; Bonasso, R. P.; and Erickson, J. </author> <year> 1998. </year> <title> Intelligent control of product gas transfer for air revitalization. </title> <booktitle> In Proc. 28th Intl. Conf. on Environmental Systems - 1998. </booktitle>
Reference-contexts: However, if this failure-prone operator were the only choice, some method similar to the maximum attempts might still be needed. In cases where multiple operators can achieve the same goal current systems select a initial operator either using context-based rules <ref> (Schreckenghost et al. 1998) </ref> or an a priori selection process. However, the reliability meta-data would support the ability to select the operator most likely to succeed. This would result in plans with higher probability of overall success (Wilkens et al. 1995). A second difficulty lies in the concatenation of operators.
Reference: <author> Wilkens, D. E.; Myers, K. L.; Lowrance, J. D.; and Wesley, L. P. </author> <year> 1995. </year> <title> Planning and reacting in uncertain and dynamic environments. </title> <journal> Journal of Experimental and Theoretical Artificial Intelligence 7(1) </journal> <pages> 121-152. </pages>
Reference-contexts: However, the reliability meta-data would support the ability to select the operator most likely to succeed. This would result in plans with higher probability of overall success <ref> (Wilkens et al. 1995) </ref>. A second difficulty lies in the concatenation of operators. As the number of steps needed to complete a plan grows, the cumulative probability of the plan succeeding drops. <p> This detailed planning can be terminated when the estimated success of a sequence of operators drops below some threshold, and that portion of the abstract plan which is fully elaborated can be passed to the execution system. This frequently is augmented by the use of asynchronous planning <ref> (Wilkens et al. 1995) </ref> where planning continues on the deliberative system during the execution of a plan by the reactive system. If an operator fails, planning resumes on the abstract level, until a new complete abstract plan is produced 1 .
References-found: 18

