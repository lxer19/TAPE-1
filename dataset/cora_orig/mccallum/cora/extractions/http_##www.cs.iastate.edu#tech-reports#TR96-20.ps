URL: http://www.cs.iastate.edu/tech-reports/TR96-20.ps
Refering-URL: http://www.cs.iastate.edu/tech-reports/catalog.html
Root-URL: http://www.cs.iastate.edu
Title: Formalized Data Flow Diagrams and Their Relation to Other Computational Models  
Author: Jurgen Symanzik and Albert L. Baker Jurgen Symanzik and Albert L. Baker. 
Degree: All rights reserved.  
Keyword: Computational Power, Turing Machine, FIFO Petri Net, Program Machine.  
Address: 226 Atanasoff Hall  Ames, Iowa 50011-1040, USA  
Affiliation: Department of Computer Science  Iowa State University  
Note: TR #96-20 December 1996  c Copyright 1996 by  
Abstract-found: 0
Intro-found: 0
Reference: [BB93] <author> J.P. Bansler and K. Btdker. </author> <title> A Reappraisal of Structured Analysis: Design in an Organizational Context. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 11(2) </volume> <pages> 165-193, </pages> <year> 1993. </year>
Reference: [CB94] <author> D.L. Coleman and A.L. Baker. </author> <title> Synthesizing Structured Analysis and Object-Oriented Specifications. </title> <type> Technical Report 94-04, </type> <institution> Iowa State University, Department of Computer Science, 226 Atanasoff Hall, Ames, Iowa 50011, </institution> <month> March </month> <year> 1994. </year> <note> Available by anonymous ftp from ftp.cs.iastate.edu or by e-mail from almanac@cs.iastate.edu. </note>
Reference-contexts: 1 FORMALIZED DATA FLOW DIAGRAMS AND THEIR RELATION TO OTHER COMPUTATIONAL MODELS Abstract One approach to the formalization of Data Flow Diagrams (DFD's) is presented by Coleman ([Col91], <ref> [CB94] </ref>) and Leavens, et al., [LWBL96]. These Formalized Data Flow Diagrams (FDFD's) can be viewed as another model of computation. This paper contains an analysis of the computational power of these FDFD's. We first consider the issue whether certain features of FDFD's affect their computational power. <p> Numerous attempts to formalize DFD's have appeared in the technical literature, e. g., in [DeM78], [WM85a], [WM85b], [Har87], [TP89], [You89], [Har92], and [Har96]. We focus on the Formalized Data Flow Diagrams (FDFD's) developed by Coleman, Wahls, Baker, and Leavens in [Col91], <ref> [CB94] </ref>, [WBL93], and [LWBL96]. We answer the following questions about the computational power of FDFD's.
Reference: [Col91] <author> D.L. Coleman. </author> <title> Formalized Structured Analysis Specifications. </title> <type> PhD Thesis, </type> <institution> Iowa State University, Ames, Iowa, </institution> <month> 50011, </month> <year> 1991. </year>
Reference-contexts: Numerous attempts to formalize DFD's have appeared in the technical literature, e. g., in [DeM78], [WM85a], [WM85b], [Har87], [TP89], [You89], [Har92], and [Har96]. We focus on the Formalized Data Flow Diagrams (FDFD's) developed by Coleman, Wahls, Baker, and Leavens in <ref> [Col91] </ref>, [CB94], [WBL93], and [LWBL96]. We answer the following questions about the computational power of FDFD's.
Reference: [DeM78] <author> T. DeMarco. </author> <title> Structured Analysis and System Specification. </title> <publisher> Yourdon, Inc., </publisher> <address> New York, New York, </address> <year> 1978. </year>
Reference-contexts: Even though traditional DFD's are popular, they lack formality and do not provide a rigorous definition of system functionality. Numerous attempts to formalize DFD's have appeared in the technical literature, e. g., in <ref> [DeM78] </ref>, [WM85a], [WM85b], [Har87], [TP89], [You89], [Har92], and [Har96]. We focus on the Formalized Data Flow Diagrams (FDFD's) developed by Coleman, Wahls, Baker, and Leavens in [Col91], [CB94], [WBL93], and [LWBL96]. We answer the following questions about the computational power of FDFD's.
Reference: [FC88] <author> A. Finkel and A. Choquet. </author> <title> FIFO Nets Without Order Deadlock. </title> <journal> Acta Informatica, </journal> <volume> 25(1) </volume> <pages> 15-36, </pages> <year> 1988. </year>
Reference-contexts: Then, since this type of a homomorphism preserves some decidability problems ([KM82]), we could immediately apply the results and algorithms known for a subclass of FIFO Petri Nets ([FM82], [MF85], [Fin86], [Rou87], <ref> [FC88] </ref>, [FR88], to mention only a few) to the corresponding subclass of RDFD's. 41 Acknowledgements Symanzik's research was partially supported by a German "DAAD-Doktorandenstipendium aus Mitteln des zweiten Hochschulsonderprogramms". 42
Reference: [Fin86] <author> A. Finkel. </author> <title> Structuration des Systemes de Transitions | Applications au Controle du Par-allelisme par Files FIFO. </title> <institution> These Science, Universite de Paris-Sud, Centre d'Orsay, </institution> <year> 1986. </year>
Reference-contexts: Then, since this type of a homomorphism preserves some decidability problems ([KM82]), we could immediately apply the results and algorithms known for a subclass of FIFO Petri Nets ([FM82], [MF85], <ref> [Fin86] </ref>, [Rou87], [FC88], [FR88], to mention only a few) to the corresponding subclass of RDFD's. 41 Acknowledgements Symanzik's research was partially supported by a German "DAAD-Doktorandenstipendium aus Mitteln des zweiten Hochschulsonderprogramms". 42
Reference: [FM82] <author> A. Finkel and G. Memmi. </author> <title> FIFO Nets: A New Model of Parallel Computation. In A.B. Cremers and H.P. Kriegel, </title> <editor> editors, </editor> <booktitle> Lecture Notes in Computer Science Vol. 145: Theoretical Computer Science: 6th GI-Conference, </booktitle> <address> Dortmund, </address> <month> January </month> <year> 1983, </year> <pages> pages 111-121, </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, Heidelberg, </address> <year> 1982. </year>
Reference-contexts: Since we know that Turing Machines, Program Machines, and FIFO Petri 17 Nets are equivalent ([Min67], <ref> [FM82] </ref>, and [MF85], respectively), it is sufficient to show that we can simulate each RDFD, and hence each PFF-RDFD, by a FIFO Petri Net and each Program Machine by a PFF-RDFD. <p> We will partially follow the proof of how to simulate a Program Machine by a FIFO Petri Net (given in <ref> [FM82] </ref> and [MF85]) when we indicate how to simulate a Program Machine by a PFF-RDFD.
Reference: [FR88] <author> A. Finkel and L. Rosier. </author> <title> A Survey on the Decidability Questions for Classes of FIFO Nets. </title> <editor> In G. Rozenberg, editor, </editor> <booktitle> Lecture Notes in Computer Science Vol. 340: Advances in Petri Nets 1988, </booktitle> <pages> pages 106-132, </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, Heidelberg, </address> <year> 1988. </year>
Reference-contexts: Then, since this type of a homomorphism preserves some decidability problems ([KM82]), we could immediately apply the results and algorithms known for a subclass of FIFO Petri Nets ([FM82], [MF85], [Fin86], [Rou87], [FC88], <ref> [FR88] </ref>, to mention only a few) to the corresponding subclass of RDFD's. 41 Acknowledgements Symanzik's research was partially supported by a German "DAAD-Doktorandenstipendium aus Mitteln des zweiten Hochschulsonderprogramms". 42
Reference: [Har87] <author> D. Harel. Statecharts: </author> <title> A Visual Formalism for Complex Systems. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 8(3) </volume> <pages> 231-274, </pages> <year> 1987. </year> <month> 43 </month>
Reference-contexts: Even though traditional DFD's are popular, they lack formality and do not provide a rigorous definition of system functionality. Numerous attempts to formalize DFD's have appeared in the technical literature, e. g., in [DeM78], [WM85a], [WM85b], <ref> [Har87] </ref>, [TP89], [You89], [Har92], and [Har96]. We focus on the Formalized Data Flow Diagrams (FDFD's) developed by Coleman, Wahls, Baker, and Leavens in [Col91], [CB94], [WBL93], and [LWBL96]. We answer the following questions about the computational power of FDFD's.
Reference: [Har92] <author> D. Harel. </author> <title> Biting the Silver Bullet. </title> <journal> Computer, </journal> <volume> 21(1) </volume> <pages> 8-20, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: Even though traditional DFD's are popular, they lack formality and do not provide a rigorous definition of system functionality. Numerous attempts to formalize DFD's have appeared in the technical literature, e. g., in [DeM78], [WM85a], [WM85b], [Har87], [TP89], [You89], <ref> [Har92] </ref>, and [Har96]. We focus on the Formalized Data Flow Diagrams (FDFD's) developed by Coleman, Wahls, Baker, and Leavens in [Col91], [CB94], [WBL93], and [LWBL96]. We answer the following questions about the computational power of FDFD's.
Reference: [Har96] <author> D. Harel. </author> <title> Executable Object Modeling with Statecharts. </title> <booktitle> In Proceedings of the 18th International Conference on Software Engineering, </booktitle> <pages> pages 246-257. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> January </month> <year> 1996. </year>
Reference-contexts: Even though traditional DFD's are popular, they lack formality and do not provide a rigorous definition of system functionality. Numerous attempts to formalize DFD's have appeared in the technical literature, e. g., in [DeM78], [WM85a], [WM85b], [Har87], [TP89], [You89], [Har92], and <ref> [Har96] </ref>. We focus on the Formalized Data Flow Diagrams (FDFD's) developed by Coleman, Wahls, Baker, and Leavens in [Col91], [CB94], [WBL93], and [LWBL96]. We answer the following questions about the computational power of FDFD's.
Reference: [Jen80] <author> K. Jensen. </author> <title> A Method to Compare the Descriptive Power of Different Types of Petri Nets. </title> <editor> In P. Dembinski, editor, </editor> <booktitle> Lecture Notes in Computer Science Vol. 88: Mathematical Foundations of Computer Science 1980: Proceedings of the 9th Symposium Held in Rydzyna, </booktitle> <address> Poland, </address> <month> September </month> <year> 1980, </year> <pages> pages 348-361, </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, Heidelberg, </address> <year> 1980. </year>
Reference-contexts: Note that computations may be of infinite length. 1.2.4 Computation Systems and Homomorphisms Now we will introduce the overall concept of a Computation System. All the definitions and results in this subsection are drawn from [KM82]. However, there exist similar approaches in the literature, e. g., in <ref> [Jen80] </ref>, where the terms "transition system", "simulation", and "consistent homomorphism" have been defined with respect to a formal method that allows comparisons of the descriptive power of different types of Petri Nets.
Reference: [KM82] <author> T. Kasai and R.E. Miller. </author> <title> Homomorphisms between Models of Parallel Computation. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 25 </volume> <pages> 285-331, </pages> <year> 1982. </year>
Reference-contexts: Note that computations may be of infinite length. 1.2.4 Computation Systems and Homomorphisms Now we will introduce the overall concept of a Computation System. All the definitions and results in this subsection are drawn from <ref> [KM82] </ref>. However, there exist similar approaches in the literature, e. g., in [Jen80], where the terms "transition system", "simulation", and "consistent homomorphism" have been defined with respect to a formal method that allows comparisons of the descriptive power of different types of Petri Nets. <p> Also, h satisfies (1.2.4.4.1) and (1.2.4.9.1). Hence, h is an isomorphism by Theorem (1.2.4.11). According to the Definitions and Theorems from <ref> [KM82] </ref>, here summarized in Subsection 1.2.4, the isomorphism h constructed in the previous proof is also a bijective (hence injective, surjective, hence spanning), length preserving, and principal homomorphism. Example (1.3.1.2): We will provide a small example how to construct a FIFO Petri Net for a given nf-RDFD.
Reference: [LWBL96] <author> G.T. Leavens, T. Wahls, A.L. Baker, and K. Lyle. </author> <title> An Operational Semantics of Firing Rules for Structured Analysis Style Data Flow Diagrams. </title> <type> Technical Report 93-28d, </type> <institution> Iowa State University, Department of Computer Science, 226 Atanasoff Hall, Ames, Iowa 50011, </institution> <month> December </month> <year> 1993, </year> <note> revised, July 1996. Available by anonymous ftp from ftp.cs.iastate.edu or by e-mail from almanac@cs.iastate.edu. </note>
Reference-contexts: 1 FORMALIZED DATA FLOW DIAGRAMS AND THEIR RELATION TO OTHER COMPUTATIONAL MODELS Abstract One approach to the formalization of Data Flow Diagrams (DFD's) is presented by Coleman ([Col91], [CB94]) and Leavens, et al., <ref> [LWBL96] </ref>. These Formalized Data Flow Diagrams (FDFD's) can be viewed as another model of computation. This paper contains an analysis of the computational power of these FDFD's. We first consider the issue whether certain features of FDFD's affect their computational power. <p> Numerous attempts to formalize DFD's have appeared in the technical literature, e. g., in [DeM78], [WM85a], [WM85b], [Har87], [TP89], [You89], [Har92], and [Har96]. We focus on the Formalized Data Flow Diagrams (FDFD's) developed by Coleman, Wahls, Baker, and Leavens in [Col91], [CB94], [WBL93], and <ref> [LWBL96] </ref>. We answer the following questions about the computational power of FDFD's. <p> work concludes this paper in Section 1.4. 3 1.2 Computational Models In this section we define FDFD's, RDFD's, and PFF-RDFD's, summarize the definitions of FIFO Petri Nets and Program Machines, and introduce the overall concept of a Computation System. 1.2.1 FDFD's and RDFD's We will use the formal definitions from <ref> [LWBL96] </ref> to introduce Formalized Data Flow Diagrams (FDFD's). The cited paper contains a more detailed explanation of the underlying operational semantics of FDFD's and an extended example. In all our definitions, we use the notation X ? for the set X [ f?g, where ? means no information. <p> We next define what we mean by a Reduced Data Flow Diagram (RDFD). We do not explicitely state that there are no stores in RDFD's since stores are considered as an addition to, but not as a part of the FDFD's defined in <ref> [LWBL96] </ref>.
Reference: [MF85] <author> G. Memmi and A. Finkel. </author> <title> An Introduction to FIFO Nets | Monogeneous Nets: A Subclass of FIFO Nets. </title> <booktitle> Theoretical Computer Science, </booktitle> <address> 35(2-3):191-214, </address> <year> 1985. </year>
Reference-contexts: Since we know that Turing Machines, Program Machines, and FIFO Petri 17 Nets are equivalent ([Min67], [FM82], and <ref> [MF85] </ref>, respectively), it is sufficient to show that we can simulate each RDFD, and hence each PFF-RDFD, by a FIFO Petri Net and each Program Machine by a PFF-RDFD. <p> We will partially follow the proof of how to simulate a Program Machine by a FIFO Petri Net (given in [FM82] and <ref> [MF85] </ref>) when we indicate how to simulate a Program Machine by a PFF-RDFD. <p> Then, since this type of a homomorphism preserves some decidability problems ([KM82]), we could immediately apply the results and algorithms known for a subclass of FIFO Petri Nets ([FM82], <ref> [MF85] </ref>, [Fin86], [Rou87], [FC88], [FR88], to mention only a few) to the corresponding subclass of RDFD's. 41 Acknowledgements Symanzik's research was partially supported by a German "DAAD-Doktorandenstipendium aus Mitteln des zweiten Hochschulsonderprogramms". 42
Reference: [Min67] <author> M.L. Minsky. </author> <title> Computation: Finite and Infinite Machines. </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1967. </year>
Reference-contexts: The set of markings that are reachable from M 0 is called Reachability Set and it is denoted by Acc (F P N; M 0 ). 1.2.3 Program Machines We introduce Program Machines as given in <ref> [Min67] </ref>, using the formalism of [VVN81].
Reference: [MM81] <author> R. Martin and G. Memmi. </author> <title> Specification and Validation of Sequential Processes Communicating by FIFO Channels. </title> <booktitle> I.E.E. Conference Publication No. 198: Fourth International Conference on Software Engineering for Telecommunication Switching Systems, Warwick, </booktitle> <month> July </month> <year> 1981, </year> <pages> pages 54-57, </pages> <year> 1981. </year>
Reference-contexts: ; r initial ; fs initial ), i. e., RS (F DF D; fl initial ) = ffl j fl 2 ^ 9 s 2 F S (F DF D; fl initial ) : fl initial [s]flg: 12 1.2.2 FIFO Petri Nets In some sense, FIFO Petri Nets (introduced in <ref> [MM81] </ref>) are Petri Nets where places contain words instead of tokens and arcs are labelled by words. More formally, we make use of the definition of FIFO Petri Nets as given in [Rou87].
Reference: [Rou87] <editor> G. Roucairol. FIFO-Nets. In W. Brauer, W. Reisig, and G. Rozenberg, editors, </editor> <booktitle> Lecture Notes in Computer Science Vol. </booktitle> <month> 254: </month> <title> Petri Nets: Central Models and Their Properties, </title> <booktitle> Advances in Petri Nets 1986, Part I, Proceedings of an Advanced Course, </booktitle> <address> Bad Honnef, </address> <month> September </month> <year> 1986, </year> <pages> pages 436-459, </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, Heidelberg, </address> <year> 1987. </year>
Reference-contexts: More formally, we make use of the definition of FIFO Petri Nets as given in <ref> [Rou87] </ref>. <p> Then, since this type of a homomorphism preserves some decidability problems ([KM82]), we could immediately apply the results and algorithms known for a subclass of FIFO Petri Nets ([FM82], [MF85], [Fin86], <ref> [Rou87] </ref>, [FC88], [FR88], to mention only a few) to the corresponding subclass of RDFD's. 41 Acknowledgements Symanzik's research was partially supported by a German "DAAD-Doktorandenstipendium aus Mitteln des zweiten Hochschulsonderprogramms". 42
Reference: [SB96] <author> J. Symanzik and A.L. Baker. </author> <title> Non-Atomic Components of Data Flow Diagrams: Stores, Persistent Flows, and Tests for Empty Flows. </title> <type> Technical Report 96-21, </type> <institution> Iowa State Uni 44 versity, Department of Computer Science, 226 Atanasoff Hall, Ames, Iowa 50011, </institution> <note> De-cember 1996. Available by anonymous ftp from ftp.cs.iastate.edu or by e-mail from almanac@cs.iastate.edu. </note>
Reference: [TP89] <author> T.H. Tse and L. Pong. </author> <title> Towards a Formal Foundation for DeMarco Data Flow Diagrams. </title> <journal> The Computer Journal, </journal> <volume> 32(1) </volume> <pages> 1-12, </pages> <month> February </month> <year> 1989. </year>
Reference-contexts: Even though traditional DFD's are popular, they lack formality and do not provide a rigorous definition of system functionality. Numerous attempts to formalize DFD's have appeared in the technical literature, e. g., in [DeM78], [WM85a], [WM85b], [Har87], <ref> [TP89] </ref>, [You89], [Har92], and [Har96]. We focus on the Formalized Data Flow Diagrams (FDFD's) developed by Coleman, Wahls, Baker, and Leavens in [Col91], [CB94], [WBL93], and [LWBL96]. We answer the following questions about the computational power of FDFD's.
Reference: [VVN81] <author> R. Valk and G. </author> <title> Vidal-Naquet. Petri Nets and Regular Languages. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 23 </volume> <pages> 299-325, </pages> <year> 1981. </year>
Reference-contexts: The set of markings that are reachable from M 0 is called Reachability Set and it is denoted by Acc (F P N; M 0 ). 1.2.3 Program Machines We introduce Program Machines as given in [Min67], using the formalism of <ref> [VVN81] </ref>. Definition (1.2.3.1): A Program Machine is given by a finite set R = fr 1 ; : : : ; r p g of registers, a finite set Q = fq 0 ; : : : ; q r g of labels, and a finite set I of instructions.
Reference: [Wah95] <author> T. Wahls. </author> <title> On the Execution of High Level Formal Specifications. </title> <type> PhD Thesis, </type> <institution> Iowa State University, Ames, Iowa, </institution> <month> 50011, </month> <year> 1995. </year>
Reference-contexts: Direction (i) should help to provide a mechanism such that existing FDFD's can be transformed into a basic model. Then, such a model might be used as input to computer software for formal analysis and execution of FDFD's such as the ML interpreter described in <ref> [Wah95] </ref>. In direction (ii), we hope to find subclasses of RDFD's where some decidability problems can be solved.
Reference: [WBL93] <author> T. Wahls, A.L. Baker, and G.T. Leavens. </author> <title> An Executable Semantics for a Formalized Data Flow Diagram Specification Language. </title> <type> Technical Report 93-27, </type> <institution> Iowa State University, Department of Computer Science, 226 Atanasoff Hall, Ames, Iowa 50011, </institution> <note> Novem-ber 1993. Available by anonymous ftp from ftp.cs.iastate.edu or by e-mail from almanac@cs.iastate.edu. </note>
Reference-contexts: Numerous attempts to formalize DFD's have appeared in the technical literature, e. g., in [DeM78], [WM85a], [WM85b], [Har87], [TP89], [You89], [Har92], and [Har96]. We focus on the Formalized Data Flow Diagrams (FDFD's) developed by Coleman, Wahls, Baker, and Leavens in [Col91], [CB94], <ref> [WBL93] </ref>, and [LWBL96]. We answer the following questions about the computational power of FDFD's.
Reference: [WM85a] <author> P.T. Ward and S.J. Mellor. </author> <title> Structured Development for Real-Time Systems, Volume 1: Introduction and Tools. </title> <publisher> Yourdon, Inc., </publisher> <address> New York, New York, </address> <year> 1985. </year>
Reference-contexts: We then show that any Program Machine can be simulated by an PFF-RDFD. It is known that FIFO Petri Nets and Program Machines both are Turing equivalent. 2 1.1 Introduction Traditional Data Flow Diagrams (DFD's) are the cornerstone of the software development methodology known as "Structured Analysis" (SA) ([DeM78], <ref> [WM85a] </ref>), and they are probably the most widely used specification technique in industry today ([BB93]). DFD's are popular because of their graphical representation and their hierarchical structure. <p> Even though traditional DFD's are popular, they lack formality and do not provide a rigorous definition of system functionality. Numerous attempts to formalize DFD's have appeared in the technical literature, e. g., in [DeM78], <ref> [WM85a] </ref>, [WM85b], [Har87], [TP89], [You89], [Har92], and [Har96]. We focus on the Formalized Data Flow Diagrams (FDFD's) developed by Coleman, Wahls, Baker, and Leavens in [Col91], [CB94], [WBL93], and [LWBL96]. We answer the following questions about the computational power of FDFD's.
Reference: [WM85b] <author> P.T. Ward and S.J. Mellor. </author> <title> Structured Development for Real-Time Systems, Volume 2: Essential Modeling Techniques. </title> <publisher> Yourdon, Inc., </publisher> <address> New York, New York, </address> <year> 1985. </year>
Reference-contexts: Even though traditional DFD's are popular, they lack formality and do not provide a rigorous definition of system functionality. Numerous attempts to formalize DFD's have appeared in the technical literature, e. g., in [DeM78], [WM85a], <ref> [WM85b] </ref>, [Har87], [TP89], [You89], [Har92], and [Har96]. We focus on the Formalized Data Flow Diagrams (FDFD's) developed by Coleman, Wahls, Baker, and Leavens in [Col91], [CB94], [WBL93], and [LWBL96]. We answer the following questions about the computational power of FDFD's.
Reference: [You89] <author> E. Yourdon. </author> <title> Modern Structured Analysis. </title> <publisher> Yourdon Press Computing Series. Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1989. </year>
Reference-contexts: Even though traditional DFD's are popular, they lack formality and do not provide a rigorous definition of system functionality. Numerous attempts to formalize DFD's have appeared in the technical literature, e. g., in [DeM78], [WM85a], [WM85b], [Har87], [TP89], <ref> [You89] </ref>, [Har92], and [Har96]. We focus on the Formalized Data Flow Diagrams (FDFD's) developed by Coleman, Wahls, Baker, and Leavens in [Col91], [CB94], [WBL93], and [LWBL96]. We answer the following questions about the computational power of FDFD's.
References-found: 26

