URL: ftp://ftp.cs.buffalo.edu/pub/tech-reports/92-32.ps.Z
Refering-URL: ftp://ftp.cs.buffalo.edu/pub/tech-reports/README.html
Root-URL: 
Title: Computing Robust Tests for Stuck-open Faults from Stuck-at Test Sets.  
Author: by Sreejit Chakravarty G. Theophilopoulos 
Keyword: Index Terms: Robust Tests, Static CMOS Circuits, Stuck-open Faults, Test Generation.  
Date: 92-32  
Address: New York Buffalo, NY 14260  
Affiliation: Dept. of Computer Science State University of  
Pubnum: Tech. Report No.  
Abstract: An experimental system for computing robust tests for stuck-open faults in static CMOS circuits is presented. It constructs robust test-pairs from tests for stuck-at faults by identifying several classes of FETs. Robust tests for stuck-open faults in FETs belonging to these classes are constructed from any stuck-at test set by carefully constructing initialization vectors. Initialization vectors are constructed by examining the "parity" of the paths in the circuit. Robust tests for additional faults are identified using stuck-open fault simulation. Experimental results show that the system can compute robust tests for a "very large" percentage of the stuck-open faults in a "reasonable" time. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> F. Brglez and H. Fujiwara, </author> <title> "A Neutral Netlist of 10 Combinational Circuits and their translator in FORTRAN," </title> <booktitle> in Proc. IEEE Int'l Symp. on Circuits and Systems, </booktitle> <pages> pp. 663 - 698, </pages> <month> June </month> <year> 1985. </year> <month> 16 </month>
Reference-contexts: Robust tests for additional faults are identified using the stuck-open fault simulation algorithm proposed in [2]. Finally, the set of test-pairs computed is merged into a test sequence using the optimizing algorithm discussed in [3]. Performance of the system on the ISCAS85 benchmarks <ref> [1] </ref> are presented. <p> Go to Step 5. Ste 7. Compute fault coverage. Merge the test-pairs, both robust and non-robust, using the algorithm in [3]. The system we implemented was used to compute robust test-pairs for the stuck-open faults in the ISCAS85 benchmarks <ref> [1] </ref>. The results are tabulated in Tables 4,5. In Table 4, robust fault coverage after each of Step 2 ( Trivial ), Step 3 ( SP-FETs ) and Step 4 ( PSP-FETs ) are tabulated.
Reference: [2] <author> S. Chakravarty, </author> <title> "A Characterization of robust tests for stuck-open faults," Jour--nal of Electronic Testing: </title> <booktitle> Theory and Application, </booktitle> <volume> Vol. 1, No. 4, </volume> <pages> pp. 275 - 286, </pages> <address> 1991. </address> <publisher> Kluwer Academic Press. </publisher>
Reference-contexts: Such tests for stuck-open faults can be invalidated due to circuit delays <ref> [2, 10] </ref>. A test for a stuck-open fault f is said to be robust iff it is not invalidated by arbitrary circuit delays [2, 10]. <p> Such tests for stuck-open faults can be invalidated due to circuit delays <ref> [2, 10] </ref>. A test for a stuck-open fault f is said to be robust iff it is not invalidated by arbitrary circuit delays [2, 10]. <p> Algorithms for computing robust tests for stuck-open faults has been discussed in <ref> [2, 10] </ref>. The algorithm in [10] computes a robust test for a given stuck-open fault using, in essence, a 27-valued logic. The algorithm in [2] is an improvement upon the algorithm in [10] in that it uses only 6 logic values. <p> Algorithms for computing robust tests for stuck-open faults has been discussed in [2, 10]. The algorithm in [10] computes a robust test for a given stuck-open fault using, in essence, a 27-valued logic. The algorithm in <ref> [2] </ref> is an improvement upon the algorithm in [10] in that it uses only 6 logic values. Both these algorithms use a very different strategy from the one advocated here in that they do not use any knowledge of the stuck-at test set. <p> Using rules described in [5, 6, 8] test-pairs, not necessarily robust, can be constructed from any stuck-at test set. Many of these test-pairs may infact be robust. Robust tests for additional faults are identified using the stuck-open fault simulation algorithm proposed in <ref> [2] </ref>. Finally, the set of test-pairs computed is merged into a test sequence using the optimizing algorithm discussed in [3]. Performance of the system on the ISCAS85 benchmarks [1] are presented. <p> 2), then 9 a gate G in cone (X) s.t. (T 1; T 2) results in a falling transition at an input of G, (T 1; T 2) results in a rising transition at a different input of G and the other inputs of G do not have disabling values <ref> [2] </ref>. <p> Therefore, there must be a rising transition at an input s of W and a falling transition at another input t of W <ref> [2] </ref>. <p> Here, unlike SP-FETs, the initialization vectors depend not only on the structure of the circuit but also on the given test set. 13 5 System Organization and Experimental Results The theorectical results of Sections 3,4, the fault simulation algorithm of <ref> [2] </ref> and the optimal test sequence algorithm of [3] are integrated into a system that computes robust tests for stuck-open faults. The fault simulation algorithm uses six-valued logic to determine if a given input-pair detects a given stuck-open fault. <p> From T , using Table 1, compute test-pairs for the FETs in Q and determine if it is robust <ref> [2] </ref>. FETs for which a robsut test is so computed is dropped from Q and A is updated. Step 6. COUNT = COUNT + 1. If ( COUNT &gt; 10 ) then go to Step 7. Compute a new test set T for the faults in A.
Reference: [3] <author> S. Chakravarty and S. S. Ravi, </author> <title> "Computing Optimal Test Sequences for Stuck-Open Faults in CMOS Circuits," </title> <journal> IEEE Transactions on Comput.-Aided Design of Integrated Circuits and Systems, </journal> <volume> Vol. 9, No. 3, </volume> <pages> pp. 329-331, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: Many of these test-pairs may infact be robust. Robust tests for additional faults are identified using the stuck-open fault simulation algorithm proposed in [2]. Finally, the set of test-pairs computed is merged into a test sequence using the optimizing algorithm discussed in <ref> [3] </ref>. Performance of the system on the ISCAS85 benchmarks [1] are presented. <p> Here, unlike SP-FETs, the initialization vectors depend not only on the structure of the circuit but also on the given test set. 13 5 System Organization and Experimental Results The theorectical results of Sections 3,4, the fault simulation algorithm of [2] and the optimal test sequence algorithm of <ref> [3] </ref> are integrated into a system that computes robust tests for stuck-open faults. The fault simulation algorithm uses six-valued logic to determine if a given input-pair detects a given stuck-open fault. The algorithm in [3] computes a test sequence S from a set Q of pairs of input vectors s.t. every <p> of Sections 3,4, the fault simulation algorithm of [2] and the optimal test sequence algorithm of <ref> [3] </ref> are integrated into a system that computes robust tests for stuck-open faults. The fault simulation algorithm uses six-valued logic to determine if a given input-pair detects a given stuck-open fault. The algorithm in [3] computes a test sequence S from a set Q of pairs of input vectors s.t. every pair in Q is a subsequence of S and S is the smallest such subsequence. <p> Step 6. COUNT = COUNT + 1. If ( COUNT &gt; 10 ) then go to Step 7. Compute a new test set T for the faults in A. Go to Step 5. Ste 7. Compute fault coverage. Merge the test-pairs, both robust and non-robust, using the algorithm in <ref> [3] </ref>. The system we implemented was used to compute robust test-pairs for the stuck-open faults in the ISCAS85 benchmarks [1]. The results are tabulated in Tables 4,5.
Reference: [4] <author> G. Gupta and N. K. Jha, </author> <title> "A Universal Test Set for CMOS circuits," </title> <journal> IEEE Trans. on Comput.-Aided Design, </journal> <volume> Vol. 7, No. 5, </volume> <pages> pp. 590 - 597, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: Note thet I X 0 ; I X 1 the two initialization vectors depend only on the structure of the SP-Gates and the topology of the circuit. It is independent of the stuck-at test set being used. From <ref> [4] </ref> we have the following: " Consider a circuit in which all the paths starting from the primary inputs and meeting at the input of any gate have the same inversion parity.
Reference: [5] <author> S. K. Jain and V. D. Agrawal, </author> <title> "Test Generation for MOS circuits using D-Algorithm," </title> <booktitle> in Proc. 20th ACM/ IEEE Design Automation Conference, </booktitle> <pages> pp. 64 - 70, </pages> <month> June </month> <year> 1983. </year>
Reference-contexts: In our work we insist that the robust tests are valid under the arbitrary delay assumption unlike the tests computed by the method in [8]. A number of other algorithms for computing tests for stuck-open faults has been discussed in <ref> [5, 6, 9, 11] </ref>. However, none of these algorithms guarantee the tests to be robust. The system that we present constructs robust test-pairs by first identifying several classes of FETs. The first of these classes, known as trivial FETs, consist of FETs for which every test-pair is robust. <p> FETS that are not trivial are known as nontrivial FETs. Every gate has a network of trivial and another network of nontrivial FETs. In Section 2 we will present the rules from <ref> [5, 6, 8] </ref> for constructing robust tests for trivial FETs from any stuck-at test set. SP-FETs, the second class of FETs, are the nontrivial FETs in SP-Gates. SP-Gates are defined in Section 2 wherein algorithms for identifying SP-FETs are also presented. <p> We how robust test-pairs for PSP-FETs can also be constructed from any stuck-at test set using "custom" initialization vectors. It is "custom" in the sense that it depends not only on the structure of the circuit but also on the given stuck-at test set. Using rules described in <ref> [5, 6, 8] </ref> test-pairs, not necessarily robust, can be constructed from any stuck-at test set. Many of these test-pairs may infact be robust. Robust tests for additional faults are identified using the stuck-open fault simulation algorithm proposed in [2]. <p> results show that robust tests for a "very large" percentage of the stuck-open faults can be computed, in a "reasonable time", using the approach proposed here. 2 Trivial FETs Tests, not necessarily robust, for stuck-open faults can be computed from any stuck-at test set using the rules of Table 1 <ref> [5, 6, 8] </ref>. In Table 1 we assume that NAND, NOR and NOT gates are implemented as shown in Figure 1. The phrase "x; y s-a-b" implies that the corresponding input can be a test either for x s-a-b or y s-a-b. Tests so derived may not be robust.
Reference: [6] <author> S. K. Jain and V. D. Agrawal, </author> <title> "Modeling and Test Generation Algorithms for MOS Circuits," </title> <journal> IEEE Trans. on Comput., </journal> <volume> Vol. C-34, </volume> <pages> pp. 426 - 433, </pages> <month> May </month> <year> 1985. </year>
Reference-contexts: In our work we insist that the robust tests are valid under the arbitrary delay assumption unlike the tests computed by the method in [8]. A number of other algorithms for computing tests for stuck-open faults has been discussed in <ref> [5, 6, 9, 11] </ref>. However, none of these algorithms guarantee the tests to be robust. The system that we present constructs robust test-pairs by first identifying several classes of FETs. The first of these classes, known as trivial FETs, consist of FETs for which every test-pair is robust. <p> FETS that are not trivial are known as nontrivial FETs. Every gate has a network of trivial and another network of nontrivial FETs. In Section 2 we will present the rules from <ref> [5, 6, 8] </ref> for constructing robust tests for trivial FETs from any stuck-at test set. SP-FETs, the second class of FETs, are the nontrivial FETs in SP-Gates. SP-Gates are defined in Section 2 wherein algorithms for identifying SP-FETs are also presented. <p> We how robust test-pairs for PSP-FETs can also be constructed from any stuck-at test set using "custom" initialization vectors. It is "custom" in the sense that it depends not only on the structure of the circuit but also on the given stuck-at test set. Using rules described in <ref> [5, 6, 8] </ref> test-pairs, not necessarily robust, can be constructed from any stuck-at test set. Many of these test-pairs may infact be robust. Robust tests for additional faults are identified using the stuck-open fault simulation algorithm proposed in [2]. <p> results show that robust tests for a "very large" percentage of the stuck-open faults can be computed, in a "reasonable time", using the approach proposed here. 2 Trivial FETs Tests, not necessarily robust, for stuck-open faults can be computed from any stuck-at test set using the rules of Table 1 <ref> [5, 6, 8] </ref>. In Table 1 we assume that NAND, NOR and NOT gates are implemented as shown in Figure 1. The phrase "x; y s-a-b" implies that the corresponding input can be a test either for x s-a-b or y s-a-b. Tests so derived may not be robust.
Reference: [7] <author> T. Larabee, </author> <title> "Test Pattern Generation Using Boolean Satisfiability," </title> <journal> IEEE Trans. on Comput.-Aided Design, </journal> <volume> Vol. 11, No. 1, </volume> <pages> pp. 4 - 15, </pages> <year> 1992. </year>
Reference-contexts: Step 1. For each line l in the guiven circuit C l 0 , a test for l s-a-0, and l 1 , a test for l s-a-1 is computed using the ATPG package of misII. ATPG uses the test generation algorithm of <ref> [7] </ref>. At this step all the redundant stuck-at faults are also identified. Step 2. Robust test-pairs for trivial FETs in each gate L is constructed using Table 1 as follows. Let L be the output of gate L.
Reference: [8] <author> H. K. Lee, D. S. Ha, K. Kim, </author> <title> "Test pattern generation for stuck-open faults using stuck-at test sets in CMOS combinational circuits," </title> <booktitle> 26th ACM/ IEEE Design Automation Conference, </booktitle> <pages> pp. 345 - 350, </pages> <year> 1989. </year>
Reference-contexts: The algorithm in [2] is an improvement upon the algorithm in [10] in that it uses only 6 logic values. Both these algorithms use a very different strategy from the one advocated here in that they do not use any knowledge of the stuck-at test set. In <ref> [8] </ref> a method for computing "robust tests" for stuck-open faults from tests for stuck-at faults is discussed. However, the definition of robust tests used in [8] is very restrictive in that it assumes fixed delay values for the different gate types. <p> In <ref> [8] </ref> a method for computing "robust tests" for stuck-open faults from tests for stuck-at faults is discussed. However, the definition of robust tests used in [8] is very restrictive in that it assumes fixed delay values for the different gate types. Since it is difficult to estimate gate delays and gate delays vary from one manufacturing run to another we assume that we do not have any knowledge of the delays in the circuit. <p> In our work we insist that the robust tests are valid under the arbitrary delay assumption unlike the tests computed by the method in <ref> [8] </ref>. A number of other algorithms for computing tests for stuck-open faults has been discussed in [5, 6, 9, 11]. However, none of these algorithms guarantee the tests to be robust. The system that we present constructs robust test-pairs by first identifying several classes of FETs. <p> FETS that are not trivial are known as nontrivial FETs. Every gate has a network of trivial and another network of nontrivial FETs. In Section 2 we will present the rules from <ref> [5, 6, 8] </ref> for constructing robust tests for trivial FETs from any stuck-at test set. SP-FETs, the second class of FETs, are the nontrivial FETs in SP-Gates. SP-Gates are defined in Section 2 wherein algorithms for identifying SP-FETs are also presented. <p> We how robust test-pairs for PSP-FETs can also be constructed from any stuck-at test set using "custom" initialization vectors. It is "custom" in the sense that it depends not only on the structure of the circuit but also on the given stuck-at test set. Using rules described in <ref> [5, 6, 8] </ref> test-pairs, not necessarily robust, can be constructed from any stuck-at test set. Many of these test-pairs may infact be robust. Robust tests for additional faults are identified using the stuck-open fault simulation algorithm proposed in [2]. <p> results show that robust tests for a "very large" percentage of the stuck-open faults can be computed, in a "reasonable time", using the approach proposed here. 2 Trivial FETs Tests, not necessarily robust, for stuck-open faults can be computed from any stuck-at test set using the rules of Table 1 <ref> [5, 6, 8] </ref>. In Table 1 we assume that NAND, NOR and NOT gates are implemented as shown in Figure 1. The phrase "x; y s-a-b" implies that the corresponding input can be a test either for x s-a-b or y s-a-b. Tests so derived may not be robust.
Reference: [9] <author> S. M. Reddy, V. D. Agrawal, and S. K. Jain, </author> <title> "A Gate level model for CMOS combinational circuits with application to fault detection," </title> <booktitle> in proc. 21st ACM/ IEEE Design Automation Conference, </booktitle> <pages> pp. 504 - 509, </pages> <month> June </month> <year> 1984. </year>
Reference-contexts: In our work we insist that the robust tests are valid under the arbitrary delay assumption unlike the tests computed by the method in [8]. A number of other algorithms for computing tests for stuck-open faults has been discussed in <ref> [5, 6, 9, 11] </ref>. However, none of these algorithms guarantee the tests to be robust. The system that we present constructs robust test-pairs by first identifying several classes of FETs. The first of these classes, known as trivial FETs, consist of FETs for which every test-pair is robust.
Reference: [10] <author> S. M. Reddy, M. K. Reddy and V. D. Agrawal, </author> <title> "Robust tests for stuck-open faults in CMOS combinational circuits," </title> <booktitle> in proc. 14th Fault Tolerant Computing Symposium, </booktitle> <year> 1984, </year> <pages> pp. 44 - 49. </pages>
Reference-contexts: Such tests for stuck-open faults can be invalidated due to circuit delays <ref> [2, 10] </ref>. A test for a stuck-open fault f is said to be robust iff it is not invalidated by arbitrary circuit delays [2, 10]. <p> Such tests for stuck-open faults can be invalidated due to circuit delays <ref> [2, 10] </ref>. A test for a stuck-open fault f is said to be robust iff it is not invalidated by arbitrary circuit delays [2, 10]. <p> Algorithms for computing robust tests for stuck-open faults has been discussed in <ref> [2, 10] </ref>. The algorithm in [10] computes a robust test for a given stuck-open fault using, in essence, a 27-valued logic. The algorithm in [2] is an improvement upon the algorithm in [10] in that it uses only 6 logic values. <p> Algorithms for computing robust tests for stuck-open faults has been discussed in [2, 10]. The algorithm in <ref> [10] </ref> computes a robust test for a given stuck-open fault using, in essence, a 27-valued logic. The algorithm in [2] is an improvement upon the algorithm in [10] in that it uses only 6 logic values. <p> Algorithms for computing robust tests for stuck-open faults has been discussed in [2, 10]. The algorithm in <ref> [10] </ref> computes a robust test for a given stuck-open fault using, in essence, a 27-valued logic. The algorithm in [2] is an improvement upon the algorithm in [10] in that it uses only 6 logic values. Both these algorithms use a very different strategy from the one advocated here in that they do not use any knowledge of the stuck-at test set.
Reference: [11] <author> H. Shih and J. A. Abraham, </author> <title> "Transistor level test generation for Physical Failures in CMOS Circuits," </title> <booktitle> in proc. ACM/ IEEE Design Automation Conference, </booktitle> <address> Las Vegas, </address> <pages> pp. 243 - 249, </pages> <month> June </month> <year> 1986. </year>
Reference-contexts: In our work we insist that the robust tests are valid under the arbitrary delay assumption unlike the tests computed by the method in [8]. A number of other algorithms for computing tests for stuck-open faults has been discussed in <ref> [5, 6, 9, 11] </ref>. However, none of these algorithms guarantee the tests to be robust. The system that we present constructs robust test-pairs by first identifying several classes of FETs. The first of these classes, known as trivial FETs, consist of FETs for which every test-pair is robust.
Reference: [12] <author> H. Shih and J. A. Abraham, </author> <title> "Fault Collapsing Techniques for MOS VLSI circuits," </title> <booktitle> 16th Fault Tolerant Computing Symposium, </booktitle> <pages> pp. 370 - 375, </pages> <year> 1986. </year>
Reference-contexts: The fault simulation time dominates the entire computation. One reason for this is the large number of faults to be simulated. "Fault collapsing", for stuck-open faults is an approach that can be used for reducing this time by reducing the number of faults to be considered. Since known techniques <ref> [12] </ref> for "fault collapsing" of stuck-open faults are not valid for robust tests they cannot be used in our system. However, if such techniques are developed they can be used to reduce fault simulation time and, in conjunction with our approach, to reduce the total test generation time.
Reference: [13] <author> M. H. Schultz, E. Trischler and T. M. Sarfert, "SOCRATES: </author> <title> A highly efficient automatic test pattern generation system," </title> <journal> IEEE Trans. on Comput.-Aided Design, </journal> <volume> Vol. 7, No. 1, </volume> <pages> pp. 126 - 137, </pages> <year> 1988. </year>
Reference-contexts: We address the problem of computing robust tests for stuck-open faults in circuits consisting of NOT, NAND, NOR, AND and OR gates. 1 Research supported by NSF grant number MIP-9102509. 1 The work presented here is based on the premise, justified by the performance of existing tools like SOCRATES <ref> [13] </ref>, that stuck-at tests can be computed rather quickly. On the other hand, algorithms for computing robust tests for stuck-open faults are relatively more time consuming.

References-found: 13

