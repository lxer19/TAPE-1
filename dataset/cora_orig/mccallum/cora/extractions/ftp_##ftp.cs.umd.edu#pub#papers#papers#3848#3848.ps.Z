URL: ftp://ftp.cs.umd.edu/pub/papers/papers/3848/3848.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Email: fshin, saltzg@cs.umd.edu  
Title: Applying Traversal-Pattern-Sensitive Pointer Analysis to Dependence Analysis  
Author: Yuan-Shin Hwang Joel Saltz 
Note: This work was sponsored in part by NSF (ASC-9213821 and CDA9401151).  
Date: November 12, 1997  
Address: College Park, MD 20742  
Affiliation: Department of Computer Science University of Maryland  
Abstract: This paper presents a technique for dependence analysis on programs with pointers or dynamic recursive data structures. It differs from previously proposed approaches in analyzing structure access conflicts between traversal patterns before gathering alias and connection information. Conflict analysis is conducted under the assumption that each unique path leads to a distinct storage location, and hence traversal patterns can be analytically compared to identify possible conflicts. The rationale of this assumption is that if statements are deemed to be dependent by this approach, they are inherently sequential regardless of the shapes of the data structures they traverse. Consequently, there is no need to perform alias/connection analysis on the statements that construct such data structures. Furthermore, the information of traversal patterns gathered in conflict analysis phase can direct alias/connection analysis algorithm to focus on statements that are crucial to optimizations or parallelization. A such traversal pattern-sensitive pointer analysis algorithm will also be presented. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> David R. Chase, Mark Wegman, and F. Kenneth Zadeck. </author> <title> Analysis of pointers and structures. </title> <journal> SIGPLAN Notices, </journal> <volume> 25(6) </volume> <pages> 296-310, </pages> <month> June </month> <year> 1990. </year> <booktitle> Proceedings of the ACM SIGPLAN '90 Conference on Programming Language Design and Implementation. </booktitle>
Reference-contexts: There have been several algorithms proposed by researchers [7, 8, 9, 10, 14]. It is a considerably complicated problem, since it involves other pointer analysis techniques as well, such as alias analysis [2, 4, 5, 12, 20], side effect analysis [2, 13], and even shape analysis <ref> [1, 6, 16, 18] </ref>. These proposed dependence analysis techniques first identify aliases of pointer variables and connections of recursive data structures by examining all pointer assignment statements, and then apply the information to dependence test after read and write sets are gathered. <p> The shape graphs presented in this paper are closely related to the Storage Shape Graph (SSG) proposed by Chase et al. <ref> [1] </ref>, the Abstract Storage Graph (ASG) by Plevyak et al. [16], and Shape-Graphs by Sagiv et al. [18] Shape graphs have two types of nodes: pointer stances and storage nodes, which can be further divided into simple nodes that represent allocated allocations and summary nodes each of which represents a set <p> Other proposed shape analysis methods can not handle destructive updating <ref> [1, 6, 16] </ref>. Symbolic path expressions have been proposed by other researchers [4, 14]. Larus and Hilfinger used path expressions to specify nodes in alias graphs [14], whereas Deutsch paired symbolic access paths to represent alias information between recursive data structures [4].
Reference: [2] <author> Jong-Deok Choi, Michael Burke, and Paul Carini. </author> <title> Efficient flow-sensitive interprocedural computation of pointer-induced aliases and side effects. </title> <booktitle> In Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, </booktitle> <pages> pages 232-245, </pages> <address> Charleston, South Carolina, </address> <month> January </month> <year> 1993. </year>
Reference-contexts: There have been several algorithms proposed by researchers [7, 8, 9, 10, 14]. It is a considerably complicated problem, since it involves other pointer analysis techniques as well, such as alias analysis <ref> [2, 4, 5, 12, 20] </ref>, side effect analysis [2, 13], and even shape analysis [1, 6, 16, 18]. <p> There have been several algorithms proposed by researchers [7, 8, 9, 10, 14]. It is a considerably complicated problem, since it involves other pointer analysis techniques as well, such as alias analysis [2, 4, 5, 12, 20], side effect analysis <ref> [2, 13] </ref>, and even shape analysis [1, 6, 16, 18]. These proposed dependence analysis techniques first identify aliases of pointer variables and connections of recursive data structures by examining all pointer assignment statements, and then apply the information to dependence test after read and write sets are gathered.
Reference: [3] <author> Ron Cytron, Jeanne Ferrante, Barry K. Rosen, Mark N. Wegman, and F. Kenneth Zadeck. </author> <title> Efficiently computing static single assignment form and the control dependence graph. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 13(4) </volume> <pages> 451-490, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: Note that although the other possibility p:m = q:n is also valid, it is represented by two consecutive statements, t = q:n and p:m = t, for the reason of simplicity. 2.2 Intermediate Program Representation and Path Expressions Programs will be transformed into an SSA (Static Single Assignment) intermediate representation <ref> [3] </ref>. Although SSA form is designed specially for programs with fixed-location variables only, e.g. Fortran-77 2 programs, same transformation can be applied to pointer variables since contents (i.e. location addresses) of pointer variables can be treated as values in regular variables.
Reference: [4] <author> Alain Deutsch. </author> <title> Interprocedural May-Alias analysis for pointers: Beyond k-limiting. </title> <journal> SIGPLAN Notices, </journal> <volume> 29(6) </volume> <pages> 230-241, </pages> <month> June </month> <year> 1994. </year> <booktitle> Proceedings of the ACM SIGPLAN '94 Conference on Programming Language Design and Implementation. </booktitle>
Reference-contexts: There have been several algorithms proposed by researchers [7, 8, 9, 10, 14]. It is a considerably complicated problem, since it involves other pointer analysis techniques as well, such as alias analysis <ref> [2, 4, 5, 12, 20] </ref>, side effect analysis [2, 13], and even shape analysis [1, 6, 16, 18]. <p> It assumes that each unique path expression leads to a distinct location. Consequently, 4 elements of Read and W rite sets can be represented by path expressions. To determine if two path expressions can reach same locations, comparison operations similar to the M atch operation defined in Deutsch <ref> [4] </ref> can be applied. Since programs will be normalized, each reference pattern in Read or W rite sets will be either of two forms a pointer variable p or a simple binary access path p:n. <p> Other proposed shape analysis methods can not handle destructive updating [1, 6, 16]. Symbolic path expressions have been proposed by other researchers <ref> [4, 14] </ref>. Larus and Hilfinger used path expressions to specify nodes in alias graphs [14], whereas Deutsch paired symbolic access paths to represent alias information between recursive data structures [4]. On the contrary, path expressions are used in this paper to specify traversal patterns. <p> Symbolic path expressions have been proposed by other researchers [4, 14]. Larus and Hilfinger used path expressions to specify nodes in alias graphs [14], whereas Deutsch paired symbolic access paths to represent alias information between recursive data structures <ref> [4] </ref>. On the contrary, path expressions are used in this paper to specify traversal patterns.
Reference: [5] <author> Maryam Emami, Rakesh Ghiya, and Laurie J. Hendren. </author> <title> Context-sensitive interprocedural Points-to analysis in the presence of function pointers. </title> <journal> SIGPLAN Notices, </journal> <volume> 29(6) </volume> <pages> 242-256, </pages> <month> June </month> <year> 1994. </year> <booktitle> Proceedings of the ACM SIGPLAN '94 Conference on Programming Language Design and Implementation. </booktitle>
Reference-contexts: There have been several algorithms proposed by researchers [7, 8, 9, 10, 14]. It is a considerably complicated problem, since it involves other pointer analysis techniques as well, such as alias analysis <ref> [2, 4, 5, 12, 20] </ref>, side effect analysis [2, 13], and even shape analysis [1, 6, 16, 18].
Reference: [6] <author> Rakesh Ghiya and Laurie J. Hendren. </author> <title> Is it a tree, a DAG, or a cyclic graph? A shape analysis for heap-directed pointers in C. </title> <booktitle> In Conference Record of POPL '96: 23nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, </booktitle> <pages> pages 1-15, </pages> <address> St. Petersburg Beach, Florida, </address> <month> January </month> <year> 1996. </year>
Reference-contexts: There have been several algorithms proposed by researchers [7, 8, 9, 10, 14]. It is a considerably complicated problem, since it involves other pointer analysis techniques as well, such as alias analysis [2, 4, 5, 12, 20], side effect analysis [2, 13], and even shape analysis <ref> [1, 6, 16, 18] </ref>. These proposed dependence analysis techniques first identify aliases of pointer variables and connections of recursive data structures by examining all pointer assignment statements, and then apply the information to dependence test after read and write sets are gathered. <p> The results of alias/connection analysis on this type of programs will show that constructed data structures are cyclic and hence provide no useful information for parallelization or optimizations <ref> [6] </ref>. Furthermore, if programs are inherently sequential regardless of connections of recursive data structures, prior knowledge of traversal patterns can avoid unnecessary alias/connection analysis. Another implication is that access conflicts can not be judged by the sets of reference patterns alone. <p> Other proposed shape analysis methods can not handle destructive updating <ref> [1, 6, 16] </ref>. Symbolic path expressions have been proposed by other researchers [4, 14]. Larus and Hilfinger used path expressions to specify nodes in alias graphs [14], whereas Deutsch paired symbolic access paths to represent alias information between recursive data structures [4].
Reference: [7] <author> Vincent A. Guarna, Jr. </author> <title> A technique for analyzing pointer and structure references in parallel restructuring compilers. </title> <booktitle> In Proceedings of 1988 International Conference on Parallel Processing, </booktitle> <volume> Volume 2, </volume> <pages> pages 212-220, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: 1 Introduction Dependence analysis is the key technique behind parallelization and optimizations on programs with pointers or recursive data structures. There have been several algorithms proposed by researchers <ref> [7, 8, 9, 10, 14] </ref>. It is a considerably complicated problem, since it involves other pointer analysis techniques as well, such as alias analysis [2, 4, 5, 12, 20], side effect analysis [2, 13], and even shape analysis [1, 6, 16, 18]. <p> The result of this program execution is to turn a circular list into an unshared list. The shape graphs for this program, shown in Figure 11, demonstrate this ability. 5 Related Work Various dependence analysis techniques have been proposed for programs with pointers or dynamic recursive data structures <ref> [7, 8, 9, 10, 14] </ref>. Horwitz et al. developed an algorithm to determine dependence by detecting interferences in reaching stores [9], while Larus and Hilfinger proposed to identify access conflicts on alias graphs [14]. <p> The approach proposed by Guarna, Jr. is similar to this work since it determines dependence between patterns of traversal using syntax tree matching <ref> [7] </ref>. However, multiple syntax trees would be generated for each pointer if aliases exist, and syntax trees might be complicated caused by structure traversal by sequences of statements. Unlike the above techniques, the method proposed by Hummel et al. relies on alias information provided by users [10].
Reference: [8] <author> Laurie J. Hendren and Alexandru Nicolau. </author> <title> Parallelizing programs with recursive data structures. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 1(1) </volume> <pages> 35-47, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Dependence analysis is the key technique behind parallelization and optimizations on programs with pointers or recursive data structures. There have been several algorithms proposed by researchers <ref> [7, 8, 9, 10, 14] </ref>. It is a considerably complicated problem, since it involves other pointer analysis techniques as well, such as alias analysis [2, 4, 5, 12, 20], side effect analysis [2, 13], and even shape analysis [1, 6, 16, 18]. <p> (S 1 ) " (Read (S 2 ) [ W rite (S 2 ))) [ (W rite (S 2 ) " (Read (S 1 ) [ W rite (S 1 ))) 6= ; In contrast to other techniques, this approach does not build graphs or matrices to represent connection information <ref> [8, 14] </ref>. It assumes that each unique path expression leads to a distinct location. Consequently, 4 elements of Read and W rite sets can be represented by path expressions. <p> The result of this program execution is to turn a circular list into an unshared list. The shape graphs for this program, shown in Figure 11, demonstrate this ability. 5 Related Work Various dependence analysis techniques have been proposed for programs with pointers or dynamic recursive data structures <ref> [7, 8, 9, 10, 14] </ref>. Horwitz et al. developed an algorithm to determine dependence by detecting interferences in reaching stores [9], while Larus and Hilfinger proposed to identify access conflicts on alias graphs [14]. <p> Furthermore, this store-based approach might miss the dependence between pointer variables. In contrast to these approaches, Hendren and Nicolau used path matrices to record connection information among pointers and presented a technique to recognize interferences between computations for programs with acyclic structures <ref> [8] </ref>. The approach proposed by Guarna, Jr. is similar to this work since it determines dependence between patterns of traversal using syntax tree matching [7].
Reference: [9] <author> Susan Horwitz, Phil Pfeiffer, and Thomas Reps. </author> <title> Dependence analysis for pointer variables. </title> <journal> SIGPLAN Notices, </journal> <volume> 24(7) </volume> <pages> 28-40, </pages> <month> July </month> <year> 1989. </year> <booktitle> Proceedings of the ACM SIGPLAN '89 Conference on Programming Language Design and Implementation. </booktitle>
Reference-contexts: 1 Introduction Dependence analysis is the key technique behind parallelization and optimizations on programs with pointers or recursive data structures. There have been several algorithms proposed by researchers <ref> [7, 8, 9, 10, 14] </ref>. It is a considerably complicated problem, since it involves other pointer analysis techniques as well, such as alias analysis [2, 4, 5, 12, 20], side effect analysis [2, 13], and even shape analysis [1, 6, 16, 18]. <p> The result of this program execution is to turn a circular list into an unshared list. The shape graphs for this program, shown in Figure 11, demonstrate this ability. 5 Related Work Various dependence analysis techniques have been proposed for programs with pointers or dynamic recursive data structures <ref> [7, 8, 9, 10, 14] </ref>. Horwitz et al. developed an algorithm to determine dependence by detecting interferences in reaching stores [9], while Larus and Hilfinger proposed to identify access conflicts on alias graphs [14]. <p> Horwitz et al. developed an algorithm to determine dependence by detecting interferences in reaching stores <ref> [9] </ref>, while Larus and Hilfinger proposed to identify access conflicts on alias graphs [14].
Reference: [10] <author> Joseph Hummel, Laurie J. Hendren, and Alexandru Nicolau. </author> <title> A general data dependence test for dynamic, pointer-based data structures. </title> <journal> SIGPLAN Notices, </journal> <volume> 29(6) </volume> <pages> 218-229, </pages> <month> June </month> <year> 1994. </year> <booktitle> Proceedings of the ACM SIGPLAN '94 Conference on Programming Language Design and Implementation. </booktitle>
Reference-contexts: 1 Introduction Dependence analysis is the key technique behind parallelization and optimizations on programs with pointers or recursive data structures. There have been several algorithms proposed by researchers <ref> [7, 8, 9, 10, 14] </ref>. It is a considerably complicated problem, since it involves other pointer analysis techniques as well, such as alias analysis [2, 4, 5, 12, 20], side effect analysis [2, 13], and even shape analysis [1, 6, 16, 18]. <p> The result of this program execution is to turn a circular list into an unshared list. The shape graphs for this program, shown in Figure 11, demonstrate this ability. 5 Related Work Various dependence analysis techniques have been proposed for programs with pointers or dynamic recursive data structures <ref> [7, 8, 9, 10, 14] </ref>. Horwitz et al. developed an algorithm to determine dependence by detecting interferences in reaching stores [9], while Larus and Hilfinger proposed to identify access conflicts on alias graphs [14]. <p> However, multiple syntax trees would be generated for each pointer if aliases exist, and syntax trees might be complicated caused by structure traversal by sequences of statements. Unlike the above techniques, the method proposed by Hummel et al. relies on alias information provided by users <ref> [10] </ref>. Commutativity analysis proposed by Rinard and Diniz is another approach for parallelization [17]. It is designed for objected-based programs and can discover when operations of objects commute. The distinct feature of this work is that conflict analysis is performed before alias/connection analysis phase.
Reference: [11] <author> Yuan-Shin Hwang and Joel Saltz. </author> <title> Identifying DEF/USE information of statements that construct and traverse dynamic recursive data structures. </title> <booktitle> In Proceedings of 10th International Workshop on Languages and Compilers for Parallel Computing, </booktitle> <institution> University of Minnesota, </institution> <month> August </month> <year> 1997. </year> <note> Available via anonymous ftp directory hyena.cs.umd.edu:/pub/shin/papers/lcpc97.ps.gz. </note>
Reference-contexts: One implication of this approach is that all alias/connection information must be gathered, since patterns of traversal are unknown in this phase. The drawback is that information of aliases and connections might be inappropriate for interference/conflict analysis <ref> [11] </ref>. Consider programs that construct cyclic recursive data structures but have acyclic traversal patterns, e.g. graph algorithms that traverse cyclic graphs following acyclic spanning trees. <p> Only the reference patterns of those program fragments with parallelism will be mapped onto possible aliases and connections by alias/connection analysis phase to confirm the results of the first phase. The DEF/USE information of pointer statements will be used to connect these two analysis phases <ref> [11] </ref>. The special feature of this approach is its ability to identify traversal patterns and estimate possible shapes of the structures specified by the traversal patterns. The first advantage of this approach is that it simplifies the interference/conflict analysis process. <p> of loops are part of loop header nodes. 2.4 Algorithm Outline The algorithm to perform dependence analysis can be broken into three steps. * DEF/USE Information Construction This step identifies aliases of pointer variables induced by aliasing statements, and constructs DEF/USE chains between link defining statements and link traversing statements <ref> [11] </ref>. * Dependence Analysis Dependence test is performed on references based on the assumption that each unique path expression leads to a distinct location. Any programs which are deemed to be dependent in this process are inherently sequential regardless of the shapes of actual data structures. <p> That is, the computations of the iterations of such loop carry no dependence. Therefore, the algorithm in this section will identify the loops with this property. 3.2.1 Alias Information and Path Expressions Aliases of pointer variables are gathered during the DEF/USE construction phase <ref> [11] </ref>. The process is performed iteratively until a fixed point is achieved. Pointer variables in a loop can be classified into three groups: global pointers, local pointers, and iteration pointers. <p> The outcome of conflict analysis will be forwarded to guide traversal-pattern-sensitive pointer analysis. This dependence analysis approach was briefly outlined in <ref> [11] </ref> and a simple shape analysis was also presented, which could only handle programs without destructive updating. This paper develops an algorithm to perform such dependence analysis. Furthermore, the shape analysis algorithm presented in this paper uses a different approach and can handle destructive updating such as list reverse operations.
Reference: [12] <author> William Landi and Barbara G. Ryder. </author> <title> A safe approximate algorithm for interprocedural pointer aliasing. </title> <journal> SIGPLAN Notices, </journal> <volume> 27(7) </volume> <pages> 235-248, </pages> <month> July </month> <year> 1992. </year> <booktitle> Proceedings of the ACM SIGPLAN '92 Conference on Programming Language Design and Implementation. </booktitle>
Reference-contexts: There have been several algorithms proposed by researchers [7, 8, 9, 10, 14]. It is a considerably complicated problem, since it involves other pointer analysis techniques as well, such as alias analysis <ref> [2, 4, 5, 12, 20] </ref>, side effect analysis [2, 13], and even shape analysis [1, 6, 16, 18].
Reference: [13] <author> William Landi, Barbara G. Ryder, and Sean Zhang. </author> <title> Interprocedural side effect analysis with pointer aliasing. </title> <journal> SIGPLAN Notices, </journal> <volume> 28(6) </volume> <pages> 56-67, </pages> <month> June </month> <year> 1993. </year> <booktitle> Proceedings of the ACM SIGPLAN '93 Conference on Programming Language Design and Implementation. </booktitle>
Reference-contexts: There have been several algorithms proposed by researchers [7, 8, 9, 10, 14]. It is a considerably complicated problem, since it involves other pointer analysis techniques as well, such as alias analysis [2, 4, 5, 12, 20], side effect analysis <ref> [2, 13] </ref>, and even shape analysis [1, 6, 16, 18]. These proposed dependence analysis techniques first identify aliases of pointer variables and connections of recursive data structures by examining all pointer assignment statements, and then apply the information to dependence test after read and write sets are gathered.
Reference: [14] <author> James R. Larus and Paul N. Hilfinger. </author> <title> Detecting conflicts between structure accesses. </title> <journal> SIGPLAN Notices, </journal> <volume> 23(7) </volume> <pages> 21-34, </pages> <month> July </month> <year> 1988. </year> <booktitle> Proceedings of the ACM SIGPLAN '88 Conference on Programming Language Design and Implementation. </booktitle> <pages> 16 </pages>
Reference-contexts: 1 Introduction Dependence analysis is the key technique behind parallelization and optimizations on programs with pointers or recursive data structures. There have been several algorithms proposed by researchers <ref> [7, 8, 9, 10, 14] </ref>. It is a considerably complicated problem, since it involves other pointer analysis techniques as well, such as alias analysis [2, 4, 5, 12, 20], side effect analysis [2, 13], and even shape analysis [1, 6, 16, 18]. <p> (S 1 ) " (Read (S 2 ) [ W rite (S 2 ))) [ (W rite (S 2 ) " (Read (S 1 ) [ W rite (S 1 ))) 6= ; In contrast to other techniques, this approach does not build graphs or matrices to represent connection information <ref> [8, 14] </ref>. It assumes that each unique path expression leads to a distinct location. Consequently, 4 elements of Read and W rite sets can be represented by path expressions. <p> The result of this program execution is to turn a circular list into an unshared list. The shape graphs for this program, shown in Figure 11, demonstrate this ability. 5 Related Work Various dependence analysis techniques have been proposed for programs with pointers or dynamic recursive data structures <ref> [7, 8, 9, 10, 14] </ref>. Horwitz et al. developed an algorithm to determine dependence by detecting interferences in reaching stores [9], while Larus and Hilfinger proposed to identify access conflicts on alias graphs [14]. <p> Horwitz et al. developed an algorithm to determine dependence by detecting interferences in reaching stores [9], while Larus and Hilfinger proposed to identify access conflicts on alias graphs <ref> [14] </ref>. These methods build either stores or alias graphs to represent associations of pointers and 14 storage locations, and the former imposes the k-limited rule to limit store sizes while the alias graphs of the latter method are not ideal for analyzing loop iterations. <p> Other proposed shape analysis methods can not handle destructive updating [1, 6, 16]. Symbolic path expressions have been proposed by other researchers <ref> [4, 14] </ref>. Larus and Hilfinger used path expressions to specify nodes in alias graphs [14], whereas Deutsch paired symbolic access paths to represent alias information between recursive data structures [4]. On the contrary, path expressions are used in this paper to specify traversal patterns. <p> Other proposed shape analysis methods can not handle destructive updating [1, 6, 16]. Symbolic path expressions have been proposed by other researchers [4, 14]. Larus and Hilfinger used path expressions to specify nodes in alias graphs <ref> [14] </ref>, whereas Deutsch paired symbolic access paths to represent alias information between recursive data structures [4]. On the contrary, path expressions are used in this paper to specify traversal patterns.
Reference: [15] <author> N.K. Madsen. </author> <title> Divergence preserving discrete surface integral methods for maxwel l's curl equations using non-orthogonal grids. </title> <type> Technical Report 92.04, </type> <institution> RIACS, </institution> <month> February </month> <year> 1992. </year>
Reference-contexts: It demonstrates that not much parallelism is available among these statements. On the other hand, Figure 2 (b) depicts the dependence graph of a simplified version of EM3D loop <ref> [15] </ref>, which is displayed in Figure 3. This graph shows that the two sequences of statements S11-S12 and S21-S22 can be executed independently, i.e. the loops that traverse lists of E nodes and H nodes respectively can be executed independently.
Reference: [16] <author> J. Plevyak, A. Chien, and V. Karamcheti. </author> <title> Analysis of dynamic structures for efficient parallel execution. </title> <booktitle> In Proceedings of the 6th International Workshop on Languages and Compilers for Parallel Computing, </booktitle> <pages> pages 37-56, </pages> <address> Portland, Oregon, </address> <month> August </month> <year> 1993. </year> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. 768, </volume> <publisher> Springer Verlag. </publisher>
Reference-contexts: There have been several algorithms proposed by researchers [7, 8, 9, 10, 14]. It is a considerably complicated problem, since it involves other pointer analysis techniques as well, such as alias analysis [2, 4, 5, 12, 20], side effect analysis [2, 13], and even shape analysis <ref> [1, 6, 16, 18] </ref>. These proposed dependence analysis techniques first identify aliases of pointer variables and connections of recursive data structures by examining all pointer assignment statements, and then apply the information to dependence test after read and write sets are gathered. <p> The shape graphs presented in this paper are closely related to the Storage Shape Graph (SSG) proposed by Chase et al. [1], the Abstract Storage Graph (ASG) by Plevyak et al. <ref> [16] </ref>, and Shape-Graphs by Sagiv et al. [18] Shape graphs have two types of nodes: pointer stances and storage nodes, which can be further divided into simple nodes that represent allocated allocations and summary nodes each of which represents a set of allocated locations. <p> Other proposed shape analysis methods can not handle destructive updating <ref> [1, 6, 16] </ref>. Symbolic path expressions have been proposed by other researchers [4, 14]. Larus and Hilfinger used path expressions to specify nodes in alias graphs [14], whereas Deutsch paired symbolic access paths to represent alias information between recursive data structures [4].
Reference: [17] <author> Martin C. Rinard and Pedro C. Diniz. </author> <title> Commutativity analysis: A new analysis framework for parallelizing compilers. </title> <journal> SIGPLAN Notices, </journal> <volume> 31(5) </volume> <pages> 54-67, </pages> <month> May </month> <year> 1996. </year> <booktitle> Proceedings of the ACM SIGPLAN '96 Conference on Programming Language Design and Implementation. </booktitle>
Reference-contexts: Unlike the above techniques, the method proposed by Hummel et al. relies on alias information provided by users [10]. Commutativity analysis proposed by Rinard and Diniz is another approach for parallelization <ref> [17] </ref>. It is designed for objected-based programs and can discover when operations of objects commute. The distinct feature of this work is that conflict analysis is performed before alias/connection analysis phase.
Reference: [18] <author> Mooly Sagiv, Thomas Reps, and Reinhard Wilhelm. </author> <title> Solving shape-analysis problems in languages with destructive updating. </title> <booktitle> In Conference Record of POPL '96: 23nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, </booktitle> <pages> pages 16-31, </pages> <address> St. Petersburg Beach, Florida, </address> <month> January </month> <year> 1996. </year>
Reference-contexts: There have been several algorithms proposed by researchers [7, 8, 9, 10, 14]. It is a considerably complicated problem, since it involves other pointer analysis techniques as well, such as alias analysis [2, 4, 5, 12, 20], side effect analysis [2, 13], and even shape analysis <ref> [1, 6, 16, 18] </ref>. These proposed dependence analysis techniques first identify aliases of pointer variables and connections of recursive data structures by examining all pointer assignment statements, and then apply the information to dependence test after read and write sets are gathered. <p> This algorithm is adapted from the shape analysis algorithm proposed by Sagiv et al <ref> [18] </ref>. The main difference is its ability to represent the links of main traversal structures and to maintain the connection information of secondary 8 traversal links on the same shape graphs. <p> The shape graphs presented in this paper are closely related to the Storage Shape Graph (SSG) proposed by Chase et al. [1], the Abstract Storage Graph (ASG) by Plevyak et al. [16], and Shape-Graphs by Sagiv et al. <ref> [18] </ref> Shape graphs have two types of nodes: pointer stances and storage nodes, which can be further divided into simple nodes that represent allocated allocations and summary nodes each of which represents a set of allocated locations. <p> New storage nodes can be created by calling the storage allocation function new () or extracted from summary nodes by link traversing statements (it is called materialization <ref> [18] </ref>). On the other hand, storage nodes will be removed when they are no longer reachable, or be absorbed by summary nodes when they are not directly connected to any pointer instances (i.e. summarization). <p> This paper develops an algorithm to perform such dependence analysis. Furthermore, the shape analysis algorithm presented in this paper uses a different approach and can handle destructive updating such as list reverse operations. The shape analysis algorithm is adapted from the approach proposed by Sagiv et al <ref> [18] </ref>. The main difference is its ability to represent the links of main traversal structures and to maintain the connection information of secondary traversal edges on the same shape graphs, and hence it is an ideal technique for traversal-pattern-sensitive shape analysis.
Reference: [19] <author> Reinhard von Hanxleden and Ken Kennedy. </author> <title> Give-N-Take A balanced code placement framework. </title> <journal> SIGPLAN Notices, </journal> <volume> 29(6) </volume> <pages> 107-120, </pages> <month> June </month> <year> 1994. </year> <booktitle> Proceedings of the ACM SIGPLAN '94 Conference on Programming Language Design and Implementation. </booktitle>
Reference-contexts: The control flow information is represented by interval flow graphs <ref> [19] </ref>. The advantage of interval flow graphs is that interval analysis can be performed without explicitly constructing a sequence of graphs in which intervals are recursive collapsed into single nodes.
Reference: [20] <author> Robert P. Wilson and Monica S. Lam. </author> <title> Efficient context-sensitive pointer analysis for C programs. </title> <journal> SIGPLAN Notices, </journal> <volume> 30(6) </volume> <pages> 1-12, </pages> <month> June </month> <year> 1995. </year> <booktitle> Proceedings of the ACM SIGPLAN '95 Conference on Programming Language Design and Implementation. </booktitle> <pages> 17 </pages>
Reference-contexts: There have been several algorithms proposed by researchers [7, 8, 9, 10, 14]. It is a considerably complicated problem, since it involves other pointer analysis techniques as well, such as alias analysis <ref> [2, 4, 5, 12, 20] </ref>, side effect analysis [2, 13], and even shape analysis [1, 6, 16, 18].
References-found: 20

