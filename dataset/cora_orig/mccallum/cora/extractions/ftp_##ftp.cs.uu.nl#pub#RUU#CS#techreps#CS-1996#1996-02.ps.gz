URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1996/1996-02.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: A partial k-arboretum of graphs with bounded treewidth  
Author: Hans L. Bodlaender 
Abstract: The notion of treewidth has seen to be a powerful vehicle for many graph algorithmic studies. This survey paper wants to give an overview of many classes of graphs that can be seen to have a uniform upper bound on the treewidth of graphs in the class. Also, some mutual relations between such classes are discussed.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Aggarwal, M. Klawe, D. Lichtenstein, N. Linial, and A. Wigderson, </author> <title> A lower bound on the area of permutation layents, </title> <journal> Algorithmica, </journal> <volume> 6 (1991), </volume> <pages> pp. 241-255. </pages>
Reference-contexts: The maximum distance of a face to the exterior face is called the radius [72]. * The maximum distance (using the usual notion of distance in a graph) in G of a vertex to a vertex on the outer face is called the width [35] or gauge <ref> [1] </ref>. * Call two vertices adjacent, if they share a face, and call the outer face adjacent to all vertices on the outer facial cycle. The maximum distance of a vertex to the outer face is called the outerplanarity [7]. * Call two faces adjacent when they share an edge.
Reference: [2] <author> S. Arnborg, </author> <title> Efficient algorithms for combinatorial problems on graphs with bounded decomposability A survey, </title> <journal> BIT, </journal> <volume> 25 (1985), </volume> <pages> pp. 2-23. </pages>
Reference-contexts: The algorithm of Arnborg et al. [3] to determine in O (n k+2 ) time whether a given graph G = (V; E) has treewidth at most k is based on the charac-terisation of graphs with treewidth at most k as k-decomposable graphs. Definition.[See <ref> [2] </ref>] A graph G = (V; E) is k-decomposable, if one of the following two conditions holds: 1. G has at most k + 1 vertices. 2. <p> and w 2 S)g) are k-decomposable (1 i m). (I.e., take G [S [ S i ] and make every two vertices in S adjacent.) Theorem 25 (Arnborg and Proskurowski [5]) A graph G = (V; E) is a partial k-tree, if and only if G is k-decomposable. (See also <ref> [2] </ref>.) We will later see that a graph is a partial k-tree, if and only if it has treewidth at most k (Theorem 35). Another related framework has been developed by Hohberg and Reischuk [47, 48]. Definition. <p> Arnborg and Proskurowski [5] have derived sets of rules to rewrite graphs into smaller graphs with the same treewidth for graphs with treewidth at most 1, 2, or 3. These rules are shown in Figure 2. See also <ref> [2] </ref>. 14 3 Theorem 33 (Arnborg and Proskurowski [5]) (i) A graph has treewidth 0, if and only if it can be rewritten to the empty graph, using rule (i) from figure 2. (ii) A graph has treewidth 1, if and only if it can be rewritten to the empty graph, <p> A graph G has dimension k with respect to f , if max 1ijV j jS i j = k. The dimension of a graph G is the minimum dimension over all elimination orderings of G. Theorem 36 (See Arnborg <ref> [2] </ref>) For every graph G = (V; E), the dimension of G equals the treewidth of G. 8 Graph grammars and recursive families of graphs In this section, we consider some types of graph grammars, the `recursive families of graphs' and their relationships to treewidth.
Reference: [3] <author> S. Arnborg, D. G. Corneil, and A. Proskurowski, </author> <title> Complexity of finding embeddings in a k-tree, </title> <journal> SIAM J. Alg. Disc. Meth., </journal> <volume> 8 (1987), </volume> <pages> pp. 277-284. </pages>
Reference-contexts: See the discussion above and in Section 13.1. Corollary 24 For every graph G = (V; E), pathwidth (G) = O (treewidth (G) log n). The algorithm of Arnborg et al. <ref> [3] </ref> to determine in O (n k+2 ) time whether a given graph G = (V; E) has treewidth at most k is based on the charac-terisation of graphs with treewidth at most k as k-decomposable graphs.
Reference: [4] <author> S. Arnborg, B. Courcelle, A. Proskurowski, and D. Seese, </author> <title> An algebraic theory of graph reduction, </title> <journal> J. ACM, </journal> <volume> 40 (1993), </volume> <pages> pp. 1134-1164. </pages>
Reference-contexts: An example of a graph with treewidth 3 that is rewritten to the empty graph is given in Figure 3. In <ref> [4] </ref>, Arnborg et al show a much more general result.
Reference: [5] <author> S. Arnborg and A. Proskurowski, </author> <title> Characterization and recognition of partial 3-trees, </title> <journal> SIAM J. Alg. Disc. Meth., </journal> <volume> 7 (1986), </volume> <pages> pp. 305-314. </pages>
Reference-contexts: S; f (v; w) j v; w 2 S i [ S; (v; w) 2 E or (v 2 S and w 2 S)g) are k-decomposable (1 i m). (I.e., take G [S [ S i ] and make every two vertices in S adjacent.) Theorem 25 (Arnborg and Proskurowski <ref> [5] </ref>) A graph G = (V; E) is a partial k-tree, if and only if G is k-decomposable. (See also [2].) We will later see that a graph is a partial k-tree, if and only if it has treewidth at most k (Theorem 35). <p> This bound may not be sharp. 7 Graph rewriting and elimination orderings In this section, we consider several aspects of the rewriting of graphs to other, in general smaller, graphs. The related subject of graph grammars is discussed in the next section. Arnborg and Proskurowski <ref> [5] </ref> have derived sets of rules to rewrite graphs into smaller graphs with the same treewidth for graphs with treewidth at most 1, 2, or 3. These rules are shown in Figure 2. See also [2]. 14 3 Theorem 33 (Arnborg and Proskurowski [5]) (i) A graph has treewidth 0, if <p> Arnborg and Proskurowski <ref> [5] </ref> have derived sets of rules to rewrite graphs into smaller graphs with the same treewidth for graphs with treewidth at most 1, 2, or 3. These rules are shown in Figure 2. See also [2]. 14 3 Theorem 33 (Arnborg and Proskurowski [5]) (i) A graph has treewidth 0, if and only if it can be rewritten to the empty graph, using rule (i) from figure 2. (ii) A graph has treewidth 1, if and only if it can be rewritten to the empty graph, using rules (i) and (ii) from figure 2.
Reference: [6] <author> S. Arnborg, A. Proskurowski, and D. G. Corneil, </author> <title> Forbidden minors characterization of partial 3-trees, </title> <journal> Disc. Math., </journal> <volume> 80 (1990), </volume> <pages> pp. 1-19. </pages>
Reference-contexts: (V; E) has treewidth at most 1, if and only if G does not contain K 3 as a minor. (ii) A graph G = (V; E) has treewidth at most 2, if and only if G does not contain K 4 as a minor. (iii) (Arnborg, Proskurowski, and Corneil <ref> [6] </ref>) A graph G = (V; E) has treewidth at most 3, if and only if it does not contain any of the four graphs, shown in Figure 1 as a minor. The obstruction sets of graphs with pathwidth 1 and 2 are also known [52].
Reference: [7] <author> B. S. Baker, </author> <title> Approximation algorithms for NP-complete problems on planar graphs, </title> <journal> J. ACM, </journal> <volume> 41 (1994), </volume> <pages> pp. 153-180. </pages>
Reference-contexts: The maximum distance of a vertex to the outer face is called the outerplanarity <ref> [7] </ref>. * Call two faces adjacent when they share an edge. The maximum dis tance of a face to the outer face is called the depth [11]. <p> The radius, width, outerplanarity, and depth of a planar graph G is the minimum radius, width, etc., over all possible plane embeddings of G. Another, equivalent definition of the notion `outerplanarity' is the following (see <ref> [7] </ref>). Definition. An embedding of a graph G = (V; E) is 1-outerplanar, if it is planar, and all vertices lie on the exterior face.
Reference: [8] <author> M. Bauderon and B. Courcelle, </author> <title> Graph expressions and graph rewritings, </title> <journal> Mathematical Systems Theory, </journal> <volume> 20 (1987), </volume> <pages> pp. 83-127. </pages>
Reference-contexts: We only give an informal description here: for a 18 good introduction to this topic, see e.g. [45, 46]. The framework of context free graph grammars of Bauderon and Courcelle is essentially similar <ref> [8] </ref>. See also [66]. Hyperedge replacement grammars work with hypergraphs, where each hyperedge is represented as a sequence of vertices. A hyperedge also has a label, which is either a terminal label, or a non-terminal label.
Reference: [9] <author> M. W. Bern, E. L. Lawler, and A. L. Wong, </author> <title> Linear time computation of optimal subgraphs of decomposable graphs, </title> <journal> J. Algorithms, </journal> <volume> 8 (1987), </volume> <pages> pp. 216-235. </pages>
Reference-contexts: While the differences between Bories and Wimers formalisms are not very large, I prefer the former as I find it somewhat simpler and more elegant. Courcelles framework is much more general and more precise, but is difficult to master for readers with little algebraic backgrounds. See also <ref> [9] </ref>. A terminal graph is a triple G = (V; E; T ), where (V; E) is an undirected graph, and T V is on ordered set of distinguished vertices, known as the terminals of G.
Reference: [10] <author> D. Bienstock, </author> <title> Graph searching, path-width, tree-width and related problems (a survey), </title> <journal> DIMACS Ser. in Discrete Mathematics and Theoretical Computer Science, </journal> <volume> 5 (1991), </volume> <pages> pp. 33-49. </pages>
Reference-contexts: A more extensive overview on graph searching, treewidth, pathwidth, and related notions has been made by Bienstock <ref> [10] </ref>. We also discuss the notion of tangles in this section. Definition.
Reference: [11] <author> D. Bienstock and C. L. Monma, </author> <title> On the complexity of covering vertices by faces in a planar graph, </title> <journal> SIAM J. Comput., </journal> <volume> 17 (1988), </volume> <pages> pp. </pages> <month> 53-76. </month> <title> [12] , On the complexity of embedding planar graphs to minimize certain distance measures, </title> <journal> Algorithmica, </journal> <volume> 5 (1990), </volume> <pages> pp. 93-109. </pages>
Reference-contexts: The maximum distance of a vertex to the outer face is called the outerplanarity [7]. * Call two faces adjacent when they share an edge. The maximum dis tance of a face to the outer face is called the depth <ref> [11] </ref>. The radius, width, outerplanarity, and depth of a planar graph G is the minimum radius, width, etc., over all possible plane embeddings of G. Another, equivalent definition of the notion `outerplanarity' is the following (see [7]). Definition.
Reference: [13] <author> D. Bienstock, N. Robertson, P. D. Seymour, and R. Thomas, </author> <title> Quickly excluding a forest, </title> <journal> J. Comb. Theory Series B, </journal> <volume> 52 (1991), </volume> <pages> pp. 274-283. </pages>
Reference-contexts: Theorem 12 (Robertson and Seymour [70]) For every forest H there is an integer w H such that every graph with no minor isomorphic to H has pathwidth at most w H . Bienstock et al <ref> [13] </ref> show that in Theorem 12, one can take w H = jV H j2. A simpler and algorithmic proof, but with a much higher constant can be found in [28].

Reference: [21] <author> H. L. Bodlaender and J. Engelfriet, </author> <title> Domino treewidth, </title> <booktitle> in Proceedings 20th International Workshop on Graph Theoretic Concepts in Computer Science WG'94, </booktitle> <editor> E. W. Mayr, G. Schmidt, and G. Tin-hofer, eds., Springer Verlag, </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 903, </volume> <year> 1995, </year> <pages> pp. 1-13. </pages>
Reference-contexts: I.e., fl (G) = n 1, if G is a clique. Lemma 92 (Ramachandramurthi [68]) The treewidth of a graph G is at least fl (G). Ramachandramurthi [68] also gives characterisations of pathwidth and treewidth in terms of subgraphs that fulfil certain degree restrictions. Bodlaender and Engelfriet <ref> [21] </ref> introduced the notion of domino treewidth. Definition. <p> The domino treewidth of a graph G is the minimum width over all domino tree decompositions of G. Theorem 93 (Bodlaender and Engelfriet <ref> [21] </ref>) For every k, d 2 N, there exists k 0 2 N, such that every graph with treewidth at most k and maximum degree at most d has domino treewidth at most k 0 . <p> Trees have strong treewidth 1: take singleton sets X i , one for each vertex in the tree. Lemma 94 (Seese [95]) If the strong treewidth of G is at most k, then the treewidth of G is at most 2k 1. Theorem 95 (Bodlaender and Engelfriet <ref> [21] </ref>) For every class of graphs G, the following statements are equivalent: 1. There exists a constant c 2 N, such that every graph in G has domino treewidth at most c. 2.
Reference: [22] <author> H. L. Bodlaender, J. R. Gilbert, H. Hafsteinsson, and T. Kloks, </author> <title> Approximating treewidth, pathwidth, and minimum elimination tree height, </title> <journal> J. Algorithms, </journal> <volume> 18 (1995), </volume> <pages> pp. 238-255. </pages>
Reference-contexts: Also, all vertices in one component of G [V X i ] will be in the same subtree of the forest, obtained by removing i from T . Theorem 19 (See e.g., <ref> [75, 42, 62, 22] </ref>) If the treewidth of G = (V; E) is at most k, then G has a type-2 1 2 (n k)-separator of size at most k + 1. Lingas studied the strongly related classes of s (N )-separable graphs [60]. Definition.
Reference: [23] <author> H. L. Bodlaender and R. H. M ohring, </author> <title> The pathwidth and treewidth of cographs, </title> <journal> SIAM J. Disc. Meth., </journal> <volume> 6 (1993), </volume> <pages> pp. 181-188. </pages>
Reference-contexts: The minimum progressive black and white pebble demand over all di rectives of G is at most k + 1. The following lemma follows directly from the definitions. Lemma 3 For all graphs G, pathwidth (G) treewidth (G). A short proof of the following lemma can be found in <ref> [23] </ref>. Older, but longer proofs can be found in [15, 94]. 3 Lemma 4 (See [23]) Let (fX i j i 2 Ig; T = (I; F )) be a tree decomposition of G = (V; E), and let W V be a clique in G. <p> The following lemma follows directly from the definitions. Lemma 3 For all graphs G, pathwidth (G) treewidth (G). A short proof of the following lemma can be found in <ref> [23] </ref>. Older, but longer proofs can be found in [15, 94]. 3 Lemma 4 (See [23]) Let (fX i j i 2 Ig; T = (I; F )) be a tree decomposition of G = (V; E), and let W V be a clique in G. Then there exists an i 2 I with W X i . Lemma 5 (Bodlaender, Mohring [23]) Let (fX i <p> Lemma 4 (See <ref> [23] </ref>) Let (fX i j i 2 Ig; T = (I; F )) be a tree decomposition of G = (V; E), and let W V be a clique in G. Then there exists an i 2 I with W X i . Lemma 5 (Bodlaender, Mohring [23]) Let (fX i j i 2 Ig; T = (I; F )) be a tree decomposition of G = (V; E). Let W 1 ; W 2 V , and suppose f (v; w) j v 2 W 1 ; w 2 W 2 g E.
Reference: [24] <author> H. L. Bodlaender, R. B. Tan, D. M. Thilikos, and J. van Leeuwen, </author> <title> On interval routing schemes and treewidth, </title> <booktitle> in Proceedings 21th International Workshop on Graph Theoretic Concepts in Computer Science WG'95, </booktitle> <editor> M. Nagl, ed., Springer Verlag, </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 1017, </volume> <year> 1995, </year> <pages> pp. 181-186. </pages>
Reference-contexts: In some special cases, one can prove better bounds. For instance, for H = C k , the cycle with k vertices, then one can take in Theorem 13, c H = k1 [39]. For other special cases, similar bounds can be found in <ref> [18, 20, 24] </ref>. Perhaps the most important result proven by Robertson and Seymour in their series of papers on graph minors is the following. Theorem 14 (Robertson and Seymour) Let G 1 ; G 2 ; : : : be a countable sequence of graphs. <p> An (undirected) graph is said to be in k-IRS, if there exists a numbering of the vertices (processors), such that for all weight assignments to edges (links), there exists a label assignment to links, fulfilling the requirements described above. Theorem 97 (Bodlaender et al. <ref> [24] </ref>) If G 2 k-IRS, then the treewidth of G is at most 4k. 42 For details and more related results, the reader is referred to [24]. 15.3 Structured programs In a very recent paper, Thorup [100] makes a connection between the control-flow graphs of structured programs and treewidth. <p> Theorem 97 (Bodlaender et al. <ref> [24] </ref>) If G 2 k-IRS, then the treewidth of G is at most 4k. 42 For details and more related results, the reader is referred to [24]. 15.3 Structured programs In a very recent paper, Thorup [100] makes a connection between the control-flow graphs of structured programs and treewidth. Under a rather general definition of `structured program' (including goto-freeness), he shows the following result.
Reference: [25] <author> R. Borie and A. Gupta, </author> <title> Balanced decompositions for partial k-trees, </title> <journal> Congressus Numerantium, </journal> <volume> 98 (1993), </volume> <pages> pp. 33-38. 45 </pages>
Reference-contexts: Vogler has shown that hyperedge replacement grammars generate the same languages of simple graphs as BNLC grammars of bounded nonterminal degree [103]. 8.2 Recursive families of graphs In this section, we discuss the recursive families of graphs, as introduced in the work of Borie [26] (see also <ref> [25, 27] </ref>). Similar frameworks have been introduced by Courcelle (see e.g. [30, 31, 32, 33]) and by Wimer [104]. While the differences between Bories and Wimers formalisms are not very large, I prefer the former as I find it somewhat simpler and more elegant.
Reference: [26] <author> R. B. Borie, </author> <title> Recursively Constructed Graph Families, </title> <type> PhD thesis, </type> <institution> School of Information and Computer Science, Georgia Institute of Technology, </institution> <year> 1988. </year>
Reference-contexts: Vogler has shown that hyperedge replacement grammars generate the same languages of simple graphs as BNLC grammars of bounded nonterminal degree [103]. 8.2 Recursive families of graphs In this section, we discuss the recursive families of graphs, as introduced in the work of Borie <ref> [26] </ref> (see also [25, 27]). Similar frameworks have been introduced by Courcelle (see e.g. [30, 31, 32, 33]) and by Wimer [104]. While the differences between Bories and Wimers formalisms are not very large, I prefer the former as I find it somewhat simpler and more elegant. <p> ), and make i new adjacent to all distinguished nodes in the tree decompositions of G 1 , . . . , G c . 2 Many classes of graphs, known to have a uniform treewidth upper bound, can be seen to be a k-terminal recursive family of graphs (see <ref> [26, 104] </ref>). Specifically, we mention the following: Theorem 40 (See [104].) For every k: the class of graphs of treewidth at most k is a (k + 1)-terminal recursive family of graphs. Proof: A possible method to proof this is to use nice tree decompositions, see Lemma 7.
Reference: [27] <author> R. B. Borie, R. G. Parker, and C. A. Tovey, </author> <title> Automatic generation of linear-time algorithms from predicate calculus descriptions of problems on recursively constructed graph families, </title> <journal> Algorithmica, </journal> <volume> 7 (1992), </volume> <pages> pp. 555-581. </pages>
Reference-contexts: Vogler has shown that hyperedge replacement grammars generate the same languages of simple graphs as BNLC grammars of bounded nonterminal degree [103]. 8.2 Recursive families of graphs In this section, we discuss the recursive families of graphs, as introduced in the work of Borie [26] (see also <ref> [25, 27] </ref>). Similar frameworks have been introduced by Courcelle (see e.g. [30, 31, 32, 33]) and by Wimer [104]. While the differences between Bories and Wimers formalisms are not very large, I prefer the former as I find it somewhat simpler and more elegant.
Reference: [28] <author> K. Cattell, M. J. Dinneen, and M. R. Fellows, </author> <title> A simple linear-time algorithm for finding path-decompositions of small width. </title> <type> Manuscript. </type> <note> To appear in Inform. Proc. Letters, </note> <year> 1994. </year>
Reference-contexts: Bienstock et al [13] show that in Theorem 12, one can take w H = jV H j2. A simpler and algorithmic proof, but with a much higher constant can be found in <ref> [28] </ref>. Theorem 13 (Robertson and Seymour [75]) For every planar graph H there is an integer w H such that every graph with no minor isomorphic to H has treewidth at most w H .
Reference: [29] <author> F. R. K. Chung, </author> <title> On the cutwidth and topological bandwidth of a tree, </title> <journal> SIAM J. Alg. Disc. Meth., </journal> <volume> 6 (1985), </volume> <pages> pp. 268-277. </pages>
Reference-contexts: A sharp relation between the topological bandwidth and the cutwidth of trees was obtained by Chung <ref> [29] </ref>. Theorem 46 (Chung [29]) Let T be a tree with topological bandwidth k and cutwidth l. Then k l k + log 2 k + 2. Chung [29] also gives for every k, a tree with topological bandwidth k and cutwidth k + log 2 k 1. <p> A sharp relation between the topological bandwidth and the cutwidth of trees was obtained by Chung <ref> [29] </ref>. Theorem 46 (Chung [29]) Let T be a tree with topological bandwidth k and cutwidth l. Then k l k + log 2 k + 2. Chung [29] also gives for every k, a tree with topological bandwidth k and cutwidth k + log 2 k 1. <p> A sharp relation between the topological bandwidth and the cutwidth of trees was obtained by Chung <ref> [29] </ref>. Theorem 46 (Chung [29]) Let T be a tree with topological bandwidth k and cutwidth l. Then k l k + log 2 k + 2. Chung [29] also gives for every k, a tree with topological bandwidth k and cutwidth k + log 2 k 1. Theorem 47 For every graph G, the pathwidth of G is at most the cutwidth of G. <p> Theorem 48 For every graph G, the pathwidth of G is at most one larger than the modified cutwidth of G. For the relation between the topological bandwidth and cutwidth of a graph, see <ref> [29] </ref>. We also have the following relation between cutwidth and pathwidth.
Reference: [30] <author> B. Courcelle, </author> <title> Graph rewriting: an algebraic and logical approach, </title> <booktitle> in Handbook of Theoretical Computer Science, </booktitle> <volume> volume B, </volume> <editor> J. van Leeuwen, ed., </editor> <address> Amsterdam, 1990, </address> <publisher> North Holland Publ. Comp., </publisher> <pages> pp. </pages> <month> 192-242. </month> <title> [31] , The monadic second-order logic of graphs I: Recognizable sets of finite graphs, </title> <journal> Information and Computation, </journal> <volume> 85 (1990), </volume> <pages> pp. </pages> <month> 12-75. </month> <title> [32] , The monadic second-order logic of graphs III: Treewidth, forbidden minors and complexity issues, </title> <journal> Informatique Theorique, </journal> <volume> 26 (1992), </volume> <pages> pp. 257-286. </pages>
Reference-contexts: We will limit the presentation here to a few notions and results, and direct the readers for further reading to other sources, e.g. <ref> [30, 36, 46, 45] </ref>. 8.1 Hyperedge replacement grammars First, we consider the notion of hyperedge replacement grammar, introduced by Habel and Kreowski. We only give an informal description here: for a 18 good introduction to this topic, see e.g. [45, 46]. <p> Similar frameworks have been introduced by Courcelle (see e.g. <ref> [30, 31, 32, 33] </ref>) and by Wimer [104]. While the differences between Bories and Wimers formalisms are not very large, I prefer the former as I find it somewhat simpler and more elegant.
Reference: [33] <author> B. Courcelle and M. Mosbah, </author> <title> Monadic second-order evaluations on tree-decomposable graphs, </title> <journal> Theor. Comp. Sc., </journal> <volume> 109 (1993), </volume> <pages> pp. 49-82. </pages>
Reference-contexts: Similar frameworks have been introduced by Courcelle (see e.g. <ref> [30, 31, 32, 33] </ref>) and by Wimer [104]. While the differences between Bories and Wimers formalisms are not very large, I prefer the former as I find it somewhat simpler and more elegant.
Reference: [34] <author> N. D. Dendris, L. M. Kirousis, and D. M. Thilikos, </author> <title> Fugitive-search games on graphs and related parameters, </title> <booktitle> in Proceedings 20th International Workshop on Graph Theoretic Concepts in Computer Science WG'94, </booktitle> <editor> E. W. Mayr, G. Schmidt, and G. Tinhofer, eds., Springer Verlag, </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 903, </volume> <year> 1995, </year> <pages> pp. 26-37. </pages>
Reference-contexts: The treewidth of G is at most k. 29 2. The tangle number of G is at most k. 3. G has a convex tangle of order k. 4. k + 1 cops can search G 5. k + 1 cops can monotonely search G. Dendris, Kirousis and Thilikos <ref> [34] </ref> studied search games where the fugitive is supposed to be inert, i.e., it can it can only move just before a searcher visits the vertex that it occupies. The (monotone) search number for an inert fugitive with unbounded speed is defined accordingly. Theorem 60 (Dendris, Kirousis, Thilikos [34]) Let G <p> and Thilikos <ref> [34] </ref> studied search games where the fugitive is supposed to be inert, i.e., it can it can only move just before a searcher visits the vertex that it occupies. The (monotone) search number for an inert fugitive with unbounded speed is defined accordingly. Theorem 60 (Dendris, Kirousis, Thilikos [34]) Let G = (V; E) be a graph, k 0. The following statements are equivalent. 1. The treewidth of G is at most k. 2. The number of searchers, needed to search G in the fugitive search game with an inert fugitive is at most k + 1. 3. <p> The number of searchers, needed to monotonically search G in the fugitive search game with an inert fugitive is at most k + 1. Dendris et al. also consider variants where the fugitive has bounded speed, and obtain, amongst others, the following result. Theorem 61 (Dendris, Kirousis, Thilikos <ref> [34] </ref>) Suppose G = (V; E) has no chordless cycle of length more than s + 2. The treewidth of G is one less than the monotone search number of G for an inert fugitive with speed s.
Reference: [35] <author> D. Dolev, T. Leighton, and H. Trickey, </author> <title> Planar embeddings of planar graphs, </title> <institution> Adv. in Comput. Res., </institution> <month> 2 </month> <year> (1984), </year> <pages> pp. 53-76. </pages>
Reference-contexts: The maximum distance of a face to the exterior face is called the radius [72]. * The maximum distance (using the usual notion of distance in a graph) in G of a vertex to a vertex on the outer face is called the width <ref> [35] </ref> or gauge [1]. * Call two vertices adjacent, if they share a face, and call the outer face adjacent to all vertices on the outer facial cycle.
Reference: [36] <author> F. Drewes and H. Kreowski, </author> <title> A note on hyperedge replacement, </title> <booktitle> in Proc. 4th International Workshop on Graph Grammars and Their Application to Computer Science, Springer Verlag, Lecture Notes in Computer Science, </booktitle> <volume> vol. 532, </volume> <year> 1994, </year> <pages> pp. 1-11. </pages>
Reference-contexts: We will limit the presentation here to a few notions and results, and direct the readers for further reading to other sources, e.g. <ref> [30, 36, 46, 45] </ref>. 8.1 Hyperedge replacement grammars First, we consider the notion of hyperedge replacement grammar, introduced by Habel and Kreowski. We only give an informal description here: for a 18 good introduction to this topic, see e.g. [45, 46].
Reference: [37] <author> J. A. Ellis, I. H. Sudborough, and J. Turner, </author> <title> The vertex separation and search number of a graph, </title> <journal> Information and Computation, </journal> <volume> 113 (1994), </volume> <pages> pp. 50-79. </pages>
Reference-contexts: Recall from Theorem 29 that for every graph, its interval thickness is exactly one larger than its pathwidth. 28 Corollary 58 (See also <ref> [37] </ref>.) For every graph G = (V; E), the node search number of G equals the pathwidth of G plus one. Furthermore, pathwidth (G) search number (G) pathwidth (G) + 2. <p> Theorem 68 (Kirousis and Papadimitriou [54]) The pathwidth of a complete ternary tree T equals its height. 32 (To be precise, Kirousis and Papadimitriou formulate and prove this result in the equivalent notion of node search, cf. Section 10.) Ellis et al. <ref> [37] </ref> obtained among others a precise characterization of what trees have a specific pathwidth (in terms of separation number). Another characterisation of treewidth can be obtained by looking at depth-first-search spanning trees or forests.
Reference: [38] <author> M. R. Fellows and M. A. Langston, </author> <title> Nonconstructive advances in polynomial-time complexity, </title> <journal> Inform. Proc. Letters, </journal> <volume> 26 (1987), </volume> <pages> pp. </pages> <month> 157-162. </month> <title> [39] , On search, decision and the efficiency of polynomial-time algorithms, </title> <booktitle> in Proceedings of the 21rd Annual Symposium on Theory of Computing, </booktitle> <year> 1989, </year> <pages> pp. 501-512. </pages>
Reference-contexts: We are asked whether we can permute the columns of the matrix M , such that if in each row, we change every 0 which lies between the rows leftmost and rightmost 1 into a 1, then no column contains more than k 1's. Fellows and Langston <ref> [38] </ref> showed that there is an elegant translation of instances of gate matrix layout to instances of pathwidth, as follows. (We give a slightly more compact transformation, avoiding a first step replacing every column by a number of columns with exactly two 1's.) Given matrix M , let G M be
Reference: [40] <author> F. Gavril, </author> <title> The intersection graphs of subtrees in trees are exactly the chordal graphs, </title> <journal> J. Comb. Theory Series B, </journal> <volume> 16 (1974), </volume> <pages> pp. 47-56. </pages>
Reference-contexts: Definition. A graph G = (V; E) is a chordal (or: triangulated) graph, if and only if every cycle with length exceeding three has an edge between two non-consecutive vertices in the cycle (a `chord'). Theorem 26 (Gavril <ref> [40] </ref>) A graph G = (V; E) is chordal, if and only if there exists a tree T = (I; F ) such that one can associate with each vertex v 2 V a subtree T v = (I v ; F v ) of T , such that (v; w)
Reference: [41] <author> J. R. Gilbert, J. P. Hutchinson, and R. E. Tarjan, </author> <title> A separator theorem for graphs of bounded genus, </title> <journal> J. Algorithms, </journal> <volume> 5 (1984), </volume> <pages> pp. 391-407. </pages>
Reference-contexts: Related results exist for graphs of bounded genus, see e.g., <ref> [41] </ref>. Consider a tree decomposition (fX i j i 2 Ig; T = (I; F )) of graph G = (V; E).
Reference: [42] <author> J. R. Gilbert, D. J. Rose, and A. Edenbrandt, </author> <title> A separator theorem for chordal graphs, </title> <journal> SIAM J. Alg. Disc. Meth., </journal> <volume> 5 (1984), </volume> <pages> pp. 306-313. </pages>
Reference-contexts: Also, all vertices in one component of G [V X i ] will be in the same subtree of the forest, obtained by removing i from T . Theorem 19 (See e.g., <ref> [75, 42, 62, 22] </ref>) If the treewidth of G = (V; E) is at most k, then G has a type-2 1 2 (n k)-separator of size at most k + 1. Lingas studied the strongly related classes of s (N )-separable graphs [60]. Definition.
Reference: [43] <author> M. C. Golumbic, </author> <title> Algorithmic Graph Theory and Perfect Graphs, </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1980. </year>
Reference-contexts: Each vertex in an intersection graph has associated with it an object in some space, and there is an edge between two vertices if and only if the corresponding objects intersect. We consider the chordal graphs, and several subclasses of these. Chordal graphs are perfect. See <ref> [43] </ref> for more information on chordal graphs and other perfect graphs. Definition. A graph G = (V; E) is a chordal (or: triangulated) graph, if and only if every cycle with length exceeding three has an edge between two non-consecutive vertices in the cycle (a `chord'). <p> A graph is a perfect elimination graph, if and only if it is a chordal graph (see <ref> [43] </ref>, Chapter 4). A special type of perfect elimination graphs are the k-trees. 16 Definition. A graph G = (V; E) is a k-tree, if and only if one of the following two conditions holds: 1. G is isomorphic to K k , the complete graph with k vertices. 2.
Reference: [44] <author> K. Y. Gorbunov, </author> <title> An estimate of the tree-width of a graph which has not a given planar grid as a minor. </title> <type> Manuscript, </type> <year> 1993. </year>
Reference-contexts: In [91], it is shown that one can take in Theorem 13 c H = 20 4jV H j+8jE H j 5 . A similar type of bound was proved by Gorbunov <ref> [44] </ref>. As there are forests with arbitrary large pathwidth, it is not possible to prove a variant of Theorem 12 for graphs H that are not a forest.
Reference: [45] <author> A. Habel, </author> <title> Hyperedge Replacement: Grammars and Languages, </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. 643, </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1992. </year>
Reference-contexts: We will limit the presentation here to a few notions and results, and direct the readers for further reading to other sources, e.g. <ref> [30, 36, 46, 45] </ref>. 8.1 Hyperedge replacement grammars First, we consider the notion of hyperedge replacement grammar, introduced by Habel and Kreowski. We only give an informal description here: for a 18 good introduction to this topic, see e.g. [45, 46]. <p> We only give an informal description here: for a 18 good introduction to this topic, see e.g. <ref> [45, 46] </ref>. The framework of context free graph grammars of Bauderon and Courcelle is essentially similar [8]. See also [66]. Hyperedge replacement grammars work with hypergraphs, where each hyperedge is represented as a sequence of vertices.
Reference: [46] <author> A. Habel and H. J. Kreowski, </author> <title> May we introduce to you: hyper-edge replacement, </title> <booktitle> in Proc. Graph-Grammars and their Applications to Computer Science '86, </booktitle> <editor> H. Ehrig, M. Nagl, and A. Rosenberg, eds., Springer Verlag, </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 291, </volume> <year> 1987, </year> <pages> pp. 15-26. </pages>
Reference-contexts: We will limit the presentation here to a few notions and results, and direct the readers for further reading to other sources, e.g. <ref> [30, 36, 46, 45] </ref>. 8.1 Hyperedge replacement grammars First, we consider the notion of hyperedge replacement grammar, introduced by Habel and Kreowski. We only give an informal description here: for a 18 good introduction to this topic, see e.g. [45, 46]. <p> We only give an informal description here: for a 18 good introduction to this topic, see e.g. <ref> [45, 46] </ref>. The framework of context free graph grammars of Bauderon and Courcelle is essentially similar [8]. See also [66]. Hyperedge replacement grammars work with hypergraphs, where each hyperedge is represented as a sequence of vertices.
Reference: [47] <author> W. Hohberg and R. Reischuk, </author> <title> Decomposition of graphs | a uniform approach for the design of fast sequential and parallel algorithms on graphs. </title> <type> Draft paper, </type> <year> 1989. </year> <title> [48] , A framework to design algorithms for optimization problems on graphs. </title> <type> Preprint, </type> <month> April </month> <year> 1990. </year>
Reference-contexts: Another related framework has been developed by Hohberg and Reischuk <ref> [47, 48] </ref>. Definition. A graph G = (V; E) is (k; )-decomposable, if for any decomposition of G into k-connected components, the size of each component is bounded by . In [47, 48], it is argued that the k-connected components form a tree. <p> Another related framework has been developed by Hohberg and Reischuk <ref> [47, 48] </ref>. Definition. A graph G = (V; E) is (k; )-decomposable, if for any decomposition of G into k-connected components, the size of each component is bounded by . In [47, 48], it is argued that the k-connected components form a tree. This tree can be used, to obtain tree decompositions of (k; )- decomposable graphs of treewidth O (k + ). Also, graphs with treewidth k are (O (k); O (k))-decomposable.
Reference: [49] <author> J. E. Hopcroft, W. Paul, and L. Valiant, </author> <title> On time versus space, </title> <journal> J. ACM, </journal> <volume> 24 (1977), </volume> <pages> pp. 332-337. </pages>
Reference-contexts: Another type of games are the pebble games. These model sequential computation (see e.g. <ref> [49] </ref>), and have been studied extensively. An interesting connection between some of these pebble games and node search number (and hence pathwidth) was found by Kirousis and Papadimitriou [54]. A pebble game is a `one person game', played on a directed acyclic graph.
Reference: [50] <author> H. Kaplan and R. Shamir, </author> <title> Pathwidth, bandwidth and completion problems to proper interval graphs with small cliques, </title> <type> Technical Report 285/93, </type> <institution> Inst. for Computer Science, Tel Aviv University, Tel Aviv, Israel, </institution> <year> 1993. </year> <note> To appear in SIAM J. Comput. 47 </note>
Reference-contexts: For all x 2 X, l w 2 I x , so X is a clique with jf (v) f (w)j + 1 vertices. Hence jf (v) f (w)j k 1. 2 A somewhat stronger result has been proven by Kaplan and Shamir <ref> [50] </ref>. Definition. <p> Theorem 53 (Kaplan, Shamir <ref> [50] </ref>) The bandwidth of a graph G equals its proper pathwidth, and is one smaller than the smallest clique size of any proper interval supergraph of G. <p> The treewidth of G is one less than the monotone search number of G for an inert fugitive with speed s. Takahashi, Ueno, and Kajitani [99] made a connection between a mixed search game and their notion of proper pathwidth. As Kaplan and Shamir <ref> [50] </ref> use the same term to describe a different notion, we use the term 3-proper pathwidth here. Definition.
Reference: [51] <author> N. G. Kinnersley, </author> <title> The vertex separation number of a graph equals its path width, </title> <journal> Inform. Proc. Letters, </journal> <volume> 42 (1992), </volume> <pages> pp. 345-350. </pages>
Reference-contexts: Theorem 51 (Kinnersley <ref> [51] </ref>) For every graph G, the vertex separation number of G equals the pathwidth of G. To close this section, we give two results on intersection graphs (cf. Section 6). Theorem 52 Let G = (V; E) be a proper interval graph with maximum clique size k.
Reference: [52] <author> N. G. Kinnersley and M. A. Langston, </author> <title> Obstruction set isolation for the gate matrix layout problem, </title> <type> Tech. Rep. </type> <institution> CS-91-126, Computer Science Department, University of Tennessee, Knoxville, USA, </institution> <year> 1991. </year>
Reference-contexts: The obstruction sets of graphs with pathwidth 1 and 2 are also known <ref> [52] </ref>. The size of the obstruction sets can grow very fast: for instance, the obstruction set of the graphs with pathwidth at most k contains at 8 least k! 2 trees, each containing 53 k 1 2 vertices [98].
Reference: [53] <author> L. M. Kirousis and C. H. Papadimitriou, </author> <title> Interval graphs and searching, </title> <journal> Disc. Math., </journal> <volume> 55 (1985), </volume> <pages> pp. 181-184. </pages> <institution> [54] , Searching and pebbling, Theor. Comp. </institution> <address> Sc., </address> <month> 47 </month> <year> (1986), </year> <pages> pp. 205-218. </pages>
Reference-contexts: Such a search sequence is called progressive. A variant of this notion, called node search number, was introduced by Kirousis and Papadimitriou <ref> [53] </ref>. In this variant, edges are cleared by having a searcher on both endpoints of the edge. Lemma 56 (Kirousis and Papadimitriou [53]) Let G = (V; E) be a graph with search number k and node search number l. Then l1 k l+1. <p> Such a search sequence is called progressive. A variant of this notion, called node search number, was introduced by Kirousis and Papadimitriou <ref> [53] </ref>. In this variant, edges are cleared by having a searcher on both endpoints of the edge. Lemma 56 (Kirousis and Papadimitriou [53]) Let G = (V; E) be a graph with search number k and node search number l. Then l1 k l+1. Proof: A `node search' can be transformed to an `edge search' by moving a searcher over each edge when it is cleared. <p> An `edge search' can be transformed to a node search, by instead of moving a searcher over an edge, putting a searcher on the second endpoint and then removing the searcher from the first endpoint of the edge. 2 Theorem 57 (Kirousis and Papadimitriou <ref> [53] </ref>) For every graph G = (V; E), the node search number of G equals the interval thickness of G.
Reference: [55] <author> T. Kloks. </author> <title> Personal communication. [56] , Treewidth. Computations and Approximations, </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. 842, </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1994. </year>
Reference-contexts: Proposition 69 (Kloks <ref> [55] </ref>) Let G = (V; E) be a connected graph, and let r 2 V . The treewidth of a graph equals the minimum value of a DFS-tree with root r of a supergraph G = (V; E 0 ) of G (E E 0 ).
Reference: [57] <author> J. Lagergren, </author> <title> The nonexistence of reduction rules giving an embedding into a k-tree, </title> <journal> Disc. Appl. Math., </journal> <volume> 54 (1994), </volume> <pages> pp. 219-223. </pages>
Reference-contexts: Lagergren <ref> [57] </ref> shows that such rules, that are `local' and `based on star substitution' do not exist for the graphs of treewidth four. Next we consider perfect elimination orderings of graphs. Definition.
Reference: [58] <author> A. S. LaPaugh, </author> <title> Recontamination does not help to search a graph, </title> <journal> J. ACM, </journal> <volume> 40 (1993), </volume> <pages> pp. 224-245. </pages>
Reference-contexts: An edge e can become recontaminated, when a move results in a path without searchers from a contaminated edge to edge e. The search number of G is the minimum number of searchers, needed to clear all edges. It has been shown by LaPaugh <ref> [58] </ref> that for every graph G, there exists a search sequence, using the minimum number of searchers and clearing all edges, that does not allow recontamination. Such a search sequence is called progressive. A variant of this notion, called node search number, was introduced by Kirousis and Papadimitriou [53].
Reference: [59] <author> C. Lautemann, </author> <title> Decomposition trees: structured graph representation and efficient algorithms, </title> <booktitle> in Proceedings CSSP'88, Springer Ver-lag, Lecture Notes in Computer Science, </booktitle> <volume> vol. 299, </volume> <year> 1988, </year> <pages> pp. 28-39. </pages>
Reference-contexts: minus 1. (The result below can also be proved for hypergraphs, where for a tree-decomposition of a hypergraph it also must hold that for every hyperedge Z, there must be an i 2 I with Z X i , and the treewidth of a hypergraph defined accordingly.) Theorem 37 (Lautemann <ref> [59] </ref>) (i) Every graph, generated by a hyper-edge replacement grammar of width k, has treewidth at most k. (ii) For every k, there exists a hyperedge replacement grammar of width k that generates exactly the directed graphs with treewidth at most k.
Reference: [60] <author> A. Lingas, </author> <title> Subgraph isomorphism for easily separable graphs with bounded valence, </title> <booktitle> in Proc. 11th Workshop on Graph-Theoretic concepts in Computer Science, </booktitle> <year> 1985, </year> <pages> pp. 217-229. </pages>
Reference-contexts: Theorem 19 (See e.g., [75, 42, 62, 22]) If the treewidth of G = (V; E) is at most k, then G has a type-2 1 2 (n k)-separator of size at most k + 1. Lingas studied the strongly related classes of s (N )-separable graphs <ref> [60] </ref>. Definition. Let s : N ! N be a function.
Reference: [61] <author> R. J. Lipton and R. E. Tarjan, </author> <title> A separator theorem for planar graphs, </title> <journal> SIAM J. Appl. Math., </journal> <volume> 36 (1979), </volume> <pages> pp. 177-189. </pages>
Reference-contexts: In the other direction, we have the following relationship, which can be easily ob served. Lemma 18 If S is a type-2 1 2 n-separator of G, then S is a type-1 2 3 n separator of G. It was shown by Lipton and Tarjan <ref> [61] </ref> that every planar graph has a (type-1) 2 3 n-separator of size at most p 8n. This result is known as the Planar Separator Theorem, see also Section 13.1. <p> 4 f (bc 3 nc) + c 4 f (bc 3 2 nc + = 10 Corollary 23 For every planar graph G = (V; E): pathwidth (G) = O ( p Theorem 22 shows that Corollary 23 is in a certain sense nothing else as the Planar Separator Theorem <ref> [61] </ref> in disguise. See the discussion above and in Section 13.1. Corollary 24 For every graph G = (V; E), pathwidth (G) = O (treewidth (G) log n). <p> with 4 vertices, as a minor (contract all interior vertices to one vertex, a "wheel" results, and then contract further to K 4 ), treewidth (G) treewidth (K 4 ) = 3. 2 38 We now give an alternate proof of the famous `planar separator theorem' of Lipton and Tarjan <ref> [61] </ref> | although the constant factor yielded by the proof below is higher. See the discussion in Section 5. Theorem 86 Every planar graph G = (V; E) has a (type-2) 1 2 n-separator of size 2 p p Proof: Let c = 1 2 6 in this proof.
Reference: [62] <author> J. W. H. Liu, </author> <title> The role of elimination trees in sparse factorization, </title> <journal> SIAM J. Matrix Analysis and Applications, </journal> <volume> 11 (1990), </volume> <pages> pp. 134-172. </pages>
Reference-contexts: Also, all vertices in one component of G [V X i ] will be in the same subtree of the forest, obtained by removing i from T . Theorem 19 (See e.g., <ref> [75, 42, 62, 22] </ref>) If the treewidth of G = (V; E) is at most k, then G has a type-2 1 2 (n k)-separator of size at most k + 1. Lingas studied the strongly related classes of s (N )-separable graphs [60]. Definition.
Reference: [63] <author> F. S. Makedon, C. H. Papadimitriou, and I. H. Sudborough, </author> <title> Topological bandwidth, </title> <journal> SIAM J. Alg. Disc. Meth., </journal> <volume> 6 (1985), </volume> <pages> pp. 418-444. </pages>
Reference-contexts: a graph G 0 with G a minor of G 0 , and topological bandwidth (G) = bandwidth (G 0 ) pathwidth (G 0 ) pathwidth (G). 2 Makedon et al. claim a result, that states that the node search number of a graph is at most its topological bandwidth <ref> [63] </ref>.
Reference: [64] <author> R. H. M ohring, </author> <title> Graph problems related to gate matrix layout and PLA folding, in Computational Graph Theory, </title> <journal> Comuting Suppl. </journal> <volume> 7, </volume> <editor> E. Mayr, H. Noltemeier, and M. Sys lo, eds., </editor> <publisher> Springer Verlag, </publisher> <year> 1990, </year> <pages> pp. </pages> <month> 17-51. </month> <title> [65] , Triangulating graphs without asteroidal triples, </title> <type> Technical Report 365/1993, </type> <institution> Technical University Berlin, </institution> <year> 1993. </year> <month> 48 </month>
Reference-contexts: A good overview of many of the issues involved here has been made by Mohring <ref> [64] </ref>. 15.2 Interval Routing Schemes Consider a distributed processor network, in which processors want to send messages to each other.
Reference: [66] <author> M. H. Mosbah, </author> <title> Constructions d'Algorithmes Pour les Graphes Struc--tures par des Methodes Algebriques et Logiques, </title> <type> PhD thesis, </type> <institution> Universite Bordeaux-I, </institution> <year> 1992. </year>
Reference-contexts: We only give an informal description here: for a 18 good introduction to this topic, see e.g. [45, 46]. The framework of context free graph grammars of Bauderon and Courcelle is essentially similar [8]. See also <ref> [66] </ref>. Hyperedge replacement grammars work with hypergraphs, where each hyperedge is represented as a sequence of vertices. A hyperedge also has a label, which is either a terminal label, or a non-terminal label.
Reference: [67] <author> V. Naumann, </author> <title> Measuring the distance to series-parallel graphs by path expressions, </title> <type> Tech. Rep. 376/1994, </type> <institution> Technische Universitat Berlin, </institution> <address> Berlin, Germany, </address> <year> 1994. </year>
Reference-contexts: Corollary 75 If G has a feedback vertex set of size k, then the treewidth of G is at most k + 1. In <ref> [67] </ref>, the reduction complexity of st-dags (directed acyclic graphs, with a unique vertex s of in-degree 0 and a unique vertex t of out-degree 0) is considered.
Reference: [68] <author> S. Ramachandramurthi, </author> <title> Algorithms for VLSI Layout Based on Graph Width Metrics, </title> <type> PhD thesis, </type> <institution> Computer Science Department, University of Tennessee, Knoxville, Tennessee, USA, </institution> <year> 1994. </year>
Reference-contexts: The size of the obstruction sets can grow very fast: for instance, the obstruction set of the graphs with pathwidth at most k contains at 8 least k! 2 trees, each containing 53 k 1 2 vertices [98]. Ramachandramurthi <ref> [68] </ref> investigated the graphs with k + 1, k + 2 and k + 3 vertices that belong to the obstruction sets for graphs of treewidth or pathwidth k. 5 Separators Several different, but closely related notions of `balanced separators' exist. <p> I.e., fl (G) = n 1, if G is a clique. Lemma 92 (Ramachandramurthi <ref> [68] </ref>) The treewidth of a graph G is at least fl (G). Ramachandramurthi [68] also gives characterisations of pathwidth and treewidth in terms of subgraphs that fulfil certain degree restrictions. Bodlaender and Engelfriet [21] introduced the notion of domino treewidth. Definition. <p> I.e., fl (G) = n 1, if G is a clique. Lemma 92 (Ramachandramurthi <ref> [68] </ref>) The treewidth of a graph G is at least fl (G). Ramachandramurthi [68] also gives characterisations of pathwidth and treewidth in terms of subgraphs that fulfil certain degree restrictions. Bodlaender and Engelfriet [21] introduced the notion of domino treewidth. Definition. <p> Let M 0 be the resulted matrix. Now (X 1 ; : : : ; X m ), with X c = fv i j M ic = 1g can be seen to be a path decomposition of G M of width at most k. 2 See also <ref> [68] </ref>. A good overview of many of the issues involved here has been made by Mohring [64]. 15.2 Interval Routing Schemes Consider a distributed processor network, in which processors want to send messages to each other.

Reference: [91] <author> N. Robertson, P. D. Seymour, and R. Thomas, </author> <title> Quickly excluding a planar graph, </title> <type> Tech. Rep. </type> <institution> TR89-16, DIMACS, </institution> <year> 1989. </year> <title> [92] , A survey of linkless embeddings, in Graph Structure Theory, </title> <booktitle> Proceedings of the AMS-IMS-SIAM Joint Summer Research Conference, </booktitle> <address> Seattle WA, </address> <month> June </month> <year> 1991, </year> <editor> N. Robertson and P. Seymour, eds., </editor> <address> Providence, RI, </address> <year> 1993, </year> <journal> American Math. Soc., </journal> <pages> pp. 125-136. </pages> <note> Contemp. Math. 147. </note>
Reference-contexts: Theorem 13 (Robertson and Seymour [75]) For every planar graph H there is an integer w H such that every graph with no minor isomorphic to H has treewidth at most w H . In <ref> [91] </ref>, it is shown that one can take in Theorem 13 c H = 20 4jV H j+8jE H j 5 . A similar type of bound was proved by Gorbunov [44].
Reference: [93] <author> D. J. Rose, </author> <title> On simple characterization of k-trees, </title> <journal> Disc. Math., </journal> <volume> 7 (1974), </volume> <pages> pp. 317-322. </pages>
Reference-contexts: Rose <ref> [93] </ref> obtained several equivalent characterisations of the class of k-trees. An x-y-separator of a graph G = (V; E) is a set W V such that x and y are in different connected components of G [V W ]. Theorem 34 (Rose [93]) Let G = (V; E) be a graph. <p> Rose <ref> [93] </ref> obtained several equivalent characterisations of the class of k-trees. An x-y-separator of a graph G = (V; E) is a set W V such that x and y are in different connected components of G [V W ]. Theorem 34 (Rose [93]) Let G = (V; E) be a graph. The following four conditions are equivalent. 1. G is a k-tree. 2. G is connected, G has a k-clique, but not a k + 2-clique, and every minimal x-y-separator of G is a k-clique. 3. <p> Lemma 91 (Rose <ref> [93] </ref>.) If G = (V; E) has treewidth at most k, then jEj k jV j 1 Ramachandramurthi introduced the graph parameter fl (G) = min (n 1; min v;w2V;v6=w;(v;w)62E max (degree (v);degree (w))). I.e., fl (G) = n 1, if G is a clique.
Reference: [94] <author> P. Scheffler, </author> <title> Die Baumweite von Graphen als ein Ma fur die Kom-pliziertheit algorithmischer Probleme, </title> <type> PhD thesis, </type> <institution> Akademie der Wis-senschaften der DDR, </institution> <address> Berlin, </address> <year> 1989. </year> <month> 50 </month>
Reference-contexts: The following lemma follows directly from the definitions. Lemma 3 For all graphs G, pathwidth (G) treewidth (G). A short proof of the following lemma can be found in [23]. Older, but longer proofs can be found in <ref> [15, 94] </ref>. 3 Lemma 4 (See [23]) Let (fX i j i 2 Ig; T = (I; F )) be a tree decomposition of G = (V; E), and let W V be a clique in G. Then there exists an i 2 I with W X i . <p> This implies that v 1 ; w 1 ; v 2 ; w 2 form a chordless cycle of length four in H, contradicting the chordality of H. 2 Lemma 6 (See <ref> [14, 94] </ref>) For every graph G = (V; E): 1. The treewidth of G equals the maximum treewidth of its connected components. 2. The pathwidth of G equals the maximum pathwidth of its connected components. 3. The treewidth of G equals the maximum treewidth of its biconnected components. <p> Lemma 11 (See <ref> [94] </ref>) Let G = (V; E) be a subgraph of H = (V 0 ; E 0 ). <p> Theorem 30 (Sche*er <ref> [94] </ref>) Let G = (V; E) be an intersection graph of a graph H = (V 0 ; E 0 ), and let c be the maximum clique size of G. Then treewidth (G) c treewidth (H)1, and pathwidth (G) c pathwidth (H)1. <p> Definition. A graph G = (V; E) is a partial k-tree, if and only if G is the subgraph of a k-tree. Theorem 35 (See Sche*er <ref> [94] </ref> or van Leeuwen [101]) A graph G = (V; E) is a partial k-tree, if and only if the treewidth of G is at most k. Proof: ): It is sufficient to show that every k-tree G = (V; E) has treewidth at most k. <p> More precise bounds were obtained by Sche*er <ref> [94] </ref>. Theorem 66 (Sche*er [94]) For every tree T = (V; E), the pathwidth of T is at most 3 log (2n + 1). Theorem 67 (Sche*er [94]) The pathwidth of a complete binary tree of depth k (i.e., with 2 k+1 1 vertices) equals dk=2e. <p> More precise bounds were obtained by Sche*er <ref> [94] </ref>. Theorem 66 (Sche*er [94]) For every tree T = (V; E), the pathwidth of T is at most 3 log (2n + 1). Theorem 67 (Sche*er [94]) The pathwidth of a complete binary tree of depth k (i.e., with 2 k+1 1 vertices) equals dk=2e. <p> More precise bounds were obtained by Sche*er <ref> [94] </ref>. Theorem 66 (Sche*er [94]) For every tree T = (V; E), the pathwidth of T is at most 3 log (2n + 1). Theorem 67 (Sche*er [94]) The pathwidth of a complete binary tree of depth k (i.e., with 2 k+1 1 vertices) equals dk=2e. <p> Lemma 90 (Sche*er <ref> [94] </ref>) Every graph of treewidth at most k contains a vertex of degree at most k.
Reference: [95] <author> D. Seese, </author> <title> Tree-partite graphs and the complexity of algorithms, </title> <booktitle> in Proc. 1985 Int. Conf. on Fundamentals of Computation Theory, Lecture Notes in Computer Science 199, </booktitle> <editor> L. Budach, ed., </editor> <address> Berlin, 1985, </address> <publisher> Springer Verlag, </publisher> <pages> pp. 412-421. </pages>
Reference-contexts: There is also a connection of this notion with the notion of strong treewidth, as introduced by Seese <ref> [95] </ref>. Definition. <p> Note that in general, a strong tree-decomposition of a graph G, is not a tree-decomposition of G. Trees have strong treewidth 1: take singleton sets X i , one for each vertex in the tree. Lemma 94 (Seese <ref> [95] </ref>) If the strong treewidth of G is at most k, then the treewidth of G is at most 2k 1. Theorem 95 (Bodlaender and Engelfriet [21]) For every class of graphs G, the following statements are equivalent: 1.
Reference: [96] <author> P. D. Seymour and R. Thomas, </author> <title> Graph searching and a minimax theorem for tree-width, </title> <type> Technical Report 89-1, </type> <institution> DIMACS, </institution> <year> 1989. </year>
Reference-contexts: Furthermore, pathwidth (G) search number (G) pathwidth (G) + 2. Seymour and Thomas <ref> [96] </ref> give a characterisation of treewidth by a search game where a number of cops try to capture a robber, that is seen by the cops but has infinite speed. Informally, this game is as follows. <p> R i denotes the component of G [V X i ] where the robber is | its exact location is not important due to its speed.) Seymour and Thomas <ref> [96] </ref> also define the tangle number of a graph G = (V; E): a tangle of order k in G = (V; E) is a function fi, mapping each X 2 [V ] k to an X-flap, such that for all X Y 2 [V ] k : fi (Y ) <p> A tangle fi is convex, if and only if for all X, Y 2 [V ] k : (fi (X) " fi (Y )) [ (X " fi (Y )) [ (fi (X) " Y ) 6= ; Theorem 59 (Seymour, Thomas <ref> [96] </ref>) Let G = (V; E) be a graph, k 0. The following statements are equivalent. 1. The treewidth of G is at most k. 29 2. The tangle number of G is at most k. 3.
Reference: [97] <author> M. M. Sys lo, </author> <title> Characterisations of outerplanar graphs, </title> <journal> Disc. Math., </journal> <volume> 26 (1979), </volume> <pages> pp. 47-53. </pages>
Reference-contexts: Proof: Observe that an outerplanar graph can be rewritten to the empty graph by the rules (i) - (iii) from Theorem 33. 2 The class of outerplanar graphs is closed under minor taking: its obstruction set consists of the graphs K 2;3 and K 4 (see <ref> [97] </ref> for some related results.) We will show a bound of 3k 1 on the treewidth of k-outerplanar graphs. We need a series of lemma's. 36 Lemma 79 Let G = (V; E) be a planar graph with some given planar embedding.
Reference: [98] <author> A. Takahashi, S. Ueno, and Y. Kajitani, </author> <title> Minimal acyclic forbidden minors for the family of graphs with bounded path-width, </title> <booktitle> in SIGAL 91-19-3, IPSJ, 1991. To appear in: Annals of discrete mathematics (Proceedings of 2nd Japan conference on graph theory and combinatorics, </booktitle> <year> 1990). </year> <title> [99] , Mixed-searching and proper-path-width, </title> <type> tech. rep., </type> <institution> Tokyo Institute of Technology, </institution> <year> 1991. </year>
Reference-contexts: The size of the obstruction sets can grow very fast: for instance, the obstruction set of the graphs with pathwidth at most k contains at 8 least k! 2 trees, each containing 53 k 1 2 vertices <ref> [98] </ref>. Ramachandramurthi [68] investigated the graphs with k + 1, k + 2 and k + 3 vertices that belong to the obstruction sets for graphs of treewidth or pathwidth k. 5 Separators Several different, but closely related notions of `balanced separators' exist.
Reference: [100] <author> M. </author> <title> Thorup, Structured programs have small tree-width and good register allocation, </title> <type> Technical Report DIKU-TR-95/18, </type> <institution> Department of Computer Science, University of Copenhagen, Denmark, </institution> <year> 1995. </year>
Reference-contexts: Theorem 97 (Bodlaender et al. [24]) If G 2 k-IRS, then the treewidth of G is at most 4k. 42 For details and more related results, the reader is referred to [24]. 15.3 Structured programs In a very recent paper, Thorup <ref> [100] </ref> makes a connection between the control-flow graphs of structured programs and treewidth. Under a rather general definition of `structured program' (including goto-freeness), he shows the following result. Theorem 98 (Thorup [100]) All control-flow graphs of structured programs have treewidth at most 6. <p> and more related results, the reader is referred to [24]. 15.3 Structured programs In a very recent paper, Thorup <ref> [100] </ref> makes a connection between the control-flow graphs of structured programs and treewidth. Under a rather general definition of `structured program' (including goto-freeness), he shows the following result. Theorem 98 (Thorup [100]) All control-flow graphs of structured programs have treewidth at most 6. Thorup also mentions that control graphs of programs written in Modula-2 have treewidth at most five, and control graphs of goto-free programs written in Pascal have treewidth at most three.
Reference: [101] <editor> J. van Leeuwen, </editor> <booktitle> Graph algorithms, in Handbook of Theoretical Computer Science, A: Algorithms and Complexity Theory, Amster-dam, 1990, </booktitle> <publisher> North Holland Publ. Comp., </publisher> <pages> pp. 527-631. </pages>
Reference-contexts: Definition. A graph G = (V; E) is a partial k-tree, if and only if G is the subgraph of a k-tree. Theorem 35 (See Sche*er [94] or van Leeuwen <ref> [101] </ref>) A graph G = (V; E) is a partial k-tree, if and only if the treewidth of G is at most k. Proof: ): It is sufficient to show that every k-tree G = (V; E) has treewidth at most k.
Reference: [102] <author> J. van Leeuwen and R. B. Tan, </author> <title> Compact routing methods: A survey, </title> <type> Technical Report UU-CS-1995-05, </type> <institution> Department of Computer Science, Utrecht University, Utrecht, </institution> <year> 1995. </year>
Reference-contexts: A good overview of many of the issues involved here has been made by Mohring [64]. 15.2 Interval Routing Schemes Consider a distributed processor network, in which processors want to send messages to each other. Research has been done on so called compact routing methods (see <ref> [102] </ref> for an overview), methods in which processors decide over what link to forward messages that take relatively little space for storing such routing information. One type of these methods is interval routing.
Reference: [103] <author> W. Vogler, </author> <title> On hyperedge replacement and BNLC graph grammars, </title> <journal> Disc. Appl. Math., </journal> <volume> 46 (1993), </volume> <pages> pp. 253-273. </pages>
Reference-contexts: Vogler has shown that hyperedge replacement grammars generate the same languages of simple graphs as BNLC grammars of bounded nonterminal degree <ref> [103] </ref>. 8.2 Recursive families of graphs In this section, we discuss the recursive families of graphs, as introduced in the work of Borie [26] (see also [25, 27]). Similar frameworks have been introduced by Courcelle (see e.g. [30, 31, 32, 33]) and by Wimer [104].
Reference: [104] <author> T. V. Wimer, </author> <title> Linear Algorithms on k-Terminal Graphs, </title> <type> PhD thesis, </type> <institution> Dept. of Computer Science, Clemson University, </institution> <year> 1987. </year> <month> 51 </month>
Reference-contexts: Similar frameworks have been introduced by Courcelle (see e.g. [30, 31, 32, 33]) and by Wimer <ref> [104] </ref>. While the differences between Bories and Wimers formalisms are not very large, I prefer the former as I find it somewhat simpler and more elegant. Courcelles framework is much more general and more precise, but is difficult to master for readers with little algebraic backgrounds. See also [9]. <p> A k--terminal recursive family of graphs is a set G of terminal graphs, for which there exists a set B of k-terminal base graphs and a finite set R of k-terminal recursive operations, such that G is the closure of B under the operations in R. Theorem 38 (Wimer <ref> [104] </ref>) Any k-terminal recursive family of graphs with only binary composition operators is a subclass of the partial (2k 1)- trees. <p> ), and make i new adjacent to all distinguished nodes in the tree decompositions of G 1 , . . . , G c . 2 Many classes of graphs, known to have a uniform treewidth upper bound, can be seen to be a k-terminal recursive family of graphs (see <ref> [26, 104] </ref>). Specifically, we mention the following: Theorem 40 (See [104].) For every k: the class of graphs of treewidth at most k is a (k + 1)-terminal recursive family of graphs. Proof: A possible method to proof this is to use nice tree decompositions, see Lemma 7. <p> Specifically, we mention the following: Theorem 40 (See <ref> [104] </ref>.) For every k: the class of graphs of treewidth at most k is a (k + 1)-terminal recursive family of graphs. Proof: A possible method to proof this is to use nice tree decompositions, see Lemma 7. <p> A graph G = (V; E) is a Halin graph, if it can be obtained by embedding a tree without vertices with degree 2 and with at least 4 vertices in the plane, and connecting its leaves by a cycle that crosses none of its edges. Theorem 85 (See <ref> [104] </ref>) The treewidth of a Halin graph equals 3. Proof: A similar proof as above can be used. Let G be a Halin graph. G is a minor of a Halin graph H with maximum vertex degree 3.
References-found: 65

