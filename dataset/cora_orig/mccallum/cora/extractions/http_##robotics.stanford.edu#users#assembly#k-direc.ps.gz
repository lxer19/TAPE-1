URL: http://robotics.stanford.edu/users/assembly/k-direc.ps.gz
Refering-URL: http://robotics.stanford.edu/users/assembly/pubs.html
Root-URL: http://www.cs.stanford.edu
Title: Efficient Generation of  k-Directional Assembly Sequences  
Author: Pankaj K. Agarwal Mark de Berg Dan Halperin Micha Sharir 
Date: 1996  
Note: To appear in Proc. 7th ACM-SIAM Symposium on Discrete Algorithms (SODA),  
Abstract: Let S be a collection of n rigid bodies in 3-space, and let D be a set of k directions in 3-space, where k is a small constant. A k-directional assembly sequence for S, with respect to D, is a linear ordering hs 1 ; : : : ; s n i of the bodies in S, such that each s i can be moved to infinity by translating it in one of the directions of D and without intersecting any s j , for j &gt; i. We present an algorithm that computes a k-directional assembly sequence, or decides that no such sequence exists, for a set of polyhedra. The algorithm runs in O(km 4=3+" ) time, where m is the total number of vertices of the polyhedra. We also give an algorithm for `k-directional' rotational motions. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Agarwal, M.J. Katz, and M. Sharir, </author> <title> Computing depth orders and related problems, </title> <booktitle> Proc. 4th Scandina-vian Workshop on Algorithm Theory, </booktitle> <address> Denmark, </address> <year> 1994, </year> <note> pp.1-12. Also, to appear in Comput. Geom. Theory Ap-pls. </note>
Reference-contexts: Faster algorithms are known for several special cases <ref> [1, 6] </ref>. The interest in depth orders is not limited to computer graphics. Suppose we want to manufacture a product consisting of several parts.
Reference: [2] <author> P. Agarwal and J. Matousek, </author> <title> Ray shooting and parametric search, </title> <journal> SIAM J. Comput. </journal> <volume> 22 (1993), </volume> <pages> 794-806. </pages>
Reference: [3] <author> P. Agarwal and J. Matousek, </author> <title> Dynamic half-space range searching and its applications, </title> <booktitle> Algorithmica 13 (1995), </booktitle> <pages> 325-345. </pages>
Reference-contexts: We first briefly sketch the main idea. We preprocess H into a dynamic data structure, proposed by Agarwal and Matousek <ref> [3] </ref>, for the upper-envelope searching problem, which supports deletions of hyperplanes and queries that can quickly determine whether a query point lies above all the hyperplanes of H. <p> The first maximality-reporting structure (P; H), a variant of the dynamic halfspace-range-searching structure by Agarwal and Matousek <ref> [3] </ref>, is a tree based on (1=r)-cuttings. It can be constructed in O (n bd=2c+" + m log n) time and can delete all points and hyperplanes in time O ((m + n bd=2c )n " ). <p> Specifically, a point is deleted from P v if shallow (p) = 1 and if it has been deleted from all the children of v where it was stored. Following an argument similar to (but more involved than) the one used by Agarwal and Matousek in <ref> [3] </ref>, we can prove that the total time spent in deleting all n hyperplanes of H and all m points of P is O ((m + n bd=2c )n " ), for any " &gt; 0, where the constant of proportionality depends on ". Lemma 3.1. <p> Finally, points of P and hyperplanes of H are deleted using appropriate variants of the procedures described in the previous subsection. Once again, with analysis similar to the one in <ref> [3] </ref>, we can prove that the total time spent in deleting all n hyperplanes of H and all points of P is O (m fl n fl+" + mn " + n log 2 n) for any " &gt; 0, with fl being the same as in (3.3). Theorem 3.2.
Reference: [4] <author> P. Agarwal and M. Sharir, </author> <title> Applications of a new space partitioning scheme. </title> <journal> Discrete Comput. Geom. </journal> <volume> 9 (1993), </volume> <pages> 11-38. </pages>
Reference-contexts: Then t k = O n 4=3+" X a i = O (n 4=3+" ) 1 t k = O n 1+" X a i = O n 3=2+" 1 &lt; k dlog r ne : In the next subsection we show that, using the known range-searching data structures <ref> [4, 13] </ref>, the family F can be computed in O (n 4=3+" ) time. We now explain how F can be used to construct the desired data structure. <p> It is easy to verify that F 1 [ F 2 [ F 12 satisfies conditions (C1)-(C3), and that the total running time of the algorithm is O (n 4=3+" ). It remains to describe how to compute F 12 . We construct the segment-intersection-searching data structure <ref> [4] </ref> on the set S fl 2 , which can report the set of segments of S fl 2 intersecting a query segment in the plane, as a union of few pairwise disjoint subsets of S fl 2 . <p> A triangular range query on a set of m points in the plane can be answered in O (m 1=3+" ) time after O (m 4=3+" ) preprocessing <ref> [4] </ref>. For each pair (P i ; T i ) in F we need a maximality-maintenance structure. In view of conditions (D1) and (D2), we can replace triangles of F i by their supporting planes.
Reference: [5] <author> M. de Berg, </author> <title> Ray Shooting, Depth Orders and Hidden Surface Removal, </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. 703, </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1993. </year>
Reference: [6] <author> M. de Berg, M. Overmars and O. Schwarzkopf, </author> <title> Computing and verifying depth orders, </title> <journal> SIAM J. Comput. </journal> <volume> 23 (1994), </volume> <pages> 437-446. </pages>
Reference-contexts: Notice that a depth order does not always exist; even in a set of three triangles there can be cyclic overlap. De Berg et al. <ref> [6] </ref> gave an O (m 4=3+" )-time algorithm, for any " &gt; 0, that computes a depth order in a given direction (or decides that no such order exists) for a set of polygons in 3-space with m vertices in total. <p> Faster algorithms are known for several special cases <ref> [1, 6] </ref>. The interest in depth orders is not limited to computer graphics. Suppose we want to manufacture a product consisting of several parts. <p> The case k = 1 is the well-known depth order problem discussed at the beginning of this introduction, and can be solved using the algorithm by de Berg et al. <ref> [6] </ref>. Their approach, however, does not work for k &gt; 1. The above order actually induces a disassembly sequence, that is, a sequence of translations that will take the product apart. The desired assembly sequence is simply the disassembly sequence in reverse order.
Reference: [7] <author> B. Chazelle, H. Edelsbrunner, L. Guibas, M. Sharir, and J. Stolfi. </author> <title> Lines in space: </title> <booktitle> Combinatorics and algorithms. Proc. 21st ACM Symp. on Theory of Computing, </booktitle> <year> 1989, </year> <pages> pp. 382-393. </pages>
Reference-contexts: For a segment e in R 3 , let (e) and $(e) denote, respectively, the Plucker point and the Plucker hyper-plane, represented in R 5 , of the line supporting e and oriented in the increasing x-direction <ref> [7] </ref>. We will use the following observation made by Chazelle et al. [7]. Observation 4.3. Let ` and ` 0 be two lines in R 3 oriented from left to right such that the slope of ` fl is smaller (resp. greater) than that of ` 0 fl . <p> For a segment e in R 3 , let (e) and $(e) denote, respectively, the Plucker point and the Plucker hyper-plane, represented in R 5 , of the line supporting e and oriented in the increasing x-direction <ref> [7] </ref>. We will use the following observation made by Chazelle et al. [7]. Observation 4.3. Let ` and ` 0 be two lines in R 3 oriented from left to right such that the slope of ` fl is smaller (resp. greater) than that of ` 0 fl .
Reference: [8] <author> F. Dehne and J.-R. Sack, </author> <title> Translation separability of sets of polygons, </title> <booktitle> Visual Computer 3 (1987), </booktitle> <pages> 227-235. </pages>
Reference-contexts: Although their solution has polynomial running time (in contrast with many techniques in mechanical assembly planning), its running time is rather high in the worst case: it may require (m 4 ) time in the worst case for a collection of m tetrahedra in 3-space. Dehne and Sack <ref> [8] </ref> study a similar problem in the plane: They allow motions in arbitrary directions, but only one part can be moved at a time. For a set of m constant-complexity polygons, their algorithm runs in O (m 2 log m) time.
Reference: [9] <author> J. Garca-Lopez and P. Ramos-Alonzo, </author> <title> Circular visibility and separability, </title> <booktitle> Proc. 5th Canadian Conference on Computational Geometry, </booktitle> <year> 1993, </year> <pages> pp. 18-23. </pages>
Reference-contexts: For this case, the running time of our algorithm becomes O (m 8=5+" ), for any " &gt; 0. Prior to our work, most of the study of separability problems deals with translational separation; rotations are often handled by resorting to infinitesimal rotations [10, 19]. Garca-Lopez and Ramos-Alonzo <ref> [9] </ref> study true rotational motions, but in a very limited setting: They consider separating a single point from a polygon. Another recent paper dealing with rotations is by Schomer and Thiel [14].
Reference: [10] <author> L.J. Guibas, D. Halperin, H. Hirukawa, J.-C. Latombe and R.H. Wilson, </author> <title> A simple and efficient procedure for polyhedral assembly partitioning under infinitesimal motions, </title> <booktitle> Proc. IEEE International Conference on Robotics and Automation, </booktitle> <year> 1995, </year> <pages> pp. 2553-2560. </pages>
Reference-contexts: For this case, the running time of our algorithm becomes O (m 8=5+" ), for any " &gt; 0. Prior to our work, most of the study of separability problems deals with translational separation; rotations are often handled by resorting to infinitesimal rotations <ref> [10, 19] </ref>. Garca-Lopez and Ramos-Alonzo [9] study true rotational motions, but in a very limited setting: They consider separating a single point from a polygon. Another recent paper dealing with rotations is by Schomer and Thiel [14].
Reference: [11] <author> L. S. Homem de Mello and S. Lee, </author> <title> editors, Computer-Aided Mechanical Assembly Planning, </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, </address> <year> 1991. </year>
Reference-contexts: The simplicity of the assembly process makes stack products attractive to manufacture. See the collection edited by Homem de Mello and Lee <ref> [11] </ref> for a survey of problems and techniques in computer-aided mechanical assembly planning. Many products, however, are not stack products, that is, a single direction in which the parts must be moved is not sufficient to assemble the product.
Reference: [12] <author> J. Matousek, </author> <title> Reporting points in half-spaces, </title> <journal> Comput. Geom. Theory Appls. </journal> <volume> 2 (1992), </volume> <pages> 169-186. </pages>
Reference-contexts: Theorem 3.1. (Matou sek <ref> [12] </ref>) Let H be a set of n hyperplanes and P a set of m points in R d .
Reference: [13] <author> J. Matousek, </author> <title> Geometric range searching, </title> <booktitle> ACM Computing Surveys 26 (1994), </booktitle> <pages> 421-461. </pages>
Reference-contexts: Then t k = O n 4=3+" X a i = O (n 4=3+" ) 1 t k = O n 1+" X a i = O n 3=2+" 1 &lt; k dlog r ne : In the next subsection we show that, using the known range-searching data structures <ref> [4, 13] </ref>, the family F can be computed in O (n 4=3+" ) time. We now explain how F can be used to construct the desired data structure.
Reference: [14] <author> E. Schomer and C. Thiel, </author> <title> Efficient collision detection for moving polyhedra, </title> <booktitle> Proc. 11th ACM Symp. on Computational Geometry, </booktitle> <year> 1995, </year> <pages> pp. 51-60. </pages>
Reference-contexts: Garca-Lopez and Ramos-Alonzo [9] study true rotational motions, but in a very limited setting: They consider separating a single point from a polygon. Another recent paper dealing with rotations is by Schomer and Thiel <ref> [14] </ref>. Given a stationary polyhedron and a rotating polyhedron, they can find the first collision point in O (m 5=3+" ) time, for any " &gt; 0, where m is the total number of vertices of the polyhedra. This has recently been improved to O (m 8=5+" ) [15]. <p> We then query the structure with each of the segments in S. This can be done in O (n 8=5+" ) time <ref> [14, 15] </ref> 1 . As a result we get a family of pairs of segments: f (A 1 ; B 1 ); (A 2 ; B 2 ); : : : ; (A t ; B t )g; satisfying the following conditions. <p> s; s 0 2 S such that s lies below s 0 , there is an i t with s 2 A i and s 0 2 B i . (E3) i=1 t X b i = O (n 8=5+" ). 1 As mentioned in the Introduction, the bound in <ref> [14] </ref> is O (n 5=3+" ). It has recently been improved to O (n 8=5+" ) [15]. 10 Agarwal et al.
Reference: [15] <author> C. Thiel, </author> <type> personal communication. </type>
Reference-contexts: Given a stationary polyhedron and a rotating polyhedron, they can find the first collision point in O (m 5=3+" ) time, for any " &gt; 0, where m is the total number of vertices of the polyhedra. This has recently been improved to O (m 8=5+" ) <ref> [15] </ref>. In our solution to the rotational ordering, we use the data structure devised in these papers. The paper is organized as follows. In Section 2 we present the global approach for computing a k-directional assembly sequence. Section 3 presents the maximality-reporting structure for points and hyper-planes. <p> We then query the structure with each of the segments in S. This can be done in O (n 8=5+" ) time <ref> [14, 15] </ref> 1 . As a result we get a family of pairs of segments: f (A 1 ; B 1 ); (A 2 ; B 2 ); : : : ; (A t ; B t )g; satisfying the following conditions. <p> It has recently been improved to O (n 8=5+" ) <ref> [15] </ref>. 10 Agarwal et al. For each segment s, we maintain three lists of indices A (s); B (s), and NM (s), and a set M of maximal segments in S, as in the case of translational motion described in Section 4.
Reference: [16] <author> G.T. Toussaint, </author> <title> Movable separability of sets, in Computational Geometry (G.T. </title> <editor> Toussaint, editor), </editor> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1985, </year> <pages> pp. 335-375. </pages>
Reference-contexts: Dehne and Sack [8] study a similar problem in the plane: They allow motions in arbitrary directions, but only one part can be moved at a time. For a set of m constant-complexity polygons, their algorithm runs in O (m 2 log m) time. See Toussaint's survey <ref> [16] </ref> for an extensive (albeit ten-year-old) overview of assembly 1 2 Agarwal et al. problems in the plane. We propose the following alternative approach.
Reference: [17] <author> R. H. Wilson, </author> <title> On Geometric Assembly Planning, </title> <type> Ph.D. Dissertation, </type> <institution> Computer Science Department, Stanford University, </institution> <month> March </month> <year> 1992. </year>
Reference-contexts: Many products, however, are not stack products, that is, a single direction in which the parts must be moved is not sufficient to assemble the product. One solution, proposed by Wilson and Latombe <ref> [17, 18] </ref>, is to search for an assembly sequence that allows to move a subcollection of parts as a rigid body in any direction.
Reference: [18] <author> R. H. Wilson and J.-C. Latombe, </author> <title> Geometric reasoning about mechanical assembly, </title> <booktitle> Artificial Intelligence 71 (1994), </booktitle> <pages> 371-396. </pages>
Reference-contexts: pick up the parts and move them in one fixed direction|the vertical direction for instance|suffices to do the assembly. (We ignore here and in the rest of the paper the issue of how the parts are grasped and manipulated, focusing on the inherent assemblability of the product.) Wilson and Latombe <ref> [18] </ref> call products that can be assembled in this manner stack products. The simplicity of the assembly process makes stack products attractive to manufacture. See the collection edited by Homem de Mello and Lee [11] for a survey of problems and techniques in computer-aided mechanical assembly planning. <p> Many products, however, are not stack products, that is, a single direction in which the parts must be moved is not sufficient to assemble the product. One solution, proposed by Wilson and Latombe <ref> [17, 18] </ref>, is to search for an assembly sequence that allows to move a subcollection of parts as a rigid body in any direction.
Reference: [19] <author> R. H. Wilson and T. Matsui, </author> <title> Partitioning an assembly for infinitesimal motions in translation and rotation, </title> <booktitle> Proceedings of the IEEE International Conference on Intelligent Robots and Systems (1992), </booktitle> <pages> pp. 1311-1318. </pages>
Reference-contexts: For this case, the running time of our algorithm becomes O (m 8=5+" ), for any " &gt; 0. Prior to our work, most of the study of separability problems deals with translational separation; rotations are often handled by resorting to infinitesimal rotations <ref> [10, 19] </ref>. Garca-Lopez and Ramos-Alonzo [9] study true rotational motions, but in a very limited setting: They consider separating a single point from a polygon. Another recent paper dealing with rotations is by Schomer and Thiel [14].
References-found: 19

