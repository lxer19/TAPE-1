URL: http://vibes.cs.uiuc.edu/Publications/Papers/IPDS96.ps.gz
Refering-URL: http://vibes.cs.uiuc.edu/Publications/publications.htm
Root-URL: http://www.cs.uiuc.edu
Email: freed,mjgardne,esmirnig@cs.uiuc.edu  
Title: Performance Visualization: 2-D, 3-D, and Beyond  
Author: Daniel A. Reed Matthew J. Gardner Evgenia Smirni 
Address: Urbana, Illinois 61801  
Affiliation: Department of Computer Science University of Illinois  
Abstract: During the past ten years, performance data visualization techniques have evolved from static, two-dimensional graphics to dynamic graphics and im-mersive virtual environments. We sketch the domain of applicability for each visualization technique using analysis of input/output behavior and WWW traffic as example problem domains. With this background, we describe experiences with virtual environment representations of complex performance data and the potential for immersive interaction with complex software. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Bryson, S. </author> <title> The Virtual Wind Tunnel: A High-Performance Virtual Reality Application. </title> <booktitle> In Proceedings of IEEE 1993 Virtual Reality Annual International Symposium (VRAIS '93) (1993), </booktitle> <pages> pp. 20-26. </pages>
Reference-contexts: These toolkits and libraries hide the low-level details of hardware interactions (e.g., tracker polling), reducing the time needed to develop new virtual reality applications like our Avatar environment. Several groups have developed virtual environment representations of specific problem areas, including interactive computational fluid dynamics <ref> [1] </ref>, molecular docking [9], and financial data visualization [8]. Avatar builds on the interaction lessons gleaned from these environments and from the rich history of statistical graphics [3]. 7 Summary and Futures Performance data presentation techniques have evolved from simple text-based summaries to complex, virtual environments.
Reference: [2] <author> Chen, Z., Tan, S.-M., Campbell, R. H., and Li, Y. </author> <title> Real Time Video and Audio in the World Wide Web. </title> <booktitle> In Fourth International World Wide Web Conference (Boston, </booktitle> <address> MA, </address> <month> December </month> <year> 1995), </year> <pages> pp. 333-348. </pages>
Reference-contexts: large masses of data across multiple scales. 4 WWW Characterization The explosive growth of the WWW is well documented, though much less is known about the data types retrieved and their implications for network protocols and server caching strategies, particularly as the WWW evolves to support streaming audio and video <ref> [2] </ref>. Thus, understanding extant and evolving request patterns and the loads placed on both servers and networks is key to optimizing both server design and operating system resource management policies. <p> In addition, the data clearly show that increasing use of non-text data (i.e., scientific data sets, imagery, audio, and streaming video) will require different approaches to WWW server design <ref> [2] </ref>. Data volume has proven to be the major limitation of statistical analysis; the NCSA WWW server generates over 150 megabytes/day of performance data.
Reference: [3] <author> Cleveland, W. S., and MiGill, M. E., Eds. </author> <title> Dynamic Graphics for Statistics. </title> <publisher> Wadsworth & Brooks/Cole, </publisher> <year> 1988. </year>
Reference-contexts: Again, fine detail is lost in the gray scale figures. 5.1.2 Scattercubes The time tunnel provides a behavioral view of activity, but no mechanism to correlative this activity with other application or system performance metrics. Scattercube matrices, a generalization of simple scat-terplot matrices <ref> [3] </ref>, allow one to study such metric correlations by showing all three-dimensional projections of the N -dimensional data. <p> Several groups have developed virtual environment representations of specific problem areas, including interactive computational fluid dynamics [1], molecular docking [9], and financial data visualization [8]. Avatar builds on the interaction lessons gleaned from these environments and from the rich history of statistical graphics <ref> [3] </ref>. 7 Summary and Futures Performance data presentation techniques have evolved from simple text-based summaries to complex, virtual environments.
Reference: [4] <author> Conway, M., Pausch, R., Gossweiler, R., and Burnette, T. Alice: </author> <title> A Rapid Prototyp-ing System for Building Virtual Environments. </title> <booktitle> In Conference Companion, CHI '94 (Apr. </booktitle> <year> 1994), </year> <pages> pp. 295-296. </pages>
Reference-contexts: Notable infrastructure efforts include Pausch's development of a toolkit for rapid prototyp-ing of virtual environments <ref> [4] </ref> and the NCSA/EVL CAVE and its libraries [7]. These toolkits and libraries hide the low-level details of hardware interactions (e.g., tracker polling), reducing the time needed to develop new virtual reality applications like our Avatar environment.
Reference: [5] <author> Couch, A. L., and Krumme, D. W. </author> <title> Monitoring Parallel Executions in Real Time. </title> <booktitle> In Proceedings of the Fifth Distributed Memory Computing Conference (Apr. </booktitle> <year> 1990), </year> <pages> pp. 1187-1206. </pages>
Reference-contexts: Traditionally, graphical techniques for performance data presentation have relied on static graphics (e.g., line or bar plots). More recently, several tools have emerged that exploit dynamic graphics to illustrate temporal and spatial interactions among software and hardware components <ref> [10, 5, 20, 16] </ref>. Both static and dynamic graphics provide a WIMP (window, icon, menu, pointing device) interface with concomitant menu hierarchies for interaction.
Reference: [6] <author> Crandall, P. E., Aydt, R. A., Chien, A. A., and Reed, D. A. </author> <title> Characterization of a Suite of Input/Output Intensive Applications. </title> <booktitle> In Proceedings of Supercomputing '95 (Dec. </booktitle> <year> 1995). </year>
Reference-contexts: Although much less is known about the interaction between parallel application input/output demands and file system policies than for other resources (e.g., message passing and task scheduling), preliminary data <ref> [6, 23] </ref> suggest that input/output performance is strongly sensitive to these interactions. Redressing input/output limitations is the goal of the national Scalable I/O (SIO) initiative. <p> Both the HF and QCRD codes consist of multiple programs that process large files of numerical quadrature data. To capture input/output dynamics, we instrumented the codes using a version of the Pablo data capture library that supports unobtrusive logging and extraction of input/output traces <ref> [6, 17] </ref>.
Reference: [7] <author> Cruz-Neira, C., D.J.Sandin, and DeFanti, T. </author> <title> Surround-Screen Projection-Based Virtual Reality: </title> <booktitle> The Design and Implementation of the CAVE. In SIGGRAPH '93 Proceedings (Aug. </booktitle> <year> 1993), </year> <institution> Association for Computing Machinery. </institution>
Reference-contexts: Moreover, the ability to walk and fly through the data, to examine it from multiple perspectives, and to change real-time display attributes interactively has provided insights not possible with two-dimensional static or dynamic graphics. 5.1 Infrastructure Avatar operates with (a) a head-mounted display and tracker, (b) the CAVE <ref> [7] </ref> virtual reality theater, or (c) a workstation display with stereo glasses. The CAVE is a room-sized cube of high-resolution, rear-projection displays that allows users to walk about unencumbered by a head-mounted display. <p> Notable infrastructure efforts include Pausch's development of a toolkit for rapid prototyp-ing of virtual environments [4] and the NCSA/EVL CAVE and its libraries <ref> [7] </ref>. These toolkits and libraries hide the low-level details of hardware interactions (e.g., tracker polling), reducing the time needed to develop new virtual reality applications like our Avatar environment.
Reference: [8] <author> Feiner, S., and Beshers, C. </author> <title> Visualizing n-Dimensional Virtual Worlds with n-Vision. </title> <booktitle> In ACM SIGGRAPH Computer Graphics (Mar. 1990), </booktitle> <volume> vol. 24, </volume> <pages> pp. 37-39. </pages>
Reference-contexts: Several groups have developed virtual environment representations of specific problem areas, including interactive computational fluid dynamics [1], molecular docking [9], and financial data visualization <ref> [8] </ref>. Avatar builds on the interaction lessons gleaned from these environments and from the rich history of statistical graphics [3]. 7 Summary and Futures Performance data presentation techniques have evolved from simple text-based summaries to complex, virtual environments.
Reference: [9] <author> Fredrick P. Brooks, J., Ouh-Young, M., Batter, J. J., and Kilpatrick, P. K. </author> <title> Project GROPE | Haptic Displays for Scientific Visualization. </title> <booktitle> In ACM Computer Graphics (Aug. 1990), </booktitle> <volume> vol. </volume> <pages> 24. </pages>
Reference-contexts: These toolkits and libraries hide the low-level details of hardware interactions (e.g., tracker polling), reducing the time needed to develop new virtual reality applications like our Avatar environment. Several groups have developed virtual environment representations of specific problem areas, including interactive computational fluid dynamics [1], molecular docking <ref> [9] </ref>, and financial data visualization [8]. Avatar builds on the interaction lessons gleaned from these environments and from the rich history of statistical graphics [3]. 7 Summary and Futures Performance data presentation techniques have evolved from simple text-based summaries to complex, virtual environments.
Reference: [10] <author> Heath, M. T., and Etheridge, J. A. </author> <title> Visualizing the Performance of Parallel Programs. </title> <booktitle> IEEE Software (Sept. </booktitle> <year> 1991), </year> <pages> 29-39. </pages>
Reference-contexts: Traditionally, graphical techniques for performance data presentation have relied on static graphics (e.g., line or bar plots). More recently, several tools have emerged that exploit dynamic graphics to illustrate temporal and spatial interactions among software and hardware components <ref> [10, 5, 20, 16] </ref>. Both static and dynamic graphics provide a WIMP (window, icon, menu, pointing device) interface with concomitant menu hierarchies for interaction. <p> However, most dynamic representations require more detailed performance data than static graphics. In consequence, most are based on timestamped event traces <ref> [20, 10] </ref>. Because the size of these traces grows rapidly with program execution time and with the number of processors, some dynamic graphics displays support real-time extraction and data display [16]; others limit trace size to that obtainable from test executions with small data sets.
Reference: [11] <author> Kwan, T. T., McGrath, R. E., and Reed, D. A. </author> <title> NCSA's World Wide Web Server: Design and Performance. </title> <journal> IEEE Computer (Nov. </journal> <year> 1995), </year> <pages> 68-74. </pages>
Reference-contexts: Thus, understanding extant and evolving request patterns and the loads placed on both servers and networks is key to optimizing both server design and operating system resource management policies. To gain these insights, during the past two years, we have extensively analyzed the NCSA WWW server logs, both statistically <ref> [11] </ref> and graphically [12, 21]. 4.1 Server Logs Most WWW servers maintain standard logs of each incoming request. <p> Both types of data are represented in the Pablo performance analysis environment's SDDF data format [20], enabling analysis with extant software. 4.2 Data Analysis Our statistical analysis of the processed server logs <ref> [11] </ref> has shown that commercial and government use of the server is growing rapidly, and request heterogeneity is increasing, lessening server cache hit ratios. <p> Periodic seeks are manifest in the history ribbon trajectories along the left (seek) axis. Figure 7 (b) shows the wide variability of operations and durations in the QCRD code, with a much larger bounding cluster volume. representation to a different domain | analysis of WWW data from NCSA <ref> [11] </ref>.
Reference: [12] <author> Lamm, S. E., Scullin, W. H., and Reed, D. A. </author> <title> Real-time Geographic Visualization of World Wide Web Traffic. </title> <booktitle> In Proceedings of the Fifth International World Wide Web Conference (May 1996). </booktitle>
Reference-contexts: To gain these insights, during the past two years, we have extensively analyzed the NCSA WWW server logs, both statistically [11] and graphically <ref> [12, 21] </ref>. 4.1 Server Logs Most WWW servers maintain standard logs of each incoming request. These logs typically contain the IP address of the requesting client, the time of the request, the name of the requested document, and the number of bytes sent in response to the request. <p> At present, Avatar supports three domain-independent display metaphors that accept real-time data from the Pablo software: a three-dimensional generalization of scatterplot matrices [19], a "time tunnel" view of processor interactions [17], and a geographic data display <ref> [12] </ref>, all with data sonification [13]. Below, we briefly describe the application of each metaphor to input/output and WWW analysis. 5.1.1 Time Tunnels The Avatar time tunnel display metaphor captures the time evolutionary behavior of a parallel code via a display consisting of a cylinder whose major axis is time. <p> Rotation, together with the ability to walk around and inside the globe, allows one to explore data from a variety of perspectives. to explore the characteristics of requests to WWW servers <ref> [12] </ref>. Here, each bar is placed at the geographic origin of a WWW request, with the bar heights showing attributes of the requests from that location. The menus in the background of Figure 9 allow users to choose the types of data displayed.
Reference: [13] <author> Madhyastha, T. M., and Reed, D. A. </author> <title> A Framework for Sonification Design. In Auditory Display: Sonification, Audification and Auditory Interfaces (1992), </title> <publisher> Addison-Wesley. </publisher>
Reference-contexts: At present, Avatar supports three domain-independent display metaphors that accept real-time data from the Pablo software: a three-dimensional generalization of scatterplot matrices [19], a "time tunnel" view of processor interactions [17], and a geographic data display [12], all with data sonification <ref> [13] </ref>. Below, we briefly describe the application of each metaphor to input/output and WWW analysis. 5.1.1 Time Tunnels The Avatar time tunnel display metaphor captures the time evolutionary behavior of a parallel code via a display consisting of a cylinder whose major axis is time.
Reference: [14] <author> Miller, B. P., Callaghan, M. D., Cargille, J. M., Hollingsworth, J. K., Irwin, R. B., Karavanic, K. L., and Newhall, T. </author> <title> The Paradyn Parallel Performance Measurement Tools. </title> <journal> In IEEE Computer (Nov. 1995), </journal> <volume> vol. </volume> <pages> 28. </pages>
Reference-contexts: Moreover, because they are best used with a small number of data items, static graphics are ideal for displaying simple performance metrics and high-level snapshots of software and hardware behavior <ref> [14] </ref>. As an example of the value of simple graphic displays, Figure 1 shows a general purpose histogram display tool based on the Pablo performance analysis software [16].
Reference: [15] <author> Poole, J. T. </author> <title> Scalable I/O Initiative. </title> <institution> Cal-ifornia Institute of Technology, </institution> <note> Available at http://www.ccsf.caltech.edu/SIO/, 1996. </note>
Reference-contexts: Redressing input/output limitations is the goal of the national Scalable I/O (SIO) initiative. The Scalable I/O (SIO) initiative <ref> [15] </ref> is a broad-based attack on the input/output problem that encompasses scientific application performance instrumentation and analysis [17], operating systems, and compiler research groups.
Reference: [16] <author> Reed, D. A. </author> <title> Experimental Performance Analysis of Parallel Systems: Techniques and Open Problems. </title> <booktitle> In Proceedings of the 7th International Conference on Modelling Techniques and Tools for Computer Performance Evaluation (May 1994), </booktitle> <pages> pp. 25-51. </pages>
Reference-contexts: CDA 94-01124, and by the National Aeronautics and Space Administration under NASA Contracts NAG-1-613 and USRA 5555-22. 2 Performance Data Visualization Although many performance analysis and visualization tools have been developed for scalable parallel systems, all form a few distinct equivalence classes, distinguished by their performance instrumentation and presentation techniques <ref> [16] </ref>. Within each class, these tools form a continuum of complexity, ranging from simple ones that show statistical profiles of program execution to more sophisticated tools that use graphics to correlate temporal and spatial patterns of application resource demands with system responses. <p> Traditionally, graphical techniques for performance data presentation have relied on static graphics (e.g., line or bar plots). More recently, several tools have emerged that exploit dynamic graphics to illustrate temporal and spatial interactions among software and hardware components <ref> [10, 5, 20, 16] </ref>. Both static and dynamic graphics provide a WIMP (window, icon, menu, pointing device) interface with concomitant menu hierarchies for interaction. <p> As an example of the value of simple graphic displays, Figure 1 shows a general purpose histogram display tool based on the Pablo performance analysis software <ref> [16] </ref>. The tool computes counts, minima, maxima, standard deviations, and histograms of the values of all fields in all records contained in a performance data file represented in the Pablo self-describing data format (SDDF) [20]. <p> In consequence, most are based on timestamped event traces [20, 10]. Because the size of these traces grows rapidly with program execution time and with the number of processors, some dynamic graphics displays support real-time extraction and data display <ref> [16] </ref>; others limit trace size to that obtainable from test executions with small data sets.
Reference: [17] <author> Reed, D. A., Elford, C. L., Madhyastha, T., Scullin, W. H., Aydt, R. A., and Smirni, E. </author> <title> I/O, Performance Analysis, and Performance Data Immersion. </title> <booktitle> In Proceedings of MASCOTS '96 (Feb. </booktitle> <year> 1996), </year> <pages> pp. 1-12. </pages>
Reference-contexts: Both static and dynamic graphics provide a WIMP (window, icon, menu, pointing device) interface with concomitant menu hierarchies for interaction. In contrast, virtual environments offer the yet unfulfilled promise of direct manipulation of performance data and software components, making the user a part of the software and its behavior <ref> [17, 18] </ref>. Below, we briefly describe each of these techniques and their domains of applicability. 2.2 Static Graphics Static, two-dimensional graphics for performance data are based on a long and rich history of map making, plotting, and graphing techniques. <p> Redressing input/output limitations is the goal of the national Scalable I/O (SIO) initiative. The Scalable I/O (SIO) initiative [15] is a broad-based attack on the input/output problem that encompasses scientific application performance instrumentation and analysis <ref> [17] </ref>, operating systems, and compiler research groups. <p> Both the HF and QCRD codes consist of multiple programs that process large files of numerical quadrature data. To capture input/output dynamics, we instrumented the codes using a version of the Pablo data capture library that supports unobtrusive logging and extraction of input/output traces <ref> [6, 17] </ref>. <p> All three versions of Avatar are driven by an SGI Power Onyx with RE2 graphics. At present, Avatar supports three domain-independent display metaphors that accept real-time data from the Pablo software: a three-dimensional generalization of scatterplot matrices [19], a "time tunnel" view of processor interactions <ref> [17] </ref>, and a geographic data display [12], all with data sonification [13].
Reference: [18] <author> Reed, D. A., Elford, C. L., Madhyastha, T. M., Smirni, E., and Lamm, S. E. </author> <title> The Next Frontier: Interactive and Closed Loop Performance Steering. </title> <booktitle> In Proceedings of the 1996 ICPP Workshop on Challenges for Parallel Processing (Aug. </booktitle> <year> 1996). </year>
Reference-contexts: Both static and dynamic graphics provide a WIMP (window, icon, menu, pointing device) interface with concomitant menu hierarchies for interaction. In contrast, virtual environments offer the yet unfulfilled promise of direct manipulation of performance data and software components, making the user a part of the software and its behavior <ref> [17, 18] </ref>. Below, we briefly describe each of these techniques and their domains of applicability. 2.2 Static Graphics Static, two-dimensional graphics for performance data are based on a long and rich history of map making, plotting, and graphing techniques.
Reference: [19] <author> Reed, D. A., Shields, K. A., Tavera, L. F., Scullin, W. H., and Elford, C. L. </author> <title> Virtual Reality and Parallel Systems Performance Analysis. </title> <journal> IEEE Computer (Nov. </journal> <year> 1995), </year> <pages> 57-67. </pages>
Reference-contexts: By exploiting the Pablo environment's support for real-time data extraction, we have developed an immersive virtual environment, called Avatar <ref> [21, 19] </ref>, for real-time, three-dimensional exploration of dynamic performance data. We have successfully used Avatar to study the dynamics of input/output patterns in large parallel applications and to analyze the behavior of WWW servers. Interactions with application scientists have shown that virtual environment exploration is natural and intuitive. <p> All three versions of Avatar are driven by an SGI Power Onyx with RE2 graphics. At present, Avatar supports three domain-independent display metaphors that accept real-time data from the Pablo software: a three-dimensional generalization of scatterplot matrices <ref> [19] </ref>, a "time tunnel" view of processor interactions [17], and a geographic data display [12], all with data sonification [13].
Reference: [20] <author> Ries, B., Anderson, R., Auld, W., Breazeal, D., Callaghan, K., Richards, E., and Smith, W. </author> <title> The Paragon Performance Monitoring Environment. </title> <booktitle> In Proceedings of Supercomputing '93 (Nov. </booktitle> <year> 1993), </year> <pages> pp. 850-859. </pages>
Reference-contexts: Traditionally, graphical techniques for performance data presentation have relied on static graphics (e.g., line or bar plots). More recently, several tools have emerged that exploit dynamic graphics to illustrate temporal and spatial interactions among software and hardware components <ref> [10, 5, 20, 16] </ref>. Both static and dynamic graphics provide a WIMP (window, icon, menu, pointing device) interface with concomitant menu hierarchies for interaction. <p> The tool computes counts, minima, maxima, standard deviations, and histograms of the values of all fields in all records contained in a performance data file represented in the Pablo self-describing data format (SDDF) <ref> [20] </ref>. As shown in the rear window of Figure 1, users can click on a record to obtain data on the fields in the record, and they can click on a field to obtain a histogram of the values associated with a record field. <p> However, most dynamic representations require more detailed performance data than static graphics. In consequence, most are based on timestamped event traces <ref> [20, 10] </ref>. Because the size of these traces grows rapidly with program execution time and with the number of processors, some dynamic graphics displays support real-time extraction and data display [16]; others limit trace size to that obtainable from test executions with small data sets. <p> The second, a geographic distribution, includes the latitude and longitude, city, domain, size, and type of each request. Both types of data are represented in the Pablo performance analysis environment's SDDF data format <ref> [20] </ref>, enabling analysis with extant software. 4.2 Data Analysis Our statistical analysis of the processed server logs [11] has shown that commercial and government use of the server is growing rapidly, and request heterogeneity is increasing, lessening server cache hit ratios.
Reference: [21] <author> Scullin, W. H., Kwan, T. T., and Reed, D. A. </author> <title> Real-time Visualization of NCSA's World Wide Web Data. </title> <booktitle> In Symposium on Visualizing Time-Varying Data (Sept. </booktitle> <year> 1995). </year>
Reference-contexts: To gain these insights, during the past two years, we have extensively analyzed the NCSA WWW server logs, both statistically [11] and graphically <ref> [12, 21] </ref>. 4.1 Server Logs Most WWW servers maintain standard logs of each incoming request. These logs typically contain the IP address of the requesting client, the time of the request, the name of the requested document, and the number of bytes sent in response to the request. <p> By exploiting the Pablo environment's support for real-time data extraction, we have developed an immersive virtual environment, called Avatar <ref> [21, 19] </ref>, for real-time, three-dimensional exploration of dynamic performance data. We have successfully used Avatar to study the dynamics of input/output patterns in large parallel applications and to analyze the behavior of WWW servers. Interactions with application scientists have shown that virtual environment exploration is natural and intuitive.
Reference: [22] <author> Simmons, M. L., Hayes, A. H., Brown, J. J., and Reed, D. A., Eds. </author> <title> Debugging and Performance Tuning for Parallel Computing Systems. </title> <publisher> IEEE Computer Society Press, </publisher> <year> 1996. </year>
Reference-contexts: But, event tracing can greatly perturb execution if instrumentation is placed in frequently executed code. 2.1 User Expectations Our growing experience base with software tools <ref> [22] </ref> suggests that simple, easy to use performance tools are used most frequently, with more complex, sophisticated tools used only to identify pernicious and subtle problems.
Reference: [23] <author> Smirni, E., Aydt, R. A., Chien, A. A., and Reed, D. A. </author> <title> I/O Requirements of Scientific Applications: An Evolutionary View. </title> <booktitle> In Proceedings of the Fifth IEEE Symposium on High-Performance Distributed Computing (1996). </booktitle>
Reference-contexts: Although much less is known about the interaction between parallel application input/output demands and file system policies than for other resources (e.g., message passing and task scheduling), preliminary data <ref> [6, 23] </ref> suggest that input/output performance is strongly sensitive to these interactions. Redressing input/output limitations is the goal of the national Scalable I/O (SIO) initiative.
References-found: 23

