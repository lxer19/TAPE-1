URL: http://www.csl.sri.com/dsa/sadl-intro.ps.gz
Refering-URL: http://www.csl.sri.com/dsa/sadl-main.html
Root-URL: 
Title: Introduction to Sadl 1.0 A Language for Specifying Software Architecture Hierarchies Language updates and releases
Author: Mark Moriconi and R. A. Riemenschneider 
Web: http://www.csl.sri.com/sadl  
Note: This document describes Sadl version 1.0. Related technical papers and the public Sadl version 1.0 tools are available at web site  or updated tools will be made available at this site. This research was supported by the Defense Advanced Research Projects Agency under Rome Laboratory contracts F30602-93-C-0245 and F30602-95-C-0277.  
Affiliation: Computer Science Laboratory SRI International  
Abstract: Technical Report SRI-CSL-97-01 March 1997 Abstract This report describes a new architecture description language called Sadl, intended for the expression of software architecture hierarchies that are to be analyzed formally. The Sadl language can be used to specify both the structure and the semantics of an architecture, but our main focus has been on the former. The interesting features in Sadl include support for explicit mappings between architectures, generic architectures, architectural styles (including well-formedness constraints), and architecture refinement patterns that provide routine solutions to common design problems. Sadl is programming language independent, but can be tailored to model programs in most conventional programming languages. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Mark Moriconi and Xiaolei Qian, </author> <title> "Correctness and Composition of Software Architectures", </title> <booktitle> Proceedings of ACM SIGSOFT'94: Symposium on Foundations of Software Engineering, </booktitle> <address> New Orleans, </address> <month> Louisiana (December </month> <year> 1994), </year> <pages> pp. 164-174. 26 </pages>
Reference-contexts: After reading this document, you should be able to read and write Sadl descriptions of most architectures, mappings, architectural styles, and refinement patterns. The mathematical underpinnings for our approach to hierarchy can be found in two publications <ref> [1, 2] </ref>. The purpose of this document is to explain the Sadl language and how to use it. <p> The correctness of these meaning constraints can be checked by showing that they are true in a mathematical model of the intended semantics of the connectors. Such models can be expressed in any of several conventional formalisms. In <ref> [1] </ref> we demonstrated the use of conventional formalisms CSP and TLA (Temporal Logic of Actions) for this purpose. 7 6 Consider subtypes of the form fx:T j C (x)g and note that whether a given member of type T satisfies C (x) may be impossible to effectively determine. 7 The TLA <p> The subsequent subsection discusses the mapping between the architectural styles employed by these architectures, which requires predicate associations. The two mappings are combined into a single mapping for purposes of formal analysis <ref> [1] </ref>.
Reference: [2] <author> Mark Moriconi, Xiaolei Qian, and R. A. Riemenschneider, </author> <title> "Correct architecture re-finement", </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 21, no. </volume> <month> 4 (April </month> <year> 1995), </year> <pages> pp. 356-372. </pages>
Reference-contexts: After reading this document, you should be able to read and write Sadl descriptions of most architectures, mappings, architectural styles, and refinement patterns. The mathematical underpinnings for our approach to hierarchy can be found in two publications <ref> [1, 2] </ref>. The purpose of this document is to explain the Sadl language and how to use it. <p> Examples include "connectedness" and "finiteness." A Sadl mapping determines an interpretation mapping between two !-logic theories. A mapping can be analyzed for various properties. For example, we would want to know that it is a theory interpretation. We argue in <ref> [2] </ref> that it should also be faithful to prevent unintended connections from appearing in an implementation. Meaning is assigned to connectors using axioms in the Sadl constraint language. <p> For present purposes, it is enough to observe that, without this assumption, a system developer could easily be misled into believing facts about a system architecture that are not true. 8 (The completeness assumption for architectures can be formalized in terms of theory interpretations that are faithful <ref> [2] </ref>.) A more concrete architecture intended to implement the dataflow model of the compiler is depicted at the bottom of Fig. 1. The concrete architecture is a hybrid that implements the dataflow style in terms of pipe-filter, batch-sequential, and shared-memory styles. <p> So 16 A mapping can be used for several purposes. We have studied in detail its use in determining whether or not a given architecture is implemented correctly by another architecture | even in the presence of a change in representation <ref> [2] </ref>. The essential idea is that a Sadl mapping provides enough information to uniquely determine a mapping from sentences in the language of the abstract architecture to sentences in the language of the concrete architecture. <p> A systematic way of creating consistent refinement hierarchies is to develop them transformationally by applying verified refinement patterns. Our experience suggests that simple, but real, architectures can be generated using a small number of patterns <ref> [2] </ref>. If you understand the compiler example, you understand Sadl well enough to use it for describing simple architectures. Sadl has been applied to larger examples, requiring parameterized specifications and other advanced features.
Reference: [3] <author> Mark Moriconi, Xiaolei Qian, R. A. Riemenschneider, and Li Gong, </author> <title> "Secure Software Architectures", </title> <booktitle> Proceedings of IEEE Symposium on Security and Privacy, </booktitle> <address> Oakland, California (May 1997). </address>
Reference-contexts: The architectures are linked by mappings to form a tree of alternative implementations of the X/Open specification. This example illustrates the feasibility of using Sadl for real-world architectural specification. Recently, we have demonstrated how our research on architecture hierarchy can serve as a basis for secure system design <ref> [3] </ref>. Our approach was demonstrated by incorporating security directly into the X/Open DTP architecture. It was necessary to build an architecture hierarchy containing four secure Sadl architectures related by formal proofs of the kind described in our earlier papers.
Reference: [4] <author> X/Open Company, Ltd., </author> <title> Distributed Transaction Processing: Reference Model, </title> <note> Version 2 (November 1993). </note>
Reference-contexts: In general, it is desirable to have more flexibility in defining architectures. For example, we may not want to fix the number of components and connections in an architecture. This occurs in the X/Open Distributed Transaction Processing (DTP) reference architecture <ref> [4] </ref>. To formalize X/Open DTP, we essentially need to build a client-server architecture in which the server is connected to a fixed but undetermined number of clients. The ability to leave certain design decisions open is supported in Sadl through three mechanisms. * Parametric architectures. <p> If you understand the compiler example, you understand Sadl well enough to use it for describing simple architectures. Sadl has been applied to larger examples, requiring parameterized specifications and other advanced features. For example, Sadl has been used to formalize the X/Open Distributed Transaction Processing (DTP) reference architecture <ref> [4] </ref> at multiple levels of detail.
References-found: 4

