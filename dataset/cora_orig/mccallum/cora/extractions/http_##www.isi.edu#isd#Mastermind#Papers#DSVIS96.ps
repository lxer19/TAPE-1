URL: http://www.isi.edu/isd/Mastermind/Papers/DSVIS96.ps
Refering-URL: http://www.isi.edu/isd/Mastermind/Papers/
Root-URL: http://www.isi.edu
Email: Email szekely@isi.edu  
Phone: Phone +1-310-822-1511 (ext. 641) Fax +1-310-823-6714  
Title: Retrospective and Challenges for Model-Based Interface Development  
Author: Pedro Szekely 
Keyword: Model-based interface development, automatic user interface generation, user interface design.  
Address: 4676 Admiralty Way, Marina del Rey, CA 90292, USA  
Affiliation: Information Sciences Institute, University of Southern California  
Abstract: Research on model-based user interface development tools is about 10 years old. Many approaches and prototype systems have been investigated in universities and research laboratories around the world. This paper proposes a generic architecture for these tools, reviews the different approaches in light of this architecture, and discusses their progress towards the goals of increasing the quality and reducing the cost of developing interfaces. The paper closes with a discussion of challenges for future model-based development tools . 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Balzert, H., Hofmann, F., Kruschinski, V., Niemann, C.: </author> <title> The J ANUS Application Development Environment-Generating More than the User Interface . In: </title> <editor> Vanderdonckt J. (ed.): </editor> <booktitle> Proceedings of CADUI96. Namur: Presses Universitaires de Namur 1996 (pp. </booktitle> <pages> 183-207). </pages>
Reference-contexts: The models of different MB-IDEs can differ substantially. Different MB-IDEs typically provide different modelling languages for specifying the contents of the model, and they also emphasise different levels of the model. For example, Mastermind [45] requires developers to explicitly specify all levels of the model, whereas Janus <ref> [1] </ref> only requires a data model. 2.2 Modelling Tools The modelling tools assist developers in building the models. <p> These MB-IDEs feature automated design tools that compute the missing elements of the model from the information that developers do provide. For example, Janus <ref> [1] </ref> only requires developers to supply a domain model, and it features an automated design tool that automatically constructs both the abstract and concrete specifications of the interface.
Reference: 2. <author> Bauer, B., </author> <title> Generating User Interfaces from Formal Specifications of the Application, </title> <editor> In: Vanderdonckt J. (ed.): </editor> <booktitle> Proceedings of CADUI96. Namur: Presses Universitaires de Namur 1996 (pp. </booktitle> <pages> 141-157). </pages>
Reference-contexts: The FUSE system described in [23] also provides a specification language and tool (BOSS [39]) that lets developers specify the abstract interface specification, and many aspects of the concrete specification. In addition, FUSE provides a tool (FLUID <ref> [2] </ref>) that uses the task and domain model to produce specifications that can be fed to the BOSS tool to refine and produce an interface. It is unclear for the published papers whether and how FUSE avoids the postediting problem.
Reference: 3. <author> Beshers, </author> <title> C.M., Feiner, S.K.: Scope: Automated Generation of Graphical Interfaces. </title> <booktitle> In Proceedings of UIST'89. </booktitle> <address> New York: </address> <publisher> ACM Press 1989 (pp. </publisher> <pages> 76-85). </pages>
Reference-contexts: The display aspects of the interface were typically specified outside the specification language, in call-back procedures that painted the screen as appropriate. Some UIMSs used as their main specification the type and procedure declarations that defined the functional aspects of the application <ref> [3, 29] </ref>. Based on this information, they generated menus to invoke the procedures, and dialogue boxes to prompt users for the information needed to construct instances of the types.
Reference: 4. <editor> Bodart, F., Hennebert, A.-M., Leheureux, J.-M., Vanderdonckt, J.: Computer-Aided Window Identification in T RIDENT . In Nordbyn K., Helmersen P.H., Gilmore D.J., Arnesen S.A. (eds.): </editor> <booktitle> Proceedings of INTERACT'95, </booktitle> <address> London: </address> <publisher> Chapman & Hall 1995 (pp. </publisher> <pages> 331-336). </pages>
Reference-contexts: Grizzly Bear represents the first step towards this kind of tool, and further progress needs to be made before such a tool is ready for serious application development. 3.6 Retrospective Design Critics and Advisors Much work on design critics and advisors has been done in the context of model-based tools <ref> [4, 10] </ref>. The reason is that in order to evaluate a design, and automated critic has first to analyse the design to determine what it does. The models provide rich information for critics and advisors to do their work. The following kinds of evaluation tools have been investigated.
Reference: 5. <author> Byrne, M.D., Wood, S.D, Sukaviriya, P., Foley, J.D, Kieras, D.E.: </author> <title> Automating Interface Evaluation . In Adelson, </title> <editor> B., Dumais S., Olson J. (eds.): </editor> <booktitle> Proceedings of CHI'94. </booktitle> <address> New York: </address> <publisher> ACM Press 1994 (pp. </publisher> <pages> 232-237). </pages>
Reference-contexts: These critics require detailed models that are time-consuming to build, and expressed in specialised notations that most developers do not know. However, work is in progress to integrate these tools with MB-IDEs (NGOMSEL with Mastermind <ref> [5] </ref>, Patern is working on an implementation tool for his notation). Once this work is complete these design critics will have a more substantial impact on the design and development of interfaces.
Reference: 6. <author> Cohen, P.R., Cheyer, A., Wang, M., Baeg, </author> <title> S.C.: </title> <booktitle> An Open Agent Architecture . In AAAI Spring Symposium (pp. </booktitle> <pages> 1-8). </pages>
Reference-contexts: Currently, not many model-based interface systems are addressing the construction of interfaces that use these modalities. The model-based interface community runs the risk that the architectures and tools that are being developed will not work with these modalities. One notable exception is the work by Phil Cohen <ref> [6] </ref>. His system provides an open architecture for the development of multimodal user interfaces. The system uses a blackboard architecture that allows an open-ended set of agents to collaborate.
Reference: 7. <author> Comber, T., Maltby, J.: </author> <title> Investigating Layout Complexity . In: </title> <editor> Vanderdonckt J. (ed.): </editor> <booktitle> Proceedings of CADUI96. Namur: Presses Universitaires de Namur 1996 (pp. </booktitle> <pages> 211-229). </pages>
Reference-contexts: Summative evaluation. These tools produce numbers that can be used to rank designs. An example of such a tool is AIDE [40], a tool to compute metrics based on a theory of layout quality. Work on such tools is still very preliminary. The chapter by Comber and Maltby <ref> [7] </ref> describes experiments designed to validate the results of some of these tools. Many property verification tools [24] are designed to detect violations of standard user interface guidelines (e.g., File menu should have the mnemonic F).
Reference: 8. <author> Contreras, J., Saiz, F.: </author> <title> A Framework for the Automatic Generation of Software Tutoring. </title> <editor> In: Vanderdonckt J. (ed.): </editor> <booktitle> Proceedings of CADUI96. Namur: Presses Universitaires de Namur 1996 (pp. </booktitle> <pages> 171-182). </pages>
Reference-contexts: Placement in the model determined the contexts in which the text fragment would appear. The chapter by Contreras and Saiz in <ref> [8] </ref> illustrates how the knowledge in the models can be used to automatically generate software tutors, and how the tutors can be customised to different classes of users with different tutoring needs and preferences.
Reference: 9. <author> Farenc, Ch., Liberati, V., Barthet, M.-F.: </author> <title> Automatic Ergonomic Evaluation: What are the Limits? In: </title> <editor> Vanderdonckt J. (ed.): </editor> <booktitle> Proceedings of CADUI96. Namur: Presses Universitaires de Namur 1996 (pp. </booktitle> <pages> 159-170). </pages>
Reference-contexts: Most style-guide verification tools are not model-based, but rather take as input the toolkit ready file used in well known toolkits (e.g., resource files for Windows, UIL files for Motif). The limitations of these tools are discussed in the paper by Farenc et. al. <ref> [9] </ref>. The problem is that the toolkit-ready file does not contain enough information about a design to verify many of the style rules.
Reference: 10. <author> Fischer, G., Nakakoji, K., Ostwald, J., Stahl, G., Sumner, T.: </author> <title> Embedding Computer-Based Critics in the Context of Design . In Ashlund S., </title> <editor> Mullet K., Henderson A., Hollnagel E., White T. (eds.): </editor> <booktitle> Proceedings of INTERCHI'93. </booktitle> <address> New York: </address> <publisher> ACM Press 1993 (pp. </publisher> <pages> 157-164). </pages>
Reference-contexts: Grizzly Bear represents the first step towards this kind of tool, and further progress needs to be made before such a tool is ready for serious application development. 3.6 Retrospective Design Critics and Advisors Much work on design critics and advisors has been done in the context of model-based tools <ref> [4, 10] </ref>. The reason is that in order to evaluate a design, and automated critic has first to analyse the design to determine what it does. The models provide rich information for critics and advisors to do their work. The following kinds of evaluation tools have been investigated.
Reference: 11. <author> Foley, J.D.: </author> <title> History, Results and Bibliography of the User Interface Design Environment (UIDE), an Early Model-based System for User Interface Design and Implementation . In Patern F. </title> <editor> (ed.): </editor> <booktitle> Proceedings of DSV-IS94. Berlin: Springer-Verlag 1995 (Focus on Computer Graphics Series, </booktitle> <pages> pp. 3-14). </pages>
Reference-contexts: Many MB-IDEs provide implementation tools that use the model to generate more than the user interface. For example, Janus, FUSE, UIDE <ref> [11, 12] </ref> and Humanoid can generate significant parts of the help system for an application based on the information contained in the model. Janus not only generates the interface, but also generates the database schemas for an application, and much of the data management code. <p> The models provide rich information for critics and advisors to do their work. The following kinds of evaluation tools have been investigated. Property verification . The tool verifies that a design satisfies certain properties (e.g., all application functionality is reachable). Some tools <ref> [11, 32] </ref> can only verify a set of predefined properties encoded in a knowledge-base. More powerful tools [35] allow developers to specify the properties to be verified. End-user simulation.
Reference: 12. <author> Foley, J.D., Kim, W.C., Kovacevic, S., Murray, K.: </author> <title> UIDE - An Intelligent User Interface Design Environment . In Sullivan J.W., </title> <editor> Tyler S.W. (eds.): </editor> <booktitle> Intelligent User Interfaces. </booktitle> <address> New York: </address> <publisher> ACM Press 1991 (pp. </publisher> <pages> 339-384). </pages>
Reference-contexts: Many MB-IDEs provide implementation tools that use the model to generate more than the user interface. For example, Janus, FUSE, UIDE <ref> [11, 12] </ref> and Humanoid can generate significant parts of the help system for an application based on the information contained in the model. Janus not only generates the interface, but also generates the database schemas for an application, and much of the data management code.
Reference: 13. <author> Frank, M.: Grizzly Bear: </author> <title> A Demonstrational Learning Tool For A User Interface Specification Language . In van der Veer G.C., </title> <editor> Bagnara S., Kempen G.A.M. (eds.), </editor> <booktitle> Proceedings of UIST'95. </booktitle> <address> New York: </address> <publisher> ACM Press 1995 (pp. </publisher> <pages> 75-76). </pages>
Reference-contexts: Some MB-IDEs such as FUSE and Adept provide visual modelling tools. These tools have not been extensively used, so it is early to comment about their usability for developing large applications. An interesting approach to modelling tools is embodied in a tool called Grizzly Bear <ref> [13] </ref>. This tool tries to hide from developers the intricacies of the models by providing an interface that looks like a traditional interface builder or a drawing editor. The interface provides a palette of building blocks and a drawing area where developers can draw pictures of the interface.
Reference: 14. <author> Gorny, P.: </author> <title> EXPOSE An HCI-Counseling for User Interface Design . In Nordbyn K., </title> <editor> Helmersen P.H., Gilmore D.J., Arnesen S.A. (eds.): </editor> <booktitle> Proceedings of INTERACT'95, </booktitle> <address> London: </address> <publisher> Chapman & Hall 1995 (pp. </publisher> <pages> 297-304). </pages>
Reference-contexts: The work on design advisors has not yet reached a level of maturity that allows a critical discussion of their approach and effectiveness. Two well known systems are Trident and Expose <ref> [14] </ref>. 4 Challenges and Opportunities The main opportunities for model-based interface technology lie ahead because it is better suited than traditional technology to meet the new interface challenges that technology is creating.
Reference: 15. <author> Green, M.: </author> <title> A Survey of Three Dialogue Models. </title> <journal> ACM Transactions on Graphics, </journal> <volume> Vol 5, No. 3, </volume> <month> 244-275 (July </month> <year> 1986). </year>
Reference-contexts: Rather than programming an interface using a toolkit library, developers would write a specification of the interface in a specialised, high-level specification language. This specification would be automatically translated into an executable program, or interpreted at runtime to generate the appropriate interface. Many early UIMSs focused on dialogue specification <ref> [15] </ref>. They used state transition diagrams [18], grammars [30, 31] or event-based representations [41] to specify the interface responses to events coming from the input devices. The display aspects of the interface were typically specified outside the specification language, in call-back procedures that painted the screen as appropriate.
Reference: 16. <author> Harning, M.: </author> <title> An Approach to Structured Display Design - Coping with Complexity. </title> <editor> In: Vanderdonckt J. (ed.): </editor> <booktitle> Proceedings of CADUI96. Namur: Presses Universitaires de Namur 1996 (pp. </booktitle> <pages> 121-138). </pages>
Reference-contexts: The chapters by Morten Harning <ref> [16] </ref> and by Stephanie Wilson and Peter Johnson [50] describe critical decisions that must be made in the design of an interface, which the automated design tools cannot currently make appropriately, and which do not seem feasible to automate.
Reference: 17. <author> Hinrichs, T., Bareiss, R., Birnbaum, L., Collins, G.: </author> <title> An Interface Design Tool based on Explicit Task Models . In Tauber M.J., </title> <editor> Bellotti V., Jeffries R., Mackinlay J.D., Nielsen J. (eds.): </editor> <booktitle> Companion Proceedings of CHI'96. </booktitle> <address> New York: </address> <publisher> ACM Press 1996 (pp. </publisher> <pages> 269-270). </pages>
Reference-contexts: For example, tools like Janus, and early versions of Mecano, use only a domain model, whereas tools like Trident [46, 47], Adept [20], DON [22] and Modest <ref> [17] </ref> use primarily a task model, but also have a domain model. The domain models of the automatic design tools are similar. They describe classes of objects, inheritance between classes, the attributes of each class together with their types and cardinality, and relationships between objects.
Reference: 18. <author> Jacob, R.J.K.: </author> <title> A Specification Language for Direct-Manipulation User Interfaces . ACM Transactions on Graphics, </title> <journal> Vol. </journal> <volume> 5, No. 4, </volume> <month> 283-317 (October </month> <year> 1986) </year> . 
Reference-contexts: This specification would be automatically translated into an executable program, or interpreted at runtime to generate the appropriate interface. Many early UIMSs focused on dialogue specification [15]. They used state transition diagrams <ref> [18] </ref>, grammars [30, 31] or event-based representations [41] to specify the interface responses to events coming from the input devices. The display aspects of the interface were typically specified outside the specification language, in call-back procedures that painted the screen as appropriate.
Reference: 19. <author> Janssen, C., Weisbecker , A., Ziegler , J.: </author> <title> Generating User Interfaces from Data Models and Dialogue Net Specifications . In Ashlund S., </title> <editor> Mullet K., Henderson A., Hollnagel E., White T. (eds.): </editor> <booktitle> Proceedings of INTERCHI'93. </booktitle> <address> New York: </address> <publisher> ACM Press 1993 (pp. </publisher> <pages> 418-423). </pages>
Reference-contexts: simple proof of concept prototypes that were used on toy applications, to powerful systems that address the construction of interfaces for realistic applications (ITS, Trident, Janus, Mastermind, etc.) The models of many MB-IDEs have been integrated with mainstream software engineering modelling techniques such as OOA (Janus), ER models (Trident, GENIUS <ref> [19] </ref>), making it easier to use these tools together with other well established software engineering methodologies. As a community, we need to make progress in two fronts. The first is to build compelling demonstrations of the benefits of model-based tools.
Reference: 20. <author> Johnson, P., Johnson, H., Wilson, S.: </author> <title> Rapid Prototyping of User Interfaces Driven by Task Models. </title> <editor> In J. Carroll (ed.): </editor> <title> Scenario-Based Design: Envisioning Work and Technology in System Development. </title> <publisher> London, John Wiley & Sons 1995 (pp. </publisher> <pages> 209-246). </pages>
Reference-contexts: For example, tools like Janus, and early versions of Mecano, use only a domain model, whereas tools like Trident [46, 47], Adept <ref> [20] </ref>, DON [22] and Modest [17] use primarily a task model, but also have a domain model. The domain models of the automatic design tools are similar. They describe classes of objects, inheritance between classes, the attributes of each class together with their types and cardinality, and relationships between objects.
Reference: 21. <author> Kieras, D.E.: </author> <title> A Guide to GOMS Model Usability Evaluation Using NGOMSL . In Helander M., </title> <editor> Landauer T. (eds.): </editor> <title> The handbook of human-computer interaction. </title> <publisher> Amsterdam: North-Holland 1996. </publisher>
Reference-contexts: The tool verifies that a design satisfies certain properties (e.g., all application functionality is reachable). Some tools [11, 32] can only verify a set of predefined properties encoded in a knowledge-base. More powerful tools [35] allow developers to specify the properties to be verified. End-user simulation. These tools <ref> [21] </ref> simulate a user interacting with an application, and make predictions about times to perform tasks, learning times and likely errors. Summative evaluation. These tools produce numbers that can be used to rank designs. <p> These critics require very detailed models, more detailed than the models currently being used in most MB-IDEs. One example of such a tool is NGOMSEL <ref> [21] </ref>, which belongs to the end-user simulation category of design critics. NGOMSEL takes as input a detailed task model where the leaf tasks represent interaction techniques (CIO).
Reference: 22. <author> Kim, W.C., Foley, J.D.: </author> <title> Providing High-level Control and Expert Assistance in the User Interface Presentation Design . In Ashlund S., </title> <editor> Mullet K., Henderson A., Hollnagel E., White T. (eds.): </editor> <booktitle> Proceedings of INTERCHI'93. </booktitle> <address> New York: </address> <publisher> ACM Press 1993 (pp. </publisher> <pages> 430-437). </pages>
Reference-contexts: For example, tools like Janus, and early versions of Mecano, use only a domain model, whereas tools like Trident [46, 47], Adept [20], DON <ref> [22] </ref> and Modest [17] use primarily a task model, but also have a domain model. The domain models of the automatic design tools are similar. They describe classes of objects, inheritance between classes, the attributes of each class together with their types and cardinality, and relationships between objects.
Reference: 23. <author> Lonczewski, F., Schreiber, S.: </author> <title> The FUSESystem: an Integrated User Interface Design Environment . In: </title> <editor> Vanderdonckt J. (ed.): </editor> <booktitle> Proceedings of CADUI96. Namur: Presses Universitaires de Namur 1996 (pp. </booktitle> <pages> 37-56). </pages>
Reference-contexts: These tools range from text editors to build textual specifications of models (ITS [48, 49], Mastermind), forms-based tools to create and edit model elements (Mecano [37]) and specialised graphical editors (Humanoid [25, 43, 44], FUSE <ref> [23] </ref>, many others). 2.3 Design Critics and Advisors Design critics are tools to evaluate designs. The model-based approach provides an excellent platform for constructing analytic design critics because models contain a rich representation of interface designs that these tools can analyse. <p> Steps 3 and 4 are table driven. The system builds default tables with default entries, but developers can edit these tables and override any entry. Step 5 is done automatically, but Tadeus supports postediting of the generated implementation file. The FUSE system described in <ref> [23] </ref> also provides a specification language and tool (BOSS [39]) that lets developers specify the abstract interface specification, and many aspects of the concrete specification. <p> The BOSS system, briefly described in Loczewskis and Schreibers chapter, is another example of a specification-based MB-IDE. BOSS is also a module of the FUSE system, which is a mixture between automated designer, as implemented in its FLUID module, and a specification system. 3.3 Retrospective Help Generation Many MB-IDEs <ref> [23, 26, 32, 33, 42] </ref> have the ability to automatically, or semiautomatically generate a help system for an application based on model information used to construct the user interface in the first place. Cartoonist [42] was the first system to provide a compelling demonstration of help generation.
Reference: 24. <author> Lwgren, J., Nordqvist, T.: </author> <title> Knowledge-Based Evaluation as Design Support for Graphical User Interfaces . In Bauersfeld P., </title> <editor> Bennett J., Lynch G. (eds.): </editor> <booktitle> Proceedings of CHI'92. </booktitle> <address> New York: </address> <publisher> ACM Press 1992 (pp. </publisher> <pages> 181-188). </pages>
Reference-contexts: Work on such tools is still very preliminary. The chapter by Comber and Maltby [7] describes experiments designed to validate the results of some of these tools. Many property verification tools <ref> [24] </ref> are designed to detect violations of standard user interface guidelines (e.g., File menu should have the mnemonic F). These tools play a similar role to spelling checkers in word processors: they detect surface problems that show a lack of professionalism.
Reference: 25. <author> Luo, P., S zekely, P., Neches, R.: </author> <title> Management of Interface Design in Huma noid. </title> <editor> In Ashlund S., Mullet K., Henderson A., Hollnagel E., White T. (eds.): </editor> <booktitle> Proceedings of INTERCHI'93. </booktitle> <address> New York: </address> <publisher> ACM Press 1993 (pp. </publisher> <pages> 107-114). </pages>
Reference-contexts: A wide range of modelling tools have been developed, often specialised to the different levels of the model. These tools range from text editors to build textual specifications of models (ITS [48, 49], Mastermind), forms-based tools to create and edit model elements (Mecano [37]) and specialised graphical editors (Humanoid <ref> [25, 43, 44] </ref>, FUSE [23], many others). 2.3 Design Critics and Advisors Design critics are tools to evaluate designs. The model-based approach provides an excellent platform for constructing analytic design critics because models contain a rich representation of interface designs that these tools can analyse.
Reference: 26. <author> Moriyn, R., Szekely, P., Neches, R.: </author> <title> Automatic Generation of Help from Interface Design Models . In C. </title> <editor> Plaisant (ed.): </editor> <booktitle> Proceedings of CHI'94. </booktitle> <address> New York: </address> <publisher> ACM Press 1994 (pp. </publisher> <pages> 225-231). </pages>
Reference-contexts: The BOSS system, briefly described in Loczewskis and Schreibers chapter, is another example of a specification-based MB-IDE. BOSS is also a module of the FUSE system, which is a mixture between automated designer, as implemented in its FLUID module, and a specification system. 3.3 Retrospective Help Generation Many MB-IDEs <ref> [23, 26, 32, 33, 42] </ref> have the ability to automatically, or semiautomatically generate a help system for an application based on model information used to construct the user interface in the first place. Cartoonist [42] was the first system to provide a compelling demonstration of help generation. <p> This allowed the user to ask for help at any time, even when the context was not appropriate to perform the action. Humanoid also generated a help system for an application based on the model <ref> [26] </ref>.
Reference: 27. <author> Myers, </author> <title> B.A.: </title> <journal> User Interface Software Tools . ACM Transactions on Comp uter-human Interaction, </journal> <volume> Vol. 2, No. 1, </volume> <month> 64-103 (March </month> <year> 1995). </year>
Reference-contexts: 1 Introduction Model-based user interface development tools trace their roots to work on user interface management systems (UIMS) done in the early 1980s <ref> [27] </ref>. UIMSs seeked to provide an alternative paradigm for constructing interfaces. Rather than programming an interface using a toolkit library, developers would write a specification of the interface in a specialised, high-level specification language.
Reference: 28. <institution> Neuron Dataelements Environment. </institution> <note> http://www.neurondata.com/ </note>
Reference-contexts: However, experience with widely used CASE tools, and expert system shells such as Nexpert Object <ref> [28] </ref> and Kappa [36] suggest that well engineered graphical tools for building models are useful for the development of large applications. They can be better than text editors, but they must be well engineered, and designed to support large applications.
Reference: 29. <author> Olsen, </author> <title> D.R.: A programming language basis for user interface managment . In Bice K., </title> <editor> Lewis C. </editor> <booktitle> (eds.):.Proceedings of CHI'89. </booktitle> <address> New York: </address> <publisher> ACM Press 1989 (pp. </publisher> <pages> 171-176). </pages>
Reference-contexts: The display aspects of the interface were typically specified outside the specification language, in call-back procedures that painted the screen as appropriate. Some UIMSs used as their main specification the type and procedure declarations that defined the functional aspects of the application <ref> [3, 29] </ref>. Based on this information, they generated menus to invoke the procedures, and dialogue boxes to prompt users for the information needed to construct instances of the types.
Reference: 30. <author> Olsen, </author> <title> D.R.: SYNGRAPH : a Graphical User Interface Generator . Computer Graphics, </title> <journal> Vol. </journal> <volume> 23, No. 3, </volume> <month> 43-50 (July </month> <year> 1983). </year>
Reference-contexts: This specification would be automatically translated into an executable program, or interpreted at runtime to generate the appropriate interface. Many early UIMSs focused on dialogue specification [15]. They used state transition diagrams [18], grammars <ref> [30, 31] </ref> or event-based representations [41] to specify the interface responses to events coming from the input devices. The display aspects of the interface were typically specified outside the specification language, in call-back procedures that painted the screen as appropriate.
Reference: 31. <author> Olsen, </author> <title> D.R.: MIKE: </title> <journal> The Menu Interaction Kontrol Environment . ACM Transactions on Information Systems, </journal> <volume> Vol. 5, No. 4, </volume> <month> 318-344 </month> <year> (1986). </year>
Reference-contexts: This specification would be automatically translated into an executable program, or interpreted at runtime to generate the appropriate interface. Many early UIMSs focused on dialogue specification [15]. They used state transition diagrams [18], grammars <ref> [30, 31] </ref> or event-based representations [41] to specify the interface responses to events coming from the input devices. The display aspects of the interface were typically specified outside the specification language, in call-back procedures that painted the screen as appropriate.
Reference: 32. <author> Palanque, P., Bastide, R.: </author> <title> Contextual Help for Free with Formal Dialogue Design. </title> <editor> In Alty J.L., Diaper D., Guest S. (eds.): </editor> <booktitle> Proceedings of HCI'93. </booktitle> <address> Cambridge: </address> <publisher> Cambridge University Press 1993. </publisher>
Reference-contexts: The BOSS system, briefly described in Loczewskis and Schreibers chapter, is another example of a specification-based MB-IDE. BOSS is also a module of the FUSE system, which is a mixture between automated designer, as implemented in its FLUID module, and a specification system. 3.3 Retrospective Help Generation Many MB-IDEs <ref> [23, 26, 32, 33, 42] </ref> have the ability to automatically, or semiautomatically generate a help system for an application based on model information used to construct the user interface in the first place. Cartoonist [42] was the first system to provide a compelling demonstration of help generation. <p> The models provide rich information for critics and advisors to do their work. The following kinds of evaluation tools have been investigated. Property verification . The tool verifies that a design satisfies certain properties (e.g., all application functionality is reachable). Some tools <ref> [11, 32] </ref> can only verify a set of predefined properties encoded in a knowledge-base. More powerful tools [35] allow developers to specify the properties to be verified. End-user simulation.
Reference: 33. <author> Pangoli, S., Patern, F.: </author> <title> Automatic Generation of Task-oriented Help . In van der Veer G.C., </title> <editor> Bagnara S., Kempen G.A.M. (eds.), </editor> <booktitle> Proceedings of UIST'95. </booktitle> <address> New York: </address> <publisher> ACM Press 1995 (pp. </publisher> <pages> 181-187). </pages>
Reference-contexts: The BOSS system, briefly described in Loczewskis and Schreibers chapter, is another example of a specification-based MB-IDE. BOSS is also a module of the FUSE system, which is a mixture between automated designer, as implemented in its FLUID module, and a specification system. 3.3 Retrospective Help Generation Many MB-IDEs <ref> [23, 26, 32, 33, 42] </ref> have the ability to automatically, or semiautomatically generate a help system for an application based on model information used to construct the user interface in the first place. Cartoonist [42] was the first system to provide a compelling demonstration of help generation.
Reference: 34. <author> Patern, F., Faconti, G.: </author> <title> On the Use of LOTOS to Describe Graphical Interaction . In Monk A., </title> <editor> Diaper D., Harrison M.D. (eds.): </editor> <booktitle> Proceedings of HCI'92. </booktitle> <address> Cambridge: </address> <publisher> Cambridge University Press 1992 (pp. </publisher> <pages> 155-174). </pages>
Reference-contexts: Another example of a sophisticated design critic is embodied in the work of Fabio Paterno [35]. His critic is a property verification critic that uses detailed models of an application specified using the LOTOS <ref> [34] </ref> notation. His system allows developers to specify complex properties using a notation based on temporal logic. One of Paternos papers [35] discusses an interesting example about an air traffic controller application that uses a message area to display messages to the user.
Reference: 35. <author> Patern, F., Mezzanotte, M.: </author> <title> Formal Verification of Undesired Behavious in the CERD Case Study. </title> <editor> In Bass L., Unger C. (eds.): </editor> <title> Engineering for Human-Computer Interaction, </title> <booktitle> Proceedings of EHCI95. </booktitle> <address> London: </address> <publisher> Chapman & Hall 1995 (pp. </publisher> <pages> 213-226). </pages>
Reference-contexts: The following kinds of evaluation tools have been investigated. Property verification . The tool verifies that a design satisfies certain properties (e.g., all application functionality is reachable). Some tools [11, 32] can only verify a set of predefined properties encoded in a knowledge-base. More powerful tools <ref> [35] </ref> allow developers to specify the properties to be verified. End-user simulation. These tools [21] simulate a user interacting with an application, and make predictions about times to perform tasks, learning times and likely errors. Summative evaluation. These tools produce numbers that can be used to rank designs. <p> NGOMSEL can also make predictions about features of an interface that users will find difficult to learn. Another example of a sophisticated design critic is embodied in the work of Fabio Paterno <ref> [35] </ref>. His critic is a property verification critic that uses detailed models of an application specified using the LOTOS [34] notation. His system allows developers to specify complex properties using a notation based on temporal logic. One of Paternos papers [35] discusses an interesting example about an air traffic controller application <p> design critic is embodied in the work of Fabio Paterno <ref> [35] </ref>. His critic is a property verification critic that uses detailed models of an application specified using the LOTOS [34] notation. His system allows developers to specify complex properties using a notation based on temporal logic. One of Paternos papers [35] discusses an interesting example about an air traffic controller application that uses a message area to display messages to the user. The last message to arrive is shown in the message area, and the previous ones are queued until the operator gets around to view them.
Reference: 36. <institution> PowerModelfi The Object Power Tool . http://www.intellicorp.com/power-model. html </institution>
Reference-contexts: However, experience with widely used CASE tools, and expert system shells such as Nexpert Object [28] and Kappa <ref> [36] </ref> suggest that well engineered graphical tools for building models are useful for the development of large applications. They can be better than text editors, but they must be well engineered, and designed to support large applications. Most MB-IDEs feature simple forms-based interfaces for creating and editing model entities.
Reference: 37. <author> Puerta, A.: </author> <title> The Mecano Project: Comprehensive and Integrated Support for Model-Based Interface Development . In: </title> <editor> Vanderdonckt J. (ed.): </editor> <booktitle> Proceedings of CADUI96. Namur: Presses Universitaires de Namur 1996 (pp. </booktitle> <pages> 19-36). </pages>
Reference-contexts: A wide range of modelling tools have been developed, often specialised to the different levels of the model. These tools range from text editors to build textual specifications of models (ITS [48, 49], Mastermind), forms-based tools to create and edit model elements (Mecano <ref> [37] </ref>) and specialised graphical editors (Humanoid [25, 43, 44], FUSE [23], many others). 2.3 Design Critics and Advisors Design critics are tools to evaluate designs.
Reference: 38. <author> Schlungbaum, E., Elwert, T.: </author> <title> Automatic User Interface Generation from Declarative Models . In: </title> <editor> Vanderdonckt J. (ed.): </editor> <booktitle> Proceedings of CADUI96. Namur: Presses Universitaires de Namur 1996 (pp. </booktitle> <pages> 3-18). </pages>
Reference-contexts: There is no batch generation process followed by a refinement phase, but rather an incremental evolution of the design, where the computerised advisors and the developers incrementally build the design. Several MB-IDEs are moving away from automation in the direction of computerised advisors. For example, the Tadeus <ref> [38] </ref> system requires developers to specify steps 1 and 2 in a structure called a dialogue graph. Steps 3 and 4 are table driven. The system builds default tables with default entries, but developers can edit these tables and override any entry.
Reference: 39. <author> Schreiber, S.: </author> <title> Specification and Generation of User Interfaces with the BOSS-System. </title> <editor> In Blumenthal B., Gornostaev J., Unger C. (eds.): </editor> <booktitle> Proceedings of EWHCI'94. Berlin: Springer-Verlag 1994 (Lecture Notes in Computer Sciences, </booktitle> <volume> vol. 876, </volume> <pages> pp. 107-120). </pages>
Reference-contexts: The system builds default tables with default entries, but developers can edit these tables and override any entry. Step 5 is done automatically, but Tadeus supports postediting of the generated implementation file. The FUSE system described in [23] also provides a specification language and tool (BOSS <ref> [39] </ref>) that lets developers specify the abstract interface specification, and many aspects of the concrete specification. In addition, FUSE provides a tool (FLUID [2]) that uses the task and domain model to produce specifications that can be fed to the BOSS tool to refine and produce an interface.
Reference: 40. <author> Sears, A.: AIDE: </author> <title> A Step Toward Metric-Based Interface Development Tools . In van der Veer G.C., </title> <editor> Bagnara S., Kempen G.A.M. (eds.), </editor> <booktitle> Proceedings of UIST'95. </booktitle> <address> New York: </address> <publisher> ACM Press 1995 (pp. </publisher> <pages> 101-110). </pages>
Reference-contexts: End-user simulation. These tools [21] simulate a user interacting with an application, and make predictions about times to perform tasks, learning times and likely errors. Summative evaluation. These tools produce numbers that can be used to rank designs. An example of such a tool is AIDE <ref> [40] </ref>, a tool to compute metrics based on a theory of layout quality. Work on such tools is still very preliminary. The chapter by Comber and Maltby [7] describes experiments designed to validate the results of some of these tools.
Reference: 41. <author> Singh, G., Green, M.: </author> <title> Automating the Lexical and Syntactic Design of Graphical User Interfaces: </title> <journal> The UofA* UIMS . ACM Transactions on Graphics , Vol. </journal> <volume> 10, No. 3, </volume> <month> 213-254 (July </month> <year> 1991). </year>
Reference-contexts: This specification would be automatically translated into an executable program, or interpreted at runtime to generate the appropriate interface. Many early UIMSs focused on dialogue specification [15]. They used state transition diagrams [18], grammars [30, 31] or event-based representations <ref> [41] </ref> to specify the interface responses to events coming from the input devices. The display aspects of the interface were typically specified outside the specification language, in call-back procedures that painted the screen as appropriate.
Reference: 42. <author> Sukaviriya, P., Foley, J.D.: </author> <title> Coupling a UI Framework with Automatic Generation of ContextSensitive Animated Help. </title> <booktitle> In Proceedings of UIST'90. </booktitle> <address> New York: </address> <publisher> ACM Press 1990 (pp. </publisher> <pages> 152-166). </pages>
Reference-contexts: The BOSS system, briefly described in Loczewskis and Schreibers chapter, is another example of a specification-based MB-IDE. BOSS is also a module of the FUSE system, which is a mixture between automated designer, as implemented in its FLUID module, and a specification system. 3.3 Retrospective Help Generation Many MB-IDEs <ref> [23, 26, 32, 33, 42] </ref> have the ability to automatically, or semiautomatically generate a help system for an application based on model information used to construct the user interface in the first place. Cartoonist [42] was the first system to provide a compelling demonstration of help generation. <p> Cartoonist <ref> [42] </ref> was the first system to provide a compelling demonstration of help generation. Cartoonist allowed the user to ask how do I do X? questions, where X could be any of the actions of an application.
Reference: 43. <author> Szekely, P., Luo, P., Neches, </author> <title> R: Facilitating the Exploration of Interface Design Alternatives: The Humanoid Model of Interface Design. </title> <editor> In Bauersfeld P., Bennett J., Lynch G. (eds.): </editor> <booktitle> Proceedings of CHI'92. </booktitle> <address> New York: </address> <publisher> ACM Press 1992 (pp. </publisher> <pages> 507-514). </pages>
Reference-contexts: A wide range of modelling tools have been developed, often specialised to the different levels of the model. These tools range from text editors to build textual specifications of models (ITS [48, 49], Mastermind), forms-based tools to create and edit model elements (Mecano [37]) and specialised graphical editors (Humanoid <ref> [25, 43, 44] </ref>, FUSE [23], many others). 2.3 Design Critics and Advisors Design critics are tools to evaluate designs. The model-based approach provides an excellent platform for constructing analytic design critics because models contain a rich representation of interface designs that these tools can analyse.
Reference: 44. <author> Szekely, P., Luo, P., Neches, R. </author> : <title> Beyond Interface Builders: Model-Based Interface Tools. </title> <editor> In Ashlund S., Mullet K., Henderson A., Hollnagel E., White T. (eds.): </editor> <booktitle> Proceedings of INTERCHI'93. </booktitle> <address> New York: </address> <publisher> ACM Press 1993 (pp. </publisher> <pages> 383-390). </pages>
Reference-contexts: A wide range of modelling tools have been developed, often specialised to the different levels of the model. These tools range from text editors to build textual specifications of models (ITS [48, 49], Mastermind), forms-based tools to create and edit model elements (Mecano [37]) and specialised graphical editors (Humanoid <ref> [25, 43, 44] </ref>, FUSE [23], many others). 2.3 Design Critics and Advisors Design critics are tools to evaluate designs. The model-based approach provides an excellent platform for constructing analytic design critics because models contain a rich representation of interface designs that these tools can analyse.
Reference: 45. <author> Szekely, P., Sukaviriya, P., Castells, P., Muthukumarasamy, J., Salcher, E.: </author> <title> Declarative interface models for user interface construction tools: the Mastermind approach. </title> <editor> In Bass L., Unger C. (eds.): </editor> <title> Engineering for Human-Computer Interaction, </title> <booktitle> Proceedings of EHCI95. </booktitle> <address> London: </address> <publisher> Chapman & Hall 1995 (pp. </publisher> <pages> 120-150). </pages>
Reference-contexts: In addition, the concrete specification specifies the layout of all the elements of a window. The models of different MB-IDEs can differ substantially. Different MB-IDEs typically provide different modelling languages for specifying the contents of the model, and they also emphasise different levels of the model. For example, Mastermind <ref> [45] </ref> requires developers to explicitly specify all levels of the model, whereas Janus [1] only requires a data model. 2.2 Modelling Tools The modelling tools assist developers in building the models. <p> For example, Janus [1] only requires developers to supply a domain model, and it features an automated design tool that automatically constructs both the abstract and concrete specifications of the interface. In contrast ITS and Mastermind <ref> [45] </ref> require developers to explicitly specify all levels of the model, so these systems do not offer automated design tools. What they do offer is the capability to reuse specifications. The following section discusses automated design tools in detail.
Reference: 46. <author> Vanderdonckt, J.: </author> <title> Automatic Generation of a User Interface for Highly Interactive Business-Oriented Applications . In Plaisant C. </title> <editor> (ed.): </editor> <booktitle> Companion Proceedings of CHI'94. </booktitle> <address> New York: </address> <note> ACM Press 1994 (pp. 41 & 123-124). </note>
Reference-contexts: For example, tools like Janus, and early versions of Mecano, use only a domain model, whereas tools like Trident <ref> [46, 47] </ref>, Adept [20], DON [22] and Modest [17] use primarily a task model, but also have a domain model. The domain models of the automatic design tools are similar.
Reference: 47. <author> Vanderdonckt, J.: </author> <title> Knowledge-Based Systems for Automated User Interface Generation: the T RIDENT Expierence. </title> <type> Technical Report RP-95-010. </type> <institution> Namur: Facults Universitaires Notre-Dame de la Paix, Institut d'Informatique 1995. </institution> <note> Available at http://www.info.fundp.ac.be/cgi-bin/pub-spec-paper?RP-95-010. </note>
Reference-contexts: For example, tools like Janus, and early versions of Mecano, use only a domain model, whereas tools like Trident <ref> [46, 47] </ref>, Adept [20], DON [22] and Modest [17] use primarily a task model, but also have a domain model. The domain models of the automatic design tools are similar.
Reference: 48. <author> Wiecha, C., Bennett, W., Boies, S., Gould, J., Green, S.: </author> <title> ITS: A Tool for Rapidly Developing Interactive Applications. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> Vol. 8, No. 3, </volume> <month> 204-236 (July </month> <year> 1990). </year>
Reference-contexts: A wide range of modelling tools have been developed, often specialised to the different levels of the model. These tools range from text editors to build textual specifications of models (ITS <ref> [48, 49] </ref>, Mastermind), forms-based tools to create and edit model elements (Mecano [37]) and specialised graphical editors (Humanoid [25, 43, 44], FUSE [23], many others). 2.3 Design Critics and Advisors Design critics are tools to evaluate designs.
Reference: 49. <author> Wiecha, C., Bennett, W.: </author> <title> Generating Highly Interactive User Interfaces . In Bice K., </title> <editor> Lewis C. </editor> <booktitle> (eds.):.Proceedings of CHI'89. </booktitle> <address> New York: </address> <publisher> ACM Press 1989 (pp. </publisher> <pages> 277-282). </pages>
Reference-contexts: A wide range of modelling tools have been developed, often specialised to the different levels of the model. These tools range from text editors to build textual specifications of models (ITS <ref> [48, 49] </ref>, Mastermind), forms-based tools to create and edit model elements (Mecano [37]) and specialised graphical editors (Humanoid [25, 43, 44], FUSE [23], many others). 2.3 Design Critics and Advisors Design critics are tools to evaluate designs.
Reference: 50. <author> Wilson, S., Johnson, P.: </author> <title> Bridging the Generation Gap: From Work Tasks to User Interface Designs. </title> <editor> In: Vanderdonckt J. (ed.): </editor> <booktitle> Proceedings of CADUI96. Namur: Presses Universitaires de Namur 1996 (pp. </booktitle> <pages> 77-94). </pages>
Reference-contexts: The chapters by Morten Harning [16] and by Stephanie Wilson and Peter Johnson <ref> [50] </ref> describe critical decisions that must be made in the design of an interface, which the automated design tools cannot currently make appropriately, and which do not seem feasible to automate. Harnings paper contains an excellent example that illustrates the difficulty of automating steps 1 and 3.
References-found: 50

