URL: ftp://ftp.cs.umd.edu/pub/cim/papers/ISR_TR_93-41.ps
Refering-URL: http://www.cs.umd.edu/~nau/publications.html
Root-URL: 
Title: Recognition of Volumetric Features from CAD Models: Problem Formalization and Algorithms algorithm handles a large
Author: William C. Regli and Dana S. Nau 
Note: the  
Address: College Park, MD 20742 USA  
Affiliation: Department of Computer Science and Institute for Systems Research University of Maryland  
Abstract: Automated recognition of features from CAD models has been attempted for a wide range of application domains in mechanical engineering. However, the absence of a clear mathematical formalism for the problem has made it difficult to develop a general approach|and thus most of these methods are limited in scope. In this paper, we develop a formalization of the problem of recognizing a class of machinable features expressed as MRSEVs (a PDES/STEP library of machining features) [19], and an algorithm for solving this problem. Some of the characteristics of this approach are: 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Seshagiri Rao Ala. </author> <title> Design methodology of boundary data structures. </title> <editor> In Jaroslaw Rossignac and Joshua Turner, editors, </editor> <booktitle> Symposium on Solid Modeling Foundations and CAD/CAM Appli cations, </booktitle> <pages> pages 13-23, </pages> <address> New York, NY 10036, USA, Austin, TX, </address> <month> June </month> <year> 1991. </year> <title> ACM SIGGRAPH, ACM Press. 12 C m is always a cylinder, hence the cost of querying it is constant with respect the input to this procedure. 13 A more precise calculation of these quantities may be possible but will not be attempted here for we are only interested in worst case estimates. </title> <type> 23 </type>
Reference-contexts: Woo [36] analyzes several types of boundary representation data structures and compares their time costs for a set of primitive operations and space requirements. Weiler [35] presents data structures for curved surfaces and with their time and storage complexities. Ala <ref> [1, 2] </ref> builds on this work and introduces variations on the boundary representation data structure with advantages for certain application. Extensions to face-based representations are introduced in [8] and algorithms for their manipulation are analyzed. <p> As mentioned in section 2, the bibliography of work on theoretical complexity results for solid modeling systems consists of a handful of references <ref> [1, 2, 8, 11, 35, 36] </ref>. Calculating the computational complexity of a feature recognition system can be approached several ways.
Reference: [2] <author> Seshagiri Rao Ala. </author> <title> Performance anomalies in boundary data structures. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 12(2) </volume> <pages> 49-58, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: Woo [36] analyzes several types of boundary representation data structures and compares their time costs for a set of primitive operations and space requirements. Weiler [35] presents data structures for curved surfaces and with their time and storage complexities. Ala <ref> [1, 2] </ref> builds on this work and introduces variations on the boundary representation data structure with advantages for certain application. Extensions to face-based representations are introduced in [8] and algorithms for their manipulation are analyzed. <p> As mentioned in section 2, the bibliography of work on theoretical complexity results for solid modeling systems consists of a handful of references <ref> [1, 2, 8, 11, 35, 36] </ref>. Calculating the computational complexity of a feature recognition system can be approached several ways. <p> For example, given a solid S, generate a list of the edges of S; given an edge e, determine the endpoints and parameters 8 of the edge. Similar to analyses presented for boundary data structures in <ref> [2, 11, 36] </ref>, we assume that queries of this type can be made in time linear in the number of primitive elements queried.
Reference: [3] <author> Arlo L. Ames. </author> <title> Production ready feature recognition based automatic group technology part coding. </title> <editor> In Jaroslaw Rossignac and Joshua Turner, editors, </editor> <booktitle> Symposium on Solid Modeling Foundations and CAD/CAM Applications, </booktitle> <pages> pages 161-169, </pages> <address> New York, NY 10036, USA, Austin, TX, June 1991. </address> <publisher> ACM SIGGRAPH, ACM Press. </publisher>
Reference-contexts: Each of these goals would benefit &gt;from a general feature recognition formalism. The work of Henderson [4, 10] was seminal in employing expert systems on the feature recognition problem. Large expert systems, such as <ref> [3] </ref> for part coding, have practical applicability but do not present a framework for their feature recognition domain. In this case, there may be no formal means of specifying the capabilities of the system due to the subjective nature of the part coding problem. <p> Peters [25] illustrates some of the combinatorial difficulties inherent in many graph-theoretic approaches to the feature recognition problem. In the feature recognition literature, [6] presents an analysis of the complexity of her methodology. Other attempts to measure performance include timing results, most notably in <ref> [3, 20] </ref>. Results of this type are highly dependent on the hardware, software implementation, the domain of interest, and the particular test cases chosen for the timing tests. <p> It differs from the iterative -volume subtraction techniques such as developed in [4, 10] in that we do not reduce to ;. It is not based on expert-system rules for deducing feature instances and resolving interaction as in <ref> [3, 4, 10, 21] </ref>. 12 Further, because our algorithm and features are not graph-based, we have been able to base them on a realistic feature class and avoid the tractability problems of [14, 21].
Reference: [4] <author> David C. Anderson and Mark R. Henderson. </author> <title> Computer recognition and extraction of form features: A CAD/CAM link. </title> <booktitle> Computers in Industry, </booktitle> <volume> 5 </volume> <pages> 329-339, </pages> <year> 1984. </year>
Reference-contexts: Each of these goals would benefit &gt;from a general feature recognition formalism. The work of Henderson <ref> [4, 10] </ref> was seminal in employing expert systems on the feature recognition problem. Large expert systems, such as [3] for part coding, have practical applicability but do not present a framework for their feature recognition domain. <p> Our approach, like that of [34], uses queries to the solid modeler to search for the information from which to identify feature instances. It differs from the iterative -volume subtraction techniques such as developed in <ref> [4, 10] </ref> in that we do not reduce to ;. <p> It differs from the iterative -volume subtraction techniques such as developed in [4, 10] in that we do not reduce to ;. It is not based on expert-system rules for deducing feature instances and resolving interaction as in <ref> [3, 4, 10, 21] </ref>. 12 Further, because our algorithm and features are not graph-based, we have been able to base them on a realistic feature class and avoid the tractability problems of [14, 21].
Reference: [5] <institution> Computer Aided Manufacturing-International, Incorporated. CAM-I Features Symposium, Arlington, </institution> <address> TX, USA, August 9-10, Boston, MA 1990. P-90-PM-02. </address>
Reference-contexts: Hence the complexity of the algorithm MRSEV Feature Recognition is O (n 4 part ).2 7 Examples To illustrate that this algorithm can function in realistic machining situations, Figure 3 provides some examples from the domain described by these MRSEVs. These figures appeared previously in <ref> [5, 12, 13] </ref>. An example of the general algorithm's feature intersection independence can be found in Fig. 4. 9 This figure depicts a cylindrical part containing a hole with two intersecting keyways and shoulders.
Reference: [6] <author> Leila De Floriani. </author> <title> Feature extraction from boundary models of three-dimensional objects. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 11(8), </volume> <month> August </month> <year> 1989. </year>
Reference-contexts: Section 8 gives conclusions and future directions for work in this area. The proofs and details of procedures are in appendix A. 2 Related Work The graph algorithm approaches of <ref> [6, 14] </ref> provide an excellent level of computational formality. However, while they have known algorithmic properties, they appear difficult to extend to realistic manufacturing problems. Additionally, graph-based methods and the graph grammars of [26, 32] are prone to combinatorial difficulties [25]. <p> An excellent source of worst-case complexity analysis for boolean operations on boundary data structures is Hoffmann [11]. Peters [25] illustrates some of the combinatorial difficulties inherent in many graph-theoretic approaches to the feature recognition problem. In the feature recognition literature, <ref> [6] </ref> presents an analysis of the complexity of her methodology. Other attempts to measure performance include timing results, most notably in [3, 20]. Results of this type are highly dependent on the hardware, software implementation, the domain of interest, and the particular test cases chosen for the timing tests. <p> Calculating the computational complexity of a feature recognition system can be approached several ways. If the feature recognition algorithm operates on a data structure abstracted from a solid model of an object of interest, such as in <ref> [6, 14] </ref>, its complexity can be calculated by counting the number of operations on the data structure. Alternatively, many systems employ extensive queries to the solid modeling system in a search for hints from which to build up a feature model| most notably [34].
Reference: [7] <author> Xin Dong. </author> <title> Geometric Feature Extraction for Computer-Aided Process Planning. </title> <type> PhD thesis, </type> <institution> Rensselaer Polytechnic Institute, </institution> <address> Troy, NY, USA, </address> <year> 1988. </year>
Reference-contexts: The feature interaction problem has been the focus of numerous research efforts, notably the heuristic approaches of [14, 34]. In [15, 16], an algebra of features is developed for the computation of alternate feature interpretations for parts. The work of <ref> [7] </ref> included the formalization of a feature description language and employed frame-based reasoning algorithms to extract machining features for computer aided process planning. [33] illustrates the need for extracting user defined features types that may arise in specific applications.
Reference: [8] <author> Leila De Floriani and Bienca Falcidieno. </author> <title> A hierarchical boundary model for solid object representation. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 7(1) </volume> <pages> 42-60, </pages> <month> January </month> <year> 1988. </year>
Reference-contexts: Weiler [35] presents data structures for curved surfaces and with their time and storage complexities. Ala [1, 2] builds on this work and introduces variations on the boundary representation data structure with advantages for certain application. Extensions to face-based representations are introduced in <ref> [8] </ref> and algorithms for their manipulation are analyzed. An excellent source of worst-case complexity analysis for boolean operations on boundary data structures is Hoffmann [11]. Peters [25] illustrates some of the combinatorial difficulties inherent in many graph-theoretic approaches to the feature recognition problem. <p> As mentioned in section 2, the bibliography of work on theoretical complexity results for solid modeling systems consists of a handful of references <ref> [1, 2, 8, 11, 35, 36] </ref>. Calculating the computational complexity of a feature recognition system can be approached several ways.
Reference: [9] <author> R. Gadh and F. B. Prinz. </author> <title> Recognition of geometric forms using the differential depth filter. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 24(11) </volume> <pages> 583-598, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: However, while they have known algorithmic properties, they appear difficult to extend to realistic manufacturing problems. Additionally, graph-based methods and the graph grammars of [26, 32] are prone to combinatorial difficulties [25]. The recent work in <ref> [9] </ref> describes recognition techniques that attempt to combat the combinatorial problems by abstracting an approximation of the geometric and topological information in a solid model and finding features in the approximation. The feature interaction problem has been the focus of numerous research efforts, notably the heuristic approaches of [14, 34]. <p> Medium-term directions include extending our results and procedures to include other MRSEVs; generalizing these results to encompass a wider variety of feature recognition domains; and exploring techniques for the simplifying the model in order to achieve a reduction in complexity (as done in <ref> [9] </ref>). As a long-term goal, we hope to develop a general computational paradigm for recognition of machinable features, and mathematical results presented in this paper can be viewed as a first step toward that goal.
Reference: [10] <author> Mark R. Henderson. </author> <title> Extraction of Feature Information from Three-Dimensional CAD Data. </title> <type> PhD thesis, </type> <institution> Purdue University, West Lafayette, IN, USA, </institution> <year> 1984. </year>
Reference-contexts: Each of these goals would benefit &gt;from a general feature recognition formalism. The work of Henderson <ref> [4, 10] </ref> was seminal in employing expert systems on the feature recognition problem. Large expert systems, such as [3] for part coding, have practical applicability but do not present a framework for their feature recognition domain. <p> Our approach, like that of [34], uses queries to the solid modeler to search for the information from which to identify feature instances. It differs from the iterative -volume subtraction techniques such as developed in <ref> [4, 10] </ref> in that we do not reduce to ;. <p> It differs from the iterative -volume subtraction techniques such as developed in [4, 10] in that we do not reduce to ;. It is not based on expert-system rules for deducing feature instances and resolving interaction as in <ref> [3, 4, 10, 21] </ref>. 12 Further, because our algorithm and features are not graph-based, we have been able to base them on a realistic feature class and avoid the tractability problems of [14, 21].
Reference: [11] <author> Christoph M. Hoffman. </author> <title> Geometric and Solid Modeling: An Introduction. </title> <publisher> Morgan Kaufmann Publishers Incorporated, </publisher> <address> CA, </address> <year> 1989. </year>
Reference-contexts: Extensions to face-based representations are introduced in [8] and algorithms for their manipulation are analyzed. An excellent source of worst-case complexity analysis for boolean operations on boundary data structures is Hoffmann <ref> [11] </ref>. Peters [25] illustrates some of the combinatorial difficulties inherent in many graph-theoretic approaches to the feature recognition problem. In the feature recognition literature, [6] presents an analysis of the complexity of her methodology. Other attempts to measure performance include timing results, most notably in [3, 20]. <p> There may be many feature models of part and WP 0 . F M is an element of this class of feature models of part and WP 0 |it describes as a set of features. 3 See <ref> [11] </ref> for the definitions of the regularized boolean operations. 4 The value of min tries to capture the idea that each element in our class of objects is bounded. Boundedness implies that there exists an uncountably infinite number of upper bounds on the size of a given object. <p> As mentioned in section 2, the bibliography of work on theoretical complexity results for solid modeling systems consists of a handful of references <ref> [1, 2, 8, 11, 35, 36] </ref>. Calculating the computational complexity of a feature recognition system can be approached several ways. <p> For example, given a solid S, generate a list of the edges of S; given an edge e, determine the endpoints and parameters 8 of the edge. Similar to analyses presented for boundary data structures in <ref> [2, 11, 36] </ref>, we assume that queries of this type can be made in time linear in the number of primitive elements queried. <p> For example, creation of solids, Euler operations, and boolean set operations. Procedures 4.1 through 4.3 and algorithm 5.1 require routines for creation of solid models; the regularized boolean operations of union, subtraction, and intersection; translation; rotation; and sweeping. The boolean operations are discussed extensively in <ref> [11] </ref> and their complexities are quadratic in n S . For example, if A and B are two solid models and n A and n B are their sizes then the operation A fl B can be performed in O ((n A + n B ) 2 ) time.
Reference: [12] <author> K. E. Hummel. </author> <title> The role of features in computer-aided process planning. </title> <booktitle> In CAM-I Features Symposium, </booktitle> <pages> pages 285-320, </pages> <address> Arlington, TX, USA, August 9-10, Boston, MA 1990. </address> <institution> Computer Aided Manufacturing-International, Incorporated. P-90-PM-02. </institution>
Reference-contexts: Hence the complexity of the algorithm MRSEV Feature Recognition is O (n 4 part ).2 7 Examples To illustrate that this algorithm can function in realistic machining situations, Figure 3 provides some examples from the domain described by these MRSEVs. These figures appeared previously in <ref> [5, 12, 13] </ref>. An example of the general algorithm's feature intersection independence can be found in Fig. 4. 9 This figure depicts a cylindrical part containing a hole with two intersecting keyways and shoulders.
Reference: [13] <author> K. E. Hummel and C. W. Brown. </author> <title> The role of features in the implementation of concurrent product and process design. </title> <booktitle> In ASME Winter Annual Meeting, </booktitle> <pages> pages 1-8, </pages> <address> New York, NY 10017, </address> <year> 1989. </year> <note> ASME. DE-Vol 21, PED-Vol 36. </note>
Reference-contexts: Hence the complexity of the algorithm MRSEV Feature Recognition is O (n 4 part ).2 7 Examples To illustrate that this algorithm can function in realistic machining situations, Figure 3 provides some examples from the domain described by these MRSEVs. These figures appeared previously in <ref> [5, 12, 13] </ref>. An example of the general algorithm's feature intersection independence can be found in Fig. 4. 9 This figure depicts a cylindrical part containing a hole with two intersecting keyways and shoulders.
Reference: [14] <author> S. Joshi and T. C. Chang. </author> <title> Graph-based heurisitcs for recognition of machined features from a 3D solid model. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 20(2) </volume> <pages> 58-66, </pages> <month> March </month> <year> 1988. </year>
Reference-contexts: Section 8 gives conclusions and future directions for work in this area. The proofs and details of procedures are in appendix A. 2 Related Work The graph algorithm approaches of <ref> [6, 14] </ref> provide an excellent level of computational formality. However, while they have known algorithmic properties, they appear difficult to extend to realistic manufacturing problems. Additionally, graph-based methods and the graph grammars of [26, 32] are prone to combinatorial difficulties [25]. <p> The feature interaction problem has been the focus of numerous research efforts, notably the heuristic approaches of <ref> [14, 34] </ref>. In [15, 16], an algebra of features is developed for the computation of alternate feature interpretations for parts. <p> An aggressive approach to handle feature interactions and intersections was done by Mare-fat [21]. The work built on the representation scheme of <ref> [14] </ref> and used a novel combination of expert system and hypothesis testing techniques to extract surface features from polyhedral ob 1 A more detailed outline of this method can be found in [31]. 2 Attribute of hole Type location point orientation vector depth positive real number radius positive real number end <p> While providing insights into the feature interaction problem, the method has the same combinatorial difficulties of <ref> [14] </ref> and the added costs of an expert system to handle interactions. <p> Calculating the computational complexity of a feature recognition system can be approached several ways. If the feature recognition algorithm operates on a data structure abstracted from a solid model of an object of interest, such as in <ref> [6, 14] </ref>, its complexity can be calculated by counting the number of operations on the data structure. Alternatively, many systems employ extensive queries to the solid modeling system in a search for hints from which to build up a feature model| most notably [34]. <p> It is not based on expert-system rules for deducing feature instances and resolving interaction as in [3, 4, 10, 21]. 12 Further, because our algorithm and features are not graph-based, we have been able to base them on a realistic feature class and avoid the tractability problems of <ref> [14, 21] </ref>. In particular, our algorithm is guaranteed to find feature models for all parts describable with our features, regardless of how complicated the interactions are among the features. 3.
Reference: [15] <author> R. Karinthi and D. Nau. </author> <title> An algebraic approach to feature interactions. </title> <journal> IEEE Trans. Pattern Analysis and Machine Intelligence, </journal> <volume> 14(4) </volume> <pages> 469-484, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: The feature interaction problem has been the focus of numerous research efforts, notably the heuristic approaches of [14, 34]. In <ref> [15, 16] </ref>, an algebra of features is developed for the computation of alternate feature interpretations for parts.
Reference: [16] <author> Raghu R. Karinthi. </author> <title> An Algebraic Approach to Feature Interactions. </title> <type> PhD thesis, </type> <institution> The University of Maryland, College Park, MD, USA, </institution> <year> 1990. </year>
Reference-contexts: The feature interaction problem has been the focus of numerous research efforts, notably the heuristic approaches of [14, 34]. In <ref> [15, 16] </ref>, an algebra of features is developed for the computation of alternate feature interpretations for parts.
Reference: [17] <author> Y. S. Kim. </author> <title> Recognition of form features using convex decomposition. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 24(9) </volume> <pages> 461-476, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: Other recent work includes feature recognition from 2D engineering drawings [22], via neural network techniques [27], and using convex volume decompositions <ref> [17] </ref>. The bibliography for complexity results specific to solid modeling operations is not extensive. Existing work contains empirical and some theoretical analysis of the time and space costs for various data structures for representing solids.
Reference: [18] <author> Thomas R. Kramer. </author> <title> A parser that converts a boundary representation into a features representation. </title> <journal> International Journal of Computer Integrated Manufacturing, </journal> <volume> 2(3) </volume> <pages> 154-163, </pages> <year> 1989. </year> <month> 24 </month>
Reference-contexts: Our approach has the following characteristics: 1. Our problem definition is based on a standard class of machining features <ref> [18] </ref> that describe a wide variety of shapes manufacturable on 3-axis milling machines. The primary limitation of our approach as presented here is that it is designed only to handle linearly swept features (i.e., holes and pockets).
Reference: [19] <author> Thomas R. Kramer. </author> <title> A library of material removal shape element volumes (mrsevs). </title> <type> Technical Report NISTIR 4809, </type> <institution> The National Institute of Standards and Technology, Gaithersburg, MD 20899, </institution> <month> March </month> <year> 1992. </year>
Reference-contexts: As a first step toward addressing this difficulty, we have developed a formalization of the problem of recognizing a subset of the set of all machinable features expressible as MRSEVs (Material Removal Shape Element Volumes) <ref> [19] </ref>. MRSEVs are volumetric features corresponding to machining operations on 3-axis milling machines. MRSEVs can be defined using EXPRESS (the official PDES information modeling language) and PDES form features. Kramer [19] has already done this for a subset of the MRSEV library, and has defined the rest using an EXPRESS-like language. <p> problem of recognizing a subset of the set of all machinable features expressible as MRSEVs (Material Removal Shape Element Volumes) <ref> [19] </ref>. MRSEVs are volumetric features corresponding to machining operations on 3-axis milling machines. MRSEVs can be defined using EXPRESS (the official PDES information modeling language) and PDES form features. Kramer [19] has already done this for a subset of the MRSEV library, and has defined the rest using an EXPRESS-like language. <p> These are the only surfaces present in MRSEVs defined below, hence this set contains any object that they describe. The set of features that we will consider in this paper is based on the library of material removal shape element volumes (MRSEVs), which was developed by Kramer <ref> [19] </ref> as a means of categorizing the shapes of volumes to be removed by machining operations on a 3-axis machine tool. MRSEVs are volumetric features, some of the benefits of which have been explained in [28]. <p> Because defining a least upper bound may present many degenerative special cases, for the purposes of this paper, min represents a reasonable upper bound that is not minimal. 5 The MRSEV definitions from <ref> [19] </ref> do not include associated accessibility volumes. The potential benefits of such a development is mentioned in [24]. 5 A feature M is recognizable in if it is part of a feature model that describes , and there exists a computable method of recognizing M from . <p> The class of pockets dealt with in lemma 4.3 may include bottom blends. The next procedure finds the set of bottom blend surfaces associated with the profile of a MRSEV pocket instance. To keep the features consistent with the definitions of <ref> [19] </ref>, Find Bottom Blends returns a set of profiles and blend surfaces. These profiles will be contain the original profiles and enclose any bottom blend that may be found.
Reference: [20] <author> Lycourgos K. Kyprianou. </author> <title> Shape Classification in Computer Aided Design. </title> <type> PhD thesis, </type> <institution> Christ College, University of Cambridge, </institution> <address> Cambridge, United Kingdom, </address> <year> 1980. </year>
Reference-contexts: In this case, there may be no formal means of specifying the capabilities of the system due to the subjective nature of the part coding problem. Kyprianou <ref> [20] </ref> presents an early effort to use grammars to parse solid models of parts for group coding. Perhaps the most comprehensive and formal approach to date has been attempted by Van-denbrande [34]. <p> Peters [25] illustrates some of the combinatorial difficulties inherent in many graph-theoretic approaches to the feature recognition problem. In the feature recognition literature, [6] presents an analysis of the complexity of her methodology. Other attempts to measure performance include timing results, most notably in <ref> [3, 20] </ref>. Results of this type are highly dependent on the hardware, software implementation, the domain of interest, and the particular test cases chosen for the timing tests.
Reference: [21] <author> M. Marefat and R. L. Kashyap. </author> <title> Geometric reasoning for recognition of three-dimensional object features. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 12(10) </volume> <pages> 949-965, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: An aggressive approach to handle feature interactions and intersections was done by Mare-fat <ref> [21] </ref>. <p> It differs from the iterative -volume subtraction techniques such as developed in [4, 10] in that we do not reduce to ;. It is not based on expert-system rules for deducing feature instances and resolving interaction as in <ref> [3, 4, 10, 21] </ref>. 12 Further, because our algorithm and features are not graph-based, we have been able to base them on a realistic feature class and avoid the tractability problems of [14, 21]. <p> It is not based on expert-system rules for deducing feature instances and resolving interaction as in [3, 4, 10, 21]. 12 Further, because our algorithm and features are not graph-based, we have been able to base them on a realistic feature class and avoid the tractability problems of <ref> [14, 21] </ref>. In particular, our algorithm is guaranteed to find feature models for all parts describable with our features, regardless of how complicated the interactions are among the features. 3.
Reference: [22] <author> S. Meeran and M. J. Pratt. </author> <title> Automated feature recognition from 2d drawings. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 25(1) </volume> <pages> 7-17, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: Additionally, although the method is complete for its domain, it is difficult to envision how it would extend to more complex objects and feature classes (such as those involving curved surfaces) and how completeness would be still be possible. Other recent work includes feature recognition from 2D engineering drawings <ref> [22] </ref>, via neural network techniques [27], and using convex volume decompositions [17]. The bibliography for complexity results specific to solid modeling operations is not extensive. Existing work contains empirical and some theoretical analysis of the time and space costs for various data structures for representing solids.
Reference: [23] <author> James R. Miller. </author> <title> Architectural issues in solid modelers. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 9(5) </volume> <pages> 72-87, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: Sweeping also requires the consideration of all entities of a boundary representation of an entity S and, depending on the particular implementation, the creation and union of additional solids to get the swept volume|hence it is also O (n 2 S ). These operations are common model construction techniques <ref> [23] </ref>. Given these assumptions, the complexity of procedure 4.1 is O (n 2 part ); procedure 4.2 is O (n 2 part ); and procedure 4.3 is O (n 3 part ). The detailed analysis of the complexity for each procedure in section 4 can be found in appendix A.
Reference: [24] <author> Dana S. Nau, Satyandra K. Gupta, Thomas R. Kramer, William C. Regli, and Guangming Zhang. </author> <title> Development of machining alternatives based on mrsevs. </title> <booktitle> In International Conference on Computer Integrated Engineering. ASME, </booktitle> <month> August </month> <year> 1993. </year>
Reference-contexts: The potential benefits of such a development is mentioned in <ref> [24] </ref>. 5 A feature M is recognizable in if it is part of a feature model that describes , and there exists a computable method of recognizing M from .
Reference: [25] <author> Thomas J. Peters. </author> <title> Combinatorial anaylsis for feature recognition. </title> <booktitle> In Fourth International Conference on Design Theory and Methodology, </booktitle> <address> Scottsdale, AZ, </address> <month> September 14, 91-97 </month> <year> 1992. </year>
Reference-contexts: However, while they have known algorithmic properties, they appear difficult to extend to realistic manufacturing problems. Additionally, graph-based methods and the graph grammars of [26, 32] are prone to combinatorial difficulties <ref> [25] </ref>. The recent work in [9] describes recognition techniques that attempt to combat the combinatorial problems by abstracting an approximation of the geometric and topological information in a solid model and finding features in the approximation. <p> Extensions to face-based representations are introduced in [8] and algorithms for their manipulation are analyzed. An excellent source of worst-case complexity analysis for boolean operations on boundary data structures is Hoffmann [11]. Peters <ref> [25] </ref> illustrates some of the combinatorial difficulties inherent in many graph-theoretic approaches to the feature recognition problem. In the feature recognition literature, [6] presents an analysis of the complexity of her methodology. Other attempts to measure performance include timing results, most notably in [3, 20].
Reference: [26] <author> J. Miguel Pinilla, Susan Finger, and Friedrich B. Prinz. </author> <title> Shape feature description using an augmented topology graph grammar. </title> <booktitle> In Proceedings NSF Engineering Design Research Conference, </booktitle> <pages> pages 285-300. </pages> <institution> National Science Foundation, </institution> <month> June </month> <year> 1989. </year>
Reference-contexts: However, while they have known algorithmic properties, they appear difficult to extend to realistic manufacturing problems. Additionally, graph-based methods and the graph grammars of <ref> [26, 32] </ref> are prone to combinatorial difficulties [25]. The recent work in [9] describes recognition techniques that attempt to combat the combinatorial problems by abstracting an approximation of the geometric and topological information in a solid model and finding features in the approximation.
Reference: [27] <author> S. Prabhakar and M. R. Henderson. </author> <title> Automatic form-feature recognition using neural-network-based techniques on boundary representations of solid models. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 24(7) </volume> <pages> 381-393, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: Other recent work includes feature recognition from 2D engineering drawings [22], via neural network techniques <ref> [27] </ref>, and using convex volume decompositions [17]. The bibliography for complexity results specific to solid modeling operations is not extensive. Existing work contains empirical and some theoretical analysis of the time and space costs for various data structures for representing solids.
Reference: [28] <author> Micheal J. Pratt. </author> <title> Tutorial paper on advanced topics in solid modeling: Form features and their application in solid modeling. </title> <booktitle> In SIGGRAPH 1987. The Association for Computing Machinery, </booktitle> <publisher> ACM Press, </publisher> <year> 1987. </year>
Reference-contexts: MRSEVs are volumetric features, some of the benefits of which have been explained in <ref> [28] </ref>. The MRSEV hierarchy provides a framework for describing a large class of volumes of interest to machining. Kramer's primary MRSEV types include linear swept features, edge-cut features, ramps, and rotational pockets.
Reference: [29] <author> William C. Regli and Dana S. Nau. </author> <title> Building a general approach to feature recognition of material removal shape element volumes (mrsevs). </title> <editor> In Jaroslaw Rossignac and Joshua Turner, editors, </editor> <booktitle> Second Symposium on Solid Modeling Foundations and CAD/CAM Applications, </booktitle> <address> New York, NY 10036, USA, May 19-21, Montreal, Canada 1993. </address> <publisher> ACM SIGGRAPH, ACM Press. </publisher>
Reference-contexts: Instead, for each procedure we give an outline illustrating that it is within the abilities of solid modeling systems. The details showing how these procedures could be implemented can also be found in <ref> [29] </ref>. Procedure A.1 Maximum Enclosing Cylinder INPUT: part, s, a subset of a cylindrical surface.
Reference: [30] <author> Aristides A. G. Requicha. </author> <title> Representation for rigid solids: Theory, methods, </title> <journal> and systems. Computing Surveys, </journal> <volume> 12(4) </volume> <pages> 437-464, </pages> <month> December </month> <year> 1980. </year>
Reference-contexts: Results of this type are highly dependent on the hardware, software implementation, the domain of interest, and the particular test cases chosen for the timing tests. Hence they represent a weak basis for comparisons between feature recognition methodologies. 3 3 Definitions A solid object is a manifold r-set <ref> [30] </ref> with planar, cylindrical, toroidal, conical and spherical bounding surfaces. These are the only surfaces present in MRSEVs defined below, hence this set contains any object that they describe.
Reference: [31] <author> Aristides A. G. Requicha and Jarek R. Rossignac. </author> <title> Solid modeling and beyond. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 12(5) </volume> <pages> 31-44, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: The work built on the representation scheme of [14] and used a novel combination of expert system and hypothesis testing techniques to extract surface features from polyhedral ob 1 A more detailed outline of this method can be found in <ref> [31] </ref>. 2 Attribute of hole Type location point orientation vector depth positive real number radius positive real number end end condition Attribute of pocket Type location point orientation vector depth positive real number profile edge loop bottom blend edge blend islands set of one or more islands Attribute of island Type
Reference: [32] <author> Scott A. Safier and Susan Finger. </author> <title> Parsing features in solid geometric models. </title> <booktitle> In European Conference on Artificial Intelligence, </booktitle> <year> 1990. </year>
Reference-contexts: However, while they have known algorithmic properties, they appear difficult to extend to realistic manufacturing problems. Additionally, graph-based methods and the graph grammars of <ref> [26, 32] </ref> are prone to combinatorial difficulties [25]. The recent work in [9] describes recognition techniques that attempt to combat the combinatorial problems by abstracting an approximation of the geometric and topological information in a solid model and finding features in the approximation.
Reference: [33] <author> Hiroshi Sakurai and David C. Gossard. </author> <title> Recognizing shape features in solid models. </title> <journal> IEEE Computer Graphics & Applications, </journal> <month> September </month> <year> 1990. </year>
Reference-contexts: In [15, 16], an algebra of features is developed for the computation of alternate feature interpretations for parts. The work of [7] included the formalization of a feature description language and employed frame-based reasoning algorithms to extract machining features for computer aided process planning. <ref> [33] </ref> illustrates the need for extracting user defined features types that may arise in specific applications. Each of these goals would benefit &gt;from a general feature recognition formalism. The work of Henderson [4, 10] was seminal in employing expert systems on the feature recognition problem.
Reference: [34] <author> Jan H. Vandenbrande. </author> <title> Automatic Recognition of Machinable Features in Solid Models. </title> <type> PhD thesis, </type> <institution> University of Rochester, Rochester, </institution> <address> NY, USA, </address> <year> 1990. </year> <month> 25 </month>
Reference-contexts: The feature interaction problem has been the focus of numerous research efforts, notably the heuristic approaches of <ref> [14, 34] </ref>. In [15, 16], an algebra of features is developed for the computation of alternate feature interpretations for parts. <p> Kyprianou [20] presents an early effort to use grammars to parse solid models of parts for group coding. Perhaps the most comprehensive and formal approach to date has been attempted by Van-denbrande <ref> [34] </ref>. <p> Alternatively, many systems employ extensive queries to the solid modeling system in a search for hints from which to build up a feature model| most notably <ref> [34] </ref>. In such systems, a precise calculation of complexity will depend on the cost of the queries. Factors such as the cost of primitive solid modeling operations such as "union", "intersect", or "sweep" are dependent on the particular implementation of solid modeler. <p> Our approach, like that of <ref> [34] </ref>, uses queries to the solid modeler to search for the information from which to identify feature instances. It differs from the iterative -volume subtraction techniques such as developed in [4, 10] in that we do not reduce to ;.
Reference: [35] <author> Kevin Weiler. </author> <title> Edge-based data structures for solid modeling in curved-surface environments. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 5(1) </volume> <pages> 21-40, </pages> <month> January </month> <year> 1985. </year>
Reference-contexts: Existing work contains empirical and some theoretical analysis of the time and space costs for various data structures for representing solids. Woo [36] analyzes several types of boundary representation data structures and compares their time costs for a set of primitive operations and space requirements. Weiler <ref> [35] </ref> presents data structures for curved surfaces and with their time and storage complexities. Ala [1, 2] builds on this work and introduces variations on the boundary representation data structure with advantages for certain application. Extensions to face-based representations are introduced in [8] and algorithms for their manipulation are analyzed. <p> As mentioned in section 2, the bibliography of work on theoretical complexity results for solid modeling systems consists of a handful of references <ref> [1, 2, 8, 11, 35, 36] </ref>. Calculating the computational complexity of a feature recognition system can be approached several ways.
Reference: [36] <author> Tony C. Woo. </author> <title> A combinatorial analysis of boundary data structure schemata. </title> <journal> IEEE Computer Graphics and Applications, </journal> <pages> pages 19-27, </pages> <month> March </month> <year> 1985. </year> <month> 26 </month>
Reference-contexts: The bibliography for complexity results specific to solid modeling operations is not extensive. Existing work contains empirical and some theoretical analysis of the time and space costs for various data structures for representing solids. Woo <ref> [36] </ref> analyzes several types of boundary representation data structures and compares their time costs for a set of primitive operations and space requirements. Weiler [35] presents data structures for curved surfaces and with their time and storage complexities. <p> As mentioned in section 2, the bibliography of work on theoretical complexity results for solid modeling systems consists of a handful of references <ref> [1, 2, 8, 11, 35, 36] </ref>. Calculating the computational complexity of a feature recognition system can be approached several ways. <p> For example, given a solid S, generate a list of the edges of S; given an edge e, determine the endpoints and parameters 8 of the edge. Similar to analyses presented for boundary data structures in <ref> [2, 11, 36] </ref>, we assume that queries of this type can be made in time linear in the number of primitive elements queried.
References-found: 36

