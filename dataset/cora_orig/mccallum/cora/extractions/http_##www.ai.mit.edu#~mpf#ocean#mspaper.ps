URL: http://www.ai.mit.edu/~mpf/ocean/mspaper.ps
Refering-URL: 
Root-URL: 
Title: Operating System Directions for the Next Millennium  
Author: William J. Bolosky, Richard P. Draves, Robert P. Fitzgerald, Christopher W. Fraser, Michael B. Jones, Todd B. Knoblock, Rick Rashid 
Web: http://www.research.microsoft.com  
Address: One Microsoft Way Redmond WA 98052  
Affiliation: Microsoft Research  
Abstract: We believe it is time to reexamine the operating systems role in computing. Operating systems exist to create an environment in which compelling applications come to life. They do that by providing abstractions built on the services provided by hardware. We argue that advances in hardware and networking technology enable a new kind of operating system to support tomorrows applications. Such an operating system would raise the level of abstraction for developers and users, so that individual computers, file systems, and networks become unimportant to most computations in the same way that processor registers, disk sectors, and physical pages are today. 
Abstract-found: 1
Intro-found: 1
Reference: [Adl-Tabatabai 96] <author> Ali-Reza Adl-Tabatabai, Geoff Lnagdale, Steven Lucco and Robert Wahbe. </author> <title> "Efficient and Language-Independent Mobile Programs." </title> <booktitle> In Proceedings of the ACM SIGPLAN 96 Conference on Programming Language Design and Implementation, </booktitle> <pages> pp. 127136, </pages> <month> May </month> <year> 1996. </year>
Reference-contexts: Today, this trend is continuing with the popularity of easy-to-use environments like Java, Visual Basic, and Delphi. The emphasis in the tools industry is shifting from code efficiency to rapid application development with wizards that automatically generate scaffolding or framework code. Virtual machine environments with just-in-time compilation <ref> [Adl-Tabatabai 96, Arnold & Gosling 96] </ref> extend the programmers insulation from processor architecture details, delaying that binding until run time.
Reference: [Anderson et al. 96] <author> T. Anderson, M. Dahlin, J. Neefe, D. Roselli, D. Patterson, and R. Wang. </author> <title> "Serverless Network File Systems." </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 14(1), </volume> <month> February </month> <year> 1996. </year>
Reference-contexts: Distributed file systems <ref> [e.g., Anderson et al. 96, Kistler & Satya 92] </ref> have succeeded in providing efficient location-transparent access to data. Some recent file system work [Wilkes et al. 96, Neefe et al. 96] focuses on auto-configuring and self-tuning for different loads.
Reference: [Arnold & Gosling 96] <author> Ken Arnold and James Gosling. </author> <title> The Java Programming Language. </title> <publisher> Addison-Wesley, </publisher> <year> 1996. </year>
Reference-contexts: Today, this trend is continuing with the popularity of easy-to-use environments like Java, Visual Basic, and Delphi. The emphasis in the tools industry is shifting from code efficiency to rapid application development with wizards that automatically generate scaffolding or framework code. Virtual machine environments with just-in-time compilation <ref> [Adl-Tabatabai 96, Arnold & Gosling 96] </ref> extend the programmers insulation from processor architecture details, delaying that binding until run time. <p> WebOS also includes a remote execution service. WebOS can be used to build highly available and self-tuning web services. The Inferno&trade; system [Lucent 96] integrates an operating system and language environment with the goal of making it easier to create distributed services. Like Java <ref> [Arnold & Gosling 96] </ref>, Inferno creates a virtual-machine environment for applications.
Reference: [Ferreira & Shapiro 94] <author> Paulo Ferreira and Marc Shapiro. </author> <title> "Garbage Collection and DSM Consistency." </title> <booktitle> In Proceedings of the First Symposium on Operating Systems Design and Implementation, </booktitle> <address> Monterey, California, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: Network auto-configuration at the LAN level [Rodeheffer & Schroeder 91, Thomson & Narten 96] is increasingly possible. Distributed garbage collection remains a difficult problem, but progress is being made <ref> [Ferreira & Shapiro 94] </ref>. Systems for distributing parallel work now exist [Geist et al. 94, Livny 95]. Programming languages and compilers provide evidence of a similar evolution. What were once programmer decisions have increasingly been automated.
Reference: [Geist et al. 94] <author> A. Geist, A. Beguelin, J. Dongarra, W. Jiang, R. Manchek, and V. Sunderam. </author> <title> PVM: Parallel Virtual MachineA Users' Guide and Tutorial for Networked Parallel Computing, Scientific and Engineering Series, </title> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: Network auto-configuration at the LAN level [Rodeheffer & Schroeder 91, Thomson & Narten 96] is increasingly possible. Distributed garbage collection remains a difficult problem, but progress is being made [Ferreira & Shapiro 94]. Systems for distributing parallel work now exist <ref> [Geist et al. 94, Livny 95] </ref>. Programming languages and compilers provide evidence of a similar evolution. What were once programmer decisions have increasingly been automated.
Reference: [Grimshaw et al. 97] <author> A. Grimshaw, W. Wulf, </author> <title> and the Legion Team. "The Legion Vision of a Worldwide Virtual Computer." </title> <journal> Communications of the ACM, </journal> <volume> 40(1), </volume> <month> January </month> <year> 1997. </year>
Reference-contexts: Local object representatives hide details like replication and mobility. Local objects have a standard internal structure that makes it easier to reuse code components. One of Globes major features is a hierarchical distributed location service that adapts dynamically to different usage patterns. Legion <ref> [Grimshaw et al. 97] </ref> proposes using an extensible object model to provide a single-system model for a worldwide network of computers. Legion emphasizes high-performance parallel computing. It supports legacy codes by encapsulating them in Legion-style object oriented wrappers.
Reference: [Homburg et al. 96] <author> Philip Homburg, Maarten van Steen, and Andrew S. Tanenbaum. </author> <title> "An Architecture for a Wide Area Distributed System." </title> <booktitle> In Proceedings of the Seventh ACM SIGOPS European Workshop, </booktitle> <address> Connemara, Ireland, </address> <month> September </month> <year> 1996. </year>
Reference-contexts: However, Inferno also includes network protocols and services for distributed programming and a stand-alone implementation suitable for minimal hardware environments. (Sun is moving Java in this direction with the development of JavaOS [Mitchell 96].) The Globe project <ref> [Steen 96, Homburg et al. 96] </ref> investigates distributed shared objects as a technique for building large-scale distributed systems. Local object representatives hide details like replication and mobility. Local objects have a standard internal structure that makes it easier to reuse code components.
Reference: [Kistler & Satya 92] <author> J. J. Kistler and M. Satyanarayanan. </author> <title> "Disconnected Operation in the Coda File System." </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(1):325, </volume> <month> February </month> <year> 1992. </year>
Reference-contexts: Distributed file systems <ref> [e.g., Anderson et al. 96, Kistler & Satya 92] </ref> have succeeded in providing efficient location-transparent access to data. Some recent file system work [Wilkes et al. 96, Neefe et al. 96] focuses on auto-configuring and self-tuning for different loads.
Reference: [Livny 95] <author> M. Livny. </author> <title> "The Condor Distributed Processing System." </title> <journal> Dr. Dobbs Journal, </journal> <pages> pp. 4058, </pages> <month> February </month> <year> 1995. </year>
Reference-contexts: Network auto-configuration at the LAN level [Rodeheffer & Schroeder 91, Thomson & Narten 96] is increasingly possible. Distributed garbage collection remains a difficult problem, but progress is being made [Ferreira & Shapiro 94]. Systems for distributing parallel work now exist <ref> [Geist et al. 94, Livny 95] </ref>. Programming languages and compilers provide evidence of a similar evolution. What were once programmer decisions have increasingly been automated.
Reference: [Lucent 96] <institution> Lucent Technologies. "Inferno: la Commedia Interattiva." </institution> <note> http://inferno.lucent.com/inferno/infernosum.html, 1996. </note>
Reference-contexts: The heart of the WebOS system is WebFS, a global file system. WebFS provides secure cache-coherent access to data. WebOS also includes a remote execution service. WebOS can be used to build highly available and self-tuning web services. The Inferno&trade; system <ref> [Lucent 96] </ref> integrates an operating system and language environment with the goal of making it easier to create distributed services. Like Java [Arnold & Gosling 96], Inferno creates a virtual-machine environment for applications.
Reference: [Mitchell 96] <author> Jim Mitchell. </author> <title> "JavaOS: Back to the Future." </title> <booktitle> Invited talk at the Second Symposium on Operating Systems Design and Implementation, </booktitle> <address> Seattle, Washington, </address> <month> October </month> <year> 1996. </year>
Reference-contexts: Like Java [Arnold & Gosling 96], Inferno creates a virtual-machine environment for applications. However, Inferno also includes network protocols and services for distributed programming and a stand-alone implementation suitable for minimal hardware environments. (Sun is moving Java in this direction with the development of JavaOS <ref> [Mitchell 96] </ref>.) The Globe project [Steen 96, Homburg et al. 96] investigates distributed shared objects as a technique for building large-scale distributed systems. Local object representatives hide details like replication and mobility. Local objects have a standard internal structure that makes it easier to reuse code components.
Reference: [Neefe et al. 96] <author> J. Neefe, D. Roselli, R. Wang, T. Anderson, and M. Dahlin. </author> <title> "Improving the Performance of Log Structured File Systems." </title> <note> http://http.cs.berkeley.edu/~neefe/papers/osdi_submit.ps, 1996. </note>
Reference-contexts: Distributed file systems [e.g., Anderson et al. 96, Kistler & Satya 92] have succeeded in providing efficient location-transparent access to data. Some recent file system work <ref> [Wilkes et al. 96, Neefe et al. 96] </ref> focuses on auto-configuring and self-tuning for different loads. Network auto-configuration at the LAN level [Rodeheffer & Schroeder 91, Thomson & Narten 96] is increasingly possible. Distributed garbage collection remains a difficult problem, but progress is being made [Ferreira & Shapiro 94].
Reference: [Rodeheffer & Schroeder 91] <author> Thomas L. Rodeheffer and Michael D. Schroeder. </author> <title> "Automatic Reconfiguration in Autonet." </title> <booktitle> In Proceedings of the Thirteenth ACM Symposium on Operating Systems Principles, </booktitle> <address> Pacific Grove, California, </address> <pages> pp. 183197, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: Distributed file systems [e.g., Anderson et al. 96, Kistler & Satya 92] have succeeded in providing efficient location-transparent access to data. Some recent file system work [Wilkes et al. 96, Neefe et al. 96] focuses on auto-configuring and self-tuning for different loads. Network auto-configuration at the LAN level <ref> [Rodeheffer & Schroeder 91, Thomson & Narten 96] </ref> is increasingly possible. Distributed garbage collection remains a difficult problem, but progress is being made [Ferreira & Shapiro 94]. Systems for distributing parallel work now exist [Geist et al. 94, Livny 95]. Programming languages and compilers provide evidence of a similar evolution.
Reference: [Steen 96] <author> Maarten van Steen. </author> <title> "The GLOBE Project." </title> <note> http://www.cs.vu.nl/~steen/globe/, 1996. </note>
Reference-contexts: However, Inferno also includes network protocols and services for distributed programming and a stand-alone implementation suitable for minimal hardware environments. (Sun is moving Java in this direction with the development of JavaOS [Mitchell 96].) The Globe project <ref> [Steen 96, Homburg et al. 96] </ref> investigates distributed shared objects as a technique for building large-scale distributed systems. Local object representatives hide details like replication and mobility. Local objects have a standard internal structure that makes it easier to reuse code components.
Reference: [Tennenhouse & Wetherall 96] <author> D. Tennenhouse and D. Wetherall. </author> <title> "Towards an Active Network Architecture." </title> <journal> ACM SIGCOMM Computer Communication Review, </journal> <pages> pp. 518, </pages> <month> April </month> <year> 1996. </year>
Reference: [Thomson & Narten 96] <author> S. Thomson and T. Narten. </author> <title> "IPv6 Stateless Address Autoconfiguration." IETF Request for Comments 1971, </title> <month> August </month> <year> 1996. </year>
Reference-contexts: Distributed file systems [e.g., Anderson et al. 96, Kistler & Satya 92] have succeeded in providing efficient location-transparent access to data. Some recent file system work [Wilkes et al. 96, Neefe et al. 96] focuses on auto-configuring and self-tuning for different loads. Network auto-configuration at the LAN level <ref> [Rodeheffer & Schroeder 91, Thomson & Narten 96] </ref> is increasingly possible. Distributed garbage collection remains a difficult problem, but progress is being made [Ferreira & Shapiro 94]. Systems for distributing parallel work now exist [Geist et al. 94, Livny 95]. Programming languages and compilers provide evidence of a similar evolution.
Reference: [Vahdat et al. 96] <author> Amin Vahdat, Michael Dahlin, and Thomas Anderson. </author> <title> "Turning the Web Into a Computer." </title> <note> http://now.cs.berkeley.edu/WebOS/webos.ps, 1996. </note>
Reference-contexts: In more complicated scenarios, variations at run-time make it desirable to perform these optimizations dynamically or just-in-time. Related Work Several current projects share some of our goals or directions. The WebOS project <ref> [Vahdat et al. 96, Vahdat et al. 97] </ref> addresses the goal of bringing distributed computing to the World Wide Web. The heart of the WebOS system is WebFS, a global file system. WebFS provides secure cache-coherent access to data. WebOS also includes a remote execution service.
Reference: [Vahdat et al. 97] <author> Amin Vahdat, Paul Eastham, Chad Yoshikawa, Michael Dahlin, and Thomas Anderson. "WebOS: </author> <title> Software Support for Scalable Web Services." </title> <booktitle> Submitted to the Sixth Workshop on Hot Topics in Operating Systems, </booktitle> <address> Chatham, Massachussetts, </address> <month> May </month> <year> 1997. </year>
Reference-contexts: In more complicated scenarios, variations at run-time make it desirable to perform these optimizations dynamically or just-in-time. Related Work Several current projects share some of our goals or directions. The WebOS project <ref> [Vahdat et al. 96, Vahdat et al. 97] </ref> addresses the goal of bringing distributed computing to the World Wide Web. The heart of the WebOS system is WebFS, a global file system. WebFS provides secure cache-coherent access to data. WebOS also includes a remote execution service.
Reference: [Wilkes et al. 96] <author> J. Wilkes, R. Golding, C. Staelin, and T. Sullivan. </author> <title> "The HP AutoRAID Hierarchical Storage System." </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 14(1): 108136, </volume> <month> February </month> <year> 1996. </year> <title> msr home | search | features | profiles | groups | Microsoft </title>
Reference-contexts: Distributed file systems [e.g., Anderson et al. 96, Kistler & Satya 92] have succeeded in providing efficient location-transparent access to data. Some recent file system work <ref> [Wilkes et al. 96, Neefe et al. 96] </ref> focuses on auto-configuring and self-tuning for different loads. Network auto-configuration at the LAN level [Rodeheffer & Schroeder 91, Thomson & Narten 96] is increasingly possible. Distributed garbage collection remains a difficult problem, but progress is being made [Ferreira & Shapiro 94].
References-found: 19

