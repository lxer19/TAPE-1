URL: ftp://ftp.csd.uu.se/pub/papers/masters-theses/0077-tronje.ps.gz
Refering-URL: http://www.csd.uu.se/cgi-bin/homepage/?sammy
Root-URL: 
Phone: +46-18-18 25 00  
Title: Process-based simulation of interactive agents in a dynamic terrain military leadership training have consisted of
Author: Samuel Tronje Supervisor: Bjorn Carlson, 
Address: Box 311, S-751 05 Uppsala, Sweden  
Affiliation: Computing Science Department, Uppsala University  Computing Science Dept., Uppsala University Examiner: H-akan Millroth, Computing Science Dept., Uppsala University  
Date: April 6, 1995  
Note: Uppsala Master's Theses in Computing Science 77  ISSN 1100-1836 Examensarbete DV3, 20p  Traditionally,  The use of the concurrent high-level language Erlang has made it possible to implement this quite  This work was  
Abstract: We would like the units in military leadership training to be computer controlled. To provide such units we use agent-based simulation. An agent is an entity, in this case representing a military unit, that can make decisions and act accordingly. A process-based implementation of such a system is natural as concepts such as communication and synchronisation in the model maps directly to the same concepts in the implementation language. Each agent is implemented as a concurrent process and interaction is handled by message passing. The problem is to implement a simulator for military leadership training of battalion chiefs. The active entities in the simulation represents troops of 150 infantry soldiers. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Joe Armstrong, Robert Virding, and Mike Williams. </author> <title> Concurrent Programming in Erlang. </title> <publisher> Prentice Hall, </publisher> <year> 1993. </year>
Reference-contexts: By implementing this simulator we try to answer two interesting questions: * Is a process-based implementation efficient enough for this kind of simulation? * Is it possible to implement such a large system in a short time by using high-level tools like the Erlang <ref> [1] </ref> programming language? 1.1 Background Traditionally, military leadership training have consisted of operations involving much personnel. This is expensive and therefore simulation is needed. The TRACCS system [2] is an attempt to solve some of these problems. TRACCS is a computer-aided system for training of battalion chiefs. <p> During an interval the agents autonomously simulate the actions they will carry out in the amount of time the interval represents. At the end of the interval each agent communicates its new state to the other agents. 3 Erlang The simulator is implemented in the Erlang programming language <ref> [1] </ref>. Erlang is a concurrent functional language with support for distribution.
Reference: [2] <author> Peter Almquist and Bo Hagerf. On TRACCS. CelsiusTech IT, </author> <year> 1994. </year>
Reference-contexts: This is expensive and therefore simulation is needed. The TRACCS system <ref> [2] </ref> is an attempt to solve some of these problems. TRACCS is a computer-aided system for training of battalion chiefs. The battalion chief is placed in his real environment, equipped with maps and radios. His troops are simulated units controlled by operators in a control center.
Reference: [3] <institution> DIS Operational Concept 2.3, </institution> <address> IST-93-25. Orlando, FL, </address> <year> 1993. </year>
Reference-contexts: In a war-gaming simulation there can be infantry-, tank- and artillery-agents, which differ mainly in fire power and movement. There can also be agents representing officers at different levels with different decision mechanisms. Integration with other simulators for example a tank simulator communicating via a DIS (Distributed Interactive Simulation) <ref> [3] </ref> protocol, only needs a special type of agent as an advanced gateway for bidirectional information relay.
Reference: [4] <author> C. Dana Tomlin. </author> <title> Geographic information systems and cartographic Modeling. </title> <publisher> Prentice-Hall, </publisher> <year> 1990. </year>
Reference-contexts: Agents are unable to move into forbidden areas which represents blown bridges, mine fields, attacks with chemical weapons and other areas which agents should not enter. The forbidden areas are controlled by the superuser. The simulator can import geographical data from common GIS (Geographical Information System) <ref> [4] </ref> formats e.g. ARC/INFO. The simulation is fair i.e. agents with the same fatigue are able to move the same distance in the same time. This introduces the problem of time. Time is discrete, divided in consecutive intervals.
Reference: [5] <author> Bjorn Carlson and Samuel Tronje. </author> <title> Sim94 | a concurrent simulator for plan-driven troops. </title> <type> Technical report, </type> <institution> Computing Science Department, Uppsala University, Sweden, </institution> <year> 1995. </year>
Reference-contexts: Messages are guaranteed to be delivered and arrive in the same order as they were sent. 4 Design Some optimisations that affected the design will be presented, followed by an overview of the system. See the technical report <ref> [5] </ref> for more information on implementation details. 4 4.1 Optimisations The agents need to know each others positions.
Reference: [6] <author> James Westervelt and William D. Goran. </author> <title> Introduction to GRASS 4. </title> <type> Draft ADP Report, </type> <institution> USACERL, </institution> <month> July </month> <year> 1991. </year>
Reference-contexts: If there is an agent attacking another agent, the world process takes care of battle judgement to determine the losses. 4.2.3 The Terrain process The geographical data is preprocessed to an internal format with the GIS-system GRASS <ref> [6] </ref>. The terrain is a 25 fi 25 km area divided in 62.500 squares, 100 fi 100 m. Water is approximated only on the edges delimiting the squares.
Reference: [7] <author> Brian Harvey and Mattehew Wright. </author> <title> Simply Scheme. </title> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: Logging of the system status for robustness is done frequently. A saved status can be reloaded and the system restarted. 4.2.6 Clients and tokenizers The clients are implemented for X windows using Scheme Tk (STk). STk is a Scheme <ref> [7] </ref> interpreter integrated with the GUI tool kit Tk, usually used together with TCL (Tool Command Language) [8]. As part of the project the socket library was interfaced with STk for communication with the simulator. The tokenizer processes are the internal representation of the clients in the simulator.
Reference: [8] <author> Brent Welch. </author> <title> Practical programming in TCL and TK. </title> <note> Draft; the book will be published by Prentice Hall, </note> <month> August </month> <year> 1994. </year> <month> 14 </month>
Reference-contexts: A saved status can be reloaded and the system restarted. 4.2.6 Clients and tokenizers The clients are implemented for X windows using Scheme Tk (STk). STk is a Scheme [7] interpreter integrated with the GUI tool kit Tk, usually used together with TCL (Tool Command Language) <ref> [8] </ref>. As part of the project the socket library was interfaced with STk for communication with the simulator. The tokenizer processes are the internal representation of the clients in the simulator. A tokenizer process receives messages from a client.
References-found: 8

