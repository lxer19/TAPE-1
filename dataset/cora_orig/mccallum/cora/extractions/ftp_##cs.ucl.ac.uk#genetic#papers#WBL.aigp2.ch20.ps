URL: ftp://cs.ucl.ac.uk/genetic/papers/WBL.aigp2.ch20.ps
Refering-URL: http://www.cs.bham.ac.uk/~wbl/biblio/gp-bibliography.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: 20 Data Structures and Genetic Programming  two techniques for reducing run time.  
Author: William B. Langdon 
Note: 20.1 Introduction Appendix 20.A describes  
Abstract: In real world applications, software engineers recognise the use of memory must be organised via data structures and that software using the data must be independant of the data structures' implementation details. They achieve this by using abstract data structures, such as records, files and buffers. We demonstrate that genetic programming can automatically implement simple abstract data structures, considering in detail the task of evolving a list. We show general and reasonably efficient implementations can be automatically generated from simple primitives. A model for maintaining evolved code is demonstrated using the list problem. Much published work on genetic programming (GP) evolves functions without side-effects to learn patterns in test data. In contrast human written programs often make extensive and explicit use of memory. Indeed memory in some form is required for a programming system to be Turing Complete, i.e. for it to be possible to write any (computable) program in that system. However inclusion of memory can make the interactions between parts of programs much more complex and so make it harder to produce programs. Despite this it has been shown GP can automatically create programs which explicitly use memory [Teller 1994]. In both normal and genetic programming considerable benefits have been found in adopting a structured approach. For example [Koza 1994] shows the introduction of evolvable code modules (automatically defined functions, ADFs) can greatly help GP to reach a solution. We suggest that a corresponding structured approach to use of data will similarly have significant advantage to GP. Earlier work has demonstrated that genetic programming can automatically generate simple abstract data structures, namely stacks and queues [Langdon 1995a]. That is, GP can evolve programs that organise memory (accessed via simple read and write primitives) into data structures which can be used by external software without it needing to know how they are implemented. This chapter shows it is possible to evolve a list data structure from basic primitives. [Aho, Hopcroft and Ullman 1987] suggest three different ways to implement a list but these experiments show GP can evolve its own implementation. This requires all the list components to agree on one implementation as they co-evolve together. Section 20.3 describes the GP architecture, including use of Pareto multiple component fitness scoring (20.3.4) and measures aimed at speeding the GP search (20.3.5). The evolved solutions are described in Section 20.4. Section 20.5 presents a candidate model for maintaining evolved software. This is followed by a discussion of what we have learned (20.6) and conclusions that can be drawn (20.7). 
Abstract-found: 1
Intro-found: 1
Reference: <author> Aho, A. V. (1987) J. E. Hopcroft, and J. D. Ullman, </author> <title> Data Structures and Algorithms. </title> <publisher> Addison-Wesley. </publisher>
Reference: <author> D'haeseleer, P. </author> <title> (1994) Context preserving crossover in genetic programming. </title> <booktitle> In Proceedings of the 1994 IEEE World Congress on Computational Intelligence, </booktitle> <volume> volume 1, </volume> <pages> pages 256-261. </pages> <publisher> IEEE Press. </publisher>
Reference: <author> Goldberg, D. E. </author> <title> (1989) Genetic Algorithms in Search Optimization and Machine Learning. </title> <publisher> Addison-Wesley. </publisher>
Reference: <author> Handley, S. </author> <title> (1994) On the use of a directed acyclic graph to represent a population of computer programs. </title> <booktitle> In Proceedings of the 1994 IEEE World Congress on Computational Intelligence, </booktitle> <pages> 154-159. </pages> <publisher> IEEE Press. </publisher>
Reference: <author> Harvey, I. </author> <title> (1992) Species adaptation genetic algorithms: A basis for a continuing SAGA. </title> <editor> In F. J. Varela and P. Bourgine, eds. </editor> <booktitle> Toward a Practice of Autonomous Systems, Proceeding of the first European Conference on Artificial Life (ECAL), </booktitle> <pages> pages 346-354. </pages> <publisher> MIT Press. </publisher>
Reference: <author> Horn, J (1993) N. Nafpliotis, and D. E. Goldberg, </author> <title> Multiobjective optimization using the niched pareto genetic algorithm. </title> <type> IlliGAL 93005, </type> <institution> University of Illinois, 104 South Mathews Avenue, Urbana, </institution> <note> IL 61801 Iba, </note> <author> H. (1994) H. de Garis, and T. Sato, </author> <title> Genetic programming with local hill-climbing. </title> <editor> In Y. Davidor, H-P. Schwefel and R. Manner, eds. </editor> <booktitle> Parallel Problem Solving from Nature III, </booktitle> <pages> 334-343. </pages> <publisher> Springer-Verlag. </publisher>
Reference: <editor> Koza, J. R. </editor> <booktitle> (1992) Genetic Programming: On the Programming of Computers by Natural Selection. </booktitle> <publisher> MIT Press. </publisher>
Reference: <author> Koza, J. R. </author> <title> (1994) Genetic Programming II: Automatic Discovery of Reusable Programs. </title> <publisher> MIT Press. </publisher>
Reference: <author> Langdon, W. B. </author> <title> (1995a) Evolving data structures using genetic programming. </title> <editor> In L. Eshelman, ed. </editor> <booktitle> Genetic Algorithms: Proceedings of the Sixth International Conference, </booktitle> <pages> 295-302. </pages> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> Langdon, W. B. </author> <title> (1995b) Directed crossover within genetic programming. Research Note RN/95/71, </title> <address> University College London, Gower Street, London WC1E 6BT, UK. </address>
Reference: <author> Ryan, C. </author> <title> (1994) Pygmies and civil servants. </title> <editor> In K. E. Kinnear, Jr., ed. </editor> <booktitle> Advances in Genetic Programming, chapter 11. </booktitle> <publisher> MIT Press. </publisher>
Reference: <author> Tackett, W. A. (1994) and A. Carmi, </author> <title> The donut problem: Scalability and generalizationin genetic programming. </title> <editor> In K. E. Kinnear, Jr., ed. </editor> <booktitle> Advances in Genetic Programming, chapter 7. </booktitle> <publisher> MIT Press. </publisher>
Reference: <author> Teller, A. </author> <title> (1994) The evolution of mental models. </title> <editor> In K. E. Kinnear, Jr., ed. </editor> <booktitle> Advances in Genetic Programming, chapter 9. </booktitle> <publisher> MIT Press. </publisher>
Reference: <author> Whigham, P. A. </author> <title> (1995) Inductive bias and genetic programming. </title> <editor> In A. M. S. Zalzala, ed. </editor> <booktitle> First InternationalConference on Genetic Algorithms in Engineering Systems: Innovations and Applications, GALESIA, </booktitle> <volume> volume 414, </volume> <pages> pages 461-466, </pages> <address> London, UK. </address> <publisher> IEE. </publisher>
References-found: 14

