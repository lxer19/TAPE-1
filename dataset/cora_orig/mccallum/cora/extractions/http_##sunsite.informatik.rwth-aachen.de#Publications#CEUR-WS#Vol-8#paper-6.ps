URL: http://sunsite.informatik.rwth-aachen.de/Publications/CEUR-WS/Vol-8/paper-6.ps
Refering-URL: http://karna.cs.umd.edu:3264/people/godfrey/cites.html
Root-URL: 
Email: godfrey@arl.mil  jarek@cs.yorku.ca  
Title: Semantic Query Caching for Heterogeneous Databases  
Author: Parke Godfrey Jarek Gryz 
Address: 2800 Powder Mill Road Adelphi, Maryland 20783-1197 U.S.A.  Toronto, Ontario M3J 1P3 Canada  
Affiliation: U.S. Army Research Laboratory  Department of Computer Science York University  
Abstract: Query caching can play a vital role in heterogeneous, multi-database environments. Answers to a query that are available in cache at the local client can be returned to the user quickly, while the rest of the query is evaluated. The use of caches can optimize query evaluation. By caching certain sensitive data locally, caches can be used to answer the parts of queries that involve the sensitive data, so it need not be shipped across the network. Most prior cache schemes have been tuple-based or page-based. It is unclear, however, how these might be adapted for multi-databases. We explore a more flexible semantic query caching (SQC) approach. In SQC, caches are the answer sets of previous queries, labeled by the query expressions that produced them. We promote developing the technology, based on logic, to manipulate semantic caches, to determine when and how caches can be used to answer subsequent queries, and to optimize via The copyright of this paper belongs to the papers authors. Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage. Proceedings of the 4th KRDB Workshop Athens, Greece, 30-August-1997 (F. Baader, M.A. Jeusfeld, W. Nutt, eds.) http://sunsite.informatik.rwth-aachen.de/Publications/CEUR-WS/Vol-8/ cache use.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Abiteboul, Y. Sagiv, and V. Vianu. </author> <title> Foundations of Databases. </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: Thus, the subsumption test alone is sufficient for the simplest case of SQC above (case 1 from Figure 1 without joins considered). SQC with joins (and especially SQC with dialogue) requires more sophisticated inferencing. In particular, full Datalog subsumption must be considered <ref> [1, 18] </ref>; that is, when the collection of caches subsume (or partially subsume) the query. Also, when caches and queries are not simply conjunctive queries|that is, they may employ view predicates|more sophisticated reasoning is needed. We consider such issues in [8, 9].
Reference: [2] <author> S. Adali, S. Candan, Y. Papakonstantinou, and V. S. Subrahmanian. </author> <title> Query caching and optimization in distributed mediator systems. </title> <booktitle> In Proc. SIGMOD, </booktitle> <pages> pages 137-148, </pages> <address> Montreal, Canada, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: Queries are issued via the global concepts to the mediators, which identify the relevant sources, issue local queries to them, and then synthesize the results. Query optimization in heterogeneous environments has received increased attention recently <ref> [2, 7, 13] </ref>, and by us as well [8, 9, 10]. We contend that SQC is needed in these environments and is critical for viable optimization strategies. In addition, SQC can help attend a number of other issues that arise in mediated, distributed environments. * Query optimization.
Reference: [3] <author> M. Carey, M. Franklin, and M. Zaharioudakis. </author> <title> Fine-grained sharing in page server database system. </title> <booktitle> In Proceedings of Sigmod, </booktitle> <year> 1994. </year>
Reference-contexts: If the current query is answerable from cache, no communication with the servers is necessary. If a query is only partially answerable from cache, the amount of data needed from the servers may be substantially reduced. 1 SQC provides an alternative approach to page-caching and tuple-caching architectures <ref> [3, 6] </ref>, in which the unit of transfer between servers and clients is a page or a tuple, respectively.
Reference: [4] <author> A. K. Chandra and P. M. Merlin. </author> <title> Optimal implementation of conjunctive queries in relational databases. </title> <booktitle> In Proceedings of the Ninth Annual ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 77-90, </pages> <year> 1977. </year>
Reference-contexts: Analytical tools developed for logic databases can be employed to decide when a cache (or combination thereof) answers, or partially answers, the query [20]. The basic inference needed is conjunctive query subsumption [19]. Tests for this are well known <ref> [4, 16] </ref>. This determines when one conjunctive query logically subsumes another.
Reference: [5] <author> S. Dar, M. Franklin, B. Jonsson, D. Srivastava, and M. Tan. </author> <title> Semantic data caching and replacement. </title> <booktitle> In Proceedings of VLDB, </booktitle> <year> 1996. </year>
Reference-contexts: 1 Introduction Semantic Query Caching (SQC) has been proposed as a data-caching scheme for client-server environments <ref> [5, 12] </ref>. Under this architecture, the client maintains in cache semantic descriptions and the associated answer sets of previous queries. If the current query is answerable from cache, no communication with the servers is necessary. <p> The new query must ask the same sources for much the same information, in the same format. Otherwise, it is not possible to determine the relevant pages or tuples. (See <ref> [5] </ref> for specific disadvantages.) Furthermore, in heterogeneous environments, it is not clear what tuple-based or page-based caching across databases even means.
Reference: [6] <author> D. DeWitt, P. Futtersack, D. Maier, and F. Velez. </author> <title> A study of three alternative workstation-server architectures for object-oriented database systems. </title> <booktitle> In Proceedings of VLDB, </booktitle> <year> 1990. </year>
Reference-contexts: If the current query is answerable from cache, no communication with the servers is necessary. If a query is only partially answerable from cache, the amount of data needed from the servers may be substantially reduced. 1 SQC provides an alternative approach to page-caching and tuple-caching architectures <ref> [3, 6] </ref>, in which the unit of transfer between servers and clients is a page or a tuple, respectively.
Reference: [7] <author> W. Du, R. Krishnamurthy, and M.-C. Shan. </author> <title> Query optimization in a heterogeneous DBMS. </title> <editor> In L.-Y. Yuan, editor, </editor> <booktitle> Proc. VLDB, </booktitle> <pages> pages 277-291, </pages> <address> Vancouver, British Columbia, Aug. 1992. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Queries are issued via the global concepts to the mediators, which identify the relevant sources, issue local queries to them, and then synthesize the results. Query optimization in heterogeneous environments has received increased attention recently <ref> [2, 7, 13] </ref>, and by us as well [8, 9, 10]. We contend that SQC is needed in these environments and is critical for viable optimization strategies. In addition, SQC can help attend a number of other issues that arise in mediated, distributed environments. * Query optimization.
Reference: [8] <author> P. Godfrey and J. Gryz. </author> <title> A framework for intensional query optimization. </title> <editor> In D. Boulanger, U. Geske, F. Giannotti, and D. Seipel, editors, </editor> <booktitle> Proceedings of the Workshop on Deductive P. Godfrey, J. Gryz 6-5 Databases and Logic Programming, GMD-Studien Nr. </booktitle> <volume> 295, </volume> <pages> pages 57-68, </pages> <address> Bonn, Germany, </address> <month> Sept. </month> <year> 1996. </year> <note> GMD-Forschungszentrum. Held in conjunction with IJCSLP'96. </note>
Reference-contexts: Queries are issued via the global concepts to the mediators, which identify the relevant sources, issue local queries to them, and then synthesize the results. Query optimization in heterogeneous environments has received increased attention recently [2, 7, 13], and by us as well <ref> [8, 9, 10] </ref>. We contend that SQC is needed in these environments and is critical for viable optimization strategies. In addition, SQC can help attend a number of other issues that arise in mediated, distributed environments. * Query optimization. <p> In particular, full Datalog subsumption must be considered [1, 18]; that is, when the collection of caches subsume (or partially subsume) the query. Also, when caches and queries are not simply conjunctive queries|that is, they may employ view predicates|more sophisticated reasoning is needed. We consider such issues in <ref> [8, 9] </ref>. There is also the case when one can determine that a query's answers (or some of its answers) are in cache, but one does not have enough information logically to identify those tuples constructible from cache that belong to the query's answer set. <p> If we can answer partially a query at the client via caches, ideally the trimmed query sent to the servers would only result in answers not already found (or, at least, would minimize the overlap). This reduces potentially redundant calculations and saves in network bandwidth. In <ref> [8] </ref>, we introduced the the concept of a discounted query which can, in part, accomplish this.
Reference: [9] <author> P. Godfrey and J. Gryz. </author> <title> Intensional query optimization. </title> <type> Technical Report CS-TR-3702, </type> <institution> UMIACS-TR-96-72, Dept. of Computer Science, University of Maryland, College Park, MD 20742, </institution> <month> Oct. </month> <year> 1996. </year>
Reference-contexts: Queries are issued via the global concepts to the mediators, which identify the relevant sources, issue local queries to them, and then synthesize the results. Query optimization in heterogeneous environments has received increased attention recently [2, 7, 13], and by us as well <ref> [8, 9, 10] </ref>. We contend that SQC is needed in these environments and is critical for viable optimization strategies. In addition, SQC can help attend a number of other issues that arise in mediated, distributed environments. * Query optimization. <p> Ideally, one would want to evaluate only for the answers that were not in cache. Of course, trimming strategies cannot optimize universally; sometimes, a trimmed query will be more expensive to evaluate than would be the original query. We consider a trimming strategy in <ref> [9] </ref> that we believe is an optimization in general. 3 How "trimming" should be done depends on the goal of SQC: answer set pipelining generally benefits from heavier use of caches than is necessarily the case for optimizing the overall query response time. 3 Reasoning over Semantic Query Caches We employ <p> The basic inference needed is conjunctive query subsumption [19]. Tests for this are well known [4, 16]. This determines when one conjunctive query logically subsumes another. Whenever this is the case, all answers to the latter|say, a cache|are 3 The trimming strategy, tuple tagging, proposed in <ref> [9] </ref> is for removing parts of a query that are known in advance to evaluate empty, as determined by semantic query optimization techniques. <p> In particular, full Datalog subsumption must be considered [1, 18]; that is, when the collection of caches subsume (or partially subsume) the query. Also, when caches and queries are not simply conjunctive queries|that is, they may employ view predicates|more sophisticated reasoning is needed. We consider such issues in <ref> [8, 9] </ref>. There is also the case when one can determine that a query's answers (or some of its answers) are in cache, but one does not have enough information logically to identify those tuples constructible from cache that belong to the query's answer set. <p> This reduces potentially redundant calculations and saves in network bandwidth. In [8], we introduced the the concept of a discounted query which can, in part, accomplish this. In <ref> [9] </ref>, we provide an evaluation strategy for discounted queries that is, in general, more efficient than evaluating the queries themselves. 4 Conclusions and Issues For successful SQC, many issues need to be resolved. * Reasoning over conjunctive query containment and DATALOG containment is computationally hard [20].
Reference: [10] <author> P. Godfrey, J. Gryz, and J. Minker. </author> <title> Semantic query optimization for bottom-up evaluation. </title> <booktitle> In Ras and Michalewicz [17], </booktitle> <pages> pages 561-571. </pages>
Reference-contexts: Queries are issued via the global concepts to the mediators, which identify the relevant sources, issue local queries to them, and then synthesize the results. Query optimization in heterogeneous environments has received increased attention recently [2, 7, 13], and by us as well <ref> [8, 9, 10] </ref>. We contend that SQC is needed in these environments and is critical for viable optimization strategies. In addition, SQC can help attend a number of other issues that arise in mediated, distributed environments. * Query optimization.
Reference: [11] <author> J. Hellerstein, P. Haas, and H. Wang. </author> <title> Online aggregation. </title> <booktitle> In Proc. SIGMOD, </booktitle> <year> 1997. </year>
Reference-contexts: If it can be determined that a cache contains a representative sample of the tuples over which the aggregate function is to be computed, then it can be evaluated just over cache. Techniques for approximate compu tation of averages are investigated in <ref> [11] </ref>. * Better user interaction. Answer set pipelining. A subset of the answers that are computable at the client by cache can be returned to a user promptly, while remaining answers are being evaluated. Indirect answering.
Reference: [12] <author> A. M. Keller and J. Basu. </author> <title> A predicate-based caching scheme for client-server database architectures. </title> <journal> The VLDB Journal, </journal> <volume> 5(2) </volume> <pages> 35-47, </pages> <month> Apr. </month> <year> 1996. </year>
Reference-contexts: 1 Introduction Semantic Query Caching (SQC) has been proposed as a data-caching scheme for client-server environments <ref> [5, 12] </ref>. Under this architecture, the client maintains in cache semantic descriptions and the associated answer sets of previous queries. If the current query is answerable from cache, no communication with the servers is necessary. <p> Otherwise, a single trimmed query <ref> [12] </ref> is sent for processing. We propose to relax this basic paradigm in two ways: 1. we advocate to allow for all relational operations to be performed over the caches (at the client); and P. Godfrey, J.
Reference: [13] <author> C. Lee, C.-J. Chen, and H. Lu. </author> <title> An aspect of query optimization in multidatabase systems. </title> <booktitle> Sigmod Record, </booktitle> <volume> 24(3) </volume> <pages> 28-33, </pages> <month> Sept. </month> <year> 1995. </year>
Reference-contexts: Queries are issued via the global concepts to the mediators, which identify the relevant sources, issue local queries to them, and then synthesize the results. Query optimization in heterogeneous environments has received increased attention recently <ref> [2, 7, 13] </ref>, and by us as well [8, 9, 10]. We contend that SQC is needed in these environments and is critical for viable optimization strategies. In addition, SQC can help attend a number of other issues that arise in mediated, distributed environments. * Query optimization.
Reference: [14] <author> A. Y. Levy, A. Rajaraman, and J. Ordille. </author> <title> Querying heterogeneous information sources using source descriptions. </title> <booktitle> In Proc. 22nd VLDB, </booktitle> <year> 1996. </year>
Reference-contexts: P. Godfrey, J. Gryz 6-1 Our focus is on mediation-based systems over databases with structured data, such as provided by TSIMMIS [15] or the Information Manifold <ref> [14] </ref>. Systems such as these can be built over hundreds of data sources, each "wrapped" to translate the data models and languages of local databases into global concepts of the mediator.
Reference: [15] <author> Y. Papakonstantinou, H. Garcia-Molina, and J. Widom. </author> <title> Object exchange across heterogeneous information sources. </title> <booktitle> In Proceeding of ICDE, </booktitle> <month> Mar. </month> <year> 1995. </year>
Reference-contexts: We also do not discuss cache replacement strategies. 2 This is commonplace during query sessions, in which a user asks a number of related and follow-up queries. P. Godfrey, J. Gryz 6-1 Our focus is on mediation-based systems over databases with structured data, such as provided by TSIMMIS <ref> [15] </ref> or the Information Manifold [14]. Systems such as these can be built over hundreds of data sources, each "wrapped" to translate the data models and languages of local databases into global concepts of the mediator.
Reference: [16] <author> R. Ramakrishnan, Y. Sagiv, J. D. Ullman, and M. Y. Vardi. </author> <title> Proof tree transformation theorems and their applications. </title> <booktitle> In Proceedings of the Eighth ACM Symposium on Principles of Database Systems (PODS), </booktitle> <pages> pages 172-181, </pages> <year> 1989. </year>
Reference-contexts: Analytical tools developed for logic databases can be employed to decide when a cache (or combination thereof) answers, or partially answers, the query [20]. The basic inference needed is conjunctive query subsumption [19]. Tests for this are well known <ref> [4, 16] </ref>. This determines when one conjunctive query logically subsumes another.
Reference: [17] <editor> Z. W. Ras and M. Michalewicz, editors. </editor> <booktitle> Foundations of Intelligent Systems: Proceedings of the 9th International Symposium on Methodologies for Intelligent Systems, Lecture Notes in Artificial Intelligence 1079, </booktitle> <address> Berlin, June 1996. </address> <publisher> Springer. </publisher>
Reference: [18] <author> O. Shmueli. </author> <title> Decidability and expressiveness aspects of logic queries. </title> <booktitle> In Proc. 6 th ACM Symposium on Principles of Database Systems, </booktitle> <pages> pages 237-249, </pages> <year> 1987. </year>
Reference-contexts: Thus, the subsumption test alone is sufficient for the simplest case of SQC above (case 1 from Figure 1 without joins considered). SQC with joins (and especially SQC with dialogue) requires more sophisticated inferencing. In particular, full Datalog subsumption must be considered <ref> [1, 18] </ref>; that is, when the collection of caches subsume (or partially subsume) the query. Also, when caches and queries are not simply conjunctive queries|that is, they may employ view predicates|more sophisticated reasoning is needed. We consider such issues in [8, 9].
Reference: [19] <author> J. D. Ullman. </author> <title> Principles of Database and Knowledge-Base Systems, Volumes I & II. </title> <booktitle> Principles of Computer Science Series. </booktitle> <publisher> Computer Science Press, Incorporated, </publisher> <address> Rockville, Maryland, 1988/1989. </address>
Reference-contexts: general. 3 How "trimming" should be done depends on the goal of SQC: answer set pipelining generally benefits from heavier use of caches than is necessarily the case for optimizing the overall query response time. 3 Reasoning over Semantic Query Caches We employ the terminology of logic databases and Datalog <ref> [19] </ref>. 4 Whenever a query's answer set is cached, introduce a new predicate, say c, representing the cache, and a rule 5 for the cache predicate into the (intensional) database to reflect the query. ch~x i ( q 1 h~x 1 i, : : :, q k h~x k i. <p> Let the collection of caches accumulated so far be c 1 , : : :c n . Analytical tools developed for logic databases can be employed to decide when a cache (or combination thereof) answers, or partially answers, the query [20]. The basic inference needed is conjunctive query subsumption <ref> [19] </ref>. Tests for this are well known [4, 16]. This determines when one conjunctive query logically subsumes another.
Reference: [20] <author> J. D. Ullman. </author> <title> Information integration using logical views. </title> <booktitle> In Proceedings of the Sixth International Conference on Database Theory (ICDT'97), Delphi, </booktitle> <address> Greece, </address> <month> Jan. </month> <year> 1997. </year> <editor> P. Godfrey, J. </editor> <address> Gryz 6-6 </address>
Reference-contexts: Let the collection of caches accumulated so far be c 1 , : : :c n . Analytical tools developed for logic databases can be employed to decide when a cache (or combination thereof) answers, or partially answers, the query <ref> [20] </ref>. The basic inference needed is conjunctive query subsumption [19]. Tests for this are well known [4, 16]. This determines when one conjunctive query logically subsumes another. <p> In [9], we provide an evaluation strategy for discounted queries that is, in general, more efficient than evaluating the queries themselves. 4 Conclusions and Issues For successful SQC, many issues need to be resolved. * Reasoning over conjunctive query containment and DATALOG containment is computationally hard <ref> [20] </ref>. When we allow view (intensional) predicates in queries, this is harder yet. So is SQC worthwhile? While such reasoning may be complex, it is CPU-bound and can be done in main memory. The savings are over I/O and network bandwidth.
References-found: 20

