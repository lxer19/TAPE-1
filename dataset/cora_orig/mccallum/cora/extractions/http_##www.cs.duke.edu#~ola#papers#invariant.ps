URL: http://www.cs.duke.edu/~ola/papers/invariant.ps
Refering-URL: http://www.progsoc.uts.edu.au/~geldridg/cpp/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: ola@cs.duke.edu  
Title: Pictures as Invariants  
Author: Owen Astrachan 
Address: Durham, NC 27706  
Affiliation: Computer Science Dept. Duke University  
Abstract: The development, specification, and use of a loop invariant are useful and underutilized tools in writing code to solve a problem or implement an algorithm. Invariants are especially useful in introductory courses (CS1 and CS2) but are usually avoided because of the mathematical notation associated with them and because most textbooks have brief, if any, coverage of them. Our intent in this paper is provide several motivating examples of the use of pictures as loop invariants and to provide pointers to literature that more fully explores and develops the ideas of using loop invariants in specifying and developing programs. 
Abstract-found: 1
Intro-found: 1
Reference: [AHU74] <author> Alfred V. Aho, John E. Hopcroft, and Jeffrey D. Ullman. </author> <title> The Design and Analysis of Computer Algorithms. </title> <publisher> Addison-Wesley, </publisher> <year> 1974. </year>
Reference: [Ben86] <author> Jon Bentley. </author> <title> Programming Pearls. </title> <publisher> Addison-Wesley, </publisher> <year> 1986. </year>
Reference-contexts: Both Quick-sort and Select are often covered in introductory courses and are certainly covered in an algorithms course. The terse partition code shown below comes from <ref> [Ben86] </ref>, a more pedagogical development of it can be found in [Kru87]. Informally, partitioning an array A involves rearranging the elements of A so that all the elements of A less than or equal to some value x precede all elements of A greater than x.
Reference: [CC82] <author> Doug Cooper and Michael Clancy. Oh! Pascal! W. W. Norton & Co., </author> <note> second edition, </note> <year> 1982. </year>
Reference: [DBKL90] <author> N. Adlai A. DePano, Rarinaz D. Boudreau, Philip Katner, and Brian Li. </author> <title> Algorithmic Paradigms: Examples in Computational Geometry II. </title> <booktitle> In SIGSCE Technical Symposium on Computer Science Education, </booktitle> <pages> pages 186-191, </pages> <year> 1990. </year>
Reference-contexts: Pictures as invariants can be particularly useful in helping to recall the details of these more complicated algorithms. Many interesting examples from computa-tional geometry can be adapted for use in introductory courses [DeP88] <ref> [DBKL90] </ref>. Many of the problems from computational geometry are based on efficient sorting and searching techniques and provide contexts for studying these techniques that are interesting, novel, and visual. The problem of finding the smallest convex polygon containing n specified points is the convex hull problem from computational geometry.
Reference: [DeP88] <author> N. A. A. DePano. </author> <title> Algorithmic Paradigms: Examples in Computational Geometry. </title> <booktitle> In SIGSCE Technical Symposium on Computer Science Education, </booktitle> <pages> pages 83-87, </pages> <year> 1988. </year>
Reference-contexts: Pictures as invariants can be particularly useful in helping to recall the details of these more complicated algorithms. Many interesting examples from computa-tional geometry can be adapted for use in introductory courses <ref> [DeP88] </ref> [DBKL90]. Many of the problems from computational geometry are based on efficient sorting and searching techniques and provide contexts for studying these techniques that are interesting, novel, and visual. The problem of finding the smallest convex polygon containing n specified points is the convex hull problem from computational geometry.
Reference: [DF88] <author> Edsger W. Dijkstra and W.H.J. Fei-jen. </author> <title> A Method of Programming. </title> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference-contexts: These approaches differ in languages used, concepts emphasized, and even in whether computers are used [Dij89],[DPS + 90]. We believe that each of these different camps has something to learn from the others. The approach outlined here is far from the formal approach taken in <ref> [DF88] </ref>, [Dij90] and [Gri81], but it borrows on many of the concepts introduced in those works . We hope to make some of these ideas more accessible and more palatable to teachers and students of introductory courses.
Reference: [Dij89] <author> Edsger W. Dijkstra. </author> <booktitle> On the Cruelty of Really Teaching Computer Science. In SIGSCE Technical Symposium on Computer Science Education, </booktitle> <pages> pages xxv-xxxix, </pages> <year> 1989. </year>
Reference: [Dij90] <author> Edsger W. Dijkstra, </author> <title> editor. Formal Development of Programs and Proofs. </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: These approaches differ in languages used, concepts emphasized, and even in whether computers are used [Dij89],[DPS + 90]. We believe that each of these different camps has something to learn from the others. The approach outlined here is far from the formal approach taken in [DF88], <ref> [Dij90] </ref> and [Gri81], but it borrows on many of the concepts introduced in those works . We hope to make some of these ideas more accessible and more palatable to teachers and students of introductory courses.
Reference: [DL85] <author> Nell Dale and Susan C. Lilly. </author> <title> Pas-cal plus Data Structures, Algorithms, </title> <booktitle> and Advanced Programming. </booktitle> <address> D.C. </address> <publisher> Heath and Company, </publisher> <year> 1985. </year>
Reference: [DPS + 90] <author> Edsger Dijkstra, David Par-nas, William Scherlis, M.H. van Em-den, Jacques Cohen, Richard Hamming, Richard M. Karp, and Terry Winograd. </author> <title> A Debate on Teaching Computer Science. </title> <journal> Communications of the ACM, </journal> <volume> 32(12) </volume> <pages> 1397-1414, </pages> <month> De-cember </month> <year> 1990. </year>
Reference: [Dro82] <author> R.G. Dromey. </author> <title> How To Solve it by Computer. </title> <booktitle> Prentice-Hall International, </booktitle> <year> 1982. </year>
Reference-contexts: A comprehensive introduction to the use of more formal techniques can be found in [Gri81]. The author gives many examples, uses diagrams as invariants, and offers useful techniques for developing invariants. Invariants are used in a lower-level text in <ref> [Dro82] </ref> which is also a source of many useful examples. Finally, we urge all teachers of introductory courses to read [Har87] which covers (briefly) invariants as well as many of the most fundamental concepts of Computer Science in a manner accessible to beginning students.
Reference: [Gri81] <editor> David Gries. </editor> <booktitle> The Science of Programming. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1981. </year>
Reference-contexts: These approaches differ in languages used, concepts emphasized, and even in whether computers are used [Dij89],[DPS + 90]. We believe that each of these different camps has something to learn from the others. The approach outlined here is far from the formal approach taken in [DF88], [Dij90] and <ref> [Gri81] </ref>, but it borrows on many of the concepts introduced in those works . We hope to make some of these ideas more accessible and more palatable to teachers and students of introductory courses. <p> Comparison of this code for partitioning an array with that found in several textbooks ([CC82],[TA81],[Kof89], [DL85],[AHU74]) shows that the code below is shorter (both in statements and number of lines) and clearer (subjectively). The diagram for the invariant can be derived using techniques from <ref> [Gri81] </ref>, our purpose in this paper is to show that the diagram is a useful tool. Intuitively, however, an invariant can often be developed from a specification by replacing a constant (in this case n which does not vary) with a variable. <p> A comprehensive introduction to the use of more formal techniques can be found in <ref> [Gri81] </ref>. The author gives many examples, uses diagrams as invariants, and offers useful techniques for developing invariants. Invariants are used in a lower-level text in [Dro82] which is also a source of many useful examples.
Reference: [Har87] <author> David Harel. </author> <title> Algorithmics The Spirit of Computing. </title> <publisher> Addison-Wesley, </publisher> <year> 1987. </year>
Reference-contexts: The author gives many examples, uses diagrams as invariants, and offers useful techniques for developing invariants. Invariants are used in a lower-level text in [Dro82] which is also a source of many useful examples. Finally, we urge all teachers of introductory courses to read <ref> [Har87] </ref> which covers (briefly) invariants as well as many of the most fundamental concepts of Computer Science in a manner accessible to beginning students.
Reference: [Knu73] <author> Donald E. Knuth. </author> <booktitle> The Art of Computer Programming, </booktitle> <volume> volume 3. </volume> <publisher> Addison-Wesley, </publisher> <year> 1973. </year>
Reference-contexts: Typically x is the first element of A and we will assume that this is the case in the following exposition. See <ref> [Knu73] </ref> for a full discussion about choosing the "correct" x .
Reference: [Kof89] <author> Elliot B. Koffman. </author> <title> Turbo Pas-cal. </title> <publisher> Addison-Wesley, </publisher> <address> second edition, </address> <year> 1989. </year>
Reference: [Kru87] <author> Robert L. Kruse. </author> <title> Data Structures & Program Design. </title> <publisher> Prentice Hall, </publisher> <address> second edition, </address> <year> 1987. </year>
Reference-contexts: Both Quick-sort and Select are often covered in introductory courses and are certainly covered in an algorithms course. The terse partition code shown below comes from [Ben86], a more pedagogical development of it can be found in <ref> [Kru87] </ref>. Informally, partitioning an array A involves rearranging the elements of A so that all the elements of A less than or equal to some value x precede all elements of A greater than x.
Reference: [Man89] <author> Udi Manber. </author> <title> Introduction to Algorithms: A Creative Approach. </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference: [PS85] <author> Franco P. Preparata and Michael Ian Shamos. </author> <title> Computational Geometry An Introduction. </title> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: Treatment of this problem can be found in several algorithms texts [Man89],[Sed88]. In this section we develop a version of the Graham Scan solution to the convex hull problem given in <ref> [PS85] </ref>.
Reference: [Sed88] <author> Robert Sedgewick. </author> <title> Algorithms. </title> <publisher> Addison-Wesley, </publisher> <address> second edition, </address> <year> 1988. </year>
Reference: [TA81] <author> Aaron M. Tenenbaum and Moshe J. Augenstein. </author> <title> Data Structures Using Pascal. </title> <publisher> Prentice Hall, </publisher> <year> 1981. </year>
References-found: 20

