URL: http://www.cs.bu.edu/techreports/95-018-commut.ps.Z
Refering-URL: http://cs-www.bu.edu/techreports/Home.html
Root-URL: 
Title: DETERMINISTIC COMPUTATIONS WHOSE HISTORY IS INDEPENDENT OF THE ORDER OF ASYNCHRONOUS UPDATING  
Author: PETER G ACS 
Abstract: Consider a network of processors (sites) in which each site x has a finite set N(x) of neighbors. There is a transition function f that for each site x computes the next state ~(x) from the states in N(x). But these transitions (updates) are applied in arbitrary order, one or many at a time. If the state of site x at time t is (x; t) then let us define the sequence (x; 0); (x; 1), : : : by taking the sequence (x; 0); (x; 1), : : : , and deleting each repetition, i.e. each element equal to the preceding one. The function f is said to have invariant histories if the sequence (x; i), (while it lasts, in case it is finite) depends only on the initial configuration, not on the order of updates. This paper shows that though the invariant history property is typically undecidable, there is a useful simple sufficient condition, called commutativity: For any configuration, for any pair x; y of neighbors, if the updating would change both ~(x) and ~(y) then the result of updating first x and then y is the same as the result of doing this in the reverse order. This fact is derivable from known results on the confluence of term-rewriting systems but the self-contained proof given here may be justifiable. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Piotr Berman and Janos Simon, </author> <title> Investigations of fault-tolerant networks of computers, </title> <booktitle> Proc. of the 20-th Annual ACM Symp. on the Theory of Computing, </booktitle> <year> 1988, </year> <pages> pp. 66-77. </pages>
Reference-contexts: The commutative medium of the above proof is also called the "marching soldiers" scheme since its handling of the Age field reminds one of a chain of soldiers marching ahead in which two neighbors do not want to be separated by more than one step. It is shown in <ref> [1] </ref> that if the update times obey a Poisson process then the average computation time of this simulation within a constant factor of the computation time of the synchronous computation. Remark 3.2.
Reference: [2] <author> Gerard Huet, </author> <title> Confluent reductions: Abstract properties and applications to term rewriting systems, </title> <journal> J. of the Assoc. for Computing Machinery 27 (1980), </journal> <volume> no. 4, </volume> <pages> 797-821. </pages> <institution> Computer Science Department, Boston University E-mail address: gacs@bu.edu </institution>
Reference-contexts: In Theorem 3.1 below, we will give a known simple example of a commutative transition function. For that example, the theorem can be proved much easier. Theorem 1.6 can be derived from results e.g. in <ref> [2] </ref>. However, I do not find it worth introducing all the concepts needed for the derivation: the simplicity of the condition in the present context probably justifies a self-contained proof. 2. Commutativity implies invariant histories Lemma 2.1. Suppose that f has invariant histories and is monotonic: then it is commutative. <p> If 1 occurs in the sequence before 0 then our rules (in particular, (4.3)) do not allow any change of the state of x + 1 after that. Acknowledgments I thank Robert Solovay for pointing out several errors in the first version, Wayne Snyder for calling my attention to <ref> [2] </ref> and the anonymous referee for his careful reading and many corrections.
References-found: 2

