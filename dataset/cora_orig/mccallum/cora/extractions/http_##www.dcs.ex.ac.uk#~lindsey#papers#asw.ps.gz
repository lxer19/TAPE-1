URL: http://www.dcs.ex.ac.uk/~lindsey/papers/asw.ps.gz
Refering-URL: http://www.dcs.ex.ac.uk/~lindsey/CV/index.htm
Root-URL: http://www.dcs.ex.ac.uk
Title: EXPLORING VISUAL REPRESENTATIONS FOR CONDITIONAL STRUCTURES  
Author: Ashley Walton 
Degree: Submitted by Ashley Walton to the University of Exeter as a dissertation towards the degree of M.Sc by examination and dissertation in the faculty of science.  
Keyword: Ashley Walton  
Date: September 1996  
Abstract: I hereby certify that all material in this dissertation which is not my own work has been identified and that no work is included for which a degree has already been conferred on me. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Ford, L. </author> <title> (1993) How programmers visualize programs. Research Report No. </title> <type> 271, </type> <institution> Department of Computer Science, Old Library, The University of Exeter, Exeter, EX4 4PT. </institution>
Reference: <author> Gilmore, D.J. & Green, T.R.G. </author> <title> (1984) Comprehension and recall of miniature programs. </title> <journal> Int. J. Man-Machine Studies 21, </journal> <pages> 31-48. </pages>
Reference-contexts: This approach "treats programs as particular examples of information displays, and emphasizes the Chapter 2. Background 14 specific mental operations required in extracting information from them", <ref> (Gilmore & Green, 1984) </ref>. <p> On the unmatched pairings performance will be much worse," <ref> (Gilmore & Green, 1984, square brackets my addition) </ref>. 2.4 The Final factor This chapter has outlined two of the three major issues with which this project is concerned, viz.: the structure of the language, and the type of information or comprehension required. <p> Matched structure-information pairings result in a good performance, whilst unmatched pairings result in a poorer performance, <ref> (Gilmore & Green 1984) </ref>. The match-mismatch hypothesis held true for Green & Petre (1992), viz: forwards structures (of both modalities (text vs graphics)), facilitated access to `sequential' information, whereas backwards structures (of both modalities) favoured access to `circumstantial information', (Green & Petre (1992), Green (1977), Gilmore & Green (1984)). <p> Recall from the introduction that the match-mismatch hypothesis "predicts that performance will be good on `matched pairings' procedural [forwards] program with sequential [forwards] question, or declarative [backwards] program with circumstantial [backwards] question. On the unmatched pairings perfor-mace will be much worse," <ref> (Gilmore & Green, 1984, square brackets my addition) </ref>. As stated, this was found to be the case for the forwards/sequential structures used in this investigation. In other words, the secondary aim of Experiment One, that the visual representation would overcome the match-mismatch hypothesis, was not fulfilled.
Reference: <author> Good, J. </author> <title> (1995) The `Right' Tool for the Task: An Investigation of External Representations, Program Abstractions and Task Requirements. </title> <institution> Department of Artificial Intelligence, The University of Edinburgh, Edinburgh, </institution> <note> EH 1 1HN, Scontland. [To appear in the Proceedings of ESP '96]. </note>
Reference: <author> Green, T.R.G. </author> <title> (1977) Conditional program statements and their comprehensibility to professional programmers. </title> <journal> J. Occupational Psychology, </journal> <volume> 50, </volume> <pages> 93-109. </pages>
Reference-contexts: features is veiled; but in our opinion, at present more can be lost than learned by increasing the size of experimental languages......When our understanding of individual features has improved, such studies will take their proper place; meanwhile, it seems to be more effective to examine one feature at a time," <ref> (Sime, Green & Guest 1977) </ref>. 1.2 The Aims of this Pro ject This project investigates some of the claims concerning program visualisation/visual programming. <p> Sequential information can be obtained by "following through or tracing the steps taken by a program, to discover the sequence in which the commands are obeyed", <ref> (Green 1977) </ref>. Circumstantial information involves "finding how a particular point in a program might be reached", (Green 1977). <p> Sequential information can be obtained by "following through or tracing the steps taken by a program, to discover the sequence in which the commands are obeyed", <ref> (Green 1977) </ref>. Circumstantial information involves "finding how a particular point in a program might be reached", (Green 1977). <p> Green (1977) mentions that the syntactic structure of nested style languages "provides a framework which can be represented spatially by indenting to give a form of added redundancy". In addition, Nest-INE uses "a more redundant marker scheme in which the predicate is repeated", <ref> (Sime, Green & Guest, 1977) </ref>. This extra reudundancy was found to further aid the debugging performance, ("which most clearly involved the second type of understanding, [backward reasoning]", (Green 1977, square brackets my addition)), of programmers. Chapter 3. <p> In addition, Nest-INE uses "a more redundant marker scheme in which the predicate is repeated", (Sime, Green & Guest, 1977). This extra reudundancy was found to further aid the debugging performance, ("which most clearly involved the second type of understanding, [backward reasoning]", <ref> (Green 1977, square brackets my addition) </ref>), of programmers. Chapter 3. Experiment One: When Visual Programs are EASIER to Read than Textual Programs 18 Chapter 3.
Reference: <author> Green, T.R.G. & Petre, M. </author> <title> (1992) When Visual Programs are Harder to Read than Textual Programs. In G.C. </title> <editor> van der Veer, M.J.Tauber, S. Bagnarola and M. Antavolits (Eds.) </editor> <title> Human-Computer Interaction: Tasks and Organisation, </title> <booktitle> Proc. ECCE-6 (6th Euopean Conference on Cognitive Ergonomics). </booktitle> <address> CUD: Rome,1992. </address>
Reference-contexts: used synonomously with `declarative' or `circumstantial'. (There is a third type of condional mentioned, viz.: the jump/goto statement, but that seems to be out of fashion with the current `structured programming' paradigm, and is not considered in this investigation.) A forwards conditional structure/program is where "condition implies action, with nesting", <ref> (Green & Petre 1992) </ref>. The program sequentially lists the conditions, followed by the conclusion. <p> instance, in the following example, which uses the notation of C/C++, if `big' is true, and `strong' is false, the conclusion is `walk': if (big) if (strong) run else walk else stand; A backwards conditional structure/program is where "action is governed by conditions, with boolean operators in place of nesting", <ref> (Green & Petre 1992) </ref>. Put another way, the conclusion is followed by (and is dependent upon) the conditions. The equivalent example to that used above, using a notation similar to the And/Or notation of Green & Petre (1992) is: Chapter 2. <p> Structure versus Information How does the structure of the program/notation relate to the type of information or understanding required? In a nutshell, "Green (1977) found that forwards structures gave relatively better access to `sequential' information, and Gilmore and Green (1984) showed `backwards' structures gave relatively better access to `circumstantial' information", <ref> (Green & Petre 1992) </ref>. This highlights what has been termed the `match-mismatch' hypothesis, (Green & Petre 1992, Gilmore & Green 1984). The essence of the match-mismatch hypothesis is based on the mental operations hypothesis, which Gilmore & Green (1984) opt for as a means of explaining programmer performance and comprehension. <p> This highlights what has been termed the `match-mismatch' hypothesis, <ref> (Green & Petre 1992, Gilmore & Green 1984) </ref>. The essence of the match-mismatch hypothesis is based on the mental operations hypothesis, which Gilmore & Green (1984) opt for as a means of explaining programmer performance and comprehension.
Reference: <author> Pandey, K.R. & Burnett, </author> <title> M.M. (1993) Is It Easier to Write Matrix Manipulation Programs Visually or Textually? An Empirical Study. </title> <booktitle> IEEE Symposium on Visual Languages, </booktitle> <address> Bergen, Norway, Aug. 24.27, </address> <year> 1993, </year> <note> pp.344-351. 98 </note>
References-found: 6

