URL: http://www.cs.rutgers.edu/~shklar/papers/ngits97/ngits97.ps
Refering-URL: http://www.cs.rutgers.edu/~shklar/papers/ngits97/
Root-URL: http://www.cs.rutgers.edu
Email: fsofmac,shklarg@cs.rutgers.edu  
Title: Maintaining information resources  
Author: Sofus Macskassy Leon Shklar 
Address: New Brunswick, NJ 08903  40 Fulton St., New-York, NY 10038  
Affiliation: Computer Science Department, Rutgers University,  Pencom Systems,  
Abstract: With the proliferation of the World Wide Web, it has become very important to provide advanced tools for maintaining referential integrity of information resources. The growing tendency toward building increasingly complex Web sites makes it necessary to maintain not only physical files, but also logical resources, or views, which are composed of references to other resources and presentation programs. Our solution to this problem is to design an infrastructure of resource maintenance agents. It includes the Data Agent, which keeps track of files and supports third-party requests to notify them of changes that occur to these files. Another component of the infrastructure is the Repository Agent, which supports change notification requests for logical resources. Prototype implementation of the infrastructure is currently available and is discussed in this paper. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Baird-Smith, " Jigsaw: </author> <title> An object-oriented server, Design Document ", World Wide Web Consortium, </title> <note> 1996. http://www.w3.org/pub/WWW/Jigsaw/User/ Introduction/wp.html </note>
Reference-contexts: Another component of the infrastructure is the Repository Agent (RA), which supports change notification requests for logical resources. It communicates with other agents to keep track of references to their resources. We have implemented a prototype Data Agent and a very basic Repository Agent as extensions of the Jigsaw <ref> [1] </ref> HTTP server from the World Wide Web Consortium 1 (W3C). <p> implementations utilize multiple threads, so the DA passes the reply to the thread, which is responsible for sending it back. 5 Finally, the http-server returns a reply back to the client (if needed or asked for). 4 Our Prototype We have implemented the DA as an extension to the Jigsaw <ref> [1] </ref> HTTP server. Our primary reasons for basing the prototype on Jigsaw are in its object-oriented nature, extensibility, platform-independence, and its support for threading. In addition, Jigsaw supports persistent objects, which makes it a convenient foundation for implementing the next generation data modeling platform [8].
Reference: [2] <author> Fausey, Jul, Miller, Shafer, Thompson, Tkac, Weibel, </author> <note> The PURL Home-page , http://purl.oclc.org </note>
Reference-contexts: On-request notifications and limits on polling and notification frequencies, are some of the strategies that could help to remedy this problem. On the down side, protocol servers have to accept a DA, which may be un-appealing to some server administrators. 2.2 Persistent URLs The Persistent URL <ref> [6, 2] </ref> (PURL) mechanism was designed to address the problem of dangling links. It is based on designating a central server that supports URL registration and is notified about URL changes by their owners.
Reference: [3] <author> Francis, Kambayashi, Sato and Shimizu, "Ingrid: </author> <title> A Self-Configuring Information Navigation Infrastructure", </title> <booktitle> Proceedings of the Fourth International World Wide Web Conference , pp. </booktitle> <pages> 519-537. </pages> <address> http://rodem.slab.ntt.jp:8080/home/index-e.html </address>
Reference-contexts: Users are referred along the sequence of links to finally reach the current location. At that point, they may create a short-cut for future access. Somewhat related is the work by Francis, et. al. describing Ingrid <ref> [3] </ref>, which is based on a navigation tool. Here, the navigator goes through a Forward Information Server (FIServer) that caches the results of earlier queries. On posting a cached query, the FIServer returns links that it found during an earlier search.
Reference: [4] <institution> The IETF Uniform Resource Identifiers (URI) WorkGroup , http://www.ics.uci.edu/pub/ietf/uri </institution>
Reference-contexts: To make sure that a registered link stays current, it has to point to the designated server, which performs the redirection. PURLs are an intermediate step toward the Universal Resource Names <ref> [4] </ref> (URNs). Both PURLs and URNs are intended to ensure that links do not move, go away or become outdated with respect to machine-names, relative file locations, etc. They do not provide any support for verifying the currency of URL content.
Reference: [5] <author> D. Ingham, S. Caughey, and M. Little, </author> <title> "Fixing the 'Broken-Link' problem: the W3Objects approach", </title> <booktitle> Computer Networks and ISDN Systems , 28, </booktitle> <year> (1996), </year> <pages> pp. 1255-1268. </pages>
Reference-contexts: These robots can not be used to keep track of logical resources. Even so, the URL-minder is an improvement over purely client-based agents. 2.4 Other Approaches It remains to mention Ingham, Caughey, and Little's work on the broken link problem <ref> [5] </ref>. Their idea involves placing referential links along the relocation path of a physical resource (i.e., when the resource moves, it replaces itself with a link to its new location). Users are referred along the sequence of links to finally reach the current location.
Reference: [6] <author> K. Shafer, S. Weibel, E. Jul, and J. Fausey, </author> <title> "Introduction to Persistent Uniform Resource Locators", </title> <month> INET96 , </month> <year> 1996. </year>
Reference-contexts: On-request notifications and limits on polling and notification frequencies, are some of the strategies that could help to remedy this problem. On the down side, protocol servers have to accept a DA, which may be un-appealing to some server administrators. 2.2 Persistent URLs The Persistent URL <ref> [6, 2] </ref> (PURL) mechanism was designed to address the problem of dangling links. It is based on designating a central server that supports URL registration and is notified about URL changes by their owners.
Reference: [7] <author> L. Shklar, A. Sheth, V. Kashyap, and K. Shah, "In-foHarness: </author> <title> Use of Automatically Generated Metadata for Search and Retrieval of Heterogeneous Information", </title> <booktitle> Proceedings of CAiSE'95 , Jyvaskyla, </booktitle> <address> Fin-land, </address> <publisher> LNCS #932, Springer-Verlag, </publisher> <pages> pp. 217-230, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: It is up to every RA to figure out whether the change involves updating a content-based index, resource references or any other information. The RA work was initially motivated by the need to maintain metadata repositories <ref> [7] </ref>, and we expect the RAs to be closely integrated with repository servers. 3.2 Alternative Data Agents The proposed approach would work best if every protocol server has an associated data agent, but for our architecture to make sense in the real world, we have to provide for the large legacy
Reference: [8] <author> L. Shklar, D. Makower, and W. Lee, "Metamagic: </author> <title> Generating Virtual Web Sites through Data Modeling", </title> <note> In preparation </note> . 
Reference-contexts: Our primary reasons for basing the prototype on Jigsaw are in its object-oriented nature, extensibility, platform-independence, and its support for threading. In addition, Jigsaw supports persistent objects, which makes it a convenient foundation for implementing the next generation data modeling platform <ref> [8] </ref>. The DA accepts Add-Requests and Delete-Requests one file or directory at a time. The requests have to be submitted using the HTTP POST method, and a client may either create its own form, or use a URL that the DA makes available. <p> It is also necessary to provide more detailed specifications of requests and notifications. We are currently working on designing Java classes that extend W3C's Jigsaw server to support virtual resources <ref> [8] </ref>. The important part of our future work is integrating this server with the Repository Agent. The Repository Agent would use logical objects known to the server to generate notification requests to Data and Repository Agents serving resources that are utilized by these objects.
Reference: [9] <institution> The URL Minder Home Page , http://www.netmind.com/URL-minder/URL-minder.html </institution>
Reference-contexts: PURLs and URNs do not compete with our approach. When available, they would provide the added bonus of freeing the RAs from having to keep track of the network location of physical resources. 2.3 URL-minder: a Web-robot that keeps track of URLs URL-minder <ref> [9] </ref> is a web-robot that accepts URL notification requests, polls these URLs, and sends out notifications when they change. If multiple users ask for the same URL, it is still only polled once.
References-found: 9

