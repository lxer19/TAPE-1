URL: http://cwis.usc.edu/dept/ATRIUM/Papers/Articulation.ps
Refering-URL: http://cwis.usc.edu/dept/ATRIUM/index.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: fpmi,scacchig@gilligan.usc.edu  
Title: Articulation: An Integrated Approach to the Diagnosis, Replanning, and Rescheduling of Software Process Failures 1  
Author: Peiwei Mi and Walt Scacchi 
Address: Los Angeles, CA 90089-1421  
Affiliation: Information and Operations Management Department University of Southern California 2  
Abstract: The papers presents an integrated approach to articulate software process plans that fail. The approach, called articulation, repairs a plan when a diagnosed failure occurs and reschedules changes that ensure the plan's continuation. In implementing articulation, we combine diagnosis, replanning, and rescheduling into a powerful mechanism supporting process-based software development. Use of articulation in plan execution supports recovery and repair of unanticipated failures, as well as revising and improving the plans to become more effective. In this paper, we also describe how a prototype knowledge-based system we developed implements the articulation approach. 
Abstract-found: 1
Intro-found: 1
Reference: [BS87] <author> S. Bendifallah and W. Scacchi. </author> <title> Understanding Software Maintenance Work. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> 13(3) </volume> <pages> 311-323, </pages> <month> Mar </month> <year> 1987. </year>
Reference-contexts: It was first identified in a number of empirical studies of software development <ref> [BS87, BS89, CKI88, KS82, OSS88, Str88] </ref>. The results of these studies are summarized and mapped into articulation heuristics elsewhere [MS91b, Mi92]. 1 2 An Overview of Articulation An overall view of the articulation approach that integrates diagnosis, replanning, and rescheduling is shown in Figure 1.
Reference: [BS89] <author> S. Bendifallah and W. Scacchi. </author> <title> Work Structures and Shifts: An Empirical Analysis of Software Specification Teamwork. </title> <booktitle> In Proc. of the 11th International Conference on Software Engineering, </booktitle> <pages> pages 260-270, </pages> <address> Pittsburgh, PA, </address> <month> May </month> <year> 1989. </year>
Reference-contexts: It was first identified in a number of empirical studies of software development <ref> [BS87, BS89, CKI88, KS82, OSS88, Str88] </ref>. The results of these studies are summarized and mapped into articulation heuristics elsewhere [MS91b, Mi92]. 1 2 An Overview of Articulation An overall view of the articulation approach that integrates diagnosis, replanning, and rescheduling is shown in Figure 1.
Reference: [CKI88] <author> B. Curtis, H. Krasner, and N. Iscoe. </author> <title> A Field Study of the Software Design Process for Large Systems. </title> <journal> Communications of ACM, </journal> <volume> 31(11) </volume> <pages> 1268-1287, </pages> <month> Nov </month> <year> 1988. </year> <month> 19 </month>
Reference-contexts: It was first identified in a number of empirical studies of software development <ref> [BS87, BS89, CKI88, KS82, OSS88, Str88] </ref>. The results of these studies are summarized and mapped into articulation heuristics elsewhere [MS91b, Mi92]. 1 2 An Overview of Articulation An overall view of the articulation approach that integrates diagnosis, replanning, and rescheduling is shown in Figure 1.
Reference: [FSe89] <author> M.S. Fox, N. Sadeh, </author> <title> and etc. Constrained Heuristic Search. </title> <booktitle> In Proc. of Joint Interna--tional Conference on Artificial Intelligence, </booktitle> <pages> pages 309-315, </pages> <year> 1989. </year>
Reference-contexts: In this section, we present both schema definitions for the rescheduling constraints and heuristics, and the rescheduling process. 6.1 Rescheduling Constraints and Heuristics The Articulator's rescheduling mechanism is based on heuristic constraint-directed search <ref> [FSe89, KY89, MS91a] </ref>. It has a similar structure as those just cited, but it is designed to be reactive and partial. The rescheduling mechanism represents plans, resource allocation, and other conditions as rescheduling constraints and selection criteria as rescheduling heuristics. <p> In conclusion, articulation of failed plans in execution is an integrated mechanism for diag-nosizing, replanning, and rescheduling software process plans that fail during enactment. Our approach was influenced by works on both planning and scheduling <ref> [Ham90a, HR85, Ste81, Wil88, FSe89, SFO86] </ref>, Further, CHEF [Ham90a] and SIPE [Wil88] provided us with insight on the depth of plan repair and some valuable replanning actions.
Reference: [Ham90a] <author> K.J. Hammond. </author> <title> Case-Based Planning: A Framework for Planning from Experience. </title> <journal> Cognitive Science, </journal> <volume> 14(4) </volume> <pages> 385-443, </pages> <year> 1990. </year>
Reference-contexts: In conclusion, articulation of failed plans in execution is an integrated mechanism for diag-nosizing, replanning, and rescheduling software process plans that fail during enactment. Our approach was influenced by works on both planning and scheduling <ref> [Ham90a, HR85, Ste81, Wil88, FSe89, SFO86] </ref>, Further, CHEF [Ham90a] and SIPE [Wil88] provided us with insight on the depth of plan repair and some valuable replanning actions. <p> In conclusion, articulation of failed plans in execution is an integrated mechanism for diag-nosizing, replanning, and rescheduling software process plans that fail during enactment. Our approach was influenced by works on both planning and scheduling [Ham90a, HR85, Ste81, Wil88, FSe89, SFO86], Further, CHEF <ref> [Ham90a] </ref> and SIPE [Wil88] provided us with insight on the depth of plan repair and some valuable replanning actions. However, compared with these approaches, the Articulator and its articulation mechanisms are unique in three aspects: First, it is designed to handle both plan repair and rescheduling.
Reference: [Ham90b] <author> K.J. Hammond. </author> <title> Explaining and Repairing Plans that Fail. </title> <journal> Artificial Intelligence, </journal> <volume> 45(3) </volume> <pages> 173-228, </pages> <year> 1990. </year>
Reference-contexts: While the former is a dynamic planning or replanning problem, the latter involves dynamic or reactive scheduling. Most advanced planning and scheduling mechanisms tackle these two problems separately. For example, CHEF <ref> [Ham90b] </ref> is a plan repair mechanism that explains and repairs failed plans in the domain of Szechwan cooking. SIPE [Wil88] also has a replanner to do the same thing in general problem-solving. However, they do not deal with rescheduling resources to meet changed arrangements. <p> We explain these dimensions, their values, and the implications as follows: Type of failure describes the nature of failures. Its values are failure types most commonly seen during plan execution and recognized by the Articulator. These values represent domain failures for plans. A domain failure <ref> [Ham90b] </ref> is a problem that can be characterized in terms of the operators and states in a domain. In the domain of software development, the operators are activities and the states are status of resources such as agents, tools, and software documents [MS90, MS91b, Mi92]. <p> This includes operations such as add, delete, and reconfigure activities and/or resources. Some of these operations include combinations of replanning actions, as suggested in <ref> [Ham90b, Wil88] </ref>. * Modify-Value: change the attribute values of affected resources or activities. An example of this type of operation is to change the work span of an activity. * Redo-and-Review: redo a problematic activity or its predecessor activity, then add a review activity to check it.
Reference: [HL88] <author> K.E. Huff and V.R. Lesser. </author> <title> A Plan-Based Intelligent Assistant That Supports the Process of Programming. </title> <booktitle> ACM SIGSOFT Software Engineering Notes, </booktitle> <volume> 13 </volume> <pages> 97-106, </pages> <month> Nov </month> <year> 1988. </year>
Reference-contexts: Process plans guide the instantiation and use of process models by users or automated mechanisms. The use of knowledge-based plans and planning mechanisms for this domain was first introduced by Huff <ref> [HL88] </ref>. Plans that direct software development with limited resources can fail due to unexpected events. Planning mechanisms that must handle plan failure face two closely related problems: repairing the failed plan and recovering the broken plan execution.
Reference: [HR85] <author> B. Hayes-Roth. </author> <title> A Blackboard Architecture for Control. </title> <journal> Artificial Intelligence, </journal> <volume> 26(3) </volume> <pages> 251-321, </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: In conclusion, articulation of failed plans in execution is an integrated mechanism for diag-nosizing, replanning, and rescheduling software process plans that fail during enactment. Our approach was influenced by works on both planning and scheduling <ref> [Ham90a, HR85, Ste81, Wil88, FSe89, SFO86] </ref>, Further, CHEF [Ham90a] and SIPE [Wil88] provided us with insight on the depth of plan repair and some valuable replanning actions.
Reference: [KFFe90] <author> M. Kellner, P.H. Feiler, A. Finkelstein, </author> <title> and etc. Software Process Modeling Example Problem. </title> <booktitle> In The 6th International Software Process Workshop. </booktitle> <address> Japan, </address> <month> Oct </month> <year> 1990. </year>
Reference-contexts: For example, once Assign-Task is done, three activities, Monitor-Progress, Modify-Test-Plan, and Modify-Design can be started. Resource requirements are specified at the level of activities. In Figure 2, resource requirements 5 This example was created by the organizing committee of the 6th International Software Process Workshop in 1990 <ref> [KFFe90] </ref>. The original problem served as a standard modeling problem for comparing various existing approaches to software process modeling.
Reference: [KS82] <author> R. Kling and W. Scacchi. </author> <title> The Web of Computing: Computer Technology as Social Organization. </title> <booktitle> In Advances in Computers, Vol.21, </booktitle> <pages> pages 1-90. </pages> <publisher> Academic Press, Inc., </publisher> <year> 1982. </year>
Reference-contexts: It was first identified in a number of empirical studies of software development <ref> [BS87, BS89, CKI88, KS82, OSS88, Str88] </ref>. The results of these studies are summarized and mapped into articulation heuristics elsewhere [MS91b, Mi92]. 1 2 An Overview of Articulation An overall view of the articulation approach that integrates diagnosis, replanning, and rescheduling is shown in Figure 1.
Reference: [KY89] <author> N. Keng and D.Y.Y. Yun. </author> <title> A Planning/Scheduling Methodology for the Constrained Resource Problem. </title> <booktitle> In Proc. of Joint International Conference on Artificial Intelligence, </booktitle> <pages> pages 998-1003, </pages> <year> 1989. </year>
Reference-contexts: In this section, we present both schema definitions for the rescheduling constraints and heuristics, and the rescheduling process. 6.1 Rescheduling Constraints and Heuristics The Articulator's rescheduling mechanism is based on heuristic constraint-directed search <ref> [FSe89, KY89, MS91a] </ref>. It has a similar structure as those just cited, but it is designed to be reactive and partial. The rescheduling mechanism represents plans, resource allocation, and other conditions as rescheduling constraints and selection criteria as rescheduling heuristics.
Reference: [Mi92] <author> P. Mi. </author> <title> Modeling and Analyzing the Software Process and Process Breakdowns. </title> <type> PhD thesis, </type> <institution> Computer Science Dept. University of Southern California, </institution> <year> 1992. </year> <month> September. </month>
Reference-contexts: Articulation retrieves failure repair mechanisms from a knowledge base of problem-solving heuristics and implements them. Then articulation reschedules the necessary resources so overall plan execution is able to continue according to the modified plan. Our articulation approach is prototyped in a multi-agent knowledge-based system, called the Articulator <ref> [MS90, MS91b, Mi92] </ref>. In what follows, we first give an overview of articulation in Section 2 which integrates diagnosis, replanning, and rescheduling. In Section 3, we briefly discuss plan representation in the Articulator. <p> It was first identified in a number of empirical studies of software development [BS87, BS89, CKI88, KS82, OSS88, Str88]. The results of these studies are summarized and mapped into articulation heuristics elsewhere <ref> [MS91b, Mi92] </ref>. 1 2 An Overview of Articulation An overall view of the articulation approach that integrates diagnosis, replanning, and rescheduling is shown in Figure 1. Plan execution starts when a specific process plan is instantiated. <p> The Articulator is implemented in the form of a knowledge-based system [MS90]. The knowledge and experience of articulation abstracted from empirical studies of human articulation behavior are represented as knowledge schemata and inference rules <ref> [MS91b, Mi92] </ref>. <p> The details can be found in <ref> [Mi92] </ref>. frequently in later sections. In the Articulator, a software process plan is represented as a combination of several objects: An activity hierarchy represents the decomposition of a plan into a hierarchy of smaller process steps called tasks and activities. <p> relations give rise to the necessity for articulation, and therefore, the role of the Articulator is to handle unexpected changes or failures during process plan execution. 4 The Problem Space and Diagnosis The problem space in the Articulator is an abstraction of problems caused by various types of process breakdowns <ref> [Mi92] </ref>. In this section, we describe the problem space. Once such a failure occurs, the Articulator interprets it by finding its corresponding position in the problem space. <p> A domain failure [Ham90b] is a problem that can be characterized in terms of the operators and states in a domain. In the domain of software development, the operators are activities and the states are status of resources such as agents, tools, and software documents <ref> [MS90, MS91b, Mi92] </ref>. Currently, we have identified seven failure types, each of which represents a particular class of problems in a poorly defined plan: 6 * Unfinished-Resource: Products are not created, or subtasks are not finished when plan ex-ecution is complete. Consider the Develop-Change-and-Unit-Test. <p> We will not go into a detailed description of the implementation of diagnosis, but simply point out that it is similar to those suggested by Schank [Sch86]. In total, there are 25 diagnosis strategies with their corresponding values in the problem space <ref> [Mi92] </ref>. Let us now consider an example failure as follows: As we see in Develop-Change-and-Test-Unit (Figure 2), Modify-Design is immediately followed by Modify-Code. When execution starts Modify-Design begins with two assigned agents, John and Doug. <p> Only a subset of these combinations have been implemented as legal combinations of the solution space, each of which represents a PSH that is used to recover failures. All together, 35 PSHs are defined and implemented as sets of inference rules <ref> [MS91b, Mi92] </ref>. These PSHs represent experiences that expert developers often use. When a PSH is selected to recover a failure, information recorded in the related diagnosis is fed into the set of inference rules and the rules solve the failure. <p> Therefore, similar failures could be avoided in future instantiations of this process. Currently, the articulation approach is applied in both modeling and designing software development processes <ref> [MS90, MS91b, MS92, Mi92] </ref>. On the one hand, it supports simulation of software process plans as a means to debug and tailor them. On the other hand, it enables developers to recover from process breakdowns during software development which were not anticipated in software process plans.
Reference: [MS90] <author> P. Mi and W. Scacchi. </author> <title> A Knowledge-based Environment for Modeling and Simulating Software Engineering Processes. </title> <journal> IEEE Trans. on Knowledge and Data Engineering, </journal> <volume> 2(3) </volume> <pages> 283-294, </pages> <month> Sept </month> <year> 1990. </year>
Reference-contexts: Articulation retrieves failure repair mechanisms from a knowledge base of problem-solving heuristics and implements them. Then articulation reschedules the necessary resources so overall plan execution is able to continue according to the modified plan. Our articulation approach is prototyped in a multi-agent knowledge-based system, called the Articulator <ref> [MS90, MS91b, Mi92] </ref>. In what follows, we first give an overview of articulation in Section 2 which integrates diagnosis, replanning, and rescheduling. In Section 3, we briefly discuss plan representation in the Articulator. <p> Second, a repair suggestion is forwarded to a user whose responsibility is to study sets of repair suggestions gathered from repeated plan executions and realize necessary modifications or repairs to the original process model. The Articulator is implemented in the form of a knowledge-based system <ref> [MS90] </ref>. The knowledge and experience of articulation abstracted from empirical studies of human articulation behavior are represented as knowledge schemata and inference rules [MS91b, Mi92]. <p> A domain failure [Ham90b] is a problem that can be characterized in terms of the operators and states in a domain. In the domain of software development, the operators are activities and the states are status of resources such as agents, tools, and software documents <ref> [MS90, MS91b, Mi92] </ref>. Currently, we have identified seven failure types, each of which represents a particular class of problems in a poorly defined plan: 6 * Unfinished-Resource: Products are not created, or subtasks are not finished when plan ex-ecution is complete. Consider the Develop-Change-and-Unit-Test. <p> Is there a problematic resource associated with a failure? Is there a problematic resource requirement? Is there a match between the problematic resource and its requirement? What resources does the broken activity provide? These questions are answered through both direct information retrieval and deductive reasoning, as provided by the Articulator <ref> [MS90] </ref>. For example, answers to the first question can be determined by gathering the development status of each subtask in a plan. On the other hand, answers to the fourth question must reason about relationships between the problematic resource and the related resource requirements, as well as testing for qualifications. <p> Therefore, similar failures could be avoided in future instantiations of this process. Currently, the articulation approach is applied in both modeling and designing software development processes <ref> [MS90, MS91b, MS92, Mi92] </ref>. On the one hand, it supports simulation of software process plans as a means to debug and tailor them. On the other hand, it enables developers to recover from process breakdowns during software development which were not anticipated in software process plans.
Reference: [MS91a] <author> C. Meng and M. Sullivan. Logos: </author> <title> A Constraint-Directed Reasoning Shell for Operations Management. </title> <journal> IEEE Expert, </journal> <volume> 6(1) </volume> <pages> 20-28, </pages> <month> Feb </month> <year> 1991. </year>
Reference-contexts: In this section, we present both schema definitions for the rescheduling constraints and heuristics, and the rescheduling process. 6.1 Rescheduling Constraints and Heuristics The Articulator's rescheduling mechanism is based on heuristic constraint-directed search <ref> [FSe89, KY89, MS91a] </ref>. It has a similar structure as those just cited, but it is designed to be reactive and partial. The rescheduling mechanism represents plans, resource allocation, and other conditions as rescheduling constraints and selection criteria as rescheduling heuristics.
Reference: [MS91b] <author> P. Mi and W. Scacchi. </author> <title> Modeling Articulation Work in Software Engineering Processes. </title> <booktitle> Proc. of the 1st International Conference on the Software Process, </booktitle> <pages> pages 188-201, </pages> <month> Oct </month> <year> 1991. </year>
Reference-contexts: Articulation retrieves failure repair mechanisms from a knowledge base of problem-solving heuristics and implements them. Then articulation reschedules the necessary resources so overall plan execution is able to continue according to the modified plan. Our articulation approach is prototyped in a multi-agent knowledge-based system, called the Articulator <ref> [MS90, MS91b, Mi92] </ref>. In what follows, we first give an overview of articulation in Section 2 which integrates diagnosis, replanning, and rescheduling. In Section 3, we briefly discuss plan representation in the Articulator. <p> It was first identified in a number of empirical studies of software development [BS87, BS89, CKI88, KS82, OSS88, Str88]. The results of these studies are summarized and mapped into articulation heuristics elsewhere <ref> [MS91b, Mi92] </ref>. 1 2 An Overview of Articulation An overall view of the articulation approach that integrates diagnosis, replanning, and rescheduling is shown in Figure 1. Plan execution starts when a specific process plan is instantiated. <p> The Articulator is implemented in the form of a knowledge-based system [MS90]. The knowledge and experience of articulation abstracted from empirical studies of human articulation behavior are represented as knowledge schemata and inference rules <ref> [MS91b, Mi92] </ref>. <p> A domain failure [Ham90b] is a problem that can be characterized in terms of the operators and states in a domain. In the domain of software development, the operators are activities and the states are status of resources such as agents, tools, and software documents <ref> [MS90, MS91b, Mi92] </ref>. Currently, we have identified seven failure types, each of which represents a particular class of problems in a poorly defined plan: 6 * Unfinished-Resource: Products are not created, or subtasks are not finished when plan ex-ecution is complete. Consider the Develop-Change-and-Unit-Test. <p> Only a subset of these combinations have been implemented as legal combinations of the solution space, each of which represents a PSH that is used to recover failures. All together, 35 PSHs are defined and implemented as sets of inference rules <ref> [MS91b, Mi92] </ref>. These PSHs represent experiences that expert developers often use. When a PSH is selected to recover a failure, information recorded in the related diagnosis is fed into the set of inference rules and the rules solve the failure. <p> The Articulator's PSHs owe a great deal to previous work on plan repair ([Ham90b, Wil88]). However, PSHs here are oriented to practical methods that are gathered from the empirical studies <ref> [MS91b] </ref>, rather than a collection of single replanning actions. To this end, a PSH contains a set of changes that prove effective to a particular problem. Also, PSHs are organized such that a single failure can have multiple PSHs applied to it. <p> Therefore, similar failures could be avoided in future instantiations of this process. Currently, the articulation approach is applied in both modeling and designing software development processes <ref> [MS90, MS91b, MS92, Mi92] </ref>. On the one hand, it supports simulation of software process plans as a means to debug and tailor them. On the other hand, it enables developers to recover from process breakdowns during software development which were not anticipated in software process plans.
Reference: [MS92] <author> P. Mi and W. Scacchi. </author> <title> Process Integration in CASE Environments. </title> <journal> IEEE Software, </journal> <volume> 9(2) </volume> <pages> 45-53, </pages> <month> March </month> <year> 1992. </year> <month> 20 </month>
Reference-contexts: Therefore, similar failures could be avoided in future instantiations of this process. Currently, the articulation approach is applied in both modeling and designing software development processes <ref> [MS90, MS91b, MS92, Mi92] </ref>. On the one hand, it supports simulation of software process plans as a means to debug and tailor them. On the other hand, it enables developers to recover from process breakdowns during software development which were not anticipated in software process plans. <p> The second system, our process-driven CASE environment, accepts a software process plan from the Articulator as its input, displays it in a graphic form to its assigned developers, and supports data management, tool integration, and project management during software development <ref> [MS92] </ref>. One user view is shown in Figure 8. As such, when users in their assigned agent roles experience a process plan breakdown while using this CASE environment, they can then forward the identified failure back to the Articulator for resolution.
Reference: [OSS88] <author> G.M Olson, S. Sheppard, and E. Soloway. </author> <title> Empirical Studies of Programmers, I and II. </title> <publisher> Ablex Publishing Corporation, </publisher> <year> 1987 </year> <month> and </month> <year> 1988. </year>
Reference-contexts: It was first identified in a number of empirical studies of software development <ref> [BS87, BS89, CKI88, KS82, OSS88, Str88] </ref>. The results of these studies are summarized and mapped into articulation heuristics elsewhere [MS91b, Mi92]. 1 2 An Overview of Articulation An overall view of the articulation approach that integrates diagnosis, replanning, and rescheduling is shown in Figure 1.
Reference: [Sch86] <author> R.C. Schank. </author> <title> Explanation Patterns: Understanding Mechanically and Creatively. </title> <address> Erl-baum Hillsdale, NJ, </address> <year> 1986. </year>
Reference-contexts: We will not go into a detailed description of the implementation of diagnosis, but simply point out that it is similar to those suggested by Schank <ref> [Sch86] </ref>. In total, there are 25 diagnosis strategies with their corresponding values in the problem space [Mi92]. Let us now consider an example failure as follows: As we see in Develop-Change-and-Test-Unit (Figure 2), Modify-Design is immediately followed by Modify-Code.
Reference: [SDS90] <author> M.J. Shah, R. Damian, and J. Silverman. </author> <title> Knowledge Based Dynamic Scheduling in a Steel Plant. </title> <booktitle> IEEE Sixth Conference on Artificial Intelligence Applications, </booktitle> <pages> pages 108-113, </pages> <year> 1990. </year>
Reference-contexts: SIPE [Wil88] also has a replanner to do the same thing in general problem-solving. However, they do not deal with rescheduling resources to meet changed arrangements. Dynamic schedulers such as <ref> [SDS90] </ref>, on the other hand, primarily schedule resources incrementally in order to avoid unexpected events and backtracking. However, they are unable to identify arrangements that have been changed.
Reference: [SFO86] <author> S.F. Smith, </author> <title> M.S. Fox, and P.S. Ow. Constructing and Maintaining Detailed Production Plans: Investigations into the Development of Knowledge-based Factory Scheduling Systems. </title> <journal> AI Magazine, </journal> <pages> pages 45-61, </pages> <month> Fall </month> <year> 1986. </year>
Reference-contexts: In conclusion, articulation of failed plans in execution is an integrated mechanism for diag-nosizing, replanning, and rescheduling software process plans that fail during enactment. Our approach was influenced by works on both planning and scheduling <ref> [Ham90a, HR85, Ste81, Wil88, FSe89, SFO86] </ref>, Further, CHEF [Ham90a] and SIPE [Wil88] provided us with insight on the depth of plan repair and some valuable replanning actions.
Reference: [Ste81] <author> M. Stefik. </author> <title> MOLGEN Part 1: Planning with Constraints. </title> <journal> Artificial Intelligence, </journal> <volume> 16(2) </volume> <pages> 111-139, </pages> <month> May </month> <year> 1981. </year>
Reference-contexts: In conclusion, articulation of failed plans in execution is an integrated mechanism for diag-nosizing, replanning, and rescheduling software process plans that fail during enactment. Our approach was influenced by works on both planning and scheduling <ref> [Ham90a, HR85, Ste81, Wil88, FSe89, SFO86] </ref>, Further, CHEF [Ham90a] and SIPE [Wil88] provided us with insight on the depth of plan repair and some valuable replanning actions.
Reference: [Str88] <author> A. Strauss. </author> <title> The Articulation of Project Work: An Organizational Process. </title> <journal> The Sociological Quarterly, </journal> <volume> 29(2) </volume> <pages> 163-178, </pages> <month> Apr </month> <year> 1988. </year>
Reference-contexts: It was first identified in a number of empirical studies of software development <ref> [BS87, BS89, CKI88, KS82, OSS88, Str88] </ref>. The results of these studies are summarized and mapped into articulation heuristics elsewhere [MS91b, Mi92]. 1 2 An Overview of Articulation An overall view of the articulation approach that integrates diagnosis, replanning, and rescheduling is shown in Figure 1.
Reference: [Wil88] <author> D.E. Wilkins. </author> <title> Practical Planning: Extending the Classical AI Planning Paradigm. </title> <publisher> Mor-gan Kaufmann Publishers, Inc., </publisher> <year> 1988. </year> <month> 21 </month>
Reference-contexts: Most advanced planning and scheduling mechanisms tackle these two problems separately. For example, CHEF [Ham90b] is a plan repair mechanism that explains and repairs failed plans in the domain of Szechwan cooking. SIPE <ref> [Wil88] </ref> also has a replanner to do the same thing in general problem-solving. However, they do not deal with rescheduling resources to meet changed arrangements. Dynamic schedulers such as [SDS90], on the other hand, primarily schedule resources incrementally in order to avoid unexpected events and backtracking. <p> This includes operations such as add, delete, and reconfigure activities and/or resources. Some of these operations include combinations of replanning actions, as suggested in <ref> [Ham90b, Wil88] </ref>. * Modify-Value: change the attribute values of affected resources or activities. An example of this type of operation is to change the work span of an activity. * Redo-and-Review: redo a problematic activity or its predecessor activity, then add a review activity to check it. <p> In conclusion, articulation of failed plans in execution is an integrated mechanism for diag-nosizing, replanning, and rescheduling software process plans that fail during enactment. Our approach was influenced by works on both planning and scheduling <ref> [Ham90a, HR85, Ste81, Wil88, FSe89, SFO86] </ref>, Further, CHEF [Ham90a] and SIPE [Wil88] provided us with insight on the depth of plan repair and some valuable replanning actions. <p> In conclusion, articulation of failed plans in execution is an integrated mechanism for diag-nosizing, replanning, and rescheduling software process plans that fail during enactment. Our approach was influenced by works on both planning and scheduling [Ham90a, HR85, Ste81, Wil88, FSe89, SFO86], Further, CHEF [Ham90a] and SIPE <ref> [Wil88] </ref> provided us with insight on the depth of plan repair and some valuable replanning actions. However, compared with these approaches, the Articulator and its articulation mechanisms are unique in three aspects: First, it is designed to handle both plan repair and rescheduling.
References-found: 23

