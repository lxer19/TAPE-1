URL: http://www.irsip.na.cnr.it/~hotg/papers/kc.ps
Refering-URL: http://www.cs.bham.ac.uk/~wbl/biblio/gp-bibliography.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Genetic Programming Estimates of Kolmogorov Complexity  
Author: M. Conte, G. Trautteur I. De Falco, A. Della Cioppa, E. Tarantino 
Address: Mostra d'Oltremare, Naples, Italy  Via P. Castellino, 111, Naples, Italy  
Affiliation: Department of Physics University of Naples "Federico II"  Research Institute on Parallel Information Systems National Research Council of Italy (CNR)  
Abstract: In this paper the problem of the Kolmogorov complexity related to binary strings is faced. We propose a Genetic Programming approach which consists in evolving a population of Lisp programs looking for the optimal program that generates a given string. This evolutionary approach has permited to overcome the intractable space and time difficulties occurring in methods which perform an approximation of the Kolmogorov complexity function. The experimental results are quite significant and also show interesting computational strategies so proving the effectiveness of the implemented technique.
Abstract-found: 1
Intro-found: 1
Reference: [Ban93] <author> W. </author> <title> Banzhaf (1993). Genetic Programming for pedestrians. </title> <type> Tech. Report: </type> <pages> 93-03. </pages>
Reference-contexts: Any function will actually use the number of arguments it needs. This choice is the same made by W. Banzhaf in <ref> [Ban93] </ref> for the Pedestrian Genetic Programming. An example of application of the tree crossover and of the mutation (insertion) is shown in Fig. 1 which reports both the trees and the relative TOY Lisp programs (strings).
Reference: [Lof66] <author> P. </author> <month> Martin-Lof </month> <year> (1966). </year> <title> On the definition of random sequences. </title> <booktitle> Information and Control 9 </booktitle> <pages> 602-619. </pages>
Reference-contexts: Definition 5 A string x is c-incompressible if K (x) l (x) c. It is easy to see by a counting argument <ref> [Lof66] </ref> that the fraction of incompressible strings of length n is always greater than (1 2 c ). <p> The hypothesis has been made that incompressibility can be identified with randomness. P. Martin-Lof <ref> [Lof66] </ref> has shown that incompressible sequences have the typical properties of randomness. Algorithmic properties of the Complexity Function The set of canonical programs CP = fx fl : x 2 A fl g is an immune set.
Reference: [Nor96] <author> P. Nordin, and W. </author> <title> Banzhaf (1996). Programmatic compression of images and sound. </title> <booktitle> Proceedings of the First Annual Conference on Genetic Programming. </booktitle> <editor> John R. Koza, Davis E. Goldberg, David B. Fogel and Rick L. Riolo ed., </editor> <publisher> Satnford University, </publisher> <pages> 354-350. </pages> <address> CA, USA, </address> <publisher> Mit Press. </publisher>
Reference-contexts: This might be a first step toward fullfilling the compression goal alluded to in Section 2 of <ref> [Nor96] </ref>. 3 The Genetic Programming Approach The idea of combining Genetic Algorithms (GAs) [Hol75, Gol89] and computer languages in order to evolve populations of algorithms able to solve a given specific task has led to the following machine learning areas: * Classifier Systems [Boo88], developed by J.H. <p> Acknowledgements We thank Dott. Paolo Costa for a seminal conversation which led us into undertaking this exploratory work. We also thank an anonymous referee for pointing out the possible interesting connections between Kolmogorov Complexity and concrete compression algorithms as mentioned in <ref> [Nor96] </ref>.
Reference: [Boo88] <editor> L. Booker, D.E. Goldberg, and J.H. </editor> <booktitle> Holland (1988). Classifier systems and genetic algorithms. Artificial Intelligence. </booktitle>
Reference-contexts: goal alluded to in Section 2 of [Nor96]. 3 The Genetic Programming Approach The idea of combining Genetic Algorithms (GAs) [Hol75, Gol89] and computer languages in order to evolve populations of algorithms able to solve a given specific task has led to the following machine learning areas: * Classifier Systems <ref> [Boo88] </ref>, developed by J.H. Holland, which combine GAs and production languages and learn through credit assignment and rule discovery; * Artificial Life [Lan88], which evolves computer programs competing for access to resources inside the computer (CPU-time, memory space); * GP [Cra85, Koz92], developed by J.H.
Reference: [Cha87] <author> G.J. </author> <title> Chaitin (1987). Algorithmic Information Theory. </title> <publisher> Cambridge: Cambridge University Press. </publisher>
Reference: [Cha94] <author> G.J. </author> <title> Chaitin (1994). The limits of mathematics. </title> <journal> Journal of Universal Computer Science 2(5): </journal> <pages> 270-305. </pages>
Reference-contexts: In order to do so one needs: a universal computer in order to run the programs in turn; a program generator providing syntactically correct programs for the chosen universal computer; a supervising routine. The universal computer chosen is the TOY Lisp written by G.J. Chaitin <ref> [Cha94] </ref>. Such a Lisp has been chosen because it works on very short strings, allows an upper limitation on the number of evaluation steps and, finally, is extremely fast. The primitive functions of this Lisp are listed in Table 1 [Cha94]. <p> Chaitin <ref> [Cha94] </ref>. Such a Lisp has been chosen because it works on very short strings, allows an upper limitation on the number of evaluation steps and, finally, is extremely fast. The primitive functions of this Lisp are listed in Table 1 [Cha94]. As can be seen, the functions, whose names appear in the first column, are represented by single literals. Their values are displayed in the last column. <p> The phenotypes are the strings x, obtained by the evaluation of the genotypes u in the TOY Lisp environment. The fitness function takes into account several needs: firstly, the length of the string x evaluated by the Table 1: The TOY Lisp atoms and primitive functions. (From <ref> [Cha94] </ref>.) Atom Symbol Empty () False 0 True 1 Function Symbol Arg. No.
Reference: [Gol89] <author> D.E. </author> <title> Goldberg (1989). Genetic Algorithms in Search, Optimization, </title> <booktitle> and Machine Learning. </booktitle> <address> Reading, Mass.: </address> <publisher> Addison-Wesley. </publisher>
Reference-contexts: This might be a first step toward fullfilling the compression goal alluded to in Section 2 of [Nor96]. 3 The Genetic Programming Approach The idea of combining Genetic Algorithms (GAs) <ref> [Hol75, Gol89] </ref> and computer languages in order to evolve populations of algorithms able to solve a given specific task has led to the following machine learning areas: * Classifier Systems [Boo88], developed by J.H.
Reference: [Hol75] <editor> J.H. </editor> <booktitle> Holland (1975). Adaptation in Natural and Artificial Systems. </booktitle> <address> Ann Arbor: </address> <publisher> University of Michigan Press. </publisher>
Reference-contexts: This might be a first step toward fullfilling the compression goal alluded to in Section 2 of [Nor96]. 3 The Genetic Programming Approach The idea of combining Genetic Algorithms (GAs) <ref> [Hol75, Gol89] </ref> and computer languages in order to evolve populations of algorithms able to solve a given specific task has led to the following machine learning areas: * Classifier Systems [Boo88], developed by J.H.
Reference: [Kol65] <author> A.N. </author> <title> Kolmogorov (1965). Three approaches to the quantitive definition of information. </title> <booktitle> Problems of Information Transmission 1 </booktitle> <pages> 1-17. </pages>
Reference-contexts: Static complexity, related to program structure and size; 2. Dynamic or Computational complexity, usually subdivided into Time complexity and Space complexity. Prominent within the static complexity stands the Kolmogorov complexity, indipendently introduced by R.J. Solomonoff in 1964, A.N. Kolmogorov in 1965 and G.J. Chaitin in 1966 <ref> [Sol64, Kol65, Cha66] </ref>. It is defined as the length of the shortest program to execute a given task. Such complexity is often applied to strings. In such a case it is the length of the shortest string (program) which computes the given string.
Reference: [Cra85] <author> N.L. </author> <title> Cramer (1985). A representation for the adaptive generation of simple sequential programs. </title> <booktitle> Proceedings of the First International Conference on Genetic Algorithms and their Applications. </booktitle> <address> Pittsburgh: CMU. </address>
Reference-contexts: Holland, which combine GAs and production languages and learn through credit assignment and rule discovery; * Artificial Life [Lan88], which evolves computer programs competing for access to resources inside the computer (CPU-time, memory space); * GP <ref> [Cra85, Koz92] </ref>, developed by J.H. Koza, which combines GAs and programming languages in order to evolve algorithms according to a given defined behavior.
Reference: [Koz92] <author> J.R. </author> <title> Koza (1992). Genetic Programming: On Programming Computers by Means of Natural Selection and Genetics. </title> <address> Cambridge, MA: </address> <publisher> The MIT Press. </publisher>
Reference-contexts: Holland, which combine GAs and production languages and learn through credit assignment and rule discovery; * Artificial Life [Lan88], which evolves computer programs competing for access to resources inside the computer (CPU-time, memory space); * GP <ref> [Cra85, Koz92] </ref>, developed by J.H. Koza, which combines GAs and programming languages in order to evolve algorithms according to a given defined behavior. <p> So, our approach consists in fixing a given target string x and in using a GP algorithm in order to search the program space looking for optimal generating programs. Following <ref> [Koz92] </ref>, the genotypes, or chromosomes, are TOY-Lisp programs encoded as tree structures with no fixed bound on the size. The nodes of the trees are either atoms or functions of our grammar.
Reference: [Lan88] <editor> C.G. Langton, and K. </editor> <booktitle> Kelley (1988). Toward artificial life. Whole Earth Review 58 </booktitle> <pages> 74-79. </pages>
Reference-contexts: Holland, which combine GAs and production languages and learn through credit assignment and rule discovery; * Artificial Life <ref> [Lan88] </ref>, which evolves computer programs competing for access to resources inside the computer (CPU-time, memory space); * GP [Cra85, Koz92], developed by J.H. Koza, which combines GAs and programming languages in order to evolve algorithms according to a given defined behavior.
Reference: [Sol64] <author> R.J. </author> <title> Solomonoff (1964). A formal theory of inductive inference. Information and Control 7 </title> <publisher> 1-22,224-54. </publisher>
Reference-contexts: Static complexity, related to program structure and size; 2. Dynamic or Computational complexity, usually subdivided into Time complexity and Space complexity. Prominent within the static complexity stands the Kolmogorov complexity, indipendently introduced by R.J. Solomonoff in 1964, A.N. Kolmogorov in 1965 and G.J. Chaitin in 1966 <ref> [Sol64, Kol65, Cha66] </ref>. It is defined as the length of the shortest program to execute a given task. Such complexity is often applied to strings. In such a case it is the length of the shortest string (program) which computes the given string.
Reference: [Cha66] <author> G.J. </author> <title> Chaitin (1966). On the length of programs for computing finite binary sequences. </title> <journal> Journal of the Association for Computing Machinery 13 </journal> <pages> 547-569. </pages>
Reference-contexts: Static complexity, related to program structure and size; 2. Dynamic or Computational complexity, usually subdivided into Time complexity and Space complexity. Prominent within the static complexity stands the Kolmogorov complexity, indipendently introduced by R.J. Solomonoff in 1964, A.N. Kolmogorov in 1965 and G.J. Chaitin in 1966 <ref> [Sol64, Kol65, Cha66] </ref>. It is defined as the length of the shortest program to execute a given task. Such complexity is often applied to strings. In such a case it is the length of the shortest string (program) which computes the given string.
Reference: [Cri75] <author> G. Criscuolo, E. Minicozzi, and G. </author> <title> Trautteur (1975). Limiting recursion and the arithmetic hierarchy. </title> <type> Revue Fran~caise d'Automatique, </type> <institution> Informa-tique at Recherche Operationelle R-3:5-12. </institution>
Reference-contexts: It has been proved that the Kolmogorov complexity function K is not recursive - i.e. it is not in the class of functions computable algorithmically - rather it is 1-limiting recursive (see <ref> [Cri75] </ref> for the notion of a limiting recursive function). In particular [Vit93] there exists a total recursive function of two arguments (t; x) such that lim t!1 (t; x) = K (x) and monotonic non-increasing with t. It is then an approximation from the above to the function K.
Reference: [Vit93] <author> M. Li, </author> <title> and P.M. Vitanyi (1993). An introduction to Kolmogorov Complexity and its Application. </title> <publisher> Berlin: Springer-Verlag. </publisher>
Reference-contexts: It has been proved that the Kolmogorov complexity function K is not recursive - i.e. it is not in the class of functions computable algorithmically - rather it is 1-limiting recursive (see [Cri75] for the notion of a limiting recursive function). In particular <ref> [Vit93] </ref> there exists a total recursive function of two arguments (t; x) such that lim t!1 (t; x) = K (x) and monotonic non-increasing with t. It is then an approximation from the above to the function K. Although some general features of the function K have been worked out [Vit93], <p> <ref> [Vit93] </ref> there exists a total recursive function of two arguments (t; x) such that lim t!1 (t; x) = K (x) and monotonic non-increasing with t. It is then an approximation from the above to the function K. Although some general features of the function K have been worked out [Vit93], it is interesting to obtain more detailed information on the size of K and, in general, on short programs for given strings.
References-found: 16

