URL: http://www.eecis.udel.edu:80/~marasli/thesis/diss.ps
Refering-URL: http://www.eecis.udel.edu:80/~marasli/diss.html
Root-URL: http://www.cis.udel.edu
Title: PERFORMANCE ANALYSIS OF PARTIALLY ORDERED AND PARTIALLY RELIABLE TRANSPORT SERVICES  
Author: by Rahmi Marasli 
Degree: A dissertation submitted to the Faculty of the University of Delaware in partial fulfillment of the requirements for the degree of Doctor of Philosophy in  c 1997 Rahmi Marasli All Rights Reserved  
Date: Spring 1997  
Affiliation: Computer and Information Sciences  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> P.D. Amer, C. Chassot, T. Connolly, M. Diaz, and P. Conrad. </author> <title> Partial order transport service for multimedia and other applications. </title> <journal> IEEE/ACM Trans on Networking, </journal> <volume> 2(5), </volume> <pages> 440-456, </pages> <month> Oct </month> <year> 1994. </year>
Reference-contexts: UDP, on the other hand, introduces virtually no increase in delay and buffer utilization or reduction in throughput, but provides no reliability and order enhancement over IP. To achieve better tradeoffs between reliability/order and other QoS parameters, partially reliable/partially ordered services have been proposed <ref> [1, 10, 11, 14, 15, 20] </ref>. <p> This user runs the risk that the network will lose or reorder packets in a way that causes the application to perform badly, or fail. Based on these two observations, a new level of service is proposed, called Partially Ordered/Partially Reliable service <ref> [1, 10, 15] </ref>. When using such a service, source and destination computers first agree on the partial order requirements and the degree of loss permitted for the packets which are to be exchanged. <p> An example of a non-loseable object might be a still image or a window full of text. In this section, we will present two motivating applications for partially ordered and partially reliable services: (1) screen refresh and (2) remote multimedia document retrieval system. Screen refresh is first introduced in <ref> [1] </ref>, and is a simple application used to explain the basics of a partially ordered service. <p> As noted in Chapter 1, to achieve better tradeoffs between order and other quality-of-service (QoS) parameters, and to satisfy the minimal order requirements of applications, partially ordered transport service has been proposed <ref> [1, 2, 3, 10, 15] </ref>. Partially ordered service fills the gap between ordered and unordered service by allowing applications to specify the delivery order of objects in the form of a partial order. <p> Upon delivering any packet, POC Receiver checks its buffers for additional packets that may have become deliverable as a result of the delivery; these packets are delivered also. 3 Protocol POC (Partial Order Connection) is a proposed transport-layer protocol that provides partially ordered and partially reliable service to its users <ref> [1, 10] </ref>. This chapter models the partially ordered aspect of POC. 16 By assumption, User Sender submits constant size packets to POC Sender. <p> D is the total number of restrictions in P O, or the number of edges in the transitively closed precedence graph. The maximum value for D is N (N 1)=2, therefore the density, d, is defined by the ratio d = 2D=[N (N 1)] and ranges over the interval <ref> [0; 1] </ref>. 12 "" is the linear sum or concatenation operator for P Os defined [17] as x y in P Q if and only if x; y*P and x y in P , or x; y*Q and x y in Q, or x*P and y*Q. 24 period. <p> To quantify partially ordered services, we would like to have a normalized metric such that ordered service corresponds to 1, unordered service corresponds to 0, and the partial orders that lie in between these two extremes have meaningful values in <ref> [0; 1] </ref>. More specifically, we would like a metric with high correlation to expected performance. 96 97 We investigate two metrics of a partial order's flexibility and the correlation between these metrics and the performance observed in our OPNET simulation using the corresponding partially ordered service. <p> The two metrics considered are 25 m (P O) <ref> [1] </ref> and density [19]. Our initial hypothesis is that either m (P O) or density will be accurate in predicting performance. <p> Clearly, 99 for N objects, e (complete order) = 1 and e (no order) = N ! It is argued in <ref> [1] </ref> that e (P O) appropriately quantifies a desired partially ordered service in communication networks. Intuitively this metric inversely correlates to the level of effort and resources a protocol would have to use to provide a particular partial order service. <p> One of the main problems with e (P O) is that it becomes large very fast with an increasing number of objects in the P O. To avoid such large numbers, m (P O) is defined in <ref> [1] </ref> as a normalized logarithmic scale of e (P O). m (P O) is a normalized partial order metric in the interval [0; 1] where 0 represents an ordered service, values from 0 to 1 represent increasingly more flexible partially ordered service, and 1 represents unordered service: m (P O) = <p> To avoid such large numbers, m (P O) is defined in [1] as a normalized logarithmic scale of e (P O). m (P O) is a normalized partial order metric in the interval <ref> [0; 1] </ref> where 0 represents an ordered service, values from 0 to 1 represent increasingly more flexible partially ordered service, and 1 represents unordered service: m (P O) = log N ! Using a metric based on e (P O) presents some difficulties since computing e (P O) for an arbitrary <p> D is the total number of restrictions in P O, or the number of edges in the transitively closed precedence graph. The maximum value for D is N (N 1)=2, therefore the density, d, is defined by the ratio d = 2D=[N (N 1)] and ranges over the interval <ref> [0; 1] </ref>. 100 Density correlates intuitively with the flexibility of a partial order; a chain has a value of 1, while an antichain has a value of 0. <p> UDP, on the other hand, introduces virtually no increase in delay or reduction in throughput, but provides no reliability enhancement over IP. To achieve the best tradeoff between reliability and other QoS parameters, partially reliable services have been proposed <ref> [1, 14, 20] </ref>. This chapter analytically models partially reliable transport layer protocols. These protocols fill the gap between reliable and unreliable transport service by allowing an application to specify a controlled level of loss, and then enhancing an unreliable network service just enough to guarantee this loss level.
Reference: [2] <author> P.D. Amer, C. Chassot, T. Connolly, and M. Diaz. </author> <title> Partial order transport service for multimedia applications: Reliable service. </title> <booktitle> In Proc 2nd High Performance Dist'd Computing Conf (HPDC), </booktitle> <pages> 272-280, </pages> <address> Spokane, Wash, </address> <month> Jul </month> <year> 1993. </year>
Reference-contexts: As noted in Chapter 1, to achieve better tradeoffs between order and other quality-of-service (QoS) parameters, and to satisfy the minimal order requirements of applications, partially ordered transport service has been proposed <ref> [1, 2, 3, 10, 15] </ref>. Partially ordered service fills the gap between ordered and unordered service by allowing applications to specify the delivery order of objects in the form of a partial order.
Reference: [3] <author> P.D. Amer, C. Chassot, T. Connolly, and M. Diaz. </author> <title> Partial order transport service for multimedia applications: Unreliable channels. </title> <booktitle> In Proc 3rd International Networking Conf (INET), </booktitle> <address> BFA 1-10, San Francisco, </address> <month> Aug </month> <year> 1993. </year>
Reference-contexts: As noted in Chapter 1, to achieve better tradeoffs between order and other quality-of-service (QoS) parameters, and to satisfy the minimal order requirements of applications, partially ordered transport service has been proposed <ref> [1, 2, 3, 10, 15] </ref>. Partially ordered service fills the gap between ordered and unordered service by allowing applications to specify the delivery order of objects in the form of a partial order.
Reference: [4] <author> M. Ahuja. </author> <title> FLUSH primitives for asynchronous dist'd systems. </title> <journal> Info Processing Letters, </journal> <volume> 34(1), </volume> <pages> 5-12, </pages> <month> Feb </month> <year> 1990. </year>
Reference-contexts: For example, Ahuja et. al. showed that some conclusions derived on the design of distributed algorithms need not have required FIFO ordering as a base assumption <ref> [4] </ref>. Ahuja et. al. propose a mechanism called flush channels, which provides a restricted form of partially ordered service. <p> As the network layer delay between the sender and the receiver increases, does it become more important to wisely select a transmission 143 order? We investigate this question by simulating six different network layer delay values in the interval <ref> [1:5; 4] </ref>. When network layer delay is 1:5, the sender buffer size will roughly be equal to the pipesize (i.e., delay-bandwidth product of the system). At a network layer delay of 4, the sender buffer size will be about half the pipesize.
Reference: [5] <author> Nate Baxter, Herman Chien, Andy Loreen, Kathryn Marshall, and Steven Baraniuk. </author> <title> OPNET Manual. MIL 3, </title> <publisher> Inc, </publisher> <year> 1993. </year>
Reference-contexts: This chapter introduces an OPNET-based simulation model for partially ordered services. OP-NET (OPtimize Network Engineering Tools) is a comprehensive engineering system capable of simulating large communication networks with detailed protocol modeling and performance analysis <ref> [5] </ref>. The simulation model will be used to investigate the features of the system (e.g., variable network delays) that are not studied through the analytic model. Additionally, the verification of the analytic computations will be done via comparison with simulation.
Reference: [6] <author> Dimitri Betsekas and Robert Gallager. </author> <title> DATA NETWORKS, Second Edition. </title> <publisher> Prentice Hall, </publisher> <year> 1992. </year>
Reference-contexts: Queuing Values System (Expected) Values and Time Spent at Total W T User Sender Time = 1 = 0:5 (Experiment 17) 0.5493 1.5493 0.5 1.5 = 1 = 0:2 (Experiment 18) 0.1259 1.1259 0.125 1.125 T and W for M/M/1 and M/D/1 queuing systems can be computed as fol lows <ref> [6] </ref>: T (M=M=1) = 1 T (M=D=1) = 2 fl fl (1 (3.9) The main characteristics of M/M/1 queuing system are: * The objects arrive according to a Poisson process. * The object service times have an exponential distribution. * The service times are mutually independent and also independent of all <p> If the service times are constant instead of exponential in this system, then such a system is called M/D/1 <ref> [6] </ref>. To have a simulation experiment that is comparable with an M/M/1 queuing system, we use exponential interarrival times, exponential object sizes, zero-length acks, a perfect channel (i.e., zero-loss rate), and zero network delay at the network 91 layer.
Reference: [7] <author> Kenneth P. Birman. </author> <title> The Process Group Approach to Reliable Distributed Computing. </title> <journal> Communications of the ACM, </journal> <volume> 36(12), </volume> <pages> 36-53, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: The partial order is defined by the interleaved times that messages are sent and received in the shared message space of the multiple communicating processes and dynamically changes with each newly sent message. The work of Ken Birman et. al. on ISIS proceeds along a similar line <ref> [7] </ref>. Our proposed work differs in its assumption of a point-to-point connection. 1.2.2 Transport Protocols in General In spite of the fact that the world continues to be dominated by reliable/ordered and unreliable/unordered service, there has been some research in defining more flexible transport protocols.
Reference: [8] <author> G. Brightwell and P. Winkler. </author> <title> Counting Linear Extensions. </title> <booktitle> Order, </booktitle> <volume> 8, </volume> <pages> 225-242, </pages> <year> 1991. </year>
Reference-contexts: and 1 represents unordered service: m (P O) = log N ! Using a metric based on e (P O) presents some difficulties since computing e (P O) for an arbitrary partial order is #P Complete, and it is therefore highly unlikely that any polynomial algorithm exists for this computation <ref> [8, 9] </ref>. 4.1.2 A metric based on precedence constraints: density The density of a P O is defined as follows [19].
Reference: [9] <author> G. Brightwell and P. Winkler. </author> <title> Counting Linear Extensions is #P-Complete. </title> <booktitle> In Proceeedings of the 23rd ACM Symposium on the Theory of Computing, </booktitle> <pages> 175-181, </pages> <year> 1991. </year> <month> 199 </month>
Reference-contexts: and 1 represents unordered service: m (P O) = log N ! Using a metric based on e (P O) presents some difficulties since computing e (P O) for an arbitrary partial order is #P Complete, and it is therefore highly unlikely that any polynomial algorithm exists for this computation <ref> [8, 9] </ref>. 4.1.2 A metric based on precedence constraints: density The density of a P O is defined as follows [19].
Reference: [10] <author> Thomas J. Connolly, Paul D. Amer, and Phillip T. Conrad. RFC-1693, </author> <title> An Extension to TCP: Partial Order Service. </title>
Reference-contexts: UDP, on the other hand, introduces virtually no increase in delay and buffer utilization or reduction in throughput, but provides no reliability and order enhancement over IP. To achieve better tradeoffs between reliability/order and other QoS parameters, partially reliable/partially ordered services have been proposed <ref> [1, 10, 11, 14, 15, 20] </ref>. <p> This user runs the risk that the network will lose or reorder packets in a way that causes the application to perform badly, or fail. Based on these two observations, a new level of service is proposed, called Partially Ordered/Partially Reliable service <ref> [1, 10, 15] </ref>. When using such a service, source and destination computers first agree on the partial order requirements and the degree of loss permitted for the packets which are to be exchanged. <p> As noted in Chapter 1, to achieve better tradeoffs between order and other quality-of-service (QoS) parameters, and to satisfy the minimal order requirements of applications, partially ordered transport service has been proposed <ref> [1, 2, 3, 10, 15] </ref>. Partially ordered service fills the gap between ordered and unordered service by allowing applications to specify the delivery order of objects in the form of a partial order. <p> Upon delivering any packet, POC Receiver checks its buffers for additional packets that may have become deliverable as a result of the delivery; these packets are delivered also. 3 Protocol POC (Partial Order Connection) is a proposed transport-layer protocol that provides partially ordered and partially reliable service to its users <ref> [1, 10] </ref>. This chapter models the partially ordered aspect of POC. 16 By assumption, User Sender submits constant size packets to POC Sender. <p> of throughput, it does not make any difference which service (i.e., ordered, partially ordered, unordered) an application uses. 2.1.5 Using a different LE as POC Sender's Transmission Order In a partially ordered service, POC Sender is permitted to transmit packets in any order that does not violate the partial order <ref> [10] </ref>. That is, any valid LE of P O is permitted. Does the choice of which LE is used by POC Sender affect the expected performance? In this section, we address this question by comparing the performance of different LEs of a P O. <p> Section 5.3 summarizes the main results and discusses future work. 5.1 Does the Choice of Linear Extension Matter? In a partially ordered service, the transport sender is permitted to transmit objects in any order that does not violate the partial order <ref> [10] </ref>. Results from Chapter 2 show that the choice of which linear extension (LE) is used by the sender can have significant impact on expected performance. In general, as the distance between dependent objects increases, expected performance improves.
Reference: [11] <author> Phillip T. Conrad, Edward Golden, Paul. D. </author> <note> Amer, and Rahmi Marasli. </note>
Reference-contexts: UDP, on the other hand, introduces virtually no increase in delay and buffer utilization or reduction in throughput, but provides no reliability and order enhancement over IP. To achieve better tradeoffs between reliability/order and other QoS parameters, partially reliable/partially ordered services have been proposed <ref> [1, 10, 11, 14, 15, 20] </ref>. <p> Screen refresh is first introduced in [1], and is a simple application used to explain the basics of a partially ordered service. Remote multimedia document retrieval system has been developed by Conrad et. al. for empirical study of partially ordered and partially reliable services <ref> [11] </ref>. 1.1.2.1 Screen Refresh Consider an application that does a "screen refresh" on a workstation screen/display containing multiple windows (see Figure 1.2). <p> Figures 1.2.B and 1.2.C demonstrate two (of many) window configurations that call for a partial order delivery service. In these cases, 9 two and six linear extensions, respectively, are permitted at the destination. 1.1.2.2 Remote Multimedia Document Retrieval Systems Reference <ref> [11] </ref> describes a prototype client/server application for the retrieval and display of multimedia documents from a remote server using Partial Order Connection version 2 (POCv2), a partially ordered and partially reliable transport protocol providing coarse-grained synchronization support.
References-found: 11

