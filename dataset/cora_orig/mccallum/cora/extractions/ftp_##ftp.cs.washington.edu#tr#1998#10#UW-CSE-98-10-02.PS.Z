URL: ftp://ftp.cs.washington.edu/tr/1998/10/UW-CSE-98-10-02.PS.Z
Refering-URL: http://www.cs.washington.edu/research/tr/tr-by-date.html
Root-URL: http://www.cs.washington.edu
Email: fbrad,echris,snyderg@cs.washington.edu, lin@cs.utexas.edu  
Title: Regions: An Abstraction for Expressing Array Computation  
Author: Bradford L. Chamberlain E Christopher Lewis Calvin Lin Lawrence Snyder 
Date: July 24, 1998  
Address: Seattle, WA 98195-2350 USA  Austin, TX 78712 USA  
Affiliation: University of Washington,  University of Texas,  
Abstract: Most array languages, such as Fortran 90, Matlab, and APL, provide support for referencing arrays by extending the traditional array subscripting construct found in scalar languages. We present an alternative approach that exploits the concept of regionsa representation of index sets that can be named, manipulated with high-level operators, and syntactically separated from array references. This paper develops the concept of region-based programming and describes its benefits in the context of an idealized array language called RL. We show that regions simplify programming, reduce the likelihood of errors, and enable a new degree of code reuse. Furthermore, we describe how regions accentuate the locality of array expressions, enabling programmers to reason clearly about their codes' execution when targeting parallel computers. We discuss the relationship between RL and ZPLa fully implemented region-based parallel language in use by scientists and engineers. In addition, we contrast region-based programming with the array reference constructs of other array languages. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Jeanne C. Adams, Walter S. Brainerd, Jean T. Martin, Brian T. Smith, and Jerrold L. Wagener. </author> <title> Fortran 90 Handbook. </title> <publisher> McGraw-Hill, </publisher> <year> 1992. </year>
Reference-contexts: APL [6], the first array language, supports the use of integer vectors in each subscript position, computing the outer product of the indices in each dimension to determine the elements referenced. Fortran 90 <ref> [1] </ref> extends this syntax to support common reference patterns using triple or slice notation to describe a regular subset of elements. Both languages allow the subscript to be elided when referring to all elements of an array. <p> For each, a Fortran 90 example statement is given (column 2) and its corresponding RL statement (column 3). 7 Related Work The most prevalent alternative to region-based programming is array subscripting, as found in Fortran 90, APL, and Matlab <ref> [1, 6, 5] </ref>. As we have argued, array subscripting is a more cumbersome means of expressing simple array operations and is no more powerful than a region-based approach. Several parallel languages have supported mechanisms for storing and manipulating index sets.
Reference: [2] <author> Thomas Braunl. Parallaxis-III: </author> <title> A language for structured data-parallel programming. </title> <booktitle> In Proceedings of the IEEE First International Conference on Algorithms and Architectures for Parallel Processing, </booktitle> <pages> pages 4352. </pages> <publisher> IEEE, </publisher> <month> April </month> <year> 1995. </year>
Reference-contexts: Several parallel languages have supported mechanisms for storing and manipulating index sets. Parallaxis-III and Cfl are two such examples, both designed to express a SIMD style of computation <ref> [2, 11] </ref>. Both languages support dense multidimensional index spaces that are used to declare parallel arrays. Parallaxis-III array statements are performed over the entire array, and therefore do not use index sets to describe computation. Cfl does uses its index sets (shapes) to designate parallel computation over entire arrays.
Reference: [3] <author> Bradford L. Chamberlain, Sung-Eun Choi, E Christopher Lewis, Calvin Lin, Lawrence Snyder, and W. Derrick Weathersby. </author> <title> ZPL's WYSIWYG performance model. </title> <booktitle> In Proceedings of the Third International Workshop on High-Level Parallel Programming Models and Supportive Environments, </booktitle> <pages> pages 5061. </pages> <publisher> IEEE, </publisher> <month> March </month> <year> 1998. </year>
Reference-contexts: One of its chief design goals was to give the programmer an intuitive model for determining and reasoning about the concurrency and parallel overheads incurred by their implementation choices. This is known as ZPL's WYSIWYG performance model <ref> [3] </ref>. In particular, both concurrency and parallel performance are determined by the partitioning of data and computation between processors. Since regions are indicators of a program's data and computation spaces, the policy of distributing regions across processors is the fundamental determinant of ZPL program performance. <p> This has the result of preserving spatial and dimensional index locality across the virtual processor grid's topology. In addition, ZPL defines that interacting regions (defined in <ref> [3] </ref>) will be mapped to the processors in the same way. One result is that all simple array statements will execute completely in parallel without any interprocessor communication. Thus, communication is only induced by the array operators defined in Section 4.
Reference: [4] <author> S. J. Fink, S. R. Kohn, and S. B. Baden. </author> <title> Efficient run-time support for irregular block-structured applications. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <note> 1998. To appear. </note>
Reference-contexts: Statements therefore operate either over the entirety of an array, or by indexing into the array as in scalar languages. Conformability in FIDL is somewhat more dynamic than in other languagesoperations are only performed on indices that are present in both operators. KeLP <ref> [4] </ref> is a C++ runtime library that is a descendent of FIDIL. It supports shift, intersect, and grow operators on rectangular index sets called regions. KeLP uses regions to express iteration spaces using a for all indices in the region control construct.
Reference: [5] <author> Duane Hanselman and Bruce Littlefield. </author> <title> Mastering MATLAB. </title> <publisher> Prentice-Hall, </publisher> <year> 1996. </year>
Reference-contexts: For each, a Fortran 90 example statement is given (column 2) and its corresponding RL statement (column 3). 7 Related Work The most prevalent alternative to region-based programming is array subscripting, as found in Fortran 90, APL, and Matlab <ref> [1, 6, 5] </ref>. As we have argued, array subscripting is a more cumbersome means of expressing simple array operations and is no more powerful than a region-based approach. Several parallel languages have supported mechanisms for storing and manipulating index sets.
Reference: [6] <author> Kenneth E. Iverson. </author> <title> A Programming Language. </title> <publisher> John Wiley and Sons, </publisher> <year> 1962. </year>
Reference-contexts: This notation, which was inherited from linear algebra, is natural and convenient for scalar languages since they operate on single values at a time. In contrast, array languages support the atomic manipulation of multiple array elements, so they typically extend traditional subscripting to a more complex form. APL <ref> [6] </ref>, the first array language, supports the use of integer vectors in each subscript position, computing the outer product of the indices in each dimension to determine the elements referenced. <p> For each, a Fortran 90 example statement is given (column 2) and its corresponding RL statement (column 3). 7 Related Work The most prevalent alternative to region-based programming is array subscripting, as found in Fortran 90, APL, and Matlab <ref> [1, 6, 5] </ref>. As we have argued, array subscripting is a more cumbersome means of expressing simple array operations and is no more powerful than a region-based approach. Several parallel languages have supported mechanisms for storing and manipulating index sets.
Reference: [7] <author> Calvin Lin and Lawrence Snyder. ZPL: </author> <title> An array sublanguage. </title> <editor> In Uptal Banerjee, David Gelernter, Alexandru Nicolau, and David Padua, editors, </editor> <booktitle> Workshop on Languages and Compilers for Parallel Computing, </booktitle> <pages> pages 96 114. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: We give formal definitions of region and array operators and describe how their use enables the source-level identification of index locality, thereby improving programmers' understanding of their codes' performance. Furthermore, we compare the region-based representation to the conventional subscripted form. Although the region-based ZPL language has been described before <ref> [7] </ref>, this is the first discussion of regions as an abstract programming language concept. From the trivial example of Figure 1, regions may appear to be a minor syntactic variation on the other forms of indexing.
Reference: [8] <author> Bruce J. MacLennan. </author> <booktitle> Principles of Programming Languages. </booktitle> <publisher> Saunders College Publishing, </publisher> <address> 2nd edition, </address> <year> 1987. </year>
Reference-contexts: Because the common portions of references are factored into a region, all that is left at the array references is an indication of how they differ. This applies the common language design principle that similar things should look similar, and different things should look different <ref> [8] </ref>. For example, the following RL statement contains four references to array A, each shifted in one of the cardinal directions.
Reference: [9] <author> Luigi Semenzato and Paul Hilfinger. </author> <title> Arrays in FIDIL. </title> <editor> In Robert Grossman, editor, </editor> <booktitle> Symbolic Computation: Applications to Scientific Computing, </booktitle> <pages> pages 155169. </pages> <publisher> SIAM, </publisher> <year> 1989. </year>
Reference-contexts: Both languages allow for individual elements to be masked on and off. Neither provides support for strided index sets. FIDIL is another parallel array language designed for scientific computation <ref> [9] </ref> with support for more general index sets called domains. Domains need neither be rectangular nor dense, and FIDIL supports computation over them using set-theoretic union, intersection, and difference operations. The role of domains is limited to describing the structure of arrays (maps) and not for specifying computational references.
Reference: [10] <author> Lawrence Snyder. </author> <note> Programming Guide to ZPL. MIT Press (in pressavailable at publication date at ftp://ftp.cs.washington.edu/pub/orca/docs/zpl guide.ps), </note> <year> 1998. </year>
Reference-contexts: Array operators that modify the default indices can be applied to array expressions, resulting in different access patterns. In this way, region-based programming syntactically separates array indexing from array references. ZPL is a region-based parallel programming language in use by scientists and engineers <ref> [10] </ref>. In this paper, we present region-based programming and its benefits using a simple, idealized array language called RL. RL demonstrates the syntax and expressiveness of regions without the idiosyncrasies caused by practical concerns in real-world languages like ZPL.
Reference: [11] <institution> C* Programming Guide, </institution> <note> Version 6.0.2. </note> <institution> Thinking Machines Corporation, Cambridge, Massachusetts, </institution> <month> June </month> <year> 1991. </year> <month> 13 </month>
Reference-contexts: Several parallel languages have supported mechanisms for storing and manipulating index sets. Parallaxis-III and Cfl are two such examples, both designed to express a SIMD style of computation <ref> [2, 11] </ref>. Both languages support dense multidimensional index spaces that are used to declare parallel arrays. Parallaxis-III array statements are performed over the entire array, and therefore do not use index sets to describe computation. Cfl does uses its index sets (shapes) to designate parallel computation over entire arrays.
References-found: 11

