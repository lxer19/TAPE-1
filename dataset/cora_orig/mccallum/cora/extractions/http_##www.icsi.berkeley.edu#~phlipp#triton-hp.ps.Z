URL: http://www.icsi.berkeley.edu/~phlipp/triton-hp.ps.Z
Refering-URL: http://www.icsi.berkeley.edu/~phlipp/phlipp.publ.html
Root-URL: http://www.icsi.berkeley.edu
Title: Triton/1: A Massively-Parallel Mixed-Mode Computer Designed to Support High Level Languages for high-level, machine-independent pro
Author: Christian G. Herter, Thomas M. Warschko, Walter F. Tichy, and Michael Philippsen 
Note: Support  were designed hand-in-hand.  
Affiliation: University of Karlsruhe, Dept. of Informatics  
Abstract: Postfach 6980, D-7500 Karlsruhe 1, Germany This paper appeared in: 7th International Parallel Processing Symposium, Proc. of 2nd Workshop on Heterogeneous Processing, pages 65-70, Newport Beach, CA, April 13-16, 1993. Abstract We present the architecture of Triton/1, a scalable, mixed-mode (SIMD/MIMD) parallel computer. The novel features of Triton/1 are: 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Auguin and F. Boeri. </author> <title> The OPSILA computer. </title> <editor> In M. Consard, editor, </editor> <booktitle> Parallel Languages and Architectures, </booktitle> <pages> pages 143-153. </pages> <publisher> Elsivier Science Publishers, Holland, </publisher> <year> 1986. </year>
Reference-contexts: It is even possible to run a subset of the processors in SIMD mode, the other in MIMD. Thus, Triton/1 is truly SAMD, i.e, mixed-mode, not just switched-mode. Only a few research prototypes of mixed-mode machines have been built: OPSILA, TRAC, and PASM <ref> [1, 6] </ref>. Triton/1 provides support for switching rapidly between the two modes and a high-level language to control both modes effectively. Fast barrier synchronization is supported by special hardware. The usage of synchronization hardware is possible in both operating modes.
Reference: [2] <author> N. G. De Bruijn. </author> <title> A combinatorial problem. </title> <booktitle> In Proc. of the Sect. of Science Akademie van Weten-schappen, </booktitle> <pages> pages 758-764, </pages> <address> Amsterdam, </address> <month> June 29 </month> <year> 1946. </year>
Reference-contexts: In this case, the ready bits have to be virtualized as well. The details depend on the virtualization strategy, which may be a mixture of looping and context switching. 3.3 Communications Network The Triton/1 network is based on the generalized De Bruijn Net <ref> [2, 3] </ref>. The number N of nodes in the network is not limited to powers of two. The (maximum) diameter is dlog d N e.
Reference: [3] <author> Makoto Imase and Masaki Itoh. </author> <title> Design to minimize diameter on building-block network. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 30(6) </volume> <pages> 439-442, </pages> <month> June </month> <year> 1981. </year>
Reference-contexts: In this case, the ready bits have to be virtualized as well. The details depend on the virtualization strategy, which may be a mixture of looping and context switching. 3.3 Communications Network The Triton/1 network is based on the generalized De Bruijn Net <ref> [2, 3] </ref>. The number N of nodes in the network is not limited to powers of two. The (maximum) diameter is dlog d N e.
Reference: [4] <author> David A. Patterson, Garth Gibons, and Randy H. Katz. </author> <title> A case for redundant arrays of inexpensive disks (RAID). </title> <booktitle> In Proc. of the 1988 ACM-SIGMOD Conference on Managenment of Data, </booktitle> <pages> pages 109-116, </pages> <address> Chicago, </address> <month> 1-3 June </month> <year> 1988. </year>
Reference-contexts: The reconfiguration involves changing the PE numbers consistently and recomputing the routing tables in the network processors. The 72 disks are logically organized in 8 groups of 9 disks, where each group contains 8 data and one parity disk. RAID level 3 <ref> [4] </ref> is used for error handling. of Triton/1. Network PE PE PE PE . . . . . . . . . . . Instruction Bus Control Bus FE Ethernet In SIMD mode the frontend produces the instruction stream and controls the backend portion at instruction level.
Reference: [5] <author> Michael Philippsen, Walter F. Tichy, and Chris-tian G. Herter. </author> <title> Modula-2* and its compilation. </title> <booktitle> In First International Conference of the Austrian Center for Parallel Computation, </booktitle> <pages> pages 169-183, </pages> <address> Salzburg, Austria, </address> <month> September </month> <year> 1991. </year> <note> Springer Ver-lag, Lecture Notes in Computer Science 591. </note>
Reference-contexts: The end of a FORALL statement always defines a synchronization barrier. For further details about the language, see [7], for detailed discussion of compilation techniques and optimization, see <ref> [5] </ref>. 2.2 Software requirements for parallel computers On distributed memory machines, the distribution of array data over the available processors is a central problem. Two conflicting goals, (1) data locality and (2) maximum degree of parallelism, must be reconciled.
Reference: [6] <author> H.J. Siegel, T. Schwederski, J.T. Kuehn, and N.J. Davis. </author> <title> An overview of the PASM parallel processing system. In D.D. Gajski, </title> <editor> V.M.Milutinovic, and H.J.Siegel and B.P. Furht, editors, </editor> <booktitle> Computer Architecture, </booktitle> <pages> pages 387-407. </pages> <publisher> IEEE Computer Society Press, </publisher> <address> Washington, DC, </address> <year> 1987. </year>
Reference-contexts: It is even possible to run a subset of the processors in SIMD mode, the other in MIMD. Thus, Triton/1 is truly SAMD, i.e, mixed-mode, not just switched-mode. Only a few research prototypes of mixed-mode machines have been built: OPSILA, TRAC, and PASM <ref> [1, 6] </ref>. Triton/1 provides support for switching rapidly between the two modes and a high-level language to control both modes effectively. Fast barrier synchronization is supported by special hardware. The usage of synchronization hardware is possible in both operating modes.
Reference: [7] <author> Walter F. Tichy and Christian G. Herter. </author> <title> Modula-2*: An Extension of Modula-2 for Highly Parallel, Portable Programs. </title> <type> Technical Report No. </type> <institution> 4/90 (Interner Bericht), University of Karlsruhe, Department of Informatics, </institution> <month> January </month> <year> 1990. </year>
Reference-contexts: Common to both variants is that the termination of a FORALL statement is determined by the termination of the last process created by the FORALL statement. The end of a FORALL statement always defines a synchronization barrier. For further details about the language, see <ref> [7] </ref>, for detailed discussion of compilation techniques and optimization, see [5]. 2.2 Software requirements for parallel computers On distributed memory machines, the distribution of array data over the available processors is a central problem. Two conflicting goals, (1) data locality and (2) maximum degree of parallelism, must be reconciled.
References-found: 7

