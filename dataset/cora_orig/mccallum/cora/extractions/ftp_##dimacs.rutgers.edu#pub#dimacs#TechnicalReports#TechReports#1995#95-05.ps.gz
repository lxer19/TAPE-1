URL: ftp://dimacs.rutgers.edu/pub/dimacs/TechnicalReports/TechReports/1995/95-05.ps.gz
Refering-URL: http://dimacs.rutgers.edu/TechnicalReports/1995.html
Root-URL: http://www.cs.rutgers.edu
Title: FINDING CUTS IN THE TSP (A preliminary report)  
Author: by David Applegate Robert Bixby Vasek Chvatal William Cook 
Note: 2 Supported by Center for Research in Parallel Computing, Rice University and by NSF grants CCR-881594 and CCR-9407142 3 Permanent Member 4 Permanent Member DIMACS is a cooperative project of Rutgers University, Princeton University, AT&T Bell Laboratories and Bellcore. DIMACS is an NSF Science and Technology Center, funded under contract STC-91-19999; and also receives support from the New Jersey Commission on Science and Technology.  
Address: Murray Hill, New Jersey 07974  Houston, Texas 77005  New Brunswick, New Jersey 08903  Morristown, New Jersey 07960  
Affiliation: AT&T Bell Laboratories  Dept. of Comp. Applied Math. Rice University  Dept. of Computer Science Rutgers University  Bellcore  
Abstract: DIMACS Technical Report 95-05 March 1995 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. E. Bland and D. F. Shallcross, </author> <title> "Large traveling salesman problems arising from experiments in X-ray crystallography: a preliminary report on computation", </title> <journal> Oper. Res. Lett. </journal> <volume> 8 (1989), </volume> <pages> 125-128. </pages>
Reference-contexts: (a) drilling holes in printed circuit boards, where the time spent on - 6 - moving the drill through a sequence of prescribed positions is to be minimized, and (b) X-ray crystallography, where the time spent on moving the diffractometer through a sequence of prescribed angles is to be minimized <ref> [1] </ref>.
Reference: [2] <author> K. S. Booth and G. S. Lueker, </author> <title> "Testing for the consecutive ones property, interval graphs, and graph planarity using PQ-tree algorithms", </title> <journal> J.Comput.Syst.Sci. </journal> <volume> 13 (1976), </volume> <pages> 335-379. </pages>
Reference-contexts: A PQ-tree (introduced by Booth and Lueker <ref> [2] </ref>) is a rooted ordered tree with each internal node having at least two children and labeled either as a P-node or as a Q-node; it is customary to draw P-nodes as circles and Q-nodes as rectangles. <p> Reorder the children of top if necessary so that the only FULL child (if any) comes second; then make top a Q-node and process it as a Q-node. 2 Readers familiar with <ref> [2] </ref> will recognize in our proof of Theorem 4.1 a variation on an algorithm designed by Booth and Lueker to solve the following problem: Given a PQ-tree T and a set S of leaves of T such that S 62 B (T ), either construct the coarsest PQ-tree T 0 such <p> On the one hand, it is easy to see that a family F of subsets of our W has the consecutive ones property if and only if (H) = 0, where H = (V; F ); on the other hand, Booth and Lueker <ref> [2] </ref> proved that a family F of sets has the consecutive ones property if and only if there is a PQ-tree T 0 with B (T 0 ) F . In this way, the consecutive ones property provides a link between the TSP and PQ-trees.
Reference: [3] <author> O. Bor-uvka, </author> <title> "On a certain minimal problem" (in Czech), </title> <booktitle> Prace Moravske Prrodovedecke Spolecnosti 3 (1926), </booktitle> <pages> 37-58. </pages>
Reference-contexts: This apparently minor modification makes the new problem far easier: the first efficient algorithm for solving the minimum spanning tree problem was proposed as early as 1926 <ref> [3] </ref>. Just as the TSP is the prototype of a hard combinatorial optimization problem, the minimum spanning tree problem is the prototype of an easy combinatorial optimization problem.
Reference: [4] <author> V. Chvatal, </author> <title> "Edmonds polytopes and weakly hamiltonian graphs", Math. </title> <booktitle> Programming 5 (1973), </booktitle> <pages> 29-40. </pages>
Reference-contexts: The name comes from Chvatal <ref> [4] </ref>, who introduced a variant of (3.1) with T 1 ; T 2 ; : : : ; T 2k+1 not required to be pairwise disjoint but each T i restricted to meet H in precisely one point.
Reference: [5] <author> W. Cook and M.Hartmann, </author> <title> "On the complexity of branch and cut methods for the traveling salesman problem", </title> <editor> in: Polyhedral combinatorics (W. Cook and P.D.Seymour, eds.), </editor> <booktitle> DIMACS Series in Discrete Mathematics and Theoretical Computer Science 1, </booktitle> <publisher> Amer. Math. Soc., </publisher> <year> 1990, </year> <pages> pp. 75-81. </pages>
Reference-contexts: to the article of faith that P 6= N P) the existence of relatively small TSP instances guaranteed to require prohibitively large amounts of time by any algorithm; for relatively small TSP instances guaranteed to require prohibitively large amounts of time by any of the algorithms in current use, see <ref> [5] </ref>.
Reference: [6] <author> H. Crowder and M. W. Padberg, </author> <title> "Solving large-scale symmetric travelling salesman problems to optimality", </title> <institution> Management Sci. </institution> <month> 26 </month> <year> (1980) </year> <month> 495-509. </month>
Reference-contexts: A few milestone records are shown in Table 1.1; the suffix of each problem name, as given in TSPLIB, specifies the number of cities. - 7 - PROBLEM SOLVED BY gr120 Grotschel [11] lin318 Crowder and Padberg <ref> [6] </ref> pcb442 Grotschel and Holland [12] att532 Padberg and Rinaldi [24] gr666 Grotschel and Holland [12] pr1002 Padberg and Rinaldi [24] pr2392 Padberg and Rinaldi [24] Table 1.1: The TSP Olympics Progress in this discipline is made by solving harder and harder problems; "harder" is by no means synonymous with "larger". <p> To attain this goal, we had armed ourselves with some sixty workstations and written, as well as we could, a computer program based on previously published work of others. The cut-finding techniques of our program included * the Crowder-Padberg "shrinking procedure" <ref> [6] </ref>, * the separation algorithm for subtour constraints that solves n 1 max-flow min-cut problems (see, for instance, Section 2.2 of [21]), * the Padberg-Rao separation algorithm for blossom constraints [23], * the Grotschel-Holland comb heuristics [12], * the Padberg-Rinaldi comb and clique-tree heuristics [25], as well as a number of <p> Hence Theorem 2.1 reduces in this case to the statement that x satisfies all subtour constraints if and only if x [current] does. (2.3) Removal of the statements that construct the PQ-tree reduces crude to the "shrinking procedure" of Crowder and Padberg <ref> [6] </ref>, who use it along with (2.3) to find bad sets.
Reference: [7] <author> G. B. Dantzig, R. Fulkerson, and S. M. Johnson, </author> <title> "Solution of a large-scale traveling salesman problem", </title> <journal> Oper. Res. </journal> <volume> 2 (1954), </volume> <pages> 393-410. </pages>
Reference-contexts: this perspective, arguing the difficulty of the TSP by harping on the large number of tours is not entirely convincing: the number of spanning trees in a complete graph is much larger than the number of tours.) A breakthrough came in 1954, when George Dantzig, Ray Fulkerson, and Selmer Johnson <ref> [7] </ref> published a description of a method for solving the TSP and illustrated the power of this method by solving an instance with 49 cities, an impressive size at that time. <p> Glicksberg of Rand for pointing out relations of this kind to us". These two inequalities read x (f15; 16; 18; 19g) + 2x f14;15g + x f16;17g + x f19;20g 6 (1.6) (actually, this constraint is presented in <ref> [7] </ref> as our (1.6) minus the sum of the three equations x (fvg; V fvg) = 2 with v = 15; 16; 19) and X with a f22;23g = 2 and a e = 1 for all other e except that a e = 0 when (i) e = f25; 26g,
Reference: [8] <author> R. E. Gomory, </author> <title> "Outline of an algorithm for integer solutions to linear programs", </title> <journal> Bull. Amer. Math. Soc. </journal> <volume> 64 (1958), </volume> <pages> 275-278. </pages>
Reference-contexts: Glicksberg's ingenuity be replaced by an automatic procedure to generate cutting planes? Ralph Gomory <ref> [8] </ref>, [9], [10] answered this challenge with breathtaking elegance by his design of cutting-plane algorithms. In this way, the work of Dantzig, Fulkerson, and Johnson became the prototype of two different methodologies: polyhedral combinatorics in combinatorial optimization and cutting-plane algorithms in integer linear programming.
Reference: [9] <author> R. E. Gomory, </author> <title> "Solving linear programs in integers", in: Combinatorial Analysis (R. </title> <editor> E. Bellman and M. Hall, Jr., eds.), </editor> <booktitle> Proc. Symp. </booktitle> <institution> Appl. Math. </institution> <month> X </month> <year> (1960), </year> <pages> 211-216. </pages>
Reference-contexts: Glicksberg's ingenuity be replaced by an automatic procedure to generate cutting planes? Ralph Gomory [8], <ref> [9] </ref>, [10] answered this challenge with breathtaking elegance by his design of cutting-plane algorithms. In this way, the work of Dantzig, Fulkerson, and Johnson became the prototype of two different methodologies: polyhedral combinatorics in combinatorial optimization and cutting-plane algorithms in integer linear programming.
Reference: [10] <author> R. E. Gomory, </author> <title> "An algorithm for integer solutions to linear programs", </title> <booktitle> in: Recent Advances in Mathematical Programming (R. </booktitle> <editor> L. Graves and P. Wolfe, eds.), </editor> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1963, </year> <pages> pp. 269-302. - 63 </pages> - 
Reference-contexts: Glicksberg's ingenuity be replaced by an automatic procedure to generate cutting planes? Ralph Gomory [8], [9], <ref> [10] </ref> answered this challenge with breathtaking elegance by his design of cutting-plane algorithms. In this way, the work of Dantzig, Fulkerson, and Johnson became the prototype of two different methodologies: polyhedral combinatorics in combinatorial optimization and cutting-plane algorithms in integer linear programming.
Reference: [11] <author> M. Grotschel, </author> <title> "On the symmetric travelling salesman problem: solution of a 120-city problem", </title> <journal> Math. </journal> <note> Programming Study 12 (1980) 61-77. </note>
Reference-contexts: A few milestone records are shown in Table 1.1; the suffix of each problem name, as given in TSPLIB, specifies the number of cities. - 7 - PROBLEM SOLVED BY gr120 Grotschel <ref> [11] </ref> lin318 Crowder and Padberg [6] pcb442 Grotschel and Holland [12] att532 Padberg and Rinaldi [24] gr666 Grotschel and Holland [12] pr1002 Padberg and Rinaldi [24] pr2392 Padberg and Rinaldi [24] Table 1.1: The TSP Olympics Progress in this discipline is made by solving harder and harder problems; "harder" is by
Reference: [12] <author> M. Grotschel and O. Holland, </author> <title> "Solution of large-scale symmetric travelling salesman problems", </title> <journal> Math. </journal> <note> Programming 51 (1991) 141-202. </note>
Reference-contexts: A few milestone records are shown in Table 1.1; the suffix of each problem name, as given in TSPLIB, specifies the number of cities. - 7 - PROBLEM SOLVED BY gr120 Grotschel [11] lin318 Crowder and Padberg [6] pcb442 Grotschel and Holland <ref> [12] </ref> att532 Padberg and Rinaldi [24] gr666 Grotschel and Holland [12] pr1002 Padberg and Rinaldi [24] pr2392 Padberg and Rinaldi [24] Table 1.1: The TSP Olympics Progress in this discipline is made by solving harder and harder problems; "harder" is by no means synonymous with "larger". <p> milestone records are shown in Table 1.1; the suffix of each problem name, as given in TSPLIB, specifies the number of cities. - 7 - PROBLEM SOLVED BY gr120 Grotschel [11] lin318 Crowder and Padberg [6] pcb442 Grotschel and Holland <ref> [12] </ref> att532 Padberg and Rinaldi [24] gr666 Grotschel and Holland [12] pr1002 Padberg and Rinaldi [24] pr2392 Padberg and Rinaldi [24] Table 1.1: The TSP Olympics Progress in this discipline is made by solving harder and harder problems; "harder" is by no means synonymous with "larger". <p> The cut-finding techniques of our program included * the Crowder-Padberg "shrinking procedure" [6], * the separation algorithm for subtour constraints that solves n 1 max-flow min-cut problems (see, for instance, Section 2.2 of [21]), * the Padberg-Rao separation algorithm for blossom constraints [23], * the Grotschel-Holland comb heuristics <ref> [12] </ref>, * the Padberg-Rinaldi comb and clique-tree heuristics [25], as well as a number of our own innovations (not described in this report); our LP solver was CPLEX, which we modified in significant ways. In January 1992, we began our first run on pcb3038.
Reference: [13] <author> M. Grotschel, M. Junger, and G. Reinelt, </author> <title> "A cutting plane algorithm for the linear ordering problem", </title> <note> Operations Research 32 (1984) 1195-1220. </note>
Reference-contexts: has a chance of beating the current incumbent, and so the subproblem can be abandoned at once. (In addition, a subproblem can be abandoned if its relaxation has no feasible solutions.) This scheme, apparently used first by Miliotis [20] and later, in a different context, by Grotschel, Junger, and Reinelt <ref> [13] </ref>, is known as branch-and-cut [24].
Reference: [14] <author> M. Grotschel and M. W. Padberg, </author> <title> "On the symmetric travelling salesman problem I: Inequalities", Math. </title> <booktitle> Programming 16 (1979), </booktitle> <pages> 265-280. </pages>
Reference-contexts: The present theme is due to Grotschel and Padberg <ref> [14, 15] </ref>, who have shown that it properly subsumes the original variation; we follow them in referring to H as the handle of the comb and to T 1 ; T 2 ; : : : ; T 2k+1 as its teeth.
Reference: [15] <author> M. Grotschel and M. W. Padberg, </author> <title> "On the symmetric travelling salesman problem II: Lifting theorems and facets", Math. </title> <booktitle> Programming 16 (1979), </booktitle> <pages> 281-302. </pages>
Reference-contexts: The present theme is due to Grotschel and Padberg <ref> [14, 15] </ref>, who have shown that it properly subsumes the original variation; we follow them in referring to H as the handle of the comb and to T 1 ; T 2 ; : : : ; T 2k+1 as its teeth.
Reference: [16] <author> M. Grotschel and W. Pulleyblank, </author> <title> "Clique tree inequalities and the symmetric travelling salesman problem", </title> <journal> Math. Oper. Res. </journal> <volume> 11 (1986), </volume> <pages> 537-569. </pages>
Reference-contexts: Grotschel and Pulleyblank <ref> [16] </ref> used a notion of gluing in the analysis of their clique tree inequalities. (These inequalities are satisfied by incidence vectors of all tours; their class includes all the subtour inequalities and all the comb inequalities; in fact, the class of all subtour inequalities and all comb inequalities is just a <p> A clique tree inequality is any inequality H ffi x t 1 such that H is a clique tree with t teeth. Grotschel and Pulleyblank <ref> [16] </ref> proved (among many other things) that every clique tree inequality is satisfied by all incidence vectors x of tours.
Reference: [17] <author> D. S. Johnson and C. H. Papadimitriou, </author> <title> "Computational complexity", in: The Traveling Salesman Problem (E. </title> <editor> L. Lawler et al., eds.), </editor> <publisher> Wiley, </publisher> <address> Chichester, </address> <year> 1995, </year> <pages> pp. 37-85. </pages>
Reference-contexts: the TSP is an N P-complete problem. (In quite a few of the TSPLIB instances, the cities are points in the plane and the cost function is some natural metric; the decision version of the TSP remains N P-complete even when its inputs are restricted to such special instances: see <ref> [17] </ref>.) Writing computer programs to solve TSPLIB problems could be classified as a sport , where each new record is established by solving at least one previously unsolved instance.
Reference: [18] <author> R. M. Karp, </author> <title> "Reducibility among combinatorial problems", in: Complexity of Computer Computations (R. </title> <editor> E. Miller and J. W. Thatcher, eds.), </editor> <publisher> Plenum Press, </publisher> <year> 1972, </year> <month> pp.85-103. </month>
Reference-contexts: consist only of better ways of finding cuts and better handling of the large linear programming relaxations. (Having a faster computer helps, too.) It might be argued that the most significant theorem bearing on the TSP is one pointing in the opposite direction: Richard Karp, Eugene Lawler, and Robert Tarjan <ref> [18] </ref> proved that the decision version of the TSP is an N P-complete problem. (In quite a few of the TSPLIB instances, the cities are points in the plane and the cost function is some natural metric; the decision version of the TSP remains N P-complete even when its inputs are
Reference: [19] <author> S. Lin and B. W. Kerninghan, </author> <title> "An effective heuristic algorithm for the traveling-salesman problem", </title> <journal> Oper. Res. </journal> <volume> 21 (1973), </volume> <pages> 498-516. </pages>
Reference-contexts: Furthermore, even if there were a client with a genuine need to solve TSP problems, such a client would most likely be satisfied with nearly optimal tours. Finding nearly optimal tours even in fairly large TSPLIB problems is a relatively easy task: good implementations of the Lin-Kernighan heuristic <ref> [19] </ref> and its refinements work like a charm. Most of the computer time spent on solving TSPLIB problems goes into proving that a tour is optimal, a fact of negligible interest to the hypothetical client. Writing computer programs to solve TSPLIB problems can hardly be classified as theoretical work, either.
Reference: [20] <author> P. Miliotis, </author> <title> "Using cutting planes to solve the symmetric traveling salesman problem", </title> <note> Mathematical Programming 10 (1976) 367-378. </note>
Reference-contexts: relaxation is at least this bound, then no tour in the subproblem has a chance of beating the current incumbent, and so the subproblem can be abandoned at once. (In addition, a subproblem can be abandoned if its relaxation has no feasible solutions.) This scheme, apparently used first by Miliotis <ref> [20] </ref> and later, in a different context, by Grotschel, Junger, and Reinelt [13], is known as branch-and-cut [24].
Reference: [21] <author> M. W. Padberg and M. Grotschel, </author> <title> "Polyhedral computations", in: The Traveling Salesman Problem (E. </title> <editor> L. Lawler et al., eds.), </editor> <publisher> Wiley, </publisher> <address> Chichester, </address> <year> 1995, </year> <month> pp.307-360. </month>
Reference-contexts: The cut-finding techniques of our program included * the Crowder-Padberg "shrinking procedure" [6], * the separation algorithm for subtour constraints that solves n 1 max-flow min-cut problems (see, for instance, Section 2.2 of <ref> [21] </ref>), * the Padberg-Rao separation algorithm for blossom constraints [23], * the Grotschel-Holland comb heuristics [12], * the Padberg-Rinaldi comb and clique-tree heuristics [25], as well as a number of our own innovations (not described in this report); our LP solver was CPLEX, which we modified in significant ways.
Reference: [22] <author> M. W. Padberg and S. Hong, </author> <title> "On the symmetric travelling salesman problem: a computational study", Math. </title> <booktitle> Programming Study 12 (1980), </booktitle> <pages> 78-107. </pages>
Reference: [23] <author> M. W. Padberg and M. R. Rao, </author> <title> "Odd minimum cut-sets and b-matchings", </title> <journal> Math. Oper. Res. </journal> <volume> 7 (1982), </volume> <pages> 67-80. </pages>
Reference-contexts: The cut-finding techniques of our program included * the Crowder-Padberg "shrinking procedure" [6], * the separation algorithm for subtour constraints that solves n 1 max-flow min-cut problems (see, for instance, Section 2.2 of [21]), * the Padberg-Rao separation algorithm for blossom constraints <ref> [23] </ref>, * the Grotschel-Holland comb heuristics [12], * the Padberg-Rinaldi comb and clique-tree heuristics [25], as well as a number of our own innovations (not described in this report); our LP solver was CPLEX, which we modified in significant ways. In January 1992, we began our first run on pcb3038.
Reference: [24] <author> M. W. Padberg and G. Rinaldi, </author> <title> "Optimization of a 532-city symmetric traveling salesman problem by branch and cut", </title> <journal> Oper. Res. Lett. </journal> <volume> 6 (1987), </volume> <pages> 1-7. </pages>
Reference-contexts: A few milestone records are shown in Table 1.1; the suffix of each problem name, as given in TSPLIB, specifies the number of cities. - 7 - PROBLEM SOLVED BY gr120 Grotschel [11] lin318 Crowder and Padberg [6] pcb442 Grotschel and Holland [12] att532 Padberg and Rinaldi <ref> [24] </ref> gr666 Grotschel and Holland [12] pr1002 Padberg and Rinaldi [24] pr2392 Padberg and Rinaldi [24] Table 1.1: The TSP Olympics Progress in this discipline is made by solving harder and harder problems; "harder" is by no means synonymous with "larger". <p> Table 1.1; the suffix of each problem name, as given in TSPLIB, specifies the number of cities. - 7 - PROBLEM SOLVED BY gr120 Grotschel [11] lin318 Crowder and Padberg [6] pcb442 Grotschel and Holland [12] att532 Padberg and Rinaldi <ref> [24] </ref> gr666 Grotschel and Holland [12] pr1002 Padberg and Rinaldi [24] pr2392 Padberg and Rinaldi [24] Table 1.1: The TSP Olympics Progress in this discipline is made by solving harder and harder problems; "harder" is by no means synonymous with "larger". <p> each problem name, as given in TSPLIB, specifies the number of cities. - 7 - PROBLEM SOLVED BY gr120 Grotschel [11] lin318 Crowder and Padberg [6] pcb442 Grotschel and Holland [12] att532 Padberg and Rinaldi <ref> [24] </ref> gr666 Grotschel and Holland [12] pr1002 Padberg and Rinaldi [24] pr2392 Padberg and Rinaldi [24] Table 1.1: The TSP Olympics Progress in this discipline is made by solving harder and harder problems; "harder" is by no means synonymous with "larger". <p> the current incumbent, and so the subproblem can be abandoned at once. (In addition, a subproblem can be abandoned if its relaxation has no feasible solutions.) This scheme, apparently used first by Miliotis [20] and later, in a different context, by Grotschel, Junger, and Reinelt [13], is known as branch-and-cut <ref> [24] </ref>. <p> The notion of a cutpool was introduced by Padberg and Rinaldi <ref> [24, 26] </ref>; our cutpool is managed in a little different way (which we have just specified); it is used in a much different way (which is the subject of the next three sections), and it is stored in a much different way (which we are about to outline).
Reference: [25] <author> M. W. Padberg and G. Rinaldi, </author> <title> "Facet identification for the symmetric traveling salesman polytope", Math. </title> <booktitle> Programming 47 (1990), </booktitle> <pages> 219-257. </pages>
Reference-contexts: included * the Crowder-Padberg "shrinking procedure" [6], * the separation algorithm for subtour constraints that solves n 1 max-flow min-cut problems (see, for instance, Section 2.2 of [21]), * the Padberg-Rao separation algorithm for blossom constraints [23], * the Grotschel-Holland comb heuristics [12], * the Padberg-Rinaldi comb and clique-tree heuristics <ref> [25] </ref>, as well as a number of our own innovations (not described in this report); our LP solver was CPLEX, which we modified in significant ways. In January 1992, we began our first run on pcb3038.
Reference: [26] <author> M. W. Padberg and G. Rinaldi, </author> <title> "A branch-and-cut algorithm for the resolution of large-scale symmetric traveling salesman problems", </title> <booktitle> SIAM Review 33 (1991), </booktitle> <pages> 60-100. - 64 </pages> - 
Reference-contexts: In this perspective, Table 1.2 illustrates the point that larger does not always mean harder: curiously, the number of nodes in the branch-and-cut tree decreases here as the problems get bigger. (The four problems are named ATT532, GH666, TK1002, and TK2392 in <ref> [26] </ref>. Padberg and Rinaldi apparently do not count the root as one of the nodes of the branch and-cut tree; we do.) PROBLEM NUMBER OF NODES IN THE BRANCH-AND-CUT TREE OF [26] att532 107 pr1002 13 Table 1.2: A monotonically decreasing function - 9 - Dantzig, Fulkerson, and Johnson showed a <p> tree decreases here as the problems get bigger. (The four problems are named ATT532, GH666, TK1002, and TK2392 in <ref> [26] </ref>. Padberg and Rinaldi apparently do not count the root as one of the nodes of the branch and-cut tree; we do.) PROBLEM NUMBER OF NODES IN THE BRANCH-AND-CUT TREE OF [26] att532 107 pr1002 13 Table 1.2: A monotonically decreasing function - 9 - Dantzig, Fulkerson, and Johnson showed a way to solve large instances of the TSP; all that came afterward is just icing on the cake. <p> The notion of a cutpool was introduced by Padberg and Rinaldi <ref> [24, 26] </ref>; our cutpool is managed in a little different way (which we have just specified); it is used in a much different way (which is the subject of the next three sections), and it is stored in a much different way (which we are about to outline).
Reference: [27] <author> G. Reinelt, </author> <title> "TSPLIB A traveling salesman problem library", </title> <note> ORSA J. Computing 3 (1991), 376-384. </note>
Reference-contexts: these sources, along with instances created artificially in the Dantzig-Fulkerson-Johnson tradition (by taking 120 cities in Germany, or 532 cities in the U.S.A., or 666 cities all over the world, or : : : ), have been used for years as standard test problems for computer algorithms; recently, Gerhard Reinelt <ref> [27, 28] </ref> collected around a hundred of them, with sizes ranging from 17 to 85,900 cities, in a library called TSPLIB. Writing computer programs to solve TSPLIB problems can hardly be classified as applied work.
Reference: [28] <author> G. Reinelt, </author> <note> "TSPLIB Version 1.2", Report No.330, </note> <institution> Schwerpunktprogramm der Deutschen Forschungsgemeinschaft, Universit-at Augsburg, </institution> <year> 1991. </year>
Reference-contexts: these sources, along with instances created artificially in the Dantzig-Fulkerson-Johnson tradition (by taking 120 cities in Germany, or 532 cities in the U.S.A., or 666 cities all over the world, or : : : ), have been used for years as standard test problems for computer algorithms; recently, Gerhard Reinelt <ref> [27, 28] </ref> collected around a hundred of them, with sizes ranging from 17 to 85,900 cities, in a library called TSPLIB. Writing computer programs to solve TSPLIB problems can hardly be classified as applied work.
Reference: [29] <author> A. Tucker, </author> <title> "A structure theorem for the consecutive 1's property", </title> <journal> J. Combin. Theory Ser. </journal> <volume> B 12 (1972), </volume> <pages> 153-162. </pages>
References-found: 29

