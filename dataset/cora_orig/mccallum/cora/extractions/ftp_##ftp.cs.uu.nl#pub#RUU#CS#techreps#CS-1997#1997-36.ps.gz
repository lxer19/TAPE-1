URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1997/1997-36.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: On Applying Separator Decompositions to Path Problems and Network Flow C-maxflow algorithm is restated in
Author: M.J.Jansen 
Note: N  
Address: P.O. Box 80.089, 3508 TB Utrecht, The Netherlands  
Affiliation: Department of Computer Science, Utrecht University,  
Abstract: Separator decompositions have proven to be useful for efficient parallel shortest-path computation. In this paper the applicability of separator decompositions to maximum flow computation is explored. It is shown that efficient parallel shortest-path computation can be incorporated in the shortest augmenting path maximum flow algorithm. A class of graphs is described for which the resulting algorithm takes O(n 2+ log n) time and O(n 3 ) work, where 0 &lt; &lt; 1 3 is a class-dependent constant. For graphs with bounded treewidth an N C-algorithm is known for the maximum flow problem. In this paper we show that width-O(1) tree decompositions and separator decompositions with separators, leaf vertex sets, and boundaries of O(1) size are equivalent notions under N C computation. N C-algorithms are given for converting one type of graph decomposition into the other. Furthermore, the 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R.K. Ahuha, T.L. Magnanti, and J.B. Orlin. </author> <title> Some recent advances in network flows. </title> <journal> SIAM Review, </journal> <volume> 33(2) </volume> <pages> 175-219, </pages> <year> 1991. </year>
Reference-contexts: 1. INTRODUCTION See Ahuja et al. <ref> [1] </ref> for a good survey. On the parallel front some fundamental difficulties surround the maximum flow problem. Goldschlager et al. [14] showed that the problem is logspace complete for P, which can be seen as evidence that the problem is not likely to be solved by an N C-algorithm.
Reference: [2] <author> R. Bellman. </author> <title> On a routing problem. </title> <journal> Quarterly of Applied Mathematics, </journal> <volume> 16(1) </volume> <pages> 87-90, </pages> <year> 1958. </year>
Reference: [3] <author> H.L. Bodlaender. </author> <title> NC-algorithms for graphs with small treewidth. </title> <booktitle> In Proceedings of the 14th International Workshop on Graph-Theoretic Concepts in Computer Science. Springer Lecture Notes in Computer Science, </booktitle> <volume> 344 </volume> <pages> 1-10, </pages> <year> 1988. </year>
Reference-contexts: Here an algorithm of Bodlaender is used, which takes a width-k tree decomposition and converts it into a rooted binary tree decomposition of logarithmic depth and of width 3k +2 <ref> [3] </ref>. For constant k 0, the algorithm runs in O (log n) time, and uses O (n) processors. Recall our assumption that in a binary tree internal nodes have exactly two children. Bodlaender's algorithm may result in a binary tree where internal nodes have only one child.
Reference: [4] <author> H.L. Bodlaender. </author> <title> A partial k-arboretum of graphs with bounded treewidth. </title> <type> Technical Report UU-CS-1996-02, </type> <institution> Department of Computer Science, Utrecht University. </institution>
Reference-contexts: As already was made explicit, many classes of graphs are known which have uniform constant bounded treewidth. To mention a few, we have trees, forests, Halin graphs, series-parallel graphs, and outerplanar graphs. For an overview see Bodlaender <ref> [4] </ref>. For the problem of computing a tree decomposition of a graph N C-algorithms are known. Bodlaender and Hagerup [5] gave an O (log 2 n) time algorithm using O (n) operations on the EREW PRAM for the case the graph is undirected.
Reference: [5] <author> H.L. Bodlaender and T. Hagerup. </author> <title> Parallel algorithms with optimal speedup for bounded treewidth. </title> <type> Preprint, </type> <year> 1996. </year>
Reference-contexts: To mention a few, we have trees, forests, Halin graphs, series-parallel graphs, and outerplanar graphs. For an overview see Bodlaender [4]. For the problem of computing a tree decomposition of a graph N C-algorithms are known. Bodlaender and Hagerup <ref> [5] </ref> gave an O (log 2 n) time algorithm using O (n) operations on the EREW PRAM for the case the graph is undirected.
Reference: [6] <author> R.P. Brent. </author> <title> The parallel evaluation of general arithmetic expressions. </title> <journal> Journal of the ACM, </journal> <volume> 21 </volume> <pages> 201-208, </pages> <year> 1974. </year>
Reference-contexts: An algorithm of time T (n) and work W (n) with n the length of the input, can be realized on P (n) processors and the realization runs in time O (T (n) + W (n)=P (n)), provided the 5 3. AUGMENTING PATH MAXFLOW COMPUTATION so-called Brent schedule <ref> [6, 17] </ref> can be applied. In all CRCW PRAM algorithms in this paper the number of processors accessing the same memory location in one computation step is bounded by a polynomial in n, even if the total number of processors is much larger.
Reference: [7] <author> B. Chazelle and J. Matoesek. </author> <title> On linear-time deterministic algorithms for optimization problems in fixed dimensions. </title> <booktitle> Proceedings of the Fourth Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> 281-290, </pages> <year> 1993. </year>
Reference-contexts: The value b S is computed by maximizing P x i with respect to constraints C 0 and the network balancing constraint with an algorithm for linear programming in fixed dimensions discovered by Chazelle and Matousek <ref> [7] </ref>. In our case this will take O (1) time. Assume we find a value r this way. <p> The first can be done in O (1) time, since separators have size at most k. The second can be done in O (d O (d) n) time, in case of d variables, and n constraints <ref> [7] </ref>. In our case the number of variables and constraints are bounded by a constant since boundaries are bounded by a constant. Therefore the application of the linear programming algorithm takes O (1) time. We conclude that the algorithm runs in O (log n) time.
Reference: [8] <author> M. Chrobak and K. Diks. </author> <title> Network flows in outerplanar graphs, </title> <year> 1987. </year>
Reference-contexts: For outerplanar graphs a parallel algorithm is known using O (log n) time and n processors <ref> [8] </ref>. If capacities are polynomial in the number of edges m, the problem can be reduced in logspace to the maximum bipartite matching problem, which is in RN C [19]. Furthermore, Hagerup et al. [15] showed for graphs with treewidth k, for constant k, the problem is in N C.
Reference: [9] <author> E. Cohen. </author> <title> Efficient parallel shortest-paths in digraphs with a separator decomposition. </title> <journal> Journal of Algorithms, </journal> <volume> 21 </volume> <pages> 331-357, </pages> <year> 1996. </year>
Reference-contexts: Informally, for a function f : N ! R, an f (n)-separator decomposition of G is a recursive tree-shaped decomposition of G into subgraphs using separators, where subgraphs of size k have separators of size O (f (k)) <ref> [9] </ref>. We revisit this definition in section 2. Cohen showed that for graphs with small enough separator decompositions, one can compute distances in a graph in O (log n) parallel time by augmenting the graph in a preprocessing phase with a set of edges E + . <p> In this section our focus will solely be on an algorithm from the latter category, namely the shortest augmenting path algorithm. Cohen showed for graphs with small-sized separator decompositions that distances can be computed in polylogarithmic time, and with polynomial work <ref> [9] </ref>. Given a graph G, the idea is to extend G with a set of edges E + , without changing distances, and enabling the Bellman-Ford algorithm to take shortcuts during the path search.
Reference: [10] <author> T. Cormen, C. Leiserson, and R. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1990. </year>
Reference-contexts: Given a specified source vertex s, the single source shortest path problem is the problem of calculating ffi G (s; v) for all vertices v 2 V . In case no negative-weight cycles exist, the single source shortest path problem can be solved by the Bellman-Ford algorithm <ref> [10] </ref>. The algorithm consists of n 1 phases. <p> At termination of Bellman-Ford + it holds that d [v] = ffi G (x) (s; v), for all v 2 V . Proof: In the proof we will frequently use the following claim on the Bellman-Ford algorithm given by Cormen et al. <ref> [10] </ref>: 11 3. AUGMENTING PATH MAXFLOW COMPUTATION Claim 1 [10, Lemma 25.5]. After initialization, d [v] ffi G (s; v) for all v 2 V , and this invariant is maintained over any sequence of relaxation steps on the edges of G. <p> Proof: In the proof we will frequently use the following claim on the Bellman-Ford algorithm given by Cormen et al. [10]: 11 3. AUGMENTING PATH MAXFLOW COMPUTATION Claim 1 <ref> [10, Lemma 25.5] </ref>. After initialization, d [v] ffi G (s; v) for all v 2 V , and this invariant is maintained over any sequence of relaxation steps on the edges of G. Moreover, once d [v] achieves its lower bound ffi G (s; v), it never changes. <p> Next, this information is used to compute the sets E x for all internal nodes x that are just above leaf-level. Processing on like this, the computations ends with computing the set of edges associated with the root of T G . For each leaf x the Floyd-Warshall algorithm <ref> [10, chapter 26] </ref> can be used on G (x) to determine the weights on the edges in E x . The computation at internal nodes takes some more effort. Let us now go into the details of this. <p> Suppose we want to compute a maximum flow in a network (G; c; s; t). The shortest augmenting path maxflow algorithm proceeds as follows <ref> [10] </ref>. Procedure Shortest-Augmenting-Path (G; c; s; t) 1. Initialize f as zero-flow. 2. Construct residual network G (f ). 3. while there exists a path from s to t in G (f ) do 4. Find a minimum-length path p from s to t in G (f ). 5. <p> In order to associate unambiguously with e a single path in I x , we keep all-pairs shortest-path information between vertices in I x in a predecessor matrix I x . (See Cormen et al. <ref> [10] </ref> for details). I x can be computed in line 2 of procedure ComputeWeights using the Floyd-Warshall algorithm. Note that this does not incur any increase in asymptotic time and work bounds of the algorithm ComputeWeights.
Reference: [11] <author> J. Edmonds and R.M. Karp. </author> <title> Theoretical improvements in the algorithmic efficiency for network flow problems. </title> <journal> Journal of the ACM, </journal> <volume> 19 </volume> <pages> 248-264, </pages> <year> 1972. </year> <note> 52 REFERENCES </note>
Reference: [12] <author> L.R. Ford, Jr., and D.R. Fulkerson. </author> <title> Flows in Networks. </title> <publisher> Princeton University Press, </publisher> <year> 1962. </year>
Reference-contexts: For subsets X; Y V , a cut defined by subset S V is an X; Y -separating cut if X S and Y V nS. The famous Max-Flow Min-Cut theorem states <ref> [12] </ref>: Theorem 2.1 In a network (G; c; s; t) the value of any maximum flow is equal to the value of any s; t-separating cut of minimum capacity. Very useful in flow problems are residual networks. We will now give a definition for later use.
Reference: [13] <author> D. Gale. </author> <title> A theorem on flows in networks. </title> <journal> Pacific Journal of Mathematics, </journal> <volume> 7 </volume> <pages> 1073-1082, </pages> <year> 1957. </year>
Reference-contexts: If this is the case we have found a complete characterization of realizable external flows. The following is a reformulation of a theorem proposed by Hagerup et al. [15]. They derived this result by a slight modification and extension of a result due to Gale <ref> [13] </ref>. Theorem 5.1 In a k-terminal network (G; c; Q), a k-tuple (x 1 ; : : : ; x k ) is a realizable external flow if and only if the following two relations are satisfied: 1. i=1 2.
Reference: [14] <author> L.M. Goldschlager, R.A. Shaw, and J. </author> <title> Staples. The maximum flow problem is log space complete for P. </title> <journal> Theoretical Computer Science, </journal> <volume> 21 </volume> <pages> 105-111, </pages> <address> 1982. </address> <publisher> North-Holland Publishing Company. </publisher>
Reference-contexts: 1. INTRODUCTION See Ahuja et al. [1] for a good survey. On the parallel front some fundamental difficulties surround the maximum flow problem. Goldschlager et al. <ref> [14] </ref> showed that the problem is logspace complete for P, which can be seen as evidence that the problem is not likely to be solved by an N C-algorithm. Although in the general case efficient parallelization is not likely, good results are known for special cases.
Reference: [15] <author> T. Hagerup, N. Nishimura, J. Katajainen, and P. Ragde. </author> <title> Characterisations of k-terminal flow networks and computing network flows in partial k-trees. </title> <booktitle> Proceedings of the Sixth Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> 641-649, </pages> <year> 1995. </year>
Reference-contexts: If capacities are polynomial in the number of edges m, the problem can be reduced in logspace to the maximum bipartite matching problem, which is in RN C [19]. Furthermore, Hagerup et al. <ref> [15] </ref> showed for graphs with treewidth k, for constant k, the problem is in N C. Here, we will restrict ourselves to families of networks for which a recursive decomposition exists using small separators. <p> If this is the case we have found a complete characterization of realizable external flows. The following is a reformulation of a theorem proposed by Hagerup et al. <ref> [15] </ref>. They derived this result by a slight modification and extension of a result due to Gale [13].
Reference: [16] <author> Y. Han, V. Pan, and J. Reif. </author> <title> Efficient parallel algorithms for computing all-pairs shortest-paths in directed graphs. </title> <booktitle> In Proceedings 4th Annual ACM Symposium on Parallel Algorithms and Architectures pp.353-362 Assoc. </booktitle> <publisher> Comput. Mach., </publisher> <address> New York 1992. </address>
Reference-contexts: Let us analyze the complexity of the procedure ComputeWeights for the EREW PRAM, in case graphs are represented with adjacency matrices. Line 1 can be done with O (jS (x)j 2 ) work, in O (1) time. Using an algorithm of Han et al. <ref> [16] </ref>, line 2 can be performed with O (jS (x)j 3 ) work, in O (log 2 n) time. Line 3 takes O (jB (x)jjS (x)j + jS (x)j 2 ) work, in O (1) time.
Reference: [17] <author> J. JaJa, </author> <title> An Introduction to Parallel Algorithms, </title> <publisher> Addison-Wesley Publ. Co., </publisher> <year> 1992. </year>
Reference-contexts: The work of A may be strictly smaller than the processor-time product because idle time is not included in it. For an explanation of these concepts we refer to JaJa <ref> [17] </ref>. Time and work are identical for sequential algorithms that have no idle time. <p> An algorithm of time T (n) and work W (n) with n the length of the input, can be realized on P (n) processors and the realization runs in time O (T (n) + W (n)=P (n)), provided the 5 3. AUGMENTING PATH MAXFLOW COMPUTATION so-called Brent schedule <ref> [6, 17] </ref> can be applied. In all CRCW PRAM algorithms in this paper the number of processors accessing the same memory location in one computation step is bounded by a polynomial in n, even if the total number of processors is much larger.
Reference: [18] <author> D.B. Johnson. </author> <title> Parallel algorithms for minimum cuts and maximum flow in planar networks. </title> <journal> Journal of the ACM, </journal> <volume> 34(4) </volume> <pages> 950-967, </pages> <year> 1987. </year>
Reference-contexts: Although in the general case efficient parallelization is not likely, good results are known for special cases. In case the underlying graph is planar, Johnson <ref> [18] </ref> showed the existence of an O (log 3 n)- time algorithm using O (n 4 ) processors, and an O (log 2 n)-time algorithm using O (n 6 ) processors, both for the CREW PRAM.
Reference: [19] <author> R. M. Karp, E. Upfal, and A. Wigderson. </author> <title> Constructing a perfect matching is in random NC. </title> <journal> Combinatorica, </journal> <volume> 6 </volume> <pages> 35-48, </pages> <year> 1986. </year>
Reference-contexts: For outerplanar graphs a parallel algorithm is known using O (log n) time and n processors [8]. If capacities are polynomial in the number of edges m, the problem can be reduced in logspace to the maximum bipartite matching problem, which is in RN C <ref> [19] </ref>. Furthermore, Hagerup et al. [15] showed for graphs with treewidth k, for constant k, the problem is in N C. Here, we will restrict ourselves to families of networks for which a recursive decomposition exists using small separators.
Reference: [20] <author> N. Robertson and P. D. Seymour. </author> <title> Graph Minor. II. Algorithmic aspects of treewidth. </title> <journal> Journal of Algorithms, </journal> <volume> 7 </volume> <pages> 309-322, </pages> <year> 1986. </year> <month> 53 </month>
Reference-contexts: For such a class there exists a constant that bounds the treewidth of all graphs in the class. Many NP-complete problems become polynomially solvable when restricted to graphs classes that have uniform constant bounded treewidth. The following notions were introduced by Robertson and Seymour <ref> [20] </ref>. Definition 4.1 Let G = (V; E) be a graph.
References-found: 20

