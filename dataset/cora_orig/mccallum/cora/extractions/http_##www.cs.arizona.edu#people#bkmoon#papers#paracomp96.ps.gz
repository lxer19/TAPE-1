URL: http://www.cs.arizona.edu/people/bkmoon/papers/paracomp96.ps.gz
Refering-URL: http://www.cs.arizona.edu/people/bkmoon/papers.html
Root-URL: http://www.cs.arizona.edu
Email: fctso,chialin,bkmoon,acha,lsd,saltz,alsg@cs.umd.edu  
Title: The Design and Evaluation of a High-Performance Earth Science Database  
Author: Carter T. Shock, Chialin Chang, Bongki Moon, Anurag Acharya, Larry Davis, Joel Saltz, Alan Sussman 
Address: College Park, MD 20742  
Affiliation: University of Maryland Institute for Advanced Computer Studies and Department of Computer Science  
Abstract: Earth scientists have encountered two major obstacles in their attempts to use remotely sensed imagery to analyze the earth's land cover dynamics. First, the volume of data involved is very large and second, significant preprocessing is needed before the data can be used. This is particularly so for studies that analyze global trends using data sets that cover multiple years. In this paper, we present the design of an earth science database as well as our early experiences with it. The primary design goal of this database is to facilitate efficient access to and preprocessing of large volumes of satellite data. Our initial design assumed that the main bottleneck in the system would be retrieving data from the disks. However, experimental results show that precise identification of all the data values corresponding to a query can take a significant amount of time. The problem is even more pronounced in designing the system to attempt to minimize time spent performing I/O. We therefore discuss a major redesign of the system that includes a reworking of the indexing scheme and a reorganization of the data on disks. Preliminary experimental results show that the redesigned system performs significantly better than the original system, providing interactive response times for local queries.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Acharya, M. Uysal, R. Bennett, A. Mendelson, M. Beynon, J. Hollingsworth, J. Saltz, and A. Sussman. </author> <title> Tuning the performance of I/O-intensive parallel applications. </title> <booktitle> In To appear in the Proceedings of the Fourth ACM Workshop on I/O in Parallel and Distributed Systems, </booktitle> <month> May </month> <year> 1996. </year>
Reference-contexts: Third, a factor that should to be taken into consideration while selecting the data layout is the geometry of individual data units - square groups of pixels provide better indexing and fit than elongated groups. From <ref> [1] </ref>, we know that for the Maryland SP2 configuration, the best I/O performance is achieved for blocks larger than 128KB. The new system tiles the data in blocks of 204x204 pixels.
Reference: [2] <institution> Web site for AVHRR data from the NASA Goddard distributed active archive center. </institution> <address> http://daac.gsfc.nasa.gov/CAMPAIGN DOCS/FTP SITE/readmes/pal.html. </address>
Reference-contexts: First, while the AVHRR files provided by NASA <ref> [2] </ref> 13 are organized in a band-interleaved form (i.e., all the values for a single pixel are stored together), the satellite data processing programs that we are aware of process either bands one and two or bands three, four and five [8, 9, 15, 17].
Reference: [3] <author> Chialin Chang, Alan Sussman, and Joel Saltz. </author> <title> Support for distributed dynamic data structures in C++. </title> <institution> Technical Report CS-TR-3416 and UMIACS-TR-95-19, University of Maryland, Department of Computer Science and UMIACS, </institution> <month> January </month> <year> 1995. </year>
Reference-contexts: The system parallelization is based on the use of objects and high performance computing tools specifically designed to facilitate parallelization of sequential codes. In particular, we use the CHAOS++ runtime library <ref> [3, 4] </ref>. CHAOS++ is a runtime library targeted at parallelizing object-oriented applications with dynamic communication patterns. CHAOS++ provides support for both array and pointer-based data structures, and allows flexible and efficient data exchange of complex data objects among processors.
Reference: [4] <author> Chialin Chang, Alan Sussman, and Joel Saltz. </author> <title> CHAOS++: A runtime library for supporting distributed dynamic data structures. </title> <editor> In Gregory V. Wilson and Paul Lu, editors, </editor> <title> Parallel Programming Using C++. </title> <publisher> MIT Press, </publisher> <year> 1996. </year> <note> To appear. </note>
Reference-contexts: The system parallelization is based on the use of objects and high performance computing tools specifically designed to facilitate parallelization of sequential codes. In particular, we use the CHAOS++ runtime library <ref> [3, 4] </ref>. CHAOS++ is a runtime library targeted at parallelizing object-oriented applications with dynamic communication patterns. CHAOS++ provides support for both array and pointer-based data structures, and allows flexible and efficient data exchange of complex data objects among processors.
Reference: [5] <author> David J. DeWitt, Navin Kabra, Jun Luo, Jignesh M. Patel, and Jie-Bing Yu. </author> <title> Client-server Paradise. </title> <booktitle> In Proceedings of the 20th VLDB Conference, </booktitle> <year> 1994. </year>
Reference-contexts: We therefore address the problem of providing a database of Level 1 data capable of producing unprojected remotely sensed images, while preserving the integrity of the original radiometry used to create these images [12]. Other current systems, such as Sequoia2000 [20, 21], Paradise <ref> [5] </ref> and ARC/INFO [22] index Level 2 products and therefore do not address these issues. Such systems would be suitable for storing the Level 2 output images produced by our system. These requirements present two major challenges for the design and implementation of a high-performance remote-sensing database.
Reference: [6] <author> K. Doan, C. Plaisant, and B. Shneiderman. </author> <title> Query previews in networked information systems. </title> <type> Technical Report CS-TR-3524, </type> <institution> Department of Computer Science, University of Maryland, </institution> <month> Oct </month> <year> 1995. </year> <note> Also available as CAR-TR-788, ISR-TR-95-90. </note>
Reference-contexts: Third, the global index can support quick pruning of large portions of the data base when presented with localized queries. Fourth, the global index can allow query previews that enable users to quickly refine their queries, without forcing large volumes of data to be retrieved from disks <ref> [6] </ref>. Finally, the global index is extensible it is easy to include data from other sensors without re-engineering the indexing scheme or re-indexing existing data. Because local indices are encapsulated objects, the global index implementation can be quite straightforward, mainly depending on the desired scope of the entire system.
Reference: [7] <author> Jack J. Dongarra, Steve W. Otto, Marc Snir, and David Walker. </author> <title> A message passing standard for MPP and workstations. </title> <journal> Communications of the ACM, </journal> <volume> 39(7) </volume> <pages> 84-90, </pages> <month> July </month> <year> 1996. </year>
Reference-contexts: CHAOS++ uses message passing as its transport layer and is implemented on several distributed memory machines, including the Intel Paragon and IBM SP-2, and on networks of workstations using either PVM [10] or MPI <ref> [7, 18] </ref>. Parallelization of the system is achieved by replicating the global index across all available processors, and partitioning an incoming query equally amongst available processors using the following scheme: * The result of any given query is an image, as defined in x2.2.
Reference: [8] <author> Jeff Eidenshink and Jim Fenno. </author> <title> Source code for LAS, </title> <editor> ADAPS and XID, </editor> <year> 1995. </year> <institution> Eros Data Center, Sioux Falls. </institution>
Reference-contexts: First, while the AVHRR files provided by NASA [2] 13 are organized in a band-interleaved form (i.e., all the values for a single pixel are stored together), the satellite data processing programs that we are aware of process either bands one and two or bands three, four and five <ref> [8, 9, 15, 17] </ref>. To take advantage of these query patterns, the new system stores AVHRR data in two groups, one containing data for bands one and two and the other containing data for bands three, four and five.
Reference: [9] <author> Gene Feldman. </author> <title> Source code for the SeaWIFS ocean data processing system, 1995. </title> <institution> SeaWIFS group (NASA Goddard). </institution>
Reference-contexts: First, while the AVHRR files provided by NASA [2] 13 are organized in a band-interleaved form (i.e., all the values for a single pixel are stored together), the satellite data processing programs that we are aware of process either bands one and two or bands three, four and five <ref> [8, 9, 15, 17] </ref>. To take advantage of these query patterns, the new system stores AVHRR data in two groups, one containing data for bands one and two and the other containing data for bands three, four and five.
Reference: [10] <author> Al Geist, A. Beguelin, J. Dongarra, W. Jiang, R. Manchek, and V. Sunderam. </author> <title> PVM 3 user's guide and reference manual. </title> <type> Technical Report ORNL/TM-12187, </type> <institution> Oak Ridge National Laboratory, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: The design of the library is architecture independent and assumes no special support from C++ compilers. CHAOS++ uses message passing as its transport layer and is implemented on several distributed memory machines, including the Intel Paragon and IBM SP-2, and on networks of workstations using either PVM <ref> [10] </ref> or MPI [7, 18]. Parallelization of the system is achieved by replicating the global index across all available processors, and partitioning an incoming query equally amongst available processors using the following scheme: * The result of any given query is an image, as defined in x2.2.
Reference: [11] <author> Michael F. Goodchild, Yang Shiren, and Geoffrey Dutton. </author> <title> Spatial data representation and basic operations for a triangular heirarchical data structure. </title> <type> Technical Report 91-8, </type> <institution> National Center for Geographic Information and Analysis, University of California at Santa Barbara, </institution> <month> April </month> <year> 1991. </year>
Reference-contexts: Finally, the distance between IFOVs in a single scan line varies both with respect to the IFOVs' distance from nadir and from eccentricities in the sensor's orbit. We considered spatial structures such as R-trees [13] and quadtrees [16] for indexing the data. Goodchild et. al. <ref> [11] </ref> suggest a hierarchical tessellation of triangles over the surface of the globe as a global spatial index. We determined that the use of a global index for all IFOVs would require replication of large amounts of meta-data for each IFOV.
Reference: [12] <author> S. N. Goward and J. Townsend et. al. </author> <title> Toward rational global-scale remote sensing databases, March 1994. </title> <booktitle> Presented at Second Inter-Pathfinder Conference, </booktitle> <address> Washington, D.C. </address>
Reference-contexts: We therefore address the problem of providing a database of Level 1 data capable of producing unprojected remotely sensed images, while preserving the integrity of the original radiometry used to create these images <ref> [12] </ref>. Other current systems, such as Sequoia2000 [20, 21], Paradise [5] and ARC/INFO [22] index Level 2 products and therefore do not address these issues. Such systems would be suitable for storing the Level 2 output images produced by our system.
Reference: [13] <author> Antonin Guttman. R-Trees: </author> <title> A dynamic index structure for spatial searching. </title> <booktitle> In Proceedings of the 1984 ACM-SIGMOD Conference, </booktitle> <pages> pages 47-57, </pages> <address> Boston, MA, </address> <month> June </month> <year> 1984. </year>
Reference-contexts: Second, the distance between scan lines varies due to eccentricities in the sensor's orbit. Finally, the distance between IFOVs in a single scan line varies both with respect to the IFOVs' distance from nadir and from eccentricities in the sensor's orbit. We considered spatial structures such as R-trees <ref> [13] </ref> and quadtrees [16] for indexing the data. Goodchild et. al. [11] suggest a hierarchical tessellation of triangles over the surface of the globe as a global spatial index. <p> The structure is built from a list of data block bounds that has been sorted spatially. Sorting the leaves using a space filling curve [16] allows access to the global index as a range tree. This structure is similar in behavior to that of R-trees <ref> [13] </ref>. The entry for each data block contains spatial bounds, temporal bounds, meta-data such as sensor type and satellite number and the position of the data block on disk.
Reference: [14] <author> Bongki Moon, Anurag Acharya, and Joel Saltz. </author> <title> Study of scalable declustering algorithms for parallel grid files. </title> <booktitle> In Proceedings of the Tenth International Parallel Processing Symposium, </booktitle> <pages> pages 434-440, </pages> <address> Honolulu, Hawaii, </address> <month> April </month> <year> 1996. </year> <note> Extended version is available as CS-TR-3589 and UMIACS-TR-96-4. </note>
Reference-contexts: The data layout decisions for the new system were motivated by the format of AVHRR data and the common query patterns identified by NASA researchers and collaborators in the University of Maryland Geography Department. For declustering, we have adapted the minimax scheme, originally proposed by Moon et al. <ref> [14] </ref> for declustering spatial data structures such as grid files and R-trees on large disk farms. This scheme has been adapted to generate an effective declustering of the coarse-grained remote sensing data, as will be shown in x5.3.
Reference: [15] <author> Nazmi El Saleous. </author> <title> Source code for the gaps system, 1995. </title> <institution> GIMMS group (NASA Goddard). </institution>
Reference-contexts: First, while the AVHRR files provided by NASA [2] 13 are organized in a band-interleaved form (i.e., all the values for a single pixel are stored together), the satellite data processing programs that we are aware of process either bands one and two or bands three, four and five <ref> [8, 9, 15, 17] </ref>. To take advantage of these query patterns, the new system stores AVHRR data in two groups, one containing data for bands one and two and the other containing data for bands three, four and five.
Reference: [16] <author> Hanan Samet. </author> <title> The Design and Analysis of Spatial Data Structures. </title> <publisher> Addison - Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1990. </year>
Reference-contexts: Finally, the distance between IFOVs in a single scan line varies both with respect to the IFOVs' distance from nadir and from eccentricities in the sensor's orbit. We considered spatial structures such as R-trees [13] and quadtrees <ref> [16] </ref> for indexing the data. Goodchild et. al. [11] suggest a hierarchical tessellation of triangles over the surface of the globe as a global spatial index. We determined that the use of a global index for all IFOVs would require replication of large amounts of meta-data for each IFOV. <p> The root node is a bounding quadrilateral for all data blocks in the tree. The structure is built from a list of data block bounds that has been sorted spatially. Sorting the leaves using a space filling curve <ref> [16] </ref> allows access to the global index as a range tree. This structure is similar in behavior to that of R-trees [13]. The entry for each data block contains spatial bounds, temporal bounds, meta-data such as sensor type and satellite number and the position of the data block on disk.
Reference: [17] <author> Peter Smith and Bin-Bin Ding. </author> <title> Source code for the AVHRR Pathfinder system, 1995. Main program of the AVHRR Land Pathfinder effort (NASA Goddard). </title>
Reference-contexts: First, while the AVHRR files provided by NASA [2] 13 are organized in a band-interleaved form (i.e., all the values for a single pixel are stored together), the satellite data processing programs that we are aware of process either bands one and two or bands three, four and five <ref> [8, 9, 15, 17] </ref>. To take advantage of these query patterns, the new system stores AVHRR data in two groups, one containing data for bands one and two and the other containing data for bands three, four and five.
Reference: [18] <author> Marc Snir, Steve W. Otto, Steven Huss-Lederman, David W. Walker, and Jack Dongarra. </author> <title> MPI: The Complete Reference. Scientific and Engineering Computation Series. </title> <publisher> MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: CHAOS++ uses message passing as its transport layer and is implemented on several distributed memory machines, including the Intel Paragon and IBM SP-2, and on networks of workstations using either PVM [10] or MPI <ref> [7, 18] </ref>. Parallelization of the system is achieved by replicating the global index across all available processors, and partitioning an incoming query equally amongst available processors using the following scheme: * The result of any given query is an image, as defined in x2.2.
Reference: [19] <author> John P. Snyder. </author> <title> Map Projections A Working Manual. </title> <editor> U. S. </editor> <title> Geological Survey, 1987. </title> <editor> U. S. </editor> <title> Geological Survey Professional Paper 1395. </title>
Reference-contexts: The problem occurs because spherical angular data (latitudes and longitudes) is being projected into a planar frame of reference. The solution we employ is to project the bounding quadrilaterals using a Lambert Conformal Conic Projection <ref> [19] </ref>. a much better fit. Projecting the index does, however, require the system to project a query into the same coordinate system as the index, but experiments have shown that the computational cost of projecting queries is significantly less than the cost of unnecessary disk accesses from null queries.
Reference: [20] <author> Michael Stonebraker. </author> <title> Sequoia 2000: A reflection on the first three years. </title> <type> Technical Report S2K-94-58, </type> <institution> EECS Dept., University of California, Berkeley, </institution> <year> 1994. </year>
Reference-contexts: We therefore address the problem of providing a database of Level 1 data capable of producing unprojected remotely sensed images, while preserving the integrity of the original radiometry used to create these images [12]. Other current systems, such as Sequoia2000 <ref> [20, 21] </ref>, Paradise [5] and ARC/INFO [22] index Level 2 products and therefore do not address these issues. Such systems would be suitable for storing the Level 2 output images produced by our system. These requirements present two major challenges for the design and implementation of a high-performance remote-sensing database.
Reference: [21] <author> Michael Stonebraker, Jim Frew, Kenn Gardels, and Jeff Meredith. </author> <title> The Sequoia 2000 storage benchmark. </title> <booktitle> In Proceedings of the 1993 ACM SIGMOD Conference, </booktitle> <month> May </month> <year> 1993. </year>
Reference-contexts: We therefore address the problem of providing a database of Level 1 data capable of producing unprojected remotely sensed images, while preserving the integrity of the original radiometry used to create these images [12]. Other current systems, such as Sequoia2000 <ref> [20, 21] </ref>, Paradise [5] and ARC/INFO [22] index Level 2 products and therefore do not address these issues. Such systems would be suitable for storing the Level 2 output images produced by our system. These requirements present two major challenges for the design and implementation of a high-performance remote-sensing database.
Reference: [22] <author> The ARC/INFO Geographic Information System. S. </author> <title> morehouse. </title> <journal> Computers and Geosciences: An International Journal, </journal> <volume> 18(4) </volume> <pages> 435-41, </pages> <month> August </month> <year> 1992. </year> <month> 18 </month>
Reference-contexts: We therefore address the problem of providing a database of Level 1 data capable of producing unprojected remotely sensed images, while preserving the integrity of the original radiometry used to create these images [12]. Other current systems, such as Sequoia2000 [20, 21], Paradise [5] and ARC/INFO <ref> [22] </ref> index Level 2 products and therefore do not address these issues. Such systems would be suitable for storing the Level 2 output images produced by our system. These requirements present two major challenges for the design and implementation of a high-performance remote-sensing database.
References-found: 22

