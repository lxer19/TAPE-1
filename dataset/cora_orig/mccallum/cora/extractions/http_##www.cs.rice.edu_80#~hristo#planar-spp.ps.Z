URL: http://www.cs.rice.edu:80/~hristo/planar-spp.ps.Z
Refering-URL: http://www.cs.rice.edu:80/~hristo/publications.html
Root-URL: 
Email: email: hristo@cs.rice.edu  
Title: Efficient Algorithms for Shortest Path Queries in Planar Digraphs  
Author: Hristo N. Djidjev 
Address: P.O. Box 1892, Houston, TX 77251, USA  
Affiliation: Department of Computer Science, Rice University  
Abstract: This paper describes algorithms for answering shortest path queries in digraphs with small separators and, in particular, in planar digraphs. In this version of the problem, one has to preprocess the input graph so that, given an arbitrary pair of query vertices v and w, the shortest-path distance between v and w can be computed in a short time. The goal is to achieve balance between the preprocessing time and space and the time for answering a distance query. Previously, efficient algorithms for that problem were known only for the class of outerplanar digraphs and for the class of digraphs of constant treewidth. We describe efficient algorithms for this problem for any class of digraphs for which an O( n) separator theorem holds. For such graphs our algorithm uses O(S) space and answers queries in O(n 2 =S) time, for any previously chosen S 2 [n; n 2 ]. For the class of planar digraphs improved algorithms are described.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Ravindra K. Ahuja, Thomas L. Magnanti, and James B. Orlin. </author> <title> Network flows : theory, algorithms, and applications. </title> <publisher> Prentice Hall, </publisher> <year> 1993. </year>
Reference-contexts: The path of minimum length is called a shortest path between v and w. Finding shortest path information in a graph is a very important and intensively studied problem with applications in communication systems, transportation, scheduling, computation of network flows, etc. <ref> [1] </ref>. For the single-source shortest path (SSSP) problem with non-negative edge weights, Dijkstra's algorithm takes O (n 2 ) time [5]. An implementation of Dijkstra's algorithm that uses Fibonacci heaps [10] reduces the time to O (n log n + m).
Reference: 2. <author> S. Arikati, D.Z. Chen, L.P. Chew, G. Das, M. Smid, </author> <title> and C.D. Zaroliagis. Planar spanners and approximate shortest path queries among obstacles in the plane. </title> <note> In Proceedings of ESA'96, to appear. </note>
Reference-contexts: and the preprocessing time for the shortest path problem by a factor of fi ( p n), which will lead to an increase of the query time by a factor of fi ( p n) (from fi (1) to fi ( p n)). (A similar result is independently obtained in <ref> [2] </ref>.) A natural question arises whether it is possible to construct an algorithm that allows faster queries, possibly at the expense of more preprocessing time or space, or alternatively, algorithms that are more efficient in terms of preprocessing resources, but slower in answering queries.
Reference: 3. <author> H. Bodlaender. </author> <title> Dynamic algorithms for graphs with treewidth 2. </title> <booktitle> In WG'93, Lecture Notes in Computer Science, </booktitle> <volume> vol. 790, </volume> <pages> pages 112-124. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, Heidelberg, New York, Tokio, </address> <year> 1994. </year>
Reference-contexts: An algorithm with O (ff (n)) query time was described for the class of digraphs of constant treewidth in <ref> [3, 4] </ref>. We study here the on-line version of the shortest path problem for the class of all planar digraphs and, more generally, for any class of digraphs satisfying an O ( n) separator theorem.
Reference: 4. <author> Shiva Chaudhuri and Christos D. Zaroliagis. </author> <title> Shortest path queries in digraphs of small treewidth. </title> <booktitle> In ICALP'95, Lecture Notes in Computer Science, </booktitle> <volume> vol. 944, </volume> <pages> pages 244-255. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, Heidelberg, New York, Tokio, </address> <year> 1995. </year>
Reference-contexts: An algorithm with O (ff (n)) query time was described for the class of digraphs of constant treewidth in <ref> [3, 4] </ref>. We study here the on-line version of the shortest path problem for the class of all planar digraphs and, more generally, for any class of digraphs satisfying an O ( n) separator theorem.
Reference: 5. <author> E.W. Dijkstra. </author> <title> A note on two problems in connection with graphs. </title> <journal> Numer. Math, </journal> <volume> 1 </volume> <pages> 269-271, </pages> <year> 1959. </year>
Reference-contexts: Finding shortest path information in a graph is a very important and intensively studied problem with applications in communication systems, transportation, scheduling, computation of network flows, etc. [1]. For the single-source shortest path (SSSP) problem with non-negative edge weights, Dijkstra's algorithm takes O (n 2 ) time <ref> [5] </ref>. An implementation of Dijkstra's algorithm that uses Fibonacci heaps [10] reduces the time to O (n log n + m). Many recent papers address shortest path problems for special classes of graphs.
Reference: 6. <author> H. Djidjev, G. Pantziou, and C. Zaroliagis. </author> <title> Computing shortest paths and distances in planar graphs. </title> <booktitle> Proc. of 18th International Colloquium on Automata Languages and Programming, </booktitle> <pages> pages 327-339, </pages> <year> 1991. </year>
Reference-contexts: Such applications include facility allocation, transmission in communication systems, circuit and VLSI design. An efficient solution to the on-line version of the shortest path problem is given in <ref> [6] </ref> for the class of outerplanar digraphs, where the preprocessing algorithms uses O (n) time and space and a distance query is answered in O (log n) time.
Reference: 7. <author> E. Feuerstein and A.M. Spaccamela. </author> <title> Dynamic algorithms for shortest paths in planar graphs. </title> <booktitle> In WG'91, Lecture Notes in Computer Science, </booktitle> <volume> vol 570, </volume> <pages> pages 187-197. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, Heidelberg, New York, Tokio, </address> <year> 1991. </year>
Reference-contexts: any boundary vertex b, we store only the shortest-path distances between b and the other boundary vertices. (In Algorithm Preprocess-I we stored the shortest-path distances between any boundary vertex b and all vertices of G.) A similar preprocessing for a dynamic version of the shortest path problem was used in <ref> [7] </ref>. Algorithm Preprocess-II Steps 1-3 are the same as in Algorithm Preprocess-generic. 4. Store: the shortest-path distances between (boundary vertex) b and all bound ary vertices of G (in both directions). 5. Additional preprocessing: None.
Reference: 8. <author> G. N. Frederickson and R. Janardan. </author> <title> Designing networks with compact routing tables. </title> <journal> Algorithmica, </journal> <volume> 3 </volume> <pages> 171-190, </pages> <year> 1988. </year>
Reference-contexts: Many recent papers address shortest path problems for special classes of graphs. Johnson proposes an O (nm + n 2 log n)-time algorithm for the all-pairs shortest path (APSP) problem for sparse graphs [12]. Frederickson and Janar-dan construct an O (n) algorithm for the SSSP problem for outerplanar graphs <ref> [8] </ref>. Using planar separator theorems, Frederickson develops an O (n p log n)-time ? This work was partially supported by the NSF grant No. CCR-9409191. 152 algorithm for the single-source and an O (n 2 )-time algorithm for the all-pairs shortest path problem for planar digraphs [9].
Reference: 9. <author> G.N. Frederickson. </author> <title> Fast algorithms for shortest paths in planar graphs, with applications. </title> <journal> SIAM Journal on Computing, </journal> <volume> 16 </volume> <pages> 1004-1022, </pages> <year> 1987. </year>
Reference-contexts: Using planar separator theorems, Frederickson develops an O (n p log n)-time ? This work was partially supported by the NSF grant No. CCR-9409191. 152 algorithm for the single-source and an O (n 2 )-time algorithm for the all-pairs shortest path problem for planar digraphs <ref> [9] </ref>. The time for the single-source problem for planar digraphs was later improved to O (n) in [13]. <p> That algorithm is, however, not efficient for arbitrary planar digraphs, since in the worst case q = fi (n) and the preprocessing space is fi (n 2 ), the same as in the APSP algorithm <ref> [9] </ref> for planar digraphs. An algorithm with O (ff (n)) query time was described for the class of digraphs of constant treewidth in [3, 4]. <p> B (v) will be called the boundary of R (v). If v is a boundary vertex we define R (v) = C (v) = B (v) = fvg. We will use the following result of Frederickson <ref> [9] </ref>. Theorem 2 For any n-vertex graph G from G p n and any " 2 (0; 1) the vertices of G can be divided into O (1=") regions with O ("n) internal vertices and O ( p boundary vertices each. <p> For S = n 2 , Theorem 3 gives the same time as the optimal algorithm for the all pairs shortest paths problem for digraphs with O ( p n) separator <ref> [9] </ref>, which uses O (n 2 ) space and answers queries in O (1) time.
Reference: 10. <author> Michael L. Fredman and Robert E. Tarjan. </author> <title> Fibonacci heaps and their uses in improved network optimization algorithms. </title> <journal> Journal of the ACM, </journal> <volume> 34 </volume> <pages> 596-615, </pages> <year> 1987. </year>
Reference-contexts: For the single-source shortest path (SSSP) problem with non-negative edge weights, Dijkstra's algorithm takes O (n 2 ) time [5]. An implementation of Dijkstra's algorithm that uses Fibonacci heaps <ref> [10] </ref> reduces the time to O (n log n + m). Many recent papers address shortest path problems for special classes of graphs. Johnson proposes an O (nm + n 2 log n)-time algorithm for the all-pairs shortest path (APSP) problem for sparse graphs [12].
Reference: 11. <author> Michael T. Goodrich. </author> <title> Planar separators and parallel polygon triangulation. </title> <booktitle> Proceedings of 24th Symp. on Theory of Computing, </booktitle> <pages> pages 507-516, </pages> <year> 1992. </year>
Reference-contexts: special case of planar input graphs. 5 Faster algorithms for the class of planar digraphs The results from the previous sections apply also to planar graphs, since the class of planar graphs has an O ( p n)-separator theorem and recursive separator decomposition can be found in O (n) time <ref> [11] </ref>. In order to speed-up our algorithms, we will additionally use some topological properties of planar graphs. In particular, we will make use of the Jordan Curve Theorem, which states that any simple closed curve in the plane divides it into exactly two connected regions "inside" and "outside".
Reference: 12. <author> Donald B. Johnson. </author> <title> Efficient algorithms for shortest paths in sparse networks. </title> <journal> Journal of the ACM, </journal> <volume> 24 </volume> <pages> 1-13, </pages> <year> 1977. </year>
Reference-contexts: Many recent papers address shortest path problems for special classes of graphs. Johnson proposes an O (nm + n 2 log n)-time algorithm for the all-pairs shortest path (APSP) problem for sparse graphs <ref> [12] </ref>. Frederickson and Janar-dan construct an O (n) algorithm for the SSSP problem for outerplanar graphs [8]. Using planar separator theorems, Frederickson develops an O (n p log n)-time ? This work was partially supported by the NSF grant No.
Reference: 13. <author> P. Klein, S. Rao, M. Rauch, and S. Subramanian. </author> <title> Faster shortest-path algorithms for planar graphs. </title> <booktitle> In 26th ACM Symp. Theory of Computing, </booktitle> <pages> pages 27-37, </pages> <year> 1994. </year>
Reference-contexts: CCR-9409191. 152 algorithm for the single-source and an O (n 2 )-time algorithm for the all-pairs shortest path problem for planar digraphs [9]. The time for the single-source problem for planar digraphs was later improved to O (n) in <ref> [13] </ref>. More generally, given a class of graphs satisfying an O (n 1ffi )-separator theorem where 0 &lt; ffi &lt; 1, the SSSP problem can be solved in O (n) time for any n-vertex graph of the class, not including the time to find a recursive separator decomposition [13]. <p> (n) in <ref> [13] </ref>. More generally, given a class of graphs satisfying an O (n 1ffi )-separator theorem where 0 &lt; ffi &lt; 1, the SSSP problem can be solved in O (n) time for any n-vertex graph of the class, not including the time to find a recursive separator decomposition [13]. In this paper we consider the so-called on-line version of the shortest path problem, where one has to construct in a preprocessing phase a data structure such that, given an arbitrary pair of query vertices v and w, the shortest-path distance between v and w can be found fast. <p> It is assumed that a recursive separator decomposition can be found in O (n) time (so that the linear time SSSP algorithm from <ref> [13] </ref> can be used). Given a set C of vertices of G, let G C denote the subgraph of G induced by V (G) n C. The preprocessing algorithm Algorithm Preprocess-basic 1. <p> Since T G is balanced, the total time needed for Step 1 is O (n log n). Let us now analyze Step 2. Finding the shortest-path distances from a vertex of C to all vertices of G takes O (n) time using the linear SSSP algorithm from <ref> [13] </ref>. Thus, computing all distances associated with the vertices of C requires jCjO (n) = O (n 3=2 ) time. <p> Moreover, any separator of K corresponds to a separator of K 0 with at most one additional vertex (vertex v). Thus,the shortest path distances from v to all vertices in K can be computed using the SSSP algorithm from <ref> [13] </ref> in O (jK 0 j) = O (jKj) time. For all vertices of the separator C K of K the time to compute all shortest-path distances is O (jKjjC K j) = O (jKj 3=2 ). <p> Proof: Follows from Lemma 4.1 and Lemma 4.2 by setting " = n=S. ut Note that the space and the query time from Theorem 4 satisfy the same relationship SQ = O (n 2 ) as the best known algorithm for the SSSP problem <ref> [13] </ref> (where S = O (n) and Q = O (n)).
References-found: 13

