URL: http://www.cs.concordia.ca/~faculty/gregb/home/PS/ssr99-agents-subsumption-long.ps.gz
Refering-URL: http://www.cs.concordia.ca/~faculty/gregb/home/paper.html
Root-URL: http://www.cs.concordia.ca
Email: Email: gregb@cs.concordia.ca  
Phone: Tel: +1-514-848-3000  
Title: Reusable Strategies for Software Agents via the Subsumption Architecture  
Author: Greg Butler, Andrea Gantchev and Peter Grogono 
Date: November 5, 1998  
Address: 1455 de Maisonneuve Blvd. West, Montreal, Quebec, Canada, H3G 1M8  
Affiliation: Department of Computer Science, Concordia University,  
Abstract: The subsumption architecture is a layered mediator invented by Rodney Brooks for behaviour-based control of robots. The layers are minimally dependent and use minimal communication. We develop an object-oriented software design for the subsumption architecture, and demonstrate that each layer can be used as a slot for a set of plug-and-play components that implement different micro-strategies for achieving a particular goal. The software architecture, and the reuse of micro-strategy components, is validated by developing truck agents within the Truckin' simulation game. Guidelines for the development of specific layers and components of a subsumption architecture are also presented. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R.A. Brooks, </author> <title> Achieving Artificial Intelligence Through Building Robots, </title> <publisher> MIT A.I. </publisher> <address> Memo 899, </address> <month> May </month> <year> 1986. </year>
Reference-contexts: Brooks aimed to build robots with intelligence on the scale of insects as the first step towards building robots with higher intelligence <ref> [1] </ref>. Brooks' approach to building insect-like robots is in many ways orthogonal to the approach taken earlier. Instead of a top-down, centrally controlled system built around an internal world model, Brooks' system is built bottom-up, has distributed control, with the components interfacing directly with the world (see Figure 1). <p> A set of behaviors that produces a level of competence is referred to as a layer, and the process of increasing the level of competence by adding new behaviors to existing sets of behaviors is called layering <ref> [1] </ref>. Each layer connects its own sensing to action and is not dependent on any other layer to decide what it should do. The layers operate in parallel with minimal communication. The overall system is robust and extensible. <p> A bottom-up decomposition, incremental design, testing and debugging in the real world, offers a controlled way to achieve the desired behaviors. Distributed control of many modules is simplified by the minimization of inter-module dependence and communication. The guidelines that follow, derived from <ref> [1, 2, 12] </ref>, keep the development process within the boundaries of the subsumption methodology. Guideline 1: Decompose the system into task-achieving behaviors beginning with the basic set of reflexes that provide survival in a dynamic unstructured world. A task-achieving behavior is observable in the world.
Reference: [2] <author> R.A. Brooks, </author> <title> A robust layered control system for a mobile robot, </title> <journal> IEEE Journal of Robotics and Automation, </journal> <volume> RA-2, </volume> <month> March </month> <year> 1986, </year> <pages> 14-23. </pages>
Reference-contexts: Under this scheme only one layer has control of the robot's effectors at a time. All data is distributed over many computational elements, and there is no central locus of control. The first three layers of behavior defined by Brooks for the robot Allen <ref> [2] </ref> 6 1. Avoid obstacles. 2. Wander aimlessly around without hitting things. 3. Explore the world by seeing places in the distance that look reachable and heading for them. Each layer of behavior includes as a subset the earlier layers of behavior. <p> A bottom-up decomposition, incremental design, testing and debugging in the real world, offers a controlled way to achieve the desired behaviors. Distributed control of many modules is simplified by the minimization of inter-module dependence and communication. The guidelines that follow, derived from <ref> [1, 2, 12] </ref>, keep the development process within the boundaries of the subsumption methodology. Guideline 1: Decompose the system into task-achieving behaviors beginning with the basic set of reflexes that provide survival in a dynamic unstructured world. A task-achieving behavior is observable in the world. <p> Different methods of behavior activation have also been tried, demonstrating that the approach works as more behaviors are added, indicating that the approach scales to more complex systems. Since the introduction of this architecture, it has been used primarily in 15 robotics <ref> [2, 8, 11, 5] </ref> whether as pure subsumption systems or hybrid systems consisting of a reactive subsumption component coupled with a symbolic planner. More recently it has been used as a control structure for applications outside of robotics. <p> What is important is that the computational model used results in layers that react in a timely fashion to changes in the environment. Allen The first implementation of the subsumption architecture was the robot Allen <ref> [2] </ref> developed by Rodney Brooks at the MIT Artificial Intelligence Laboratory. This robot, described in 2.3, is almost entirely reactive. The lowest layer uses sonar readings to keep away from moving obstacles while not colliding with stationary obstacles.
Reference: [3] <author> R.A. Brooks, </author> <title> Intelligence without representation, </title> <journal> Artificial Intelligence Journal (47), </journal> <year> 1991, </year> <pages> pp. 139-159. </pages>
Reference-contexts: Rodney Brooks' argued that internal world models that are complete representations of the external world were unnecessary for robots to act in a competent manner. According to Brooks the world is its own best model <ref> [3] </ref>. Inspired by ethology and biology, he observed that actions of a robot are separable and that coherent 2 intelligence could emerge from the interaction of independent reactive sub components with the environment [4]. <p> The subsumption architecture was developed to address those difficulties. The fundamental ideas of the subsump-tion architecture are a decomposition into layers of task-achieving behaviors, followed by an incremental composition through debugging in the real world <ref> [3] </ref>. Brooks proposed a decomposition of an autonomous intelligent system based on desired external manifestations of the system. The decomposition resulted in a collection of simpler independent behaviors which when composed produced more complex behavior. Each behavior should achieve a task that is in some way observable.
Reference: [4] <author> R.A. Brooks, </author> <title> Intelligence without reason, </title> <booktitle> Proceedings of 12th Int. Joint Conf. on Artificial Intelligence, </booktitle> <address> Sydney, Australia, </address> <month> August </month> <year> 1991, </year> <pages> pp. 569-595. 19 </pages>
Reference-contexts: According to Brooks the world is its own best model [3]. Inspired by ethology and biology, he observed that actions of a robot are separable and that coherent 2 intelligence could emerge from the interaction of independent reactive sub components with the environment <ref> [4] </ref>. Brooks aimed to build robots with intelligence on the scale of insects as the first step towards building robots with higher intelligence [1]. Brooks' approach to building insect-like robots is in many ways orthogonal to the approach taken earlier. <p> to activate based on voting schemes or spreading of activation. 2.3 Brooks' Subsumption Architecture for Robots Rodney Brooks points out that traditional AI had difficulty with the integration of multiple sensor devices, achievement of multiple goals, robustness, and extensibility when it came to systems for control of autonomous mobile robots <ref> [4] </ref>. The subsumption architecture was developed to address those difficulties. The fundamental ideas of the subsump-tion architecture are a decomposition into layers of task-achieving behaviors, followed by an incremental composition through debugging in the real world [3].
Reference: [5] <author> R.A. Brooks, </author> <title> Integrated systems based on behaviors, </title> <journal> SIGART Bulletin, </journal> <volume> Vol. 2, </volume> <year> 1991, </year> <pages> 46-50. </pages>
Reference-contexts: Different methods of behavior activation have also been tried, demonstrating that the approach works as more behaviors are added, indicating that the approach scales to more complex systems. Since the introduction of this architecture, it has been used primarily in 15 robotics <ref> [2, 8, 11, 5] </ref> whether as pure subsumption systems or hybrid systems consisting of a reactive subsumption component coupled with a symbolic planner. More recently it has been used as a control structure for applications outside of robotics. <p> Attila A complex behavior repertoire requires some mechanism which integrates many competing behaviors. This mechanism should be decentralised, non-manipuable, and not have central control or representation to meet the criteria of the subsumption architecture. Brooks introduces such a mechanism in <ref> [5] </ref>, where a hormonal activation scheme is used to integrate multiple behaviors of the mobile robot Attila. The hormone system can be viewed as low band width global communication system, where the release of hormones and activation of behaviors are local.
Reference: [6] <author> R.A. Brooks, </author> <title> From earwigs to humans, </title> <booktitle> Robotics and Autonomous Systems, </booktitle> <volume> Vol. 20, </volume> <pages> Nos. 2-4, </pages> <month> June </month> <year> 1997, </year> <pages> pp. 291-304. </pages>
Reference-contexts: This approach is referred to as behavior-based robotics. Brooks described the subsumption architecture as an instance of behavior-based robotics used to build robots that operate in the real world <ref> [6] </ref>. It is a framework from which to build behavior-based robots. Maes [10] argues that the behavior-based approach is appropriate for the class of problems that require a system to autonomously fulfill several goals in a dynamic, unpredictable environment. <p> The Wander layer in turn suppresses the Runaway module of the Avoid Obstacles layer. The Explore layer subsumes the Wander layer whenever it inhibits or suppresses the Wander layer. The three key ideas <ref> [6] </ref> introduced in the subsumption approach above are 1. Improvements in performance come about by incrementally adding more situation specific circuitry while leaving old circuitry in place, able to operate when new circuitry fails to operate.
Reference: [7] <author> J. Bryson, </author> <title> The reactive accompanist: Adaptation and behavior decomposition in a music system, </title> <booktitle> The Biology and Technology of Intelligent Autonomous Agents, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: She gives examples of applications, such as virtual actors, process scheduling, interface agents to name a few, where the behavior-based approach could be applied. While Maes argues for the generality of the behavior-based approach, Bryson <ref> [7] </ref> suggests that subsumption architecture can serve as a general framework to develop behavior-based systems. 2.1 The Behavior-based Approach In traditional AI , the system is decomposed along functional modules such as perception, execution, planner, inference engine. <p> More recently it has been used as a control structure for applications outside of robotics. Software applications <ref> [15, 7] </ref> operate under different technological constraints than those of mobile robots, as a consequence the computational models for software agents can be different from that used by Brooks for mobile robots. One software application [15] incorporates a knowledge base as part of a layer in the architecture. <p> The Reactive Accompanist The Reactive Accompanist is another non-robotics example of a subsumption software. It is a software 'folk musician' developed by Joanna Bryson. The software accompanies unfamiliar melodies in real time without knowledge of music theory or any form of rule base <ref> [7] </ref>. The goal of the software is to derive chord structure from a melody in real time.
Reference: [8] <author> J.H. Connell, </author> <title> A Colony Architecture for an Artificial Creature, </title> <publisher> MIT AI TR-1151, </publisher> <month> June </month> <year> 1989. </year>
Reference-contexts: Different methods of behavior activation have also been tried, demonstrating that the approach works as more behaviors are added, indicating that the approach scales to more complex systems. Since the introduction of this architecture, it has been used primarily in 15 robotics <ref> [2, 8, 11, 5] </ref> whether as pure subsumption systems or hybrid systems consisting of a reactive subsumption component coupled with a symbolic planner. More recently it has been used as a control structure for applications outside of robotics. <p> The robot demonstrates that the subsumption architecture can combine reactive and non-reactive capabilities using the same sort of computational mechanism for both. Herbert The second robot, Herbert <ref> [8] </ref>, illustrates that the external world can serve as the only medium for inter-module communication and integration. Herbert wanders around looking for soda cans, picks one up, and brings it back to where it started from.
Reference: [9] <author> N. A. Gantchev, </author> <title> Object-Oriented Design of a Subsumption Architecture, </title> <type> Masters Thesis, </type> <institution> Department of Computer Science, Concordia University, Montreal, </institution> <year> 1998. </year>
Reference: [10] <author> P. Maes, </author> <title> Modeling adaptive autonomous agents, </title> <booktitle> Artificial Life 1(2), </booktitle> <year> 1994, </year> <pages> 135-162. </pages>
Reference-contexts: This approach is referred to as behavior-based robotics. Brooks described the subsumption architecture as an instance of behavior-based robotics used to build robots that operate in the real world [6]. It is a framework from which to build behavior-based robots. Maes <ref> [10] </ref> argues that the behavior-based approach is appropriate for the class of problems that require a system to autonomously fulfill several goals in a dynamic, unpredictable environment.
Reference: [11] <author> M. Mataric, </author> <title> Behavioral synergy without explicit integration, </title> <journal> SIGART Bulletin, </journal> <volume> Vol. 2, </volume> <year> 1991, </year> <pages> 85-88. </pages>
Reference-contexts: Different methods of behavior activation have also been tried, demonstrating that the approach works as more behaviors are added, indicating that the approach scales to more complex systems. Since the introduction of this architecture, it has been used primarily in 15 robotics <ref> [2, 8, 11, 5] </ref> whether as pure subsumption systems or hybrid systems consisting of a reactive subsumption component coupled with a symbolic planner. More recently it has been used as a control structure for applications outside of robotics. <p> Modules never explicitly pass any information to, or call upon any other module, integration of behavior and communication results from a module changing the environment, which in turn causes another module to react. Toto Toto <ref> [11] </ref> demonstrates that subsumption systems can make plans, and have goals without central representations or symbolic representations. Toto explores its environment, builds a map as it explores, and carries out path planning. The map is an active decentralised structure which does the computations necessary for path planning. <p> Planning is accomplished by distributing the goal through the map network. The user selects a goal location whose associated landmark becomes activated. Activation is spread to its neighbours, and propagated throughout the graph in the form of a spreading wave front <ref> [11] </ref>, estimating total path length. The activation eventually arrives at the current position on the map with a recommendation of the direction to travel to follow the shortest path to the goal. This scheme can have multiple active goals, the robot will head towards the nearest one.
Reference: [12] <author> M. Mataric, </author> <title> Behavior-based control: Main properties and implications, </title> <booktitle> in Proceedings, IEEE International Conference on Robotics and Automation, Workshop on Architectures for Intelligent Control Systems, </booktitle> <address> Nice, France, </address> <month> May </month> <year> 1992, </year> <pages> 46-54. </pages>
Reference-contexts: A bottom-up decomposition, incremental design, testing and debugging in the real world, offers a controlled way to achieve the desired behaviors. Distributed control of many modules is simplified by the minimization of inter-module dependence and communication. The guidelines that follow, derived from <ref> [1, 2, 12] </ref>, keep the development process within the boundaries of the subsumption methodology. Guideline 1: Decompose the system into task-achieving behaviors beginning with the basic set of reflexes that provide survival in a dynamic unstructured world. A task-achieving behavior is observable in the world. <p> Guideline 1: Decompose the system into task-achieving behaviors beginning with the basic set of reflexes that provide survival in a dynamic unstructured world. A task-achieving behavior is observable in the world. Proceeding bottom-up, define task-specific modules which when combined with existing modules increase the capabilities of the system. See <ref> [12] </ref> for heuristics describing the process of using task-specific constraints to generate behaviors. This guideline provides a qualitative way to decompose the system, resulting in layering of behaviors that can be incrementally designed and implemented.
Reference: [13] <author> M. Mataric, </author> <title> Behavior-based control: Examples from navigation, learning, and group behavior, </title> <journal> Journal of Experimental and Theoretical Artificial Intelligence, Special Issue on Software Architectures for Physical Agents, </journal> <volume> Vol. 9, </volume> <pages> Nos. 2-3, </pages> <editor> Hexmor Horswill Kortenkamp eds., </editor> <year> 1997. </year>
Reference-contexts: The reactive component's actions can change the world or the state of the agent, as a consequence the planning component must be able to replan and recover from interrupts. Behavior-based systems are an extension of reactive architectures and often fall between reactive and planner-based extremes <ref> [13] </ref>. Behavior-based systems use various forms of distributed representations and distributed computations, unlike planner-based systems which have centralized representation and computation, and reactive systems which are limited to lookup and execution of simple functional mappings. <p> The organization methodology of behavior-based systems concerns the coordination of many behaviors functioning in parallel, making behavior-arbitration the most challenging part of the design <ref> [13] </ref>. The problem of behavior-arbitration is, given a set of behaviors outputting some actions, which ones of those should be given priority, or how should their outputs be combined.
Reference: [14] <author> J. Rumbaugh, M. Blaha, W. Premerlane, F. Eddy, and W. Lorenson, </author> <title> Object-Oriented Modelling and Design, </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference: [15] <author> H. Song, S. Franklin, A. Negatu, SUMPY: </author> <title> A fuzzy software agent, </title> <booktitle> in Proceedings of the ISCA Conference on Intelligent Systems, </booktitle> <address> Reno Nevada, </address> <month> June </month> <year> 1996, </year> <pages> 124-129. 20 </pages>
Reference-contexts: More recently it has been used as a control structure for applications outside of robotics. Software applications <ref> [15, 7] </ref> operate under different technological constraints than those of mobile robots, as a consequence the computational models for software agents can be different from that used by Brooks for mobile robots. One software application [15] incorporates a knowledge base as part of a layer in the architecture. <p> Software applications [15, 7] operate under different technological constraints than those of mobile robots, as a consequence the computational models for software agents can be different from that used by Brooks for mobile robots. One software application <ref> [15] </ref> incorporates a knowledge base as part of a layer in the architecture. What is important is that the computational model used results in layers that react in a timely fashion to changes in the environment. <p> Sumpy Sumpy is a non-robotics implementation of the subsumption architecture. It is a software agent that lives in and helps to maintain a UNIX file system for better disk space utilization <ref> [15] </ref>. One of Sumpy's layers utilizes a fuzzy controller employing 17 a knowledge base consisting of fuzzy inference rules, and an inference engine. The layer supplies the fuzzy controller with input values, and receives a Boolean solution from the controller.
References-found: 15

