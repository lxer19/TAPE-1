URL: ftp://coast.cs.purdue.edu/pub/doc/intrusion_detection/MounjiCharlierEtAl94.ps.gz
Refering-URL: http://www.cs.purdue.edu/coast/archive/data/categ24.html
Root-URL: http://www.cs.purdue.edu
Email: E-mail: cleroy@info.fundp.ac.be  
Phone: Phone: +32 81 72.49.66 Fax: +32 81 72.49.67  
Title: Facult  Distributed Audit Trail Analysis  
Author: es Universitaires Abdelaziz Mounji, Baudouin Le Charlier, Denis Zampunieris, Naji 
Address: la Paix Namur, Belgium  Rue Grandgagnage, 21 B-5000 Namur  RP-94-007 November1994  
Affiliation: Notre-Dame de  Institut d'Informatique  BELGIUM  Habra  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> A. Baur, W. Weiss, </author> <title> Audit Analysis Tool for Systems with High Demands Regarding Security and Access Control. </title> <note> Research Report, ZFE F2 SOF 42, </note> <institution> Siemens Nixdorf Software, Munich, </institution> <month> November </month> <year> 1988. </year>
Reference-contexts: Previous works for stand-alone computer security have established basic concepts and models [3, 4, 5, 7, 8] and described a few operational systems <ref> [1, 6, 9, 12, 18] </ref>. However, distributed analysis of audit trails for network security is needed because of the two following facts.
Reference: [2] <author> W.R. Cheswick, </author> <title> S.M. Bellovin, Firewalls and internet security: repelling the wily hacker. </title> <publisher> Addison-Wesley 1994, </publisher> <pages> 306 pages. </pages> <note> ISBN 0-201-63357-4. </note>
Reference-contexts: Second, the monitoring of network security can potentially provide a more coherent and flexible enforcement of a given security policy. For instance, the security officer can set up a common security policy for all monitored hosts but choose to tighten the security measures for critical hosts such as firewalls <ref> [2] </ref> or for suspicious users. A software architecture and a rule-based language for universal audit trail analysis were developed in the first phase of the ASAX project [10, 11, 12].
Reference: [3] <author> D.E. Denning, </author> <title> An Intrusion-Detection Model. </title> <journal> IEEE Transactions on Software Engineering, Vol.13 No.2, </journal> <month> February </month> <year> 1987. </year>
Reference-contexts: Computer and network security is currently an active research area. The rising complexity of today fl To appear in the ISOC' 95 Symposium on Network and Distributed System Security. networks leads to more elaborate patterns of attacks. Previous works for stand-alone computer security have established basic concepts and models <ref> [3, 4, 5, 7, 8] </ref> and described a few operational systems [1, 6, 9, 12, 18]. However, distributed analysis of audit trails for network security is needed because of the two following facts.
Reference: [4] <author> Th. D. Garvey, T.F. Lunt, </author> <title> Model-Based Intrusion Detection. </title> <booktitle> Proceedings of the 14th National Security Conference, </booktitle> <address> Washington DC., </address> <month> October </month> <year> 1991. </year>
Reference-contexts: Computer and network security is currently an active research area. The rising complexity of today fl To appear in the ISOC' 95 Symposium on Network and Distributed System Security. networks leads to more elaborate patterns of attacks. Previous works for stand-alone computer security have established basic concepts and models <ref> [3, 4, 5, 7, 8] </ref> and described a few operational systems [1, 6, 9, 12, 18]. However, distributed analysis of audit trails for network security is needed because of the two following facts.
Reference: [5] <author> T. Lunt, J. van Horne, L. Halme, </author> <title> Automated Analysis of Computer System Audit Trails. </title> <booktitle> Proceedings of the 9th DOE Computer Security Group Conference, </booktitle> <month> May </month> <year> 1986. </year>
Reference-contexts: Computer and network security is currently an active research area. The rising complexity of today fl To appear in the ISOC' 95 Symposium on Network and Distributed System Security. networks leads to more elaborate patterns of attacks. Previous works for stand-alone computer security have established basic concepts and models <ref> [3, 4, 5, 7, 8] </ref> and described a few operational systems [1, 6, 9, 12, 18]. However, distributed analysis of audit trails for network security is needed because of the two following facts.
Reference: [6] <author> T. F. Lunt, R. Jagannathan, </author> <title> A Prototype Real-time Intrusion Detection Expert System. </title> <booktitle> Proceedings of the 1988 IEEE Symposium on Security and Privacy, </booktitle> <month> April </month> <year> 1988. </year>
Reference-contexts: Previous works for stand-alone computer security have established basic concepts and models [3, 4, 5, 7, 8] and described a few operational systems <ref> [1, 6, 9, 12, 18] </ref>. However, distributed analysis of audit trails for network security is needed because of the two following facts.
Reference: [7] <author> T. F. Lunt, </author> <title> Automated Audit Trail Analysis and Intrusion Detection: A Survey. </title> <booktitle> Proceedings of the 11th National Security Conference, </booktitle> <address> Baltimore, MD, </address> <month> Octo-ber </month> <year> 1988. </year>
Reference-contexts: Computer and network security is currently an active research area. The rising complexity of today fl To appear in the ISOC' 95 Symposium on Network and Distributed System Security. networks leads to more elaborate patterns of attacks. Previous works for stand-alone computer security have established basic concepts and models <ref> [3, 4, 5, 7, 8] </ref> and described a few operational systems [1, 6, 9, 12, 18]. However, distributed analysis of audit trails for network security is needed because of the two following facts.
Reference: [8] <author> T. F. Lunt, </author> <title> Real Time Intrusion Detection. </title> <booktitle> Proceedings of the COMPCON spring 89', </booktitle> <address> San Francisco, CA, </address> <month> February </month> <year> 1989. </year>
Reference-contexts: Computer and network security is currently an active research area. The rising complexity of today fl To appear in the ISOC' 95 Symposium on Network and Distributed System Security. networks leads to more elaborate patterns of attacks. Previous works for stand-alone computer security have established basic concepts and models <ref> [3, 4, 5, 7, 8] </ref> and described a few operational systems [1, 6, 9, 12, 18]. However, distributed analysis of audit trails for network security is needed because of the two following facts.
Reference: [9] <author> T. F. Lunt et. al., </author> <title> A Real-Time Intrusion Detection Expert System. </title> <type> Interim Progress Report, </type> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: Previous works for stand-alone computer security have established basic concepts and models [3, 4, 5, 7, 8] and described a few operational systems <ref> [1, 6, 9, 12, 18] </ref>. However, distributed analysis of audit trails for network security is needed because of the two following facts.
Reference: [10] <author> N.Habra, B. Le Charlier, A. Mounji, </author> <title> Preliminary report on Advanced Security Audit Trail Analysis on Unix 15.12.91, </title> <booktitle> 34 pages. </booktitle>
Reference-contexts: A software architecture and a rule-based language for universal audit trail analysis were developed in the first phase of the ASAX project <ref> [10, 11, 12] </ref>. The distributed system presented here uses this rule-based language to filter audit data at each monitored host and to analyze filtered data gathered at a central host. The analysis language is exactly the same at both local and central levels. <p> However, we only emphasize interesting functionalities. The reader is referred to [12] for a more detailed description of these functionalities 1 . A comprehensive description of ASAX is presented in <ref> [10, 11] </ref>. 2.1 A motivating example The use of the RUSSEL language for single audit trail analysis is better introduced by a typical example: detecting repeated failed login attempts from a single user during a specified time period. This example uses the SunOS 4.1 auditing mechanism. <p> The upper window is the Unix console where outputs from the master evaluator are printed. 6 Overview of the Implementation The implementation of the rule-based language RUSSEL is out of the scope of this paper and is fully explained in <ref> [10, 11] </ref>. We only consider the implementation of the distributed aspects. However, it is worth noticing that very few modifications were necessary to handle record streams instead of ordinary audit trails.
Reference: [11] <author> N.Habra, B. Le Charlier, A. Mounji, </author> <title> Advanced Security Audit Trail Analysis on Unix. </title> <booktitle> Implementation design of the NADF Evaluator Mar 93, </booktitle> <pages> 62 pages. </pages>
Reference-contexts: A software architecture and a rule-based language for universal audit trail analysis were developed in the first phase of the ASAX project <ref> [10, 11, 12] </ref>. The distributed system presented here uses this rule-based language to filter audit data at each monitored host and to analyze filtered data gathered at a central host. The analysis language is exactly the same at both local and central levels. <p> However, we only emphasize interesting functionalities. The reader is referred to [12] for a more detailed description of these functionalities 1 . A comprehensive description of ASAX is presented in <ref> [10, 11] </ref>. 2.1 A motivating example The use of the RUSSEL language for single audit trail analysis is better introduced by a typical example: detecting repeated failed login attempts from a single user during a specified time period. This example uses the SunOS 4.1 auditing mechanism. <p> The upper window is the Unix console where outputs from the master evaluator are printed. 6 Overview of the Implementation The implementation of the rule-based language RUSSEL is out of the scope of this paper and is fully explained in <ref> [10, 11] </ref>. We only consider the implementation of the distributed aspects. However, it is worth noticing that very few modifications were necessary to handle record streams instead of ordinary audit trails.
Reference: [12] <author> N.Habra, B. Le Charlier, I. Mathieu, A. Mounji, ASAX: </author> <title> Software Architecture and Rule-based Language for Universal Audit Trail Analysis. </title> <booktitle> Proceedings of the Second European Symposium on Research in Computer Security (ESORICS). </booktitle> <address> Toulouse, France, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: Previous works for stand-alone computer security have established basic concepts and models [3, 4, 5, 7, 8] and described a few operational systems <ref> [1, 6, 9, 12, 18] </ref>. However, distributed analysis of audit trails for network security is needed because of the two following facts. <p> A software architecture and a rule-based language for universal audit trail analysis were developed in the first phase of the ASAX project <ref> [10, 11, 12] </ref>. The distributed system presented here uses this rule-based language to filter audit data at each monitored host and to analyze filtered data gathered at a central host. The analysis language is exactly the same at both local and central levels. <p> However, we only emphasize interesting functionalities. The reader is referred to <ref> [12] </ref> for a more detailed description of these functionalities 1 . <p> In order to initialize the analysis process, the special rule init action makes the failed login rule active for the first record and also makes the print results rule active at completion of the analysis. The latter rule is 1 Notice however that <ref> [12] </ref> is a preliminary description of a system under implementation.
Reference: [13] <author> A. Mounji, B. Le Charlier, D. Zampunieris, N.Habra, </author> <title> Preliminary report on Advanced Security Audit Trail Analysis on Unix 15.12.91, </title> <booktitle> 34 pages. </booktitle>
Reference: [14] <author> Marshall T. Rose, </author> <title> The Open Book: a Practical Perspective on OSI. </title> <booktitle> Prentice-Hall 1990, </booktitle> <pages> 651 pages. </pages> <note> ISBN 0-13-643016-3. </note>
Reference-contexts: Note that the NADF format is similar to the TLV (Tag, Length, Value) encoding used for the BER (Basic Encoding Rules) which is used as part of the Abstract Syntax Notation ASN.1 <ref> [14] </ref>. However, the TLV encoding is more complex since it supports typed primitive data values such as boolean, real, etc as well as constructor data types. Nevertheless, any data value can be represented as a string of bytes in principle.
Reference: [15] <author> A. Beguelin, J. Dongarra, A. Geist, R. Manchek, V. Sunderam, </author> <title> A User Guide to PVM (Parallel Virtual Machine). </title> <address> ORNL/TM-11826. </address> <month> July, </month> <year> 1991, </year> <pages> 13 pages. </pages>
Reference-contexts: In this section, the functionalities of a distributed version of ASAX are presented in the context of distributed security monitoring of networked computers. The implemented system applies to a network of SUN workstations using the C2 security feature and uses PVM (Parallel Virtual Machine) <ref> [15] </ref> as message passing system.
Reference: [16] <author> Sun Microsystems, </author> <title> Network Programming Guide, Part Number 800-3850-10 Revision A of 27 March, </title> <year> 1990. </year>
Reference-contexts: Auditable events are determined by a comma separated list of audit flags which are borrowed from the SunOS 4.1 C2 security notation for event classes. (The SunOS 4.1 C2 security features are described in detail in <ref> [16] </ref>.) These audit flags are listed in Table 1. flags short description example dr data read stat (2) dw data write utimes (2) dc object create/delete mkdir (2) da object access change chmod (2) lo Login, Logout login (1) ad Administrative operation su (1) p0 Privileged operation quota (1) p1 Unusual
Reference: [17] <author> Craig C. Douglas, Timothy G. Mattson, Martin H. Shultz, </author> <title> Parallel Programming Systems For Workstation Clusters. </title> <institution> Yale University Department of Computer Science Research Report YALEU/DCS/TR-975, </institution> <month> August </month> <year> 1993, </year> <pages> 36 pages. </pages>
Reference-contexts: In the first case, audit records are simply retrieved from the audit file using input/output routines. The second case corresponds to a degenerated distributed evaluator composed of a single slave evaluator. The overhead introduced is mainly due to network communication (using PVM) between the slave and the master. <ref> [17] </ref> describes experiments comparing the communication times for a number of different network programming environments on isolated two and four nodes networks. Since messages exchanged in the distributed system are around 300 bytes in size, it follows from the measurements conducted in [17] that the average data transfer rate is around <p> (using PVM) between the slave and the master. <ref> [17] </ref> describes experiments comparing the communication times for a number of different network programming environments on isolated two and four nodes networks. Since messages exchanged in the distributed system are around 300 bytes in size, it follows from the measurements conducted in [17] that the average data transfer rate is around 0.049Mbytes/sec. The slave evaluator applies the badlogin.asa module as explained earlier and the master evaluator runs the nbbadlogin.asa module.
Reference: [18] <author> J.R. Winkler, </author> <title> A Unix Prototype for Intrusion and Anomaly Detection in Secure Networks. Planning Research Corporation, </title> <address> R&D, </address> <year> 1990. </year>
Reference-contexts: Previous works for stand-alone computer security have established basic concepts and models [3, 4, 5, 7, 8] and described a few operational systems <ref> [1, 6, 9, 12, 18] </ref>. However, distributed analysis of audit trails for network security is needed because of the two following facts. <p> It also achieves a balancing of the CPU time over several machines. The CPU time of the master evaluator is smaller since part of the analysis is carried out by slave evaluators on slave machines. A system using a centralized architecture for network audit trail analysis is presented in <ref> [18] </ref>. type usr sys total elapsed traffic a CA 11.90 13.60 25.56 265.78 2,661 a In Kbytes Table 3: Distributed v.s Centralized Analysis 7.4 Parallel v.s sequential analysis The RUSSEL language allows to execute more than one analysis at the same time i.e., during a single analysis of a given audit
References-found: 18

