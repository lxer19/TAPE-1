URL: http://www.cs.unc.edu/~jeffay/papers/MMCN-99.ps
Refering-URL: http://www.cs.unc.edu/Research/multimedia.html
Root-URL: http://www.cs.unc.edu
Title: Lightweight Active Router-Queue Management for Multimedia Networking  
Author: Mark Parris Kevin Jeffay F. Donelson Smith 
Keyword: active queue management, multimedia networking, RED, congestion control.  
Address: Chapel Hill, NC 27599-3175 USA  
Affiliation: Department of Computer Science University of North Carolina at Chapel Hill  
Note: In: Multimedia Computing and Networking 1999, SPIE Proceedings Series, Volume 3020, San Jose, CA, January 1999, to appear.  
Email: parris,jeffay,smithfd-@cs.unc.edu  
Web: http://www.cs.unc.edu/Research/dirt  
Abstract: The Internet research community is promoting active queue management in routers as a proactive means of addressing congestion in the Internet. Active queue management mechanisms such as Random Early Detection (RED) work well for TCP flows but can fail in the presence of unresponsive UDP flows. Recent proposals extend RED to strongly favor TCP and TCP-like flows and to actively penalize misbehaving flows. This is problematic for multimedia flows that, although potentially well-behaved, do not, or can not, satisfy the definition of a TCP-like flow. In this paper we investigate an extension to RED active queue management called Class-Based Thresholds (CBT). The goal of CBT is to reduce congestion in routers and to protect TCP from all UDP flows while also ensuring acceptable throughput and latency for well-behaved UDP flows. CBT attempts to realize a better than best effort service for well-behaved multimedia flows that is comparable to that achieved by a packet or link scheduling discipline, however, CBT does this by queue management rather than by scheduling. We present results of experiments comparing our mechanisms to plain RED and to FRED, a variant of RED designed to ensure fair allocation of bandwidth amongst flows. We also compare CBT to a packet scheduling scheme. The experiments show that CBT (1) realizes protection for TCP, and (2) provides throughput and end-to-end latency for tagged UDP flows, that is better than that under FRED and RED and comparable to that achieved by packet scheduling. Moreover CBT is a lighter-weight mechanism than FRED in terms of its state requirements and implementation complexity. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> R. Braden, Ed., </author> <title> Requirements for Internet Hosts-Communication Layers, </title> <address> RFC-1122, </address> <month> October </month> <year> 1989. </year>
Reference-contexts: by reducing the load they place on the network. 1 Both Braden et al., and Floyd et al., recognize TCP flows with correct congestion avoidance implementations as being well behaved and argue that these flows, as good network citizens, should be protected and isolated from the effects of misbehaving flows <ref> [1, 2, 8, 11] </ref>. Examples of misbehaving flows include nonstandard implementations of TCP, UDP connections that do not respond to indications of congestion, and UDP connections that are responsive to congestion but respond in ways other than those specified for TCP.
Reference: 2. <author> B. Braden, D. Clark, J. Crowcroft, B. Davie, S. Deering, D. Estrin, S. Floyd, V. Jacobson, G. Minshall, C. Partridge, L. Peterson, K. Ramakrishnan, S. Shenker, J. Wroclawski, & L. Zhang, </author> <title> Recommendations on Queue Management and Congestion Avoidance in the Internet, Internet draft, </title> <booktitle> work in progress, </booktitle> <year> 1998. </year>
Reference-contexts: by reducing the load they place on the network. 1 Both Braden et al., and Floyd et al., recognize TCP flows with correct congestion avoidance implementations as being well behaved and argue that these flows, as good network citizens, should be protected and isolated from the effects of misbehaving flows <ref> [1, 2, 8, 11] </ref>. Examples of misbehaving flows include nonstandard implementations of TCP, UDP connections that do not respond to indications of congestion, and UDP connections that are responsive to congestion but respond in ways other than those specified for TCP. <p> Corporation. 1 We use the term flow simply as a convenient way to designate a sequence of packets having a common addressing 5-tuple of: source and destination IP addresses, source and destination port numbers, and IP protocol type. 2 problem of congestion in the current Internet and makes two recommendations <ref> [2] </ref>. First, the authors recommend deploying active queue management schemes, specifically Random Early Detection (RED) to more effectively notify responsive flows of congestion [5]. Active queue management refers to extending the packet queueing discipline in the router beyond the commonly employed FIFO enqueue and dequeue policies. <p> Router implementations using a simple fixed-size FIFO queue typically just drop any packet that arrives to be enqueued to an already-full outbound queue. This behavior is often called drop-tail packet discarding. Braden et al. describe two important problems with the drop-tail behavior <ref> [2] </ref>. First, in some situations, many of the flows can be locked-out, a condition in which a small subset of the flows sharing the outbound link can monopolize the queue during periods of congestion.
Reference: 3. <author> S. Cen, C. Pu, J. Walpole, </author> <title> Flow and Congestion Control for Internet Streaming Applications, </title> <booktitle> Proc. SPIE/ACM Multimedia Computing and Networking '98, </booktitle> <address> San Jose, CA, </address> <month> January </month> <year> 1998, </year> <pages> pages 250-264. </pages>
Reference-contexts: The developer could use TCP and incur overhead for features she may not want. Or, she could use another protocol and be subject to aggressive drop policies. Another alternative would be to use a protocol that implements TCP-like congestion control without the other undesired features such as reliable delivery <ref> [3] </ref>. We are investigating a different approach: the development of active queue management policies that attempt to balance the performance requirements of continuous media applications that use UDP with the need to both provide early notification of congestion to TCP connections and to protect TCP connections from unresponsive UDP flows.
Reference: 4. <author> K. Cho, </author> <title> A Framework for Alternate Queueing: Towards Traffic Management by PC-UNIX Based Routers, </title> <booktitle> Accepted to USENIX 98, Annual Technical Conference, </booktitle> <address> New Orleans, LA, </address> <month> June </month> <year> 1998. </year>
Reference-contexts: In this we way, we increase the isolation of the classes. 4 EXPERIMENTAL COMPARISON We have implemented CBT and FRED within the FreeBSD kernel with ALTQ extensions <ref> [4] </ref>. ALTQ is a set of extensions to the default IP-layer packet queueing policies in a FreeBSD router to support development of experimental protocols, packet schedulers, and active queue management schemes. In addition to our active queue management implementations, we also used the ALTQ implementation of RED.
Reference: 5. <author> S. Floyd, & V. Jacobson, </author> <title> Random Early Detection gateways for Congestion Avoidance, </title> <journal> IEEE/ACM Trans. on Networking, V.1 N.4, </journal> <month> August </month> <year> 1993, </year> <pages> p. 397-413. </pages>
Reference-contexts: First, the authors recommend deploying active queue management schemes, specifically Random Early Detection (RED) to more effectively notify responsive flows of congestion <ref> [5] </ref>. Active queue management refers to extending the packet queueing discipline in the router beyond the commonly employed FIFO enqueue and dequeue policies. For example, under RED a router does not wait until the queue is full to drop packets. <p> (random drop on full, drop front on full, and dropping prior to queue overflow) are referred to as active queue management. 2 . 1 Random Early Detection (RED) RED is an active queue management policy that is intended to address some of the shortcomings of standard drop-tail FIFO queue management <ref> [5] </ref>. It addresses both the lockout problem (by using a random factor in selecting which packets to drop) and the full queue problem (by dropping packets early, before the queue fills) for responsive flows. <p> When the average length is between 15 and 30 packets, arriving packets are probabilistically dropped. When the average length is greater than 30 packets, a randomly selected packet is dropped when a new packet arrives.) These threshold values were selected based on recommendations of the developers of RED <ref> [5] </ref>. FreeBSD Router 10 Mbps 100 Mbps 100 Mbps FreeBSD Router ftp, UDP blast, & ProShare generators ftp, UDP blast, & ProShare generators 8 We also conducted the same set of experiments using a packet scheduling discipline, class based queueing (CBQ).
Reference: 6. <author> S. Floyd, </author> <title> TCP and Explicit Congestion Notification, </title> <journal> ACM Computer Communications Review, </journal> <volume> 24(5) </volume> <pages> 10-23, </pages> <month> Oct. </month> <year> 1994. </year> <month> 13 </month>
Reference: 7. <author> S. Floyd & V. Jacobson, </author> <title> LinkSharing and Resource Management Models for Packet Networks, </title> <journal> IEEE/ACM Transactions on Networking, V.1, </journal> <volume> N.4, </volume> <month> August </month> <year> 1995, </year> <pages> pp. 365-386. </pages>
Reference-contexts: The goals of our approach, termed Class-Based Thresholds (CBT), are similar to other schemes for realizing better-than-best-effort service within IP, including packet scheduling and prioritization schemes such as Class-Based Queuing <ref> [7] </ref>. While we recognize packet scheduling techniques such as CBQ as the standard by which to measure resource allocation approaches, we are interested in determining how close we can come to the performance of these approaches using thresholds on a FIFO queue rather than scheduling. <p> The primary reason for this is the shorter average queue length under CBT. 5 COMPARISON TO OTHER SCHEMES 5 . 1 Class Based Queueing A more general approach that achieves many of the objectives considered here is found in models for link sharing such as Class-Based Queuing (CBQ) <ref> [7] </ref>. CBQ achieves isolation for classes of flows by limiting each class to a configurable share of link bandwidth. Implementations of CBQ define a separate queue for each of the traffic classes sharing a link. The general framework proposed for link sharing in [7] also includes provisions for different types of <p> link sharing such as Class-Based Queuing (CBQ) <ref> [7] </ref>. CBQ achieves isolation for classes of flows by limiting each class to a configurable share of link bandwidth. Implementations of CBQ define a separate queue for each of the traffic classes sharing a link. The general framework proposed for link sharing in [7] also includes provisions for different types of packet scheduling mechanisms (notably priority scheduling for real-time multimedia classes) and for using RED (or a similar mechanism) for regulating the effects of congestion in a best-effort traffic-class queue.
Reference: 8. <author> S. Floyd, S., & K. </author> <month> Fall, </month> <title> Promoting the Use of End-to-End Congestion Control in the Internet, </title> <month> February </month> <year> 1998. </year> <note> (Under submission to IEEE/ACM Trans. on Networking.) </note>
Reference-contexts: by reducing the load they place on the network. 1 Both Braden et al., and Floyd et al., recognize TCP flows with correct congestion avoidance implementations as being well behaved and argue that these flows, as good network citizens, should be protected and isolated from the effects of misbehaving flows <ref> [1, 2, 8, 11] </ref>. Examples of misbehaving flows include nonstandard implementations of TCP, UDP connections that do not respond to indications of congestion, and UDP connections that are responsive to congestion but respond in ways other than those specified for TCP. <p> Such flows are problematic because they can, in the worst case, force TCP connections to transmit at their minimal possible rates while the unresponsive flows monopolize network resources. To date the problem of dealing with unresponsive/misbehaving flows has centered on how to constrain or penalize these flows <ref> [8, 13] </ref>. We recognize the need to protect well-behaved flows but also recognize that many applications choose unresponsive transport protocols, such as UDP, because they are concerned with throughput and (especially) latency rather than reliable delivery.
Reference: 9. <author> R. Guerin, S. Kamat, V. Peris, and R. Rajan, </author> <title> Scalable QoS Provision Through Buffer Management, </title> <journal> Proceedings of SIGCOMM98, </journal> <note> (to appear). </note>
Reference: 10. <author> E. Hashem, </author> <title> Analysis of Random Drop for Gateway Congestion Control, </title> <type> Report LCS TR-465, </type> <institution> Laboratory for Computer Science, MIT, </institution> <address> Cambridge, MA, </address> <year> 1989, </year> <note> p. 103. </note>
Reference-contexts: When the queue is constantly full, latency is increased for all flows. Simply making the queue shorter will decrease the latency but negates the possibility of accommodating brief bursts of traffic without dropping packets unnecessarily. Two queue management policies, random drop on full <ref> [10] </ref> and drop front on full [12], address the lockout phenomenon by causing packet drops to be spread over more flows, especially those that tend to dominate the queue content. These policies, however, still allow queues to remain full for sustained periods of time.
Reference: 11. <author> V. Jacobson, </author> <title> Congestion Avoidance and Control, </title> <booktitle> ACM SIGCOMM '88, </booktitle> <month> August </month> <year> 1988. </year>
Reference-contexts: by reducing the load they place on the network. 1 Both Braden et al., and Floyd et al., recognize TCP flows with correct congestion avoidance implementations as being well behaved and argue that these flows, as good network citizens, should be protected and isolated from the effects of misbehaving flows <ref> [1, 2, 8, 11] </ref>. Examples of misbehaving flows include nonstandard implementations of TCP, UDP connections that do not respond to indications of congestion, and UDP connections that are responsive to congestion but respond in ways other than those specified for TCP. <p> We use the term responsive flow to indicate any flow in which some end-to-end mechanism is used to detect packet loss and to adjust (reduce) the rate at which packets are sent in response to the loss. The classic example is, of course, the TCP congestion control mechanism <ref> [11] </ref> that is the essential mechanism that allowed the Internet to scale to todays reach while avoiding collapse from unconstrained congestion.
Reference: 12. <author> T.V. Lakshman, A. Neidhardt, T. Ott, </author> <title> The Drop From Front Strategy in TCP Over ATM and Its Interworking with Other Control Features, </title> <booktitle> Proc. Infocom 96, </booktitle> <pages> pp. 1242-1250. </pages>
Reference-contexts: When the queue is constantly full, latency is increased for all flows. Simply making the queue shorter will decrease the latency but negates the possibility of accommodating brief bursts of traffic without dropping packets unnecessarily. Two queue management policies, random drop on full [10] and drop front on full <ref> [12] </ref>, address the lockout phenomenon by causing packet drops to be spread over more flows, especially those that tend to dominate the queue content. These policies, however, still allow queues to remain full for sustained periods of time.
Reference: 13. <author> D. Lin & R. Morris, </author> <title> Dynamics of Random Early Detection, </title> <booktitle> Proc. SIGCOMM 97. </booktitle>
Reference-contexts: Such flows are problematic because they can, in the worst case, force TCP connections to transmit at their minimal possible rates while the unresponsive flows monopolize network resources. To date the problem of dealing with unresponsive/misbehaving flows has centered on how to constrain or penalize these flows <ref> [8, 13] </ref>. We recognize the need to protect well-behaved flows but also recognize that many applications choose unresponsive transport protocols, such as UDP, because they are concerned with throughput and (especially) latency rather than reliable delivery. <p> Lin and Morris recognize this shortcoming of RED and proposed a scheme, called Flow Random Early Detection (FRED), to promote fair buffer allocation between flows <ref> [13] </ref>. To motivate FRED reconsider REDs response to congestion. Under RED, although higher-bandwidth flows incur a larger number of packet drops, on average, all flows experience the same loss rate.
Reference: 14. <author> K. Nichols, V. Jacobson , & L. Zhang, </author> <title> A Two-bit Differentiated Services Architecture for the Internet, Internet draft, </title> <booktitle> work in progress, </booktitle> <year> 1997. </year>
Reference-contexts: These flows are either self-identified at the endsystem or identified by network administrators. (Nichols suggests one such tagging scheme using the type-of-service field in the IP header as part of an architecture for differentiated services. <ref> [14] </ref>) Statistics are maintained for these classes of traffic and their throughput is constrained during times of congestion by limiting the average number of packets they can have enqueued (thus limiting the fraction of router resources and link bandwidth they can consume).
References-found: 14

