URL: http://www-path.eecs.berkeley.edu/~anuj/psdocs/isaac.ps
Refering-URL: http://www-path.eecs.berkeley.edu/~anuj/papers/papers.html
Root-URL: 
Title: Deterministic Automata vis-a-vis Deterministic Buchi Automata  
Author: Sriram C. Krishnan Anuj Puri and Robert K. Brayton 
Note: DBA, DBA are as compact as DRA or DLA.  
Address: Berkeley, CA-94720  
Affiliation: Department of EECS, University of California,  
Abstract: automata are finite state automata that accept infinite strings. The class of !-regular languages is exactly the set accepted by nondeterministic Buchi and L- automata, and deterministic Muller, Rabin, and Streett automata. The languages accepted by deterministic Buchi automata (DBA) form a strict subset of the class of !-regular languages. Landweber characterized deterministic !-automata whose languages are realizable by DBA. We provide an alternative proof of Landwe-ber's theorem and give polynomial time algorithms to check if a language L specified as a deterministic Muller, L-, Streett, or Rabin automaton can be realized as a DBA. We identify a sub-class of deterministic Muller, L-, Streett, and Rabin automata, called Buchi-type automata, which can be converted to an equivalent DBA on the same transition structure in polynomial time. For this subset of !-automata, our transformation yields the most efficient algorithms for checking language inclusion| important for computer verification of reactive systems. We prove that a deterministic L- (DLA) or Rabin automaton (DRA), unlike deterministic Muller or Streett automata, is Buchi-type if and only if its language is realizable as a DBA. Therefore, for languages that are realizable as 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> B.Alpern and F.B.Schneider. </author> <title> Recognizing Safety and Liveness. </title> <journal> Distributed Computing, </journal> <volume> 2(3) </volume> <pages> 117-126, </pages> <year> 1987. </year>
Reference-contexts: For these reasons, it is computationally advantageous to convert DOA to DBA when possible. An !-automaton A = hT; Ci represents a safety property <ref> [1] </ref> provided the directed graph of the transition structure is connected and every cycle is fair. It is easy to show that such an automaton A = hT; Ci (called a safety automaton) is BT, the equivalent Buchi automaton being A 0 = hT; Qi.
Reference: 2. <author> E. A. Emerson and C. L. Lei. </author> <title> Modalities for Model Checking: Branching Time Logic Strikes Back. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 8(3) </volume> <pages> 275-306, </pages> <month> June </month> <year> 1987. </year>
Reference-contexts: If it contains a fair cycle, the DOA A is not Buchi-type, since the fair cycle discovered did not pass through a final state. Checking for a fair cycle is straightforward and the algorithms are well known <ref> [2] </ref>. Thus the complexity of checking if a DOA is BT is of the order of checking language emptiness of the given DOA.
Reference: 3. <author> A. Aziz et al. HSIS: </author> <title> A BDD-Based Environment for Formal Verification. </title> <booktitle> In Proc. of the Design Automation Conf., </booktitle> <year> 1994. </year> <note> To Appear. </note>
Reference-contexts: We provide polynomial time algorithms to convert the given DOA to the corresponding DBA, if it is Buchi-type. When this transformation to the corresponding DBA is possible, it yields the most efficient algorithms for language containment, a key computation in computer-aided formal verification of reactive systems <ref> [3] </ref>. All the automata representing safety properties [9] are Buchi-type, and hence BT automata contain a significant class of practically occurring automata. We prove that, unlike for DMA and DSA, a DLA or DRA is DBA-realizable if and only if it is BT. <p> Translating a DOA to the corresponding DBA, when possible, leads to computational efficiency over previously known approaches for verification problems, although how this efficiency can be retained for BDD-based <ref> [3] </ref> algorithms is an open question.
Reference: 4. <author> S. C. Krishnan, A. Puri, and R. K. Brayton. </author> <title> Deterministic !-automata vis-a-vis Deterministic Buchi Automata . Technical report, </title> <institution> Electronics Research Lab, Univ. of California, Berkeley, CA 94720. </institution> <type> preprint. </type>
Reference-contexts: Detailed algorithms are in the full report <ref> [4] </ref>. 4 Buchi-typeness and DBA-realizability of DOA The question arises: do there exist DOA, that are not BT but are still realizable as DBA? Lemma 7. There exists DMA & DSA which are not BT but are DBA-realizable. Proof. <p> On the other hand, DSA and DMA can be either a) BT, b) DBA-realizable but not BT, or c) not DBA-realizable. The key ideas involved in polynomial time algorithms for checking for DBA-realizability of DMA and DSA follow; refer to the full report <ref> [4] </ref> for details. Muller Automata We search for a counterexample to the fullness condition. That is, for each strongly connected cyset d 0 test if there is a cycle that is not a cyset but contains d 0 .
Reference: 5. <author> R. P. Kurshan. </author> <title> Complementing Deterministic Buchi Automata in Polynomial Time. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 35 </volume> <pages> 59-71, </pages> <year> 1987. </year>
Reference-contexts: DBA have several computational advantages over other deterministic !-automata (DOA)|for example, in time linear in the number of states they can be complemented (to yield another Buchi automaton) <ref> [5] </ref>, as well as tested for language-emptiness. In this paper, we classify deterministic !-automata vis-a-vis deterministic Buchi automata. We give an alternate proof of a simple characterization (due to Landweber) of the subclass of DOA that are realizable as DBA (DBA-realizable). <p> Lemma 5. A language L ! is recognized by a deterministic Buchi automa ton if and only if L = LimW for some *-regular set W fl [9] 3 Buchi-Type Automata DBA can be complemented in linear time (to yield another Buchi automaton) <ref> [5] </ref>. Checking for emptiness of BA is NLOGSPACE-complete under LOGSPACE reductions. Furthermore, unlike other !-automata, the complexity of checking emptiness for a Buchi automaton A = hT; F i is independent of the size of F and linear in the size of just T .
Reference: 6. <author> R. P. Kurshan. </author> <title> Automata-Theoretic Verification of Coordinating Processes. </title> <publisher> Prince-ton University Press, </publisher> <year> 1993. </year> <note> To appear. </note>
Reference-contexts: The Muller acceptance condition is a set D 2 Q of acceptance sets (also referred to henceforth as cysets), and run ~ is accepting if and only if inf (~) = z, for some z 2 D. The L-automaton <ref> [6] </ref> acceptance condition consists of a pair hR; Zi. R Q, is termed the recur states, and Z 2 Q is the set of cysets. Run ~ is accepting if and only if inf (~) z 2 Z _ inf (~) " R 6= ;. <p> R Q, is termed the recur states, and Z 2 Q is the set of cysets. Run ~ is accepting if and only if inf (~) z 2 Z _ inf (~) " R 6= ;. This definition is a minor variant of that in <ref> [6] </ref>. The Streett and Rabin acceptance conditions consist of pairs, (L i ; U i ), i 2 I, where L i Q, U i Q, and I is a finite index set. Each pair is called a fairness constraint (f.c.).
Reference: 7. <author> M.O.Rabin and D.Scott. </author> <title> Finite Automata and their Decision Problems. </title> <journal> In IBM Journal of Research and Development, </journal> <volume> volume 3, </volume> <pages> pages 115-125, </pages> <year> 1959. </year>
Reference-contexts: 1 Introduction Traditional finite state fl-automata accept finite strings (on a finite alphabet). On the other hand !-automata, while also finite state, accept infinite strings (also called "sequences") over a finite alphabet. In contrast to the unique kind of fl-automata <ref> [7] </ref>, various !-automata have been described in the literature [9, 8] including Buchi, L-, Muller, Rabin, and Streett, each with a different acceptance condition.
Reference: 8. <author> Shmuel Safra. </author> <title> Complexity of Automata on Infinite Objects. </title> <type> PhD thesis, </type> <institution> The Weiz-mann Institute of Science, Rehovot, Israel, </institution> <month> March </month> <year> 1989. </year>
Reference-contexts: 1 Introduction Traditional finite state fl-automata accept finite strings (on a finite alphabet). On the other hand !-automata, while also finite state, accept infinite strings (also called "sequences") over a finite alphabet. In contrast to the unique kind of fl-automata [7], various !-automata have been described in the literature <ref> [9, 8] </ref> including Buchi, L-, Muller, Rabin, and Streett, each with a different acceptance condition. The infinitely occurring states of the !-automaton on a run of a sequence should satisfy the acceptance condition for the sequence to be in the language of the automaton. <p> The infinity set of a run ~, denoted inf (~), is the set of states visited infinitely many times in ~ <ref> [8] </ref>. A run ~ over T is accepting if inf (~) satisfies the acceptance condition C. The acceptance condition C distinguishes different !-automata. Fig. 1.
Reference: 9. <author> W. Thomas. </author> <title> Automata on Infinite Objects. </title> <editor> In J. van Leeuwen, editor, </editor> <title> Formal Models and Semantics, </title> <booktitle> volume B of Handbook of Theoretical Computer Science, </booktitle> <pages> pages 133-191. </pages> <publisher> Elsevier Science, </publisher> <year> 1990. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: 1 Introduction Traditional finite state fl-automata accept finite strings (on a finite alphabet). On the other hand !-automata, while also finite state, accept infinite strings (also called "sequences") over a finite alphabet. In contrast to the unique kind of fl-automata [7], various !-automata have been described in the literature <ref> [9, 8] </ref> including Buchi, L-, Muller, Rabin, and Streett, each with a different acceptance condition. The infinitely occurring states of the !-automaton on a run of a sequence should satisfy the acceptance condition for the sequence to be in the language of the automaton. <p> When this transformation to the corresponding DBA is possible, it yields the most efficient algorithms for language containment, a key computation in computer-aided formal verification of reactive systems [3]. All the automata representing safety properties <ref> [9] </ref> are Buchi-type, and hence BT automata contain a significant class of practically occurring automata. We prove that, unlike for DMA and DSA, a DLA or DRA is DBA-realizable if and only if it is BT. <p> We also prove that there exists non-Buchi-type DSA and DMA that are DBA-realizable; however, for DRA or DLA DBA-realizable and Buchi-type are equivalent. We present polynomial time algorithms to test for DBA-realizability of DMA and DSA in Section 5. 2 Preliminaries An !-automaton <ref> [9] </ref> over a finite alphabet is A = hT; Ci, where T is a transition structure defined by a four-tuple and C is the acceptance condition. <p> A sequence of states, ~ 2 Q ! , is a run <ref> [9] </ref> of T for a word 2 ! , if ~ 0 = q 0 and for i 0, ~ i+1 2 ffi (~ i ; i ). The infinity set of a run ~, denoted inf (~), is the set of states visited infinitely many times in ~ [8]. <p> LimV , read limit of V , is the set of infinite sequences with infinitely many prefixes in V . Lemma 5. A language L ! is recognized by a deterministic Buchi automa ton if and only if L = LimW for some *-regular set W fl <ref> [9] </ref> 3 Buchi-Type Automata DBA can be complemented in linear time (to yield another Buchi automaton) [5]. Checking for emptiness of BA is NLOGSPACE-complete under LOGSPACE reductions. <p> From the fullness condition it follows that C 0 2 D. Thus u 2 L (M). ut Lemmas 5 and 11 imply that L is DBA-realizable. Theorem 10 follows from Lemma 12. ut Landweber gave an explicit construction <ref> [9] </ref> for finding the corresponding DBA entailing a possible exponential blowup in the states; our's is an existential proof. That any full !-automaton is DBA-realizable also identically follows the proof of the Muller case, since every !-automaton can be realized as a MA on the same transition structure.
References-found: 9

