URL: http://www.cse.ogi.edu/~barga/papers/reflect.ps
Refering-URL: http://www.cse.ogi.edu/~barga/
Root-URL: http://www.cse.ogi.edu
Email: email: fbarga,caltong@cse.ogi.edu)  
Title: Reflection on a Legacy Transaction Processing Monitor  
Author: Roger Barga and Calton Pu 
Affiliation: Department of Computer Science and Engineering Oregon Graduate Institute of Science Technology  
Abstract: In this paper we describe our experience applying the concepts of reflection to a legacy transaction processing (TP) monitor in order to support the implementation of extended transaction models. In the past ten years, numerous extended transaction models have been proposed to address challenges posed by new advanced applications. Few practical implementations of these extended transaction models exist, and none are being used in a commercial TP monitor. We believe the reason for this state of affairs is that the interface and functionality of commercial TP monitors is "locked in" to a fixed transaction model. We have developed the Reflective Transaction Framework as a practical method to implement extended transaction models on a commercial TP monitor. The design of our framework is based on the principles of computational reflection, and in particular open implementation. The implementation of our framework introduces transaction adapters, which are reflective software modules that provide a meta interface to the underlying TP monitor, allowing application developers the flexibility to adjust both the application programming interface and system functionality. Unlike classic reflective systems, the Reflective Transaction Framework applies reflection to a legacy TP monitor written in a non-reflective programming language. This paper focuses on the ability of the Reflective Transaction Framework to perform reflective computation and on the extent to which the legacy TP monitor supports this computation. 
Abstract-found: 1
Intro-found: 1
Reference: [BALL90] <author> B.N. Bershad, T.E. Anderson, E.D Lazowska, and H.M. Levy. </author> <title> Lightweight remote procedure call. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 8(1), </volume> <month> February </month> <year> 1990. </year> <pages> Page 14 </pages>
Reference-contexts: The Encina Toolkit's modular decomposition, described in the previous section, is predicated on fast interprocess communication (IPC). Although it has been shown that IPC can be fast <ref> [BALL90] </ref>, its performance in commercial Unix implementations lags far behind that of local procedure calls. Even on Mach 2.5, the measurements reported by Barrera [Bar91] indicate that fast IPC is about 500 times more expensive than local procedure calls.
Reference: [Bar91] <author> Joseph S. Barrera. </author> <title> A fast mach network ipc im-plementation. </title> <booktitle> Proceedings of the USENIX Association Mach Symposium, </booktitle> <month> November </month> <year> 1991. </year>
Reference-contexts: Although it has been shown that IPC can be fast [BALL90], its performance in commercial Unix implementations lags far behind that of local procedure calls. Even on Mach 2.5, the measurements reported by Barrera <ref> [Bar91] </ref> indicate that fast IPC is about 500 times more expensive than local procedure calls. Given our desire to make the Reflective Transaction Framework efficient and portable, we were not willing to make its design critically dependent on fast IPC.
Reference: [Bar96] <author> Roger S. Barga. </author> <title> A Reflective Framework for Implementing Extended Transactions. </title> <type> PhD thesis, </type> <institution> Oregon Graduate Institute, </institution> <note> Expected 1996. </note>
Reference: [BCDW95] <author> R.K. Baaif, J.I. Carrie, W.B. Drury, and O.L. Wiesler. </author> <title> ACMSxp open distributed transaction processing. </title> <journal> Digital Technical Journal, </journal> <volume> 7(1) </volume> <pages> 23-33, </pages> <year> 1995. </year>
Reference-contexts: The transaction middleware service modules of the Encina Toolkit provide the basic building blocks of the TP monitor reference architecture [GR93, pp. 21], and have been used by a number of computer system providers to implement various TP monitors, including IBM's CICS/6000 TP monitor, DEC's ACM-Sxp TP monitor <ref> [BCDW95] </ref> and, of course, the Encina TP monitor [Cor91]. Each module in the Encina Toolkit provides access to its transaction services and behaviors through a relatively simple and uniform API.
Reference: [BDG + 94] <author> A. Biliris, S. Dar, N. Gehani, H.V. Jagadish, and K. Ramamritham. </author> <title> Asset: A system for supporting extended transactions. </title> <booktitle> In Proceedings of 1994 ACM SIGMOD, </booktitle> <pages> pages 44-53, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: There exist only a small number of research efforts on implementing extended transaction functionality, spirit to the Reflective Transaction Framework. Two noteworthy systems for implementing extended transaction models are ASSET <ref> [BDG + 94] </ref> and TSME [GHKM94]. Similar to our framework, these systems are designed to facilitate the implementation of extended transaction models. <p> In our approach, the user is presented with a flexible framework in which the functionality and interface for an extended transaction model can be created, rather than a fixed selection of mechanisms from which particular extended transaction models can be selected. ASSET <ref> [BDG + 94] </ref> provides a set of new language primitives that enable the realization of various extended transaction models in an object-oriented da tabase setting.
Reference: [Ber90] <author> Philip A. Bernstein. </author> <title> Transaction processing monitors. </title> <journal> Communications of the ACM, </journal> <volume> 33(11) </volume> <pages> 75-86, </pages> <year> 1990. </year>
Reference: [BGW93] <author> Daniel G. Bobrow, Richard Gabriel, and Jon L White. </author> <title> CLOS in Context: The Shape of the Design Space. </title> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference: [BP95] <author> Roger S. Barga and Calton Pu. </author> <title> A practical and modular method to implement extended transaction models. </title> <booktitle> In Proceedings of the 21st International Conference on Very Large Data Bases, </booktitle> <address> Zurich, Switzerland, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: Readers interested in additional examples of implementing extended transaction models, are referred to our previous paper <ref> [BP95] </ref>. 4.1 Split/Join Transaction Model The split/join transaction model was proposed for open-ended activities such as computer-aided design and manufacturing (CAD/CAM). Open-ended activities are characterized by uncertain duration, uncertain developments and interaction with other concurrent activities. <p> A companion paper offers many further implementation details <ref> [BP95] </ref>, and a comprehensive treatment of the TP monitor reference architecture and transactional implementation techniques can be found in Gray and Reuter's text [GR93]. 5.1 Encina TP Monitor Interface For our current implementation of the Reflective Transaction Framework we are using Encina, a commercial TP Monitor distributed by the Transarc Corp.
Reference: [BPZH95] <author> R.S. Barga, C. Pu, T. Zhou, </author> <title> and W.W. Hseush. A practical method for implementing semantics-based concurrency control. </title> <type> Technical Report OGI-CSE-95, </type> <institution> Department of Computer Science and Engineering, Oregon Graduate Institute, </institution> <month> May </month> <year> 1995. </year>
Reference-contexts: We are currently in the process of measuring and optimizing the performance of this implementation. In addition, we are working to extend the ideas of the framework to other TP monitors, and to other research challenges in advanced transaction processing, such as semantics-based concurrency control protocols <ref> [BPZH95] </ref>. It is our hope that this work will not only provide solutions of practical value to these challenging problems, but provide insights into the general application of the notions of reflection and open implementation to legacy systems.
Reference: [Cla85] <author> David D. Clark. </author> <title> The Structuring of Systems Using Upcalls. </title> <booktitle> In Proceedings of the Tenth ACM Symposium on Operating System Principles, </booktitle> <pages> pages 171-180, </pages> <address> Orcas Island, Washington, </address> <month> December 1-4 </month> <year> 1985. </year>
Reference: [CM93] <author> S. Chiba and T. Masuda. </author> <title> Designing an extensible distributed language with metalevel architecture. </title> <booktitle> In Proceedings of the 7th Euro-pean Conference on Object-Oriented Programming (ECOOP), </booktitle> <pages> pages 482-501, </pages> <year> 1993. </year>
Reference-contexts: The research of Stroud and Wu [SW95, Str93] is also related to the Reflective Transaction Framework, in that their work to implement synchronization and recovery properties for atomic data types also takes a metaobject protocol approach. They use metalevel programming, in the form of Open C++ <ref> [CM93] </ref> language, to implement a clean separation between application code and the synchronization/recovery code needed to guarantee atomicity, and thus make it possible for programmers to select new schemes for ensuring atomicity by simply introducing new metaobjects into the system.
Reference: [Cor91] <institution> Transarc Corp. Encina Product Overview. Transarc Corp, </institution> <address> Pittsburgh, PA., </address> <year> 1991. </year>
Reference-contexts: the Encina Toolkit provide the basic building blocks of the TP monitor reference architecture [GR93, pp. 21], and have been used by a number of computer system providers to implement various TP monitors, including IBM's CICS/6000 TP monitor, DEC's ACM-Sxp TP monitor [BCDW95] and, of course, the Encina TP monitor <ref> [Cor91] </ref>. Each module in the Encina Toolkit provides access to its transaction services and behaviors through a relatively simple and uniform API.
Reference: [CR92] <author> P.K. Chrysanthis and K. Ramamritham. </author> <title> ACTA: The SAGA Continues, chapter 10. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1992. </year>
Reference: [dRS84] <author> Jim des Rivieres and Brian Smith. </author> <title> The implementation of procedurally reflective languages. </title> <type> Technical Report ISL-4, </type> <note> Xerox PARC, </note> <month> June </month> <year> 1984. </year>
Reference: [Elm93] <editor> Ahmed K. Elmagarmid, editor. </editor> <title> Database Transaction Models for Advanced Applications. </title> <publisher> Mor-gan Kaufmann, </publisher> <year> 1993. </year>
Reference: [EPT95] <author> D. Edmond, M. Papzoglou, and Z. Tari. R-OK: </author> <title> A reflective model for distributed object management. </title> <booktitle> In Proceedings of the RIDE '95 Workshop (Research Issues in Data Engineering, </booktitle> <year> 1995. </year>
Reference: [GHKM94] <author> D. Georgakopoulos, M. Hornick, P. Krychniak, and F. Manola. </author> <title> Specification and management of extended transactions in a programmable transaction environment. </title> <booktitle> In Proceedings of the 1994 IEEE Conference on Data Engineering, </booktitle> <pages> pages 462-473, </pages> <month> Feb </month> <year> 1994. </year>
Reference-contexts: There exist only a small number of research efforts on implementing extended transaction functionality, spirit to the Reflective Transaction Framework. Two noteworthy systems for implementing extended transaction models are ASSET [BDG + 94] and TSME <ref> [GHKM94] </ref>. Similar to our framework, these systems are designed to facilitate the implementation of extended transaction models. However, they simply present the user with a closed application interface and a fixed selection of mechanisms from which a predetermined set of extended transaction models can be implemented. <p> However, the task of synthesizing new control operations is a skill that each programmer would necessary have to learn and the task must be repeated for each transaction that requires the operation. TSME <ref> [GHKM94] </ref> consists of a transaction specification facility that understands TSME's transaction specification language, and drives the transaction management mechanism to configure a run-time system in order to support specific extended transaction models. The transaction management mechanism is programmable, but uses templates to describe existing extended transaction models.
Reference: [GR93] <author> J. Gray and A. Reuter. </author> <title> Transaction Processing: Concepts and Techniques. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1993. </year>
Reference-contexts: A companion paper offers many further implementation details [BP95], and a comprehensive treatment of the TP monitor reference architecture and transactional implementation techniques can be found in Gray and Reuter's text <ref> [GR93] </ref>. 5.1 Encina TP Monitor Interface For our current implementation of the Reflective Transaction Framework we are using Encina, a commercial TP Monitor distributed by the Transarc Corp. <p> The transaction middleware service modules of the Encina Toolkit provide the basic building blocks of the TP monitor reference architecture <ref> [GR93, pp. 21] </ref>, and have been used by a number of computer system providers to implement various TP monitors, including IBM's CICS/6000 TP monitor, DEC's ACM-Sxp TP monitor [BCDW95] and, of course, the Encina TP monitor [Cor91].
Reference: [HR83] <author> T. Haerder and A. Reuter. </author> <title> Principles of transaction-oriented database recovery. </title> <journal> ACM Computing Surveys, </journal> <volume> 15(4) </volume> <pages> 287-317, </pages> <month> December </month> <year> 1983. </year>
Reference: [KdRB91] <author> Gregor Kiczales, Jim des Rivieres, and Daniel G. Bobrow. </author> <title> The Art of the Metaobject Protocol. </title> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference: [Kic92] <author> Gregor Kiczales. </author> <title> Towards a new model of abstraction in software engineering. </title> <booktitle> In Proceedings of the IMSA'92 Workshop on Reflection and Meta-level Architectures, </booktitle> <year> 1992. </year> <note> See http://www.xerox.com/PARC/spl/eca/oi.html for updates. </note>
Reference: [Mae87] <author> P. Maes. </author> <title> Concepts and experiments in computational reflection. </title> <booktitle> In Proceedings of the Conference on Object-Oriented Programming Systems, Languages, and Applications (OOPSLA), </booktitle> <month> Octo-ber </month> <year> 1987. </year>
Reference: [Moh94] <author> C. Mohan. </author> <title> Advanced transaction models | survey and critique. </title> <booktitle> Tutorial Presented at the ACM SIGMOD International Conference on Management of Data, </booktitle> <year> 1994. </year>
Reference: [MP92] <author> B. Martin and C. Pederson. </author> <title> Long-lived concurrent activities. </title> <editor> In Amar Gupta, editor, </editor> <booktitle> Distributed Object Management, </booktitle> <pages> pages 188-206. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1992. </year>
Reference: [PKH88] <author> C. Pu, G.E. Kaiser, and N. Hutchinson. </author> <title> Split-transactions for open-ended activities. </title> <booktitle> In Proceedings of the Fourteenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 27-36, </pages> <address> Los Angeles, </address> <month> August </month> <year> 1988. </year>
Reference-contexts: This example is based on the split/join transaction model <ref> [PKH88] </ref>, in particular the transaction control operations split and join.
Reference: [RC92] <author> K. Ramamritham and P.K. Chrysanthis. </author> <title> In search of acceptability criteria: Database consistency requirements and transaction correctness properties. </title> <editor> In Amar Gupta, editor, </editor> <booktitle> Distributed Page 15 Object Management, </booktitle> <pages> pages 212-230. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1992. </year>
Reference: [Smi82] <author> Brian C. Smith. </author> <title> Reflection and Semantics in a Procedural Language. </title> <type> PhD thesis, </type> <institution> Mas-sachusetts Institute of Technology, </institution> <year> 1982. </year>
Reference: [Smi84] <author> B.C. Smith. </author> <title> Reflection and Semantics in Lisp. </title> <booktitle> In Proceedings of the 11th Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 23-35, </pages> <year> 1984. </year>
Reference: [Sos92a] <author> Rok Sosic. Dynascope: </author> <title> A tool for program directing. </title> <booktitle> In SIGPLAN '92 Conference on Programming Language Design and Implementation, SIGPLAN Notices, </booktitle> <volume> volume 27, </volume> <pages> pages 12-21, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: Page 13 As for reflective systems, most of the work on reflec-tion has been on procedural reflection, where the meta-level directly implements the base-level. One notable exception is Rok Sosic's work on Dynascope <ref> [Sos92b, Sos92a] </ref>. Dynascope is a programming environment for directing the execution of traditional compiled languages. Program directing involves two processes, an executor and a director. When a program is executed in the Dynascope environment, the executor process generates an execution stream which the director process monitors.
Reference: [Sos92b] <author> Rok Sosic. </author> <title> The Many Faces of Introspection. </title> <type> PhD thesis, </type> <institution> University of Utah, </institution> <year> 1992. </year>
Reference-contexts: Page 13 As for reflective systems, most of the work on reflec-tion has been on procedural reflection, where the meta-level directly implements the base-level. One notable exception is Rok Sosic's work on Dynascope <ref> [Sos92b, Sos92a] </ref>. Dynascope is a programming environment for directing the execution of traditional compiled languages. Program directing involves two processes, an executor and a director. When a program is executed in the Dynascope environment, the executor process generates an execution stream which the director process monitors.
Reference: [Str93] <author> R. J. Stroud. </author> <title> Transparency and reflection in distributed systems. </title> <journal> ACM Operating Systems Review, </journal> <volume> 22(2) </volume> <pages> 99-103, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: If the needs of the application fall outside of this pre-built set, there is no recourse for the programmer | even though the transaction facility may be fully capable of implementing the required behavior. The research of Stroud and Wu <ref> [SW95, Str93] </ref> is also related to the Reflective Transaction Framework, in that their work to implement synchronization and recovery properties for atomic data types also takes a metaobject protocol approach.
Reference: [SW95] <author> R. J. Stroud and Z. Wu. </author> <title> Using metaob-ject protocols to implement atomic data objects. </title> <booktitle> In Proceedings of the European Confernece on Object-Oriented Programming (ECOOP'95), </booktitle> <pages> pages 168-189, </pages> <address> Aarhus, Denmark, </address> <month> August </month> <year> 1995. </year>
Reference-contexts: If the needs of the application fall outside of this pre-built set, there is no recourse for the programmer | even though the transaction facility may be fully capable of implementing the required behavior. The research of Stroud and Wu <ref> [SW95, Str93] </ref> is also related to the Reflective Transaction Framework, in that their work to implement synchronization and recovery properties for atomic data types also takes a metaobject protocol approach.
Reference: [Tra] <institution> Transarc Corporation, </institution> <address> Pittsburgh, PA. </address> <month> 15219. </month> <title> Encina Toolkit Server Core Programmer's Reference. </title>
Reference-contexts: Transaction services for Encina are provided by the Encina Toolkit <ref> [Tra] </ref>, which is composed of a small number of transaction middleware service modules, including: Transaction Service Module (TRAN) that provides transaction execution control and default transaction control operations (begin, commit, abort), Lock Service Module (LOCK) that provides a logical locking package to guarantee transaction isolation and, Log Service Module (LOG) that
Reference: [WR93] <author> H. Wachter and A. Reuter. </author> <title> Database Transaction Models for Advanced Transactions, chapter The ConTract Model. </title> <editor> In Elmagarmid [Elm93], </editor> <year> 1993. </year>
Reference: [Yok92] <author> Y. Yokote. </author> <title> The apertos reflective operating system: The concept and its implementation. </title> <booktitle> In Proceedings of the Conference on Object-Oriented Programming Systems, Languages, and Applications (OOPSLA), </booktitle> <month> October </month> <year> 1992. </year> <pages> Page 16 </pages>
References-found: 35

