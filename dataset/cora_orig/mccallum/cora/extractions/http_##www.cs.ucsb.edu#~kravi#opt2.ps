URL: http://www.cs.ucsb.edu/~kravi/opt2.ps
Refering-URL: http://www.cs.ucsb.edu/~kravi/pub.html
Root-URL: http://www.cs.ucsb.edu
Title: Efficient Dynamic Range Searching using Data Replication  
Author: K. V. Ravi Kanth and Ambuj K. Singh 
Keyword: Range searching, Dynamic index structures  
Address: Santa Barbara, CA 93106  
Affiliation: Computer Science Department University of California at Santa Barbara  
Abstract-found: 0
Intro-found: 1
Reference: [Beckman et al. 1990] <author> Beckmann, N., Kreigel, H., Schneider, R., and Seeger. B. </author> <title> The R*-tree: An efficient and robust access method for points and rectangles, Porc. </title> <booktitle> of the ACM SIGMOD Intl. Conf. on Management of Data, </booktitle> <pages> pp 322-331, </pages> <year> 1990. </year>
Reference-contexts: For large databases, structures that have nonlinear storage requirements may not acceptable. Consequently, several linear-space structures such as R-trees <ref> [Guttman 1984, Beckman et al. 1990] </ref>, X-trees [Berchtold et al. 1996] have been proposed in the database literature. These structures achieve low storage costs by storing each data point exactly once.
Reference: [Bentley 1977] <author> Bentley, J. L. </author> <title> Multidimensional binary search trees used for associative searching, </title> <journal> Communications of the ACM, </journal> <volume> 18, </volume> <pages> pp. 509-517, </pages> <year> 1977. </year>
Reference-contexts: This type of searching in multiple dimensions is fundamental to geographic information systems, image databases and computer graphics. Several efficient data structures using linear and nonlinear space (measured in terms of the number of data points) have been proposed in the literature <ref> [Bentley 1977, Bentley 1980, Berchtold et al. 1996] </ref>. For large databases, structures that have nonlinear storage requirements may not acceptable. Consequently, several linear-space structures such as R-trees [Guttman 1984, Beckman et al. 1990], X-trees [Berchtold et al. 1996] have been proposed in the database literature.
Reference: [Bentley 1980] <author> Bentley J. L. and Maurer, H.A. </author> <title> Efficient worst-case data structures for range searching, </title> <journal> Acta Informatica 13, </journal> <pages> pp. 155-168, </pages> <year> 1980. </year>
Reference-contexts: This type of searching in multiple dimensions is fundamental to geographic information systems, image databases and computer graphics. Several efficient data structures using linear and nonlinear space (measured in terms of the number of data points) have been proposed in the literature <ref> [Bentley 1977, Bentley 1980, Berchtold et al. 1996] </ref>. For large databases, structures that have nonlinear storage requirements may not acceptable. Consequently, several linear-space structures such as R-trees [Guttman 1984, Beckman et al. 1990], X-trees [Berchtold et al. 1996] have been proposed in the database literature. <p> This complexity can, however, be improved by allowing for replication of data. Using such replication (but still using linear storage), Bentley's nonoverlapping k-level d-range structure <ref> [Bentley 1980] </ref> achieves a query time complexity of O (n (d1)=k log n) [Bentley 1980]. By choosing k as a function of d and *, we can achieve a query time of O (n * ) for any * &gt; 0. <p> This complexity can, however, be improved by allowing for replication of data. Using such replication (but still using linear storage), Bentley's nonoverlapping k-level d-range structure <ref> [Bentley 1980] </ref> achieves a query time complexity of O (n (d1)=k log n) [Bentley 1980]. By choosing k as a function of d and *, we can achieve a query time of O (n * ) for any * &gt; 0. The asymptotic storage complexity of this structure does not change as long as k is a constant. <p> This structure needs preprocessing of data before being constructed. Consequently, on-line insertion/deletion of data may require the reconstruction of the entire structure, which takes O (n log n) time. This insertion/deletion time complexity can be reduced to O (log 2 n) using the static-to-dynamic transformations of Bentley and Saxe <ref> [Bentley 1980] </ref>, or Willard [Willard 1986]. In this paper, we show that much lower insertion/deletion times can be achieved. We first show that insertions and deletions can be accomplished in O (log n) amortized time. <p> Applying theorem 2, the weak insertion/deletion times can be transformed into worst-case bounds. 2 5 Conclusions In this paper we consider the problem of dynamic range searching in linear-space index structures. We apply the dynamization techniques of Overmars [Overmars 1983] to Bentley's non-overlapping range structure <ref> [Bentley 1980] </ref> and achieve O (log n) update time and O (n * ) query time for any * &gt; 0. This result is an improvement over the static-to-dynamic transformations [Bentley 1980] of Bentley's structure, which yield an update time of O (log 2 n) and a query time of O <p> We apply the dynamization techniques of Overmars [Overmars 1983] to Bentley's non-overlapping range structure <ref> [Bentley 1980] </ref> and achieve O (log n) update time and O (n * ) query time for any * &gt; 0. This result is an improvement over the static-to-dynamic transformations [Bentley 1980] of Bentley's structure, which yield an update time of O (log 2 n) and a query time of O (n * ) for any * &gt; 0.
Reference: [Bentley 1980] <author> Bentley, J. L., Saxe, J. B. </author> <title> Decomposable searching problems 1: Static-to-dynamic transformation, </title> <journal> Journal of Algorithms 1, </journal> <pages> pp. 301-358, </pages> <year> 1980. </year>
Reference-contexts: This type of searching in multiple dimensions is fundamental to geographic information systems, image databases and computer graphics. Several efficient data structures using linear and nonlinear space (measured in terms of the number of data points) have been proposed in the literature <ref> [Bentley 1977, Bentley 1980, Berchtold et al. 1996] </ref>. For large databases, structures that have nonlinear storage requirements may not acceptable. Consequently, several linear-space structures such as R-trees [Guttman 1984, Beckman et al. 1990], X-trees [Berchtold et al. 1996] have been proposed in the database literature. <p> This complexity can, however, be improved by allowing for replication of data. Using such replication (but still using linear storage), Bentley's nonoverlapping k-level d-range structure <ref> [Bentley 1980] </ref> achieves a query time complexity of O (n (d1)=k log n) [Bentley 1980]. By choosing k as a function of d and *, we can achieve a query time of O (n * ) for any * &gt; 0. <p> This complexity can, however, be improved by allowing for replication of data. Using such replication (but still using linear storage), Bentley's nonoverlapping k-level d-range structure <ref> [Bentley 1980] </ref> achieves a query time complexity of O (n (d1)=k log n) [Bentley 1980]. By choosing k as a function of d and *, we can achieve a query time of O (n * ) for any * &gt; 0. The asymptotic storage complexity of this structure does not change as long as k is a constant. <p> This structure needs preprocessing of data before being constructed. Consequently, on-line insertion/deletion of data may require the reconstruction of the entire structure, which takes O (n log n) time. This insertion/deletion time complexity can be reduced to O (log 2 n) using the static-to-dynamic transformations of Bentley and Saxe <ref> [Bentley 1980] </ref>, or Willard [Willard 1986]. In this paper, we show that much lower insertion/deletion times can be achieved. We first show that insertions and deletions can be accomplished in O (log n) amortized time. <p> Applying theorem 2, the weak insertion/deletion times can be transformed into worst-case bounds. 2 5 Conclusions In this paper we consider the problem of dynamic range searching in linear-space index structures. We apply the dynamization techniques of Overmars [Overmars 1983] to Bentley's non-overlapping range structure <ref> [Bentley 1980] </ref> and achieve O (log n) update time and O (n * ) query time for any * &gt; 0. This result is an improvement over the static-to-dynamic transformations [Bentley 1980] of Bentley's structure, which yield an update time of O (log 2 n) and a query time of O <p> We apply the dynamization techniques of Overmars [Overmars 1983] to Bentley's non-overlapping range structure <ref> [Bentley 1980] </ref> and achieve O (log n) update time and O (n * ) query time for any * &gt; 0. This result is an improvement over the static-to-dynamic transformations [Bentley 1980] of Bentley's structure, which yield an update time of O (log 2 n) and a query time of O (n * ) for any * &gt; 0.
Reference: [Berchtold et al. 1996] <author> Berchtold, S., Keim, D.A., and Kreigel, </author> <title> H.P. The X-tree: An index structure for high dimensional data, </title> <booktitle> Proc. of the Conf. on Very Large Data bases, </booktitle> <address> Bombay, India, </address> <year> 1996. </year>
Reference-contexts: This type of searching in multiple dimensions is fundamental to geographic information systems, image databases and computer graphics. Several efficient data structures using linear and nonlinear space (measured in terms of the number of data points) have been proposed in the literature <ref> [Bentley 1977, Bentley 1980, Berchtold et al. 1996] </ref>. For large databases, structures that have nonlinear storage requirements may not acceptable. Consequently, several linear-space structures such as R-trees [Guttman 1984, Beckman et al. 1990], X-trees [Berchtold et al. 1996] have been proposed in the database literature. <p> For large databases, structures that have nonlinear storage requirements may not acceptable. Consequently, several linear-space structures such as R-trees [Guttman 1984, Beckman et al. 1990], X-trees <ref> [Berchtold et al. 1996] </ref> have been proposed in the database literature. These structures achieve low storage costs by storing each data point exactly once.
Reference: [Guttman 1984] <author> Guttman, A. </author> <title> R-trees : A dynamic index structure for spatial searching, </title> <booktitle> Proceedings of the ACM SIGMOD Intl. Conf. on Management of Data, </booktitle> <pages> pp. 47-57, </pages> <year> 1984. </year>
Reference-contexts: For large databases, structures that have nonlinear storage requirements may not acceptable. Consequently, several linear-space structures such as R-trees <ref> [Guttman 1984, Beckman et al. 1990] </ref>, X-trees [Berchtold et al. 1996] have been proposed in the database literature. These structures achieve low storage costs by storing each data point exactly once.
Reference: [Mehlhorn 1984] <author> Mehlhorn, K. </author> <title> Data Structures and Algorithms 3: Multi-dimensional Searching and Computational Geometry, </title> <publisher> Springer-Verlag, </publisher> <year> 1984. </year>
Reference-contexts: These structures achieve low storage costs by storing each data point exactly once. However, such simple structures have high query time complexity, which is bounded below by (n (d1)=d ) for n d-dimensional data <ref> [Mehlhorn 1984, Ravi and Singh 1997a] </ref>. This complexity can, however, be improved by allowing for replication of data. Using such replication (but still using linear storage), Bentley's nonoverlapping k-level d-range structure [Bentley 1980] achieves a query time complexity of O (n (d1)=k log n) [Bentley 1980].
Reference: [Overmars and Leeuwen 1981] <author> Overmars, M. H., and Leeuwen, J. </author> <title> Worst-case optimal insertion and deletion methods for decomposable searching problems, </title> <journal> Information Processing Letters, </journal> <volume> Vol. 12, no. 4, </volume> <pages> pp. 168-172, </pages> <month> August </month> <year> 1981. </year>
Reference-contexts: In this paper, we show that much lower insertion/deletion times can be achieved. We first show that insertions and deletions can be accomplished in O (log n) amortized time. We then transform these amortized times to worst-case times using the global rebuilding technique of Overmars and van Leeuwen <ref> [Overmars and Leeuwen 1981] </ref>. These transformations do not alter the query time complexity and only increase the storage requirements by a constant factor.
Reference: [Overmars and Leeuwen 1982] <author> Overmars, M. H. and Leeuwen, J. </author> <title> Dynamic multidimensional data structures based on quad and k-d trees, </title> <journal> Acta Informatica, </journal> <volume> 17, </volume> <pages> pp. 267-283, </pages> <year> 1982. </year>
Reference-contexts: This technique for supporting insertions and deletions is called partial rebuilding [Overmars 1983] and is used in several dynamic structures including the divided k-d tree [van Kreveld and Overmars 1991], and the pseudo quad and k-d tree <ref> [Overmars and Leeuwen 1982] </ref>. In what follows, we describe this insertion/deletion strategy for the l-level range structure in more detail. Insertion or deletion of a point p is accomplished in an l-level range structure T (n; l; ) as follows.
Reference: [Overmars 1983] <author> Overmars, M. H. </author> <title> The design of dynamic data structures, </title> <address> LNC S 156, </address> <publisher> Springer-Verlag, </publisher> <year> 1983. </year>
Reference-contexts: Since an insertion/deletion can affect a constant number, l, of these structures, the total amortized time is O (log n). This technique for supporting insertions and deletions is called partial rebuilding <ref> [Overmars 1983] </ref> and is used in several dynamic structures including the divided k-d tree [van Kreveld and Overmars 1991], and the pseudo quad and k-d tree [Overmars and Leeuwen 1982]. In what follows, we describe this insertion/deletion strategy for the l-level range structure in more detail. <p> It can be shown that such ranges can also easily be obtained for the divided k-d tree and other structures using the dynamization techniques of <ref> [Overmars 1983] </ref>. Next, we prove that these fractions ensure that the specifications of an l-level range structure are never violated due to insertions and deletions. <p> Insertions and deletions have an amortized time complexity of O (log n). Worst-case bounds The amortized insertion and deletion time bounds of Theorem 1 can be changed into worst-case bounds with the general technique of global rebuilding, described in <ref> [Overmars 1983] </ref>. Next, we describe the central idea of of this technique. More details can be found in [Overmars 1983]. Consider a structure S that supports weak insertions and weak deletions. <p> Worst-case bounds The amortized insertion and deletion time bounds of Theorem 1 can be changed into worst-case bounds with the general technique of global rebuilding, described in <ref> [Overmars 1983] </ref>. Next, we describe the central idea of of this technique. More details can be found in [Overmars 1983]. Consider a structure S that supports weak insertions and weak deletions. Insertions and deletions on a structure of n points are weak, if after ffn insertions and/or deletions, with 0 &lt; ff &lt; 1, all time and storage bounds of the structure have not increased asymptotically. <p> By ensuring that the number of such buffered updates is less than ffn 1 =2, we have at most one structure under construction at all times. This technique is called global rebuilding and is explained in more detail in <ref> [Overmars 1983] </ref>. The following theorem summarizes this technique. <p> Applying theorem 2, the weak insertion/deletion times can be transformed into worst-case bounds. 2 5 Conclusions In this paper we consider the problem of dynamic range searching in linear-space index structures. We apply the dynamization techniques of Overmars <ref> [Overmars 1983] </ref> to Bentley's non-overlapping range structure [Bentley 1980] and achieve O (log n) update time and O (n * ) query time for any * &gt; 0.
Reference: [Ravi and Singh 1997a] <author> Ravi Kanth, K. V., and Ambuj K. Singh. </author> <title> Optimal dynamic range searching in non-replicating index structures, </title> <type> Technical Report TRCS97-13, </type> <institution> Department of Computer Science, University of California, Santa Barbara, </institution> <month> July </month> <year> 1997. </year>
Reference-contexts: These structures achieve low storage costs by storing each data point exactly once. However, such simple structures have high query time complexity, which is bounded below by (n (d1)=d ) for n d-dimensional data <ref> [Mehlhorn 1984, Ravi and Singh 1997a] </ref>. This complexity can, however, be improved by allowing for replication of data. Using such replication (but still using linear storage), Bentley's nonoverlapping k-level d-range structure [Bentley 1980] achieves a query time complexity of O (n (d1)=k log n) [Bentley 1980].
Reference: [Ravi and Singh 1997b] <author> Ravi Kanth, K. V., and Ambuj K. Singh. </author> <title> Dynamic range searching using data replication, </title> <type> Technical Report TRCS97-12, </type> <institution> Department of Computer Science, University of Californ ia, Santa Barbara, </institution> <month> July </month> <year> 1997. </year> <editor> [van Kreveld and Overmars 1991] van Kreveld, M. and Overmars, M. H. </editor> <title> The divided k-d tree, </title> <journal> Algorithmica, </journal> <volume> No. 6, </volume> <pages> pp. 840-858, </pages> <year> 1991. </year>
Reference-contexts: All other partitions are contained in the query. We can easily show that the -coordinates of the points in these partitions are contained in the interval of the query in dimension 1 (see <ref> [Ravi and Singh 1997b] </ref> for more details). Using these observations, we propose an efficient structure for answering range queries. 3 An Efficient Structure for Range Queries We now investigate how best to organize a set of multi-dimensional points to answer range queries efficiently.
Reference: [Willard 1986] <author> Willard, D. E. </author> <title> On the application of sheared retrieval to orthogonal range queries, </title> <booktitle> ACM Symposium on Computational Geometry, </booktitle> <pages> pp. 80-89, </pages> <year> 1986. </year> <month> 10 </month>
Reference-contexts: Consequently, on-line insertion/deletion of data may require the reconstruction of the entire structure, which takes O (n log n) time. This insertion/deletion time complexity can be reduced to O (log 2 n) using the static-to-dynamic transformations of Bentley and Saxe [Bentley 1980], or Willard <ref> [Willard 1986] </ref>. In this paper, we show that much lower insertion/deletion times can be achieved. We first show that insertions and deletions can be accomplished in O (log n) amortized time.
References-found: 13

