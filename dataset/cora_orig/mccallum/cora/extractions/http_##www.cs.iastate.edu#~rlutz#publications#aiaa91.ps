URL: http://www.cs.iastate.edu/~rlutz/publications/aiaa91.ps
Refering-URL: http://www.cs.iastate.edu/~rlutz/homepage.html
Root-URL: http://www.cs.iastate.edu
Title: Validating System-Level Error Recovery for Spacecraft  
Author: Robyn R. Lutz Johnny S. K. Wong 
Address: Pasadena, CA 91109  Ames, IA 50011  
Affiliation: Jet Propulsion Laboratory California Institute of Technology  Department of Computer Science Iowa State University  
Abstract: The system-level software onboard a spacecraft is responsible for recovery from communication, thermal, power, and computer-health anomalies that may occur. The recovery must occur without disrupting any critical scientific or engineering activity that is executing at the time of the error. Thus, the error-recovery software may have to execute concurrently with the ongoing acquisition of scientific data or with spacecraft maneuvers. This paper provides a technique by which the rules that constrain the concurrent execution of these processes can be modeled in a graph. An algorithm is described that uses this model to validate that the constraints hold for all concurrent executions of the error-recovery software with the software that controls the science and engineering events on the spacecraft. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Bernstein, A. J. </author> <title> "Analysis of Programs for Parallel Processing." </title> <journal> IEEE Transactions on Computers EC-15,5 (1966): </journal> <pages> 757-762. </pages>
Reference-contexts: turn on optics heater B following the issuance of a command to turn on optics heater A. 2.3 Data-dependency Constraints Data-dependency constraints are restrictions placed on the order of commands when two or more processes access the same variable and at least one process changes the value of the variable <ref> [1] </ref>. In such cases a concurrent execution of the processes can lead to a result different from the sequential execution of the processes.
Reference: [2] <author> Cheng, Shengchang, John A. Stankovic, and Krithivasan Ramamritham. </author> <title> "Dynamic Scheduling of Groups of Tasks with Precedence Constraints in Distributed Hard Real-Time Systems." </title> <booktitle> IEEE Real-Time System Symposium (1986): </booktitle> <pages> 166-174. </pages>
Reference-contexts: Some techniques consider both timing and precedence constraints, but their definition of timing constraints only in terms of periodic events (e.g., sampling rates), fixed execution times for events, and deadline or timeliness requirements provides too limited a model for the timing issues constraining spacecraft commands <ref> [2, 19, 20, 22] </ref>. Discrete event simulation or emulation models the states of the spacecraft and the events that cause a transition from one state to another [5, 7, 13]. A simulation is run iteratively with a series of different combinations of process start times or fault-injection times.
Reference: [3] <author> Clarke, E. M., E. A. Emerson, and A. P. Sistla. </author> <title> "Automatic Verification of Finite-State Concurrent Systems Using Temporal Logic Specifications." </title> <booktitle> ACM Transactions on Programming Languages and Systems 8 (1986): </booktitle> <pages> 244-263. </pages>
Reference-contexts: Real Time Logic models the timing aspects of a system specification to establish timing properties (periodic events and deadlines) [8]. Various extensions to temporal logic and temporal logic model checking have been developed to formally describe timing requirements and to verify automatically that the system satisfies them <ref> [16, 3] </ref>. These methods provide a good basis for specifying timing requirements but are either more ambitious (in that they model states) or less expressive (in that they only model a subset of timing constraints) than is needed for the spacecraft.
Reference: [4] <author> Coolahan, James E., Jr., and Nicholas Rous-sopoulos. </author> <title> "A Timed Petri Net Metholodology for Specifying Real-Time System Timing Requirements." </title> <booktitle> International Workshop on Timed Petri Nets, </booktitle> <address> July 1-3, 1985 . Torino, Italy: Unione In-dustriale, </address> <year> 1985. </year>
Reference-contexts: Many of these formalisms address to some degree the problem of checking timing constraints. However, none of the available methods readily translates to the domain of validating error recovery on spacecraft. Petri net extensions model periodic events and deadlines <ref> [4, 9] </ref>. Automata-based methods model processes as a machine and try to prove a predicate (which may involve upper and lower time bounds on events) true for the reachable states in the machine [11].
Reference: [5] <author> Fujimoto, Richard M. </author> <title> "Parallel Discrete Event Simulation." </title> <journal> CACM 33(1990): </journal> <pages> 31-53. </pages>
Reference-contexts: Discrete event simulation or emulation models the states of the spacecraft and the events that cause a transition from one state to another <ref> [5, 7, 13] </ref>. A simulation is run iteratively with a series of different combinations of process start times or fault-injection times. Each simulation produces a timeline which can then be analyzed (automatically or by hand) for intercommand constraint violations.
Reference: [6] <author> Garca-Molina, Hector. </author> <title> "Using Semantic Knowledge for Transaction Processing in a Distributed Database." </title> <booktitle> ACM Transactions on Database Systems 8 (1983): </booktitle> <pages> 186-213. </pages>
Reference-contexts: These two types of constraints are fundamentally different in that precedence does not require a notion of duration [16]. Consequently, the tools that currently exist to model precedence constraints tend to ignore timing requirements and to be inadequate for modeling the timing constraints on spacecraft <ref> [6, 12, 15] </ref>. On the other hand, many techniques that are currently available to model timing constraints tend to ignore precedence constraints.
Reference: [7] <author> Horvath, Joan C. and Louise P. Perry. </author> <title> "Hyper-cubes for Critical Spacecraft Command Verification." </title> <booktitle> AIAA Second International Symposium on Space Information Systems, </booktitle> <address> Sept 17-19, 1990 . Pasadena, CA: AIAA, </address> <year> 1990. </year>
Reference-contexts: Discrete event simulation or emulation models the states of the spacecraft and the events that cause a transition from one state to another <ref> [5, 7, 13] </ref>. A simulation is run iteratively with a series of different combinations of process start times or fault-injection times. Each simulation produces a timeline which can then be analyzed (automatically or by hand) for intercommand constraint violations.
Reference: [8] <author> Jahanian, Farnam and Aloysius Ka-Lau Mok. </author> <title> "Safety Analysis of Timing Properties in Real-Time Systems." </title> <journal> IEEE Transactions on Software Engineering SE-12 (1986): </journal> <pages> 890-904. </pages>
Reference-contexts: Real Time Logic models the timing aspects of a system specification to establish timing properties (periodic events and deadlines) <ref> [8] </ref>. Various extensions to temporal logic and temporal logic model checking have been developed to formally describe timing requirements and to verify automatically that the system satisfies them [16, 3].
Reference: [9] <author> Leveson, Nancy G., and Janice L. Stolzy. </author> <title> "Safety Analysis Using Petri Nets." </title> <journal> IEEE Transactions on Software Engineering SE-13 (1987): </journal> <pages> 386-397. </pages>
Reference-contexts: Many of these formalisms address to some degree the problem of checking timing constraints. However, none of the available methods readily translates to the domain of validating error recovery on spacecraft. Petri net extensions model periodic events and deadlines <ref> [4, 9] </ref>. Automata-based methods model processes as a machine and try to prove a predicate (which may involve upper and lower time bounds on events) true for the reachable states in the machine [11].
Reference: [10] <author> Lutz, Robyn. </author> <title> "Detecting Unsafe Error Recovery Schedules on Spacecraft." M.S. </title> <type> Thesis. </type> <institution> Iowa State University, </institution> <year> 1990. </year>
Reference-contexts: An edge which fails to satisfy the required predicate is flagged. In such a case some interleaving of the commands in the processes can cause the constraint represented by that edge to be violated. The algorithm and its variables are described briefly here, with details given in <ref> [10] </ref>. 3.2 The Constraints Checker Algo rithm Let (c i ; c j ) be an edge, with process P i issuing command c i and process P j issuing command c j . <p> For example, the predicate for a maximum-interval time-constrained edge ("command c j cannot occur more than time t 1 after command c i ") is: StartPi + Deltai &lt; StartPj + Deltaj &lt; StartPi + Deltai + t 1 . The predicates for the other edge types follow accordingly <ref> [10] </ref>. <p> Poss 6 Safe then output warning flag end The time complexity of the algorithm is O (j E j n 2 k 2 ), where E is the set of edges, n is the number of processes, and k depends on the number of instances of a command per process <ref> [10] </ref>.
Reference: [11] <author> Lynch, Nancy and Hagit Attiya. </author> <title> "Using Mappings to Prove Timing Properties." </title> <address> MIT/LCS/TM-412.b. </address> <month> December, </month> <year> 1989. </year>
Reference-contexts: Petri net extensions model periodic events and deadlines [4, 9]. Automata-based methods model processes as a machine and try to prove a predicate (which may involve upper and lower time bounds on events) true for the reachable states in the machine <ref> [11] </ref>. Real Time Logic models the timing aspects of a system specification to establish timing properties (periodic events and deadlines) [8]. Various extensions to temporal logic and temporal logic model checking have been developed to formally describe timing requirements and to verify automatically that the system satisfies them [16, 3]. <p> The cases for the inside-interval and the outside-interval edge types follow accordingly. In this way the time required to execute the command c i can be modeled. 2.2 Precedence Constraints While intercommand timing constraints are clearly safety properties, intercommand precedence constraints contain aspects of both safety and liveness properties <ref> [11] </ref>. Precedence constraints enforce an ordering of commands and so involve functional correctness, a concern of safety properties.
Reference: [12] <author> Maekawa, Mamoru, Arthur E. Oldehoeft, and Rodney R. Oldehoeft. </author> <title> Operating Systems, </title> <booktitle> Advanced Concepts. </booktitle> <address> Menlo Park, CA: Ben-jamin/Cummings, </address> <year> 1987. </year>
Reference-contexts: These two types of constraints are fundamentally different in that precedence does not require a notion of duration [16]. Consequently, the tools that currently exist to model precedence constraints tend to ignore timing requirements and to be inadequate for modeling the timing constraints on spacecraft <ref> [6, 12, 15] </ref>. On the other hand, many techniques that are currently available to model timing constraints tend to ignore precedence constraints.
Reference: [13] <author> McDonald, Mark A. </author> <title> "Functional Emulation of Engineering Subsystem Interactions within the Galileo Spacecraft." M.S. </title> <type> Thesis. </type> <institution> Univ. of Southern California, </institution> <year> 1990. </year>
Reference-contexts: Discrete event simulation or emulation models the states of the spacecraft and the events that cause a transition from one state to another <ref> [5, 7, 13] </ref>. A simulation is run iteratively with a series of different combinations of process start times or fault-injection times. Each simulation produces a timeline which can then be analyzed (automatically or by hand) for intercommand constraint violations.
Reference: [14] <author> Mehlhorn, Kurt. </author> <title> Data Structures and Algorithms 2: Graph Algorithms and NP-Completeness. </title> <publisher> Berlin: Springer-Verlag, </publisher> <year> 1984. </year>
Reference-contexts: The constraints graph is sparse, and can be stored in O (j V j + j E j) space via an adjacency list representation <ref> [14] </ref>. 3 Detecting Constraint Violations During Error Recovery 3.1 Overview of the Constraints Checker The constraints graph and a set of processes (time-tagged lists of commands) are input to the constraints checker.
Reference: [15] <author> Moss, J. Eliot B. </author> <title> Nested Transactions, An Approach to Reliable Distributed Computing. </title> <address> Cam-bridge, MA: </address> <publisher> MIT Press, </publisher> <year> 1981. </year>
Reference-contexts: These two types of constraints are fundamentally different in that precedence does not require a notion of duration [16]. Consequently, the tools that currently exist to model precedence constraints tend to ignore timing requirements and to be inadequate for modeling the timing constraints on spacecraft <ref> [6, 12, 15] </ref>. On the other hand, many techniques that are currently available to model timing constraints tend to ignore precedence constraints.
Reference: [16] <author> Pnueli, Amir, and Eyal Harel. </author> <title> "Applications of Temporal Logic to the Specifications of Real Time Systems."Formal Techniques in Real-Time and Fault-Tolerant Systems. </title> <editor> Ed. M. Joseph. </editor> <publisher> Berlin: Springer-Verlag, </publisher> <year> 1988, </year> <pages> pp. 84-98. </pages>
Reference-contexts: These two types of constraints are fundamentally different in that precedence does not require a notion of duration <ref> [16] </ref>. Consequently, the tools that currently exist to model precedence constraints tend to ignore timing requirements and to be inadequate for modeling the timing constraints on spacecraft [6, 12, 15]. On the other hand, many techniques that are currently available to model timing constraints tend to ignore precedence constraints. <p> Real Time Logic models the timing aspects of a system specification to establish timing properties (periodic events and deadlines) [8]. Various extensions to temporal logic and temporal logic model checking have been developed to formally describe timing requirements and to verify automatically that the system satisfies them <ref> [16, 3] </ref>. These methods provide a good basis for specifying timing requirements but are either more ambitious (in that they model states) or less expressive (in that they only model a subset of timing constraints) than is needed for the spacecraft.
Reference: [17] <author> Razouk, Rami R. and Michael M. Gorlick. </author> <title> "A Real-Time Interval Logic for Reasoning About Executions of Real-Time Programs." </title> <booktitle> Proceedings of the ACM SIGSOFT '89 Third Symposium on Software Testing, Analysis and Verification, </booktitle> <address> Key West, Florida, </address> <month> Dec. </month> <pages> 13-15, </pages> <editor> 1989 Ed. Richard A. Kemmerer. </editor> <booktitle> In Software Engineering Notes 14(1989): </booktitle> <pages> 10-19. </pages>
Reference-contexts: The work described here discusses many of the same timing issues addressed by recent work in interval temporal logic <ref> [17, 18] </ref>. However, the emphasis there is on specifying and verifying system requirements (what the spacecraft can do) while the emphasis here is on verifying operational constraints (what the spacecraft may do).
Reference: [18] <author> Schwartz, Richard L., P. M. Melliar-Smith, and Friedrich H. Vogt. </author> <title> "An Interval-Based Temporal Logic." Logics of Programs, </title> <booktitle> Workshop, </booktitle> <institution> Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <month> June 6-8, </month> <year> 1983. </year> <editor> Ed. Edmund Clarke and Dexter Kozen. </editor> <publisher> Berlin: Springer-Verlag, </publisher> <year> 1984, </year> <pages> pp. 443-457. </pages>
Reference-contexts: The work described here discusses many of the same timing issues addressed by recent work in interval temporal logic <ref> [17, 18] </ref>. However, the emphasis there is on specifying and verifying system requirements (what the spacecraft can do) while the emphasis here is on verifying operational constraints (what the spacecraft may do).
Reference: [19] <author> Sha, Lui, Ragunathan Rajkumar, and John P. Lehoczky. </author> <title> "Concurrency Control for Distributed Real-Time Databases." </title> <booktitle> SIGMOD RECORD 17(1988): </booktitle> <pages> 82-98. </pages>
Reference-contexts: Some techniques consider both timing and precedence constraints, but their definition of timing constraints only in terms of periodic events (e.g., sampling rates), fixed execution times for events, and deadline or timeliness requirements provides too limited a model for the timing issues constraining spacecraft commands <ref> [2, 19, 20, 22] </ref>. Discrete event simulation or emulation models the states of the spacecraft and the events that cause a transition from one state to another [5, 7, 13]. A simulation is run iteratively with a series of different combinations of process start times or fault-injection times.
Reference: [20] <author> Stankovic, John A., and Krithi Ramamritham. </author> <title> Tutorial: Hard Real-Time Systems. </title> <address> Washington, D.C.: </address> <publisher> The Computer Society, </publisher> <year> 1988. </year>
Reference-contexts: Some techniques consider both timing and precedence constraints, but their definition of timing constraints only in terms of periodic events (e.g., sampling rates), fixed execution times for events, and deadline or timeliness requirements provides too limited a model for the timing issues constraining spacecraft commands <ref> [2, 19, 20, 22] </ref>. Discrete event simulation or emulation models the states of the spacecraft and the events that cause a transition from one state to another [5, 7, 13]. A simulation is run iteratively with a series of different combinations of process start times or fault-injection times.
Reference: [21] <author> Wing, Jeannette M. </author> <title> "A Specifier's Introduction to Formal Methods."Computer 23(1990): </title> <type> 8-26. </type>
Reference-contexts: The classification into timing and precedence constraints corresponds loosely to the standard formal division of program correctness into safety properties and liveness properties. Safety properties can be stated informally as "nothing bad ever happens" and live-ness properties as "something good eventually happens" <ref> [21] </ref>. 2.1 Timing Constraints Intercommand timing constraints are safety properties. They impose a quantitative temporal relationship between the commands.
Reference: [22] <author> Xu, Jia, and David Lorge Parnas. </author> <title> "Scheduling Processes with Release Times, Deadlines, Precedence, and Exclusion Relations." </title> <journal> IEEE Transactions on Software Engineering 16(1990): </journal> <pages> 360-369. </pages>
Reference-contexts: Some techniques consider both timing and precedence constraints, but their definition of timing constraints only in terms of periodic events (e.g., sampling rates), fixed execution times for events, and deadline or timeliness requirements provides too limited a model for the timing issues constraining spacecraft commands <ref> [2, 19, 20, 22] </ref>. Discrete event simulation or emulation models the states of the spacecraft and the events that cause a transition from one state to another [5, 7, 13]. A simulation is run iteratively with a series of different combinations of process start times or fault-injection times.
References-found: 22

