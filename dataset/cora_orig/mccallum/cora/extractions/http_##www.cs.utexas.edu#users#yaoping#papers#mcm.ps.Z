URL: http://www.cs.utexas.edu/users/yaoping/papers/mcm.ps.Z
Refering-URL: http://www.cs.utexas.edu/users/yaoping/ypub.html
Root-URL: 
Title: A Graph Partitioning Problem for Multiple-Chip Design  
Author: Yao-Ping Chen, Ting-Chi Wang and D. F. Wong 
Address: Austin, Texas 78712  
Affiliation: Department of Computer Sciences University of Texas at Austin  
Abstract: In this paper, we introduce a new graph partitioning problem that stems from a multiple-chip design style in which there is a chip library of chips containing predesigned circuit components (e.g. adders, multipliers etc) which are frequently used. Given an arbitrary circuit data flow graph, we have to realize the circuit by appropriately choosing a set of chips from the chip library. In selecting chips from the chip library to realize a given circuit, both the number of chips used and the interconnection cost are to be minimized. Our new graph partitioning problem models this chip selection problem. We present an efficient solution to this problem. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. W. Kernighan and S. Lin, </author> " <title> An efficient heuristic procedure for partitioning graphs", </title> <journal> Bell Syst. Tech. J., </journal> <volume> vol. 49. </volume> <pages> pp. 291-307, </pages> <month> Feb. </month> <year> 1970. </year>
Reference-contexts: First, the number of chips to be used is as small as possible. Second, the total length of interconnections across chip boundaries (i.e., the external interconnection cost) is minimized. This problem is similar to the multiple-way graph partitioning problem <ref> [1, 2, 3, 4, 5] </ref> except that some constraints are added. We now describe the new graph partitioning problem. Given an undirected weighted graph G = (V; E), let W uv be the weight of edge (u; v) 2 E, and C be a finite set of colors. <p> In phase 3, two techniques are iteratively used to improve the in terconnection cost (). One technique extends the 2-way partitioning approach in <ref> [1] </ref> (see section 4.1) , and the other technique determines a subset of to be repartitioned such that, without increasing jj, () is decreased (see section 4.2). 2 Minimizing jj This phase is based on the linear programming technique. <p> P i P i fvg 39. Mark v as "assigned" 40. goto L 2 41. end if 4 Interconnection Cost Reduction After phase 2, we use two techniques to iteratively reduce the interconnection cost () of the partitioning . One technique which extends the idea of <ref> [1] </ref> is presented in section 4.1, and the other is presented in section 4.2. 4.1 Constrained Multiple-Way Partitioning In [1], an efficient heuristic method for partitioning was presented. This algorithm will be referred to as the K-L algorithm. We develop a constrained K-way partitioning based on this. <p> One technique which extends the idea of <ref> [1] </ref> is presented in section 4.1, and the other is presented in section 4.2. 4.1 Constrained Multiple-Way Partitioning In [1], an efficient heuristic method for partitioning was presented. This algorithm will be referred to as the K-L algorithm. We develop a constrained K-way partitioning based on this. In our application not all pairs of vertices in V are interchangeable, but only vertices with the same colors are. Similar to [1], <p> <ref> [1] </ref>, an efficient heuristic method for partitioning was presented. This algorithm will be referred to as the K-L algorithm. We develop a constrained K-way partitioning based on this. In our application not all pairs of vertices in V are interchangeable, but only vertices with the same colors are. Similar to [1], we compute the internal cost I v (scalar value), external cost E v (vector) , and the difference D v (vector) for each vertex v 2 V .
Reference: [2] <author> L. A. Sanchis, </author> <title> "Multiple-way network partitioning", </title> <journal> IEEE Trans. Comput., </journal> <volume> vol. 38, no. 1, </volume> <pages> pp. 62-81, </pages> <month> Jan. </month> <year> 1989. </year>
Reference-contexts: First, the number of chips to be used is as small as possible. Second, the total length of interconnections across chip boundaries (i.e., the external interconnection cost) is minimized. This problem is similar to the multiple-way graph partitioning problem <ref> [1, 2, 3, 4, 5] </ref> except that some constraints are added. We now describe the new graph partitioning problem. Given an undirected weighted graph G = (V; E), let W uv be the weight of edge (u; v) 2 E, and C be a finite set of colors.
Reference: [3] <author> Ching-Wei Yeh and Chung-Kuan Cheng, </author> <title> "A general purpose multiple way partitioning algorithm", </title> <booktitle> Proc. 28th ACM/IEEE Design Automation Conf., </booktitle> <address> pp.421-426, </address> <year> 1991. </year>
Reference-contexts: First, the number of chips to be used is as small as possible. Second, the total length of interconnections across chip boundaries (i.e., the external interconnection cost) is minimized. This problem is similar to the multiple-way graph partitioning problem <ref> [1, 2, 3, 4, 5] </ref> except that some constraints are added. We now describe the new graph partitioning problem. Given an undirected weighted graph G = (V; E), let W uv be the weight of edge (u; v) 2 E, and C be a finite set of colors.
Reference: [4] <author> B. Krishnamurthy, </author> <title> "An improved min-cut algorithm for partitioning VLSI networks", </title> <journal> IEEE Trans. Comput., </journal> <volume> vol. c-33, no. 5, </volume> <pages> pp. 438-446, </pages> <month> May </month> <year> 1984. </year>
Reference-contexts: First, the number of chips to be used is as small as possible. Second, the total length of interconnections across chip boundaries (i.e., the external interconnection cost) is minimized. This problem is similar to the multiple-way graph partitioning problem <ref> [1, 2, 3, 4, 5] </ref> except that some constraints are added. We now describe the new graph partitioning problem. Given an undirected weighted graph G = (V; E), let W uv be the weight of edge (u; v) 2 E, and C be a finite set of colors.
Reference: [5] <author> T. Bui, C. Heigham, C. Jones and T. Leighton, </author> <title> "Improving the performance of the Kernighan-Lin and simulated annealing graph bisection algorithms", </title> <booktitle> Proc. 26th ACM/IEEE Design Automation Conf., </booktitle> <pages> pp. 775-778, </pages> <year> 1989. </year>
Reference-contexts: First, the number of chips to be used is as small as possible. Second, the total length of interconnections across chip boundaries (i.e., the external interconnection cost) is minimized. This problem is similar to the multiple-way graph partitioning problem <ref> [1, 2, 3, 4, 5] </ref> except that some constraints are added. We now describe the new graph partitioning problem. Given an undirected weighted graph G = (V; E), let W uv be the weight of edge (u; v) 2 E, and C be a finite set of colors.
Reference: [6] <author> A. Chatterjee and R. </author> <title> Hartley, "A new simultaneous circuit partitioning and chip placement approach based on simulated annealing", </title> <booktitle> Proc. 27th ACM/IEEE Design Automation Conf., </booktitle> <address> pp.36-39, </address> <year> 1990. </year>
Reference-contexts: 1 Introduction The graph partitioning problem that we consider in this paper stems from a multiple-chip design style at GE as described in <ref> [6] </ref>. In this design environment, there is a chip library of chips containing predesigned circuit components (e.g., adders, multipliers etc) which are frequently used. Given an arbitrary circuit data flow graph, we have to realize the circuit by appropriately choosing a set of chips from the chip library. <p> For the purpose of comparison, we also implemented a method based on simulated annealing to solve the same problem. Similar to <ref> [6] </ref>, the cost function used by the simulated annealing method considered factors such as inter-chip wiring cost, number of chips, and how far the current partitioning is from the closest legal partitioning.
Reference: [7] <author> W. H. </author> <title> Press, Numerical recipes in C: </title> <booktitle> the art of scientific computing, Cambridge Camb#, </booktitle> <pages> pp. 329-343, </pages> <year> 1988. </year>
Reference-contexts: Otherwise we consider another pair of multisets in . 5 Experimental Results We have implemented our algorithms in C programming language. The linear programming codes were obtained from <ref> [7] </ref>. We ran our program on SUN SPARC station 1. The data we used are as follows. All graphs had 100 vertices. There were 5 colors. The weight of the edges were integers ranged from 1 to 30. We assumed the number of different multisets (jj) was 10.
References-found: 7

