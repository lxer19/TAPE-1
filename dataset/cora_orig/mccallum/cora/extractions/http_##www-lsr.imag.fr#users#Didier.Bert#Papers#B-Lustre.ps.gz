URL: http://www-lsr.imag.fr/users/Didier.Bert/Papers/B-Lustre.ps.gz
Refering-URL: http://www-lsr.imag.fr/Les.Groupes/scop/f-publi.html
Root-URL: http://www.imag.fr
Title: Building Lustre Control Systems from B Abstract Machines A case study  
Author: Didier Bert 
Date: November 25, 1997  
Address: Grenoble, France  
Affiliation: LSR-IMAG,  
Abstract: Through the case study of a lift control system, this paper tries to compare the capabilities of two styles of formal specification languages, namely the abstract machine formalism of the language B and the synchronous dataflow programming language lustre. Starting from a first global high-level specification in B, it proposes development techniques to derive a command control low-level program written in lustre. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.R. </author> <title> Abrial. The B Book Assigning Programs to Meanings. </title> <publisher> Cambridge University Press, </publisher> <month> August </month> <year> 1996. </year>
Reference-contexts: Generally, associated to these languages, tools are available to perform advanced checkings on specifications, like verification of invariant properties, liveness properties, correctness of refinements and so on. Among the specification languages which are used, we consider in this paper two languages, namely the B language <ref> [1] </ref> and the lustre language [8]. The B language is used in several projects involving the security of railway transport [2]. Specifications are "abstract machines" with an internal state, and operations which modify, or access to, the values of the state, in a classical object-oriented or module-oriented style of programming. <p> The first specification given here is a simplification of the one of <ref> [1] </ref> because there is only one lift, but also it is a generalization because operations are first defined very abstractly, parametrized by the direction and lift door moving is specified. The informal requirements state the following points : 1. <p> Generalized substitutions are a language to express the meaning of the operations. They are lengthily developed in <ref> [1] </ref> and some of them are reminded in the appendix. If the precondition is the constant predicate true, then the substitution is denoted begin S end. An abstract machine is valid iff proof obligations are verified. <p> Other variables have an obvious meaning. A pair of objects of a binary relation can be written either as (x; y) or (x 7! y). The machine DOOR is "extended", which means that the state and operations on door are visible inside the machine LIFT and operations are exported <ref> [1, 4] </ref>. <p> The liveness properties number 5 and 6 of the informal specification are proved in <ref> [1] </ref> by using a notion of "distance" between any position of the lift and a call or stop request present in the state. One can prove the invariant property number 3 in a simpler way. <p> Obviously, the effect of the new substitutions defining the refined operations must be compatible with the effect of the high-level machine operations by taking into account the correspondence of the variables. The B system is able to generate proof obligations to ensure the correctness of the refinement <ref> [1] </ref>. Refinement of the initialisation is not given. An interesting point is to refine the definitions involved in the conditions of the lift system. <p> This principle can be used to check or to test the controller by a modelling of the environment [12] or to check if a part of the equipments is broken down or unavailable, by a comparison between the specified behaviour and the actual one (example of the boiler in <ref> [1] </ref>). 5.2 Derivation of dataflow equations The idea is to derive dataflow equations for the lustre node lift controller from the definition of the B lift controller, where calls of operations are replaced by signals. The principle is to compute the "before-after" relation for each output variable. <p> The principle is to compute the "before-after" relation for each output variable. In the B formalism <ref> [1] </ref>, given a generalized 18 lift controller = if dir up = true then if OR (fl pos) = true then if (not req flpos up) = true then if Attracted up = true then if opened door = true then close door := true /* close door */ else /* <p> Then, at each clock tick, one can compare the actual input values with the recorded expected values and, under some conditions, an unmatching between these values can be used to detect equipment breakdowns. This kind of comparison has been done in the boiler case study <ref> [1] </ref> to foresee the evolution of the steam pressure levels. A third extension is the ability to provide tests for the controller by extracting properties of the environment. <p> The specification of the global system not integrated in the controller (information of sensors) can be used to generate such tests [13]. 23 Several works have been published about the specification of controllers. The example of the boiler <ref> [1] </ref> presents the architecture of a control command system which is able to adjust the pump flows in function of sensors, previous pressure level values and the knowledge of physical laws. In the thesis [15], S.
Reference: [2] <author> P. Behm. </author> <title> Formal development of safety critical software of METEOR. </title> <booktitle> In Habrias [7], </booktitle> <pages> pages 3-10. </pages>
Reference-contexts: Among the specification languages which are used, we consider in this paper two languages, namely the B language [1] and the lustre language [8]. The B language is used in several projects involving the security of railway transport <ref> [2] </ref>. Specifications are "abstract machines" with an internal state, and operations which modify, or access to, the values of the state, in a classical object-oriented or module-oriented style of programming.
Reference: [3] <author> G. Berry and G. Gonthier. </author> <title> The esterel synchronous programming language, design, semantics, </title> <booktitle> implementation. Science of Computer Programming, </booktitle> <volume> 19(2) </volume> <pages> 87-152, </pages> <year> 1992. </year>
Reference-contexts: These systems have inputs and compute outputs which generally are signals or boolean values. All the outputs are computed instantaneously and simultaneously. So, 1 such languages are called synchronous programming languages. The best known other languages based on this programming style are signal [11] and esterel <ref> [3] </ref>. In the lustre language, a program or specification is a "node" with input and output parameters (called also variables). Output variables are defined by equations which are equalities on infinite streams of values.
Reference: [4] <author> D. Bert, M.-L. Potet, and Y. Rouzaud. </author> <title> A study on components and assembly primitives in B. </title> <booktitle> In Habrias [7], </booktitle> <pages> pages 47-62. </pages>
Reference-contexts: Other variables have an obvious meaning. A pair of objects of a binary relation can be written either as (x; y) or (x 7! y). The machine DOOR is "extended", which means that the state and operations on door are visible inside the machine LIFT and operations are exported <ref> [1, 4] </ref>.
Reference: [5] <author> E. W. Dijkstra. </author> <title> A Discipline of Programming. </title> <booktitle> Prentice-Hall International, </booktitle> <year> 1976. </year>
Reference-contexts: The state is specified by an invariant in first order logic and operations are specified by "generalized substitutions" which play the role of predicate transformers, as introduced by E. W. Dijkstra <ref> [5] </ref>. So, the class of programs which can be specified in B includes mainly sequential and client/server programs. One great advantage of the B method is that machines can be specified at a very high level of abstraction.
Reference: [6] <author> Y. Futamura. </author> <title> Partial computation of programs. </title> <booktitle> In Proc. of the RIMS Symposia on Software Science and Engineering, Kyoto, 1982, </booktitle> <volume> LNCS 147, </volume> <pages> pages 1-35. </pages> <publisher> Springer-Verlag, </publisher> <year> 1983. </year>
Reference-contexts: Also, definitions must be expanded, thus giving attracted up, attracted down, etc. in figure 11. Unfolding can be aided by tools like symbolic replacement editors, simplifiers, or partial evaluator <ref> [6, 9] </ref>. Correctness of the new definitions should be guaranteed by checking conditions about the validity of the replacements. This could be integrated in a software development toolbox associated to the method. Such development tools have been designed and implemented like the KIDS system [14], among others.
Reference: [7] <author> H. Habrias, </author> <title> editor. Proceedings of the 1st Conference on the B method, Putting into Practice methods and tools for information system design, </title> <address> 3 rue du Marechal Joffre, BP 34103, 44041 Nantes Cedex 1, Novembre 1996. </address> <institution> IRIN Institut de recherche en informatique de Nantes. </institution>
Reference: [8] <author> N. Halbwachs, P. Caspi, P. Raymond, and D. Pilaud. </author> <title> The synchronous dataflow programming language Lustre. </title> <booktitle> In Proc. of the IEEE, </booktitle> <volume> 79(9), </volume> <pages> pages 1305-1320, </pages> <year> 1991. </year>
Reference-contexts: Among the specification languages which are used, we consider in this paper two languages, namely the B language [1] and the lustre language <ref> [8] </ref>. The B language is used in several projects involving the security of railway transport [2]. Specifications are "abstract machines" with an internal state, and operations which modify, or access to, the values of the state, in a classical object-oriented or module-oriented style of programming.
Reference: [9] <author> N. D. Jones, P. Sestof, and H. Sondergaard. </author> <title> An experiment in partial evaluation: The generation of a compiler generator. </title> <booktitle> In Proc. of Rewriting Techniques and Applications, Dijon, 1985, </booktitle> <volume> LNCS 202, </volume> <pages> pages 124-140. </pages> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: Also, definitions must be expanded, thus giving attracted up, attracted down, etc. in figure 11. Unfolding can be aided by tools like symbolic replacement editors, simplifiers, or partial evaluator <ref> [6, 9] </ref>. Correctness of the new definitions should be guaranteed by checking conditions about the validity of the replacements. This could be integrated in a software development toolbox associated to the method. Such development tools have been designed and implemented like the KIDS system [14], among others.
Reference: [10] <author> K. Lano, J. Bicarregui, and A. Sanchez. </author> <title> Using B to design and verify controllers for chemical processing. </title> <booktitle> In Habrias [7], </booktitle> <pages> pages 237-270. </pages>
Reference-contexts: In the thesis [15], S. Taouil-Traverson presents the design of a speed controller for railways, based on the integration of the risk analysis from the very beginning. The control system is simulated by a quasi-infinite loop taking information from sensors and computing values for actuators at each cycle. In <ref> [10] </ref>, a method is proposed to build control systems for chemical processing in B. It is based on a clear definition of the various elements: sensors, actuators, state, controllable and uncontrollable transitions, etc. The behaviour of subsystem components is specified through statecharts.
Reference: [11] <author> P. LeGuernic and A. Benveniste and Ch. Jacquemot. </author> <title> Synchronous programming with events and relations: the signal language and its semantics. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 16 </volume> <pages> 103-149, </pages> <year> 1991. </year>
Reference-contexts: These systems have inputs and compute outputs which generally are signals or boolean values. All the outputs are computed instantaneously and simultaneously. So, 1 such languages are called synchronous programming languages. The best known other languages based on this programming style are signal <ref> [11] </ref> and esterel [3]. In the lustre language, a program or specification is a "node" with input and output parameters (called also variables). Output variables are defined by equations which are equalities on infinite streams of values.
Reference: [12] <author> I. </author> <month> Parissis. </month> <institution> Test de logiciels synchrones specifies en Lustre. These de doctorat, Univ. Joseph Fourier, Grenoble, </institution> <year> 1996. </year>
Reference-contexts: This principle can be used to check or to test the controller by a modelling of the environment <ref> [12] </ref> or to check if a part of the equipments is broken down or unavailable, by a comparison between the specified behaviour and the actual one (example of the boiler in [1]). 5.2 Derivation of dataflow equations The idea is to derive dataflow equations for the lustre node lift controller from <p> It is assumed that operations on boolean and operations on boolean vectors are available in the lustre language as primitive operations or as auxiliary definitions. This has been effectively carried out in the thesis <ref> [12] </ref>. 20 let /* body of the lift controller node */ all requests = call up signals or call down signals or stop signals; Attracted up = OR (all requests and M ask up (floor pos)); Attracted down = OR (all requests and Mask down (floor pos)); . . .
Reference: [13] <author> I. Parissis and F. Ouabdesselam. </author> <title> Specification-based testing of synchronous software. </title> <booktitle> In ACM SIGSOFT, Proc. of the 4th Symposium on the Foundations of Software Engineering, </booktitle> <year> 1996. </year>
Reference-contexts: A third extension is the ability to provide tests for the controller by extracting properties of the environment. The specification of the global system not integrated in the controller (information of sensors) can be used to generate such tests <ref> [13] </ref>. 23 Several works have been published about the specification of controllers. The example of the boiler [1] presents the architecture of a control command system which is able to adjust the pump flows in function of sensors, previous pressure level values and the knowledge of physical laws.
Reference: [14] <author> D. R. Smith. </author> <title> KIDS a semi-automatic program development system. </title> <journal> Transactions on Software Engineering, </journal> <volume> 16(9) </volume> <pages> 1024-1043, </pages> <year> 1990. </year>
Reference-contexts: Correctness of the new definitions should be guaranteed by checking conditions about the validity of the replacements. This could be integrated in a software development toolbox associated to the method. Such development tools have been designed and implemented like the KIDS system <ref> [14] </ref>, among others.
Reference: [15] <author> S. Taouil-Traverson. </author> <title> Strategie d'integration de la methode B dans la construction de logiciel critique. </title> <institution> These de doctorat, ENST, Paris, </institution> <year> 1997. </year>
Reference-contexts: The example of the boiler [1] presents the architecture of a control command system which is able to adjust the pump flows in function of sensors, previous pressure level values and the knowledge of physical laws. In the thesis <ref> [15] </ref>, S. Taouil-Traverson presents the design of a speed controller for railways, based on the integration of the risk analysis from the very beginning. The control system is simulated by a quasi-infinite loop taking information from sensors and computing values for actuators at each cycle.
References-found: 15

