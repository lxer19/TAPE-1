URL: http://www.cs.yale.edu/pub/TR/tr1013.ps.gz
Refering-URL: http://www.cs.yale.edu/pub/TR/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Adaptive Algorithms for PASO Systems  
Author: Jeffery Westbrook Lenore Zuck 
Date: September 1994  
Address: New Haven, CT 06520  
Affiliation: Yale University Department of Computer Science  Department of Computer Science Yale University  
Pubnum: YALEU/DCS/TR-1013  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> G. Agha and C. Callsen. Actorspaces: </author> <title> An open distributed programming paradigm. </title> <booktitle> In Proc. 4th ACM SIPLAN Symp. on Principles and Practice of Parallel Programming, </booktitle> <address> San Diego, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: the context of C [10], Scheme 1 A preliminary version of this paper appeared in the Proc. 1994 ACM Symp. on Principles of Distributed Computing (PODC). 1 [18], Prolog [9], distributed object-oriented systems [24], Modula-2 [8], program visualization systems [25], math libraries [11], and as part of other coordination mechanisms <ref> [1, 22] </ref>. They have proven to be an effective basis for concurrent programming in many multi-processing environments [10]. Despite these various implementations, there is no widely accepted formal semantics for PASO memories (often referred to as "tuple spaces" in the literature).
Reference: [2] <author> B. Anderson and D. Shasha. </author> <title> Persistent Linda. </title> <editor> In J. B. Banatre and D. L. Metayer, editors, </editor> <booktitle> Research Directions in High-Level Parallel Programming Languages. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1992. </year>
Reference-contexts: Bakken and Schlichting [4, 5] assume a reliable tuple space, and propose a new atomic tuple-swap operator that can be used to build reliable applications of a certain type ("bag of task" applications). Anderson and Shasha's <ref> [2] </ref> work on Persistent Linda includes support for transactions, but doesn't focus on the problem of reliable distributed tuple spaces. Kambhatla and Walpole 2 [20, 27] discuss reliable tuple spaces, and the use of a reliable tuple space to build a reliable application.
Reference: [3] <author> B. Awerbuch, Y. Bartal, and A. Fiat. </author> <title> Competitive distributed file allocation. </title> <booktitle> In Proc. 25th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 164-173, </pages> <year> 1993. </year>
Reference-contexts: Recent research in on-line algorithms using competitive analysis [23, 21] has presented schemes for adaptive file replication and migration that reduce overall message complexity in distributed file management (e.g. <ref> [3] </ref>). This paper suggests using the same adaptive on-line techniques to provide both efficiency and fault-tolerance. We consider adaptive object replication in PASO memory management, with the goals of reducing response time, message cost, and total workload.
Reference: [4] <author> D. E. Bakken and R. D. Schlichting. </author> <title> Tolerating failures in the bag-of-tasks programming paradigm. </title> <booktitle> In Proc. 11th IEEE Int. Symp. Fault Tolerant Computing, </booktitle> <pages> pages 248-255, </pages> <year> 1991. </year>
Reference-contexts: A prototype PASO system built on top of ISIS is currently running at Yale. In previous work, Xu and Liskov [28] discuss the use of the virtual partition algorithm to maintain the consistency of tuple replicas in the tuple space. Bakken and Schlichting <ref> [4, 5] </ref> assume a reliable tuple space, and propose a new atomic tuple-swap operator that can be used to build reliable applications of a certain type ("bag of task" applications).
Reference: [5] <author> D. E. Bakken and R. D. Schlichting. </author> <title> Supporting fault-tolerant parallel programming in linda. </title> <type> Technical Report TR93-18, </type> <institution> Univ. Arizona Dept. Computer Science, </institution> <year> 1993. </year>
Reference-contexts: A prototype PASO system built on top of ISIS is currently running at Yale. In previous work, Xu and Liskov [28] discuss the use of the virtual partition algorithm to maintain the consistency of tuple replicas in the tuple space. Bakken and Schlichting <ref> [4, 5] </ref> assume a reliable tuple space, and propose a new atomic tuple-swap operator that can be used to build reliable applications of a certain type ("bag of task" applications).
Reference: [6] <author> Y. Bartal, A. Fiat, and Y. Rabani. </author> <title> Competitive algorithms for distributed data management. </title> <booktitle> In Proc. ACM Symp. on Theory of Computing, </booktitle> <pages> pages 39-50, </pages> <year> 1992. </year>
Reference-contexts: If c = 0 and M 62 B (C), M leaves wg (C). The Basic algorithm is quite closely related to algorithms for snoopy caching [21] and file allocation on a uniform network <ref> [6] </ref>. The analysis and extensions below differ, however. We analyze the algorithm using the method of competitive analysis. Definitions and basic proof techniques of competitive analysis are given in Appendix B. Theorem 2 The Basic algorithm is (3 + =K)-competitive.
Reference: [7] <author> K. Birman and T. Joseph. </author> <title> Reliable communication in the presence of failures. </title> <journal> ACM Trans. Computer Systems, </journal> <volume> 5(1) </volume> <pages> 47-76, </pages> <month> Feb. </month> <year> 1987. </year>
Reference-contexts: This paper suggests using the same adaptive on-line techniques to provide both efficiency and fault-tolerance. We consider adaptive object replication in PASO memory management, with the goals of reducing response time, message cost, and total workload. We assume a basic communication and coordination mechanism based on the ISIS <ref> [7, 17] </ref> model of virtual synchrony. The mechanism is discussed in further detail in Section 3. ISIS offers elegant tools to deal with faults, and basing our PASO system on ISIS allows us to focus on the issues that are of main interest to us, namely, efficient replication of objects.
Reference: [8] <author> L. Borrman, M. Herdieckerhoff, and A. Klein. </author> <title> Tuple space integrated into Modula-2, implementation of the Linda concept on a hierarchical multiprocessor. </title> <editor> In Jesshope and Reinartz, editors, </editor> <booktitle> Proc. CONPAR '88. </booktitle> <publisher> Cambridge Univ. Press, </publisher> <year> 1988. </year>
Reference-contexts: have been used as coordination languages in a variety of parallel programming systems, e.g., in the context of C [10], Scheme 1 A preliminary version of this paper appeared in the Proc. 1994 ACM Symp. on Principles of Distributed Computing (PODC). 1 [18], Prolog [9], distributed object-oriented systems [24], Modula-2 <ref> [8] </ref>, program visualization systems [25], math libraries [11], and as part of other coordination mechanisms [1, 22]. They have proven to be an effective basis for concurrent programming in many multi-processing environments [10].
Reference: [9] <author> A. Brogi and P. Ciancarini. </author> <title> The concurrent language Shared Prolog. </title> <journal> ACM Trans. on Programming Languages and Systems, </journal> <volume> 13(1) </volume> <pages> 99-123, </pages> <year> 1991. </year>
Reference-contexts: memories that qualify informally as PASOs have been used as coordination languages in a variety of parallel programming systems, e.g., in the context of C [10], Scheme 1 A preliminary version of this paper appeared in the Proc. 1994 ACM Symp. on Principles of Distributed Computing (PODC). 1 [18], Prolog <ref> [9] </ref>, distributed object-oriented systems [24], Modula-2 [8], program visualization systems [25], math libraries [11], and as part of other coordination mechanisms [1, 22]. They have proven to be an effective basis for concurrent programming in many multi-processing environments [10].
Reference: [10] <author> N. Carriero and D. Gelernter. </author> <title> Linda in context. </title> <journal> Commun. ACM, </journal> <volume> 32(4) </volume> <pages> 444-458, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: The primary type of fault we consider are crash errors, in which a machine crashes and all processes on that machine are halt. Shared memories that qualify informally as PASOs have been used as coordination languages in a variety of parallel programming systems, e.g., in the context of C <ref> [10] </ref>, Scheme 1 A preliminary version of this paper appeared in the Proc. 1994 ACM Symp. on Principles of Distributed Computing (PODC). 1 [18], Prolog [9], distributed object-oriented systems [24], Modula-2 [8], program visualization systems [25], math libraries [11], and as part of other coordination mechanisms [1, 22]. <p> They have proven to be an effective basis for concurrent programming in many multi-processing environments <ref> [10] </ref>. Despite these various implementations, there is no widely accepted formal semantics for PASO memories (often referred to as "tuple spaces" in the literature). One of the contributions of this paper is a simple semantics for PASO systems that covers most tuple-space implementations.
Reference: [11] <author> C. C. Douglas. </author> <title> A tupleware approach to domain decomposition methods. </title> <journal> Applied Numerical Mathematics, </journal> <volume> 8 </volume> <pages> 353-373, </pages> <year> 1991. </year>
Reference-contexts: a variety of parallel programming systems, e.g., in the context of C [10], Scheme 1 A preliminary version of this paper appeared in the Proc. 1994 ACM Symp. on Principles of Distributed Computing (PODC). 1 [18], Prolog [9], distributed object-oriented systems [24], Modula-2 [8], program visualization systems [25], math libraries <ref> [11] </ref>, and as part of other coordination mechanisms [1, 22]. They have proven to be an effective basis for concurrent programming in many multi-processing environments [10]. Despite these various implementations, there is no widely accepted formal semantics for PASO memories (often referred to as "tuple spaces" in the literature).
Reference: [12] <author> A. Fiat, R. Karp, M. Luby, L. McGeoch, D. D. Sleator, and N. Young. </author> <title> On competitive algorithms for paging problems. </title> <journal> Journal of Algorithms, </journal> <volume> 12 </volume> <pages> 685-699, </pages> <year> 1991. </year>
Reference-contexts: The total cost incurred by the support selection algorithm in copying state, divided by the copy cost g (`), gives the total number of faults in the corresponding instance of paging. The proof is completed by applying lower bounds for paging <ref> [26, 12] </ref>. No deterministic paging algorithm is better than k competitive and no randomized algorithm is better than log k competitive.
Reference: [13] <author> E. Freeman, D. Gelernter, J. Westbrook, and L. Zuck. </author> <title> A fault tolerant paso for lans (extended abstract). </title> <type> Technical Report YALEU/DCS/TR-1012, </type> <institution> Yale University, </institution> <month> Feb. </month> <year> 1994. </year>
Reference-contexts: Response time is a valid concern, and a load-balancing scheme designed to reduce response time is described in <ref> [13] </ref>. It remains an open problem to design a system with guaranteed good behavior in all three cost measures. In this paper we concentrate on optimizations local to the management of a given object class.
Reference: [14] <author> D. Gelernter. </author> <type> personal communication, </type> <month> 9 </month> <year> 1993. </year>
Reference-contexts: The strategies are analyzed using competitive analysis. 2 Semantics of PASO The PASO model is similar to the Linda model. Unfortunately, there is no formal semantics for Linda that is accepted and used <ref> [14] </ref>. Recently, Jagannathan proposed a semantics for multiple tuple spaces [19], which does not extend to the multi-process case. The semantics outlined here was derived by studying operational Linda and Network Linda implementations; hence, it captures the semantics of the currently running Linda-like systems.
Reference: [15] <author> D. Gelernter and D. Kaminsky. </author> <title> Supercomputing out of recycled garbage: Preliminary experience with piranha. </title> <booktitle> In Proc. 1992 ACM Int. Conf. Supercomputing, </booktitle> <month> July </month> <year> 1992. </year>
Reference-contexts: mutually anonymous and never deal with each other directly, it becomes relatively simple to substitute a new process for a failed one.) A PASO memory that is able to tolerate many rapidly occurring failures is especially useful in designing parallel algorithms that adapt to changing availability of computational resources|adaptive parallelism <ref> [15] </ref>. Today's ubiquitous work-station networks are huge reservoirs of power and wasted potential, reservoirs that can be tapped by adaptive parallel programs designed to gain or lose processing units during the computation.
Reference: [16] <author> D. Gelernter, J. Westbrook, and L. Zuck. </author> <title> Towards an efficient fault tolerant PASO memory system. </title> <type> Technical Report YALEU/DCS/TR-1000, </type> <institution> Yale University, </institution> <month> Dec. </month> <year> 1993. </year>
Reference-contexts: It has been argued that adaptive-parallel programs executing on networked multiprocessors will be one of the most important arenas for high-performance computing over the next decade <ref> [16] </ref> . In fault-tolerant systems data must be replicated to survive machine failure. The main drawback of fault-tolerant systems has been that the benefits of preserving data in the face of failures may be outweighed by the loss of efficiency when errors are infrequent.
Reference: [17] <author> I. </author> <title> Isis Distributed Systems. The Isis distributed toolkit, version 3.0. Systems Reference Manual, </title> <year> 1992. </year>
Reference-contexts: This paper suggests using the same adaptive on-line techniques to provide both efficiency and fault-tolerance. We consider adaptive object replication in PASO memory management, with the goals of reducing response time, message cost, and total workload. We assume a basic communication and coordination mechanism based on the ISIS <ref> [7, 17] </ref> model of virtual synchrony. The mechanism is discussed in further detail in Section 3. ISIS offers elegant tools to deal with faults, and basing our PASO system on ISIS allows us to focus on the issues that are of main interest to us, namely, efficient replication of objects. <p> The semantics of the blocking version of read and read&del is rather straightforward. In Section 4, we discuss how to implement them. 3 The Physical Model This section defines the fault model and the basic communication primitives and their cost. The communication model described here is motivated by ISIS <ref> [17] </ref>, which offers correct and efficient implementation of these communication primitives. In fact, the PASO system now being implemented at Yale is running on top of ISIS. 3.1 Fault Model A PASO system consists of a set Mach of machine. Let n denote the size of Mach.
Reference: [18] <author> S. Jagannathan. TS/Scheme: </author> <title> Distributed data structures in Lisp. </title> <booktitle> In Proc. 2nd Workshop on Parallel Lisp: Languages, Applications and Systems. </booktitle> <publisher> Springer-Verlag LNCS, </publisher> <month> Oct </month> <year> 1992. </year> <note> Also published as: </note> <institution> NEC Research Institute Tech Report: 93-042-3-0050-1. </institution>
Reference-contexts: Shared memories that qualify informally as PASOs have been used as coordination languages in a variety of parallel programming systems, e.g., in the context of C [10], Scheme 1 A preliminary version of this paper appeared in the Proc. 1994 ACM Symp. on Principles of Distributed Computing (PODC). 1 <ref> [18] </ref>, Prolog [9], distributed object-oriented systems [24], Modula-2 [8], program visualization systems [25], math libraries [11], and as part of other coordination mechanisms [1, 22]. They have proven to be an effective basis for concurrent programming in many multi-processing environments [10].
Reference: [19] <author> S. Jagannathan. </author> <type> personal communication, </type> <month> Apr </month> <year> 1994. </year>
Reference-contexts: The strategies are analyzed using competitive analysis. 2 Semantics of PASO The PASO model is similar to the Linda model. Unfortunately, there is no formal semantics for Linda that is accepted and used [14]. Recently, Jagannathan proposed a semantics for multiple tuple spaces <ref> [19] </ref>, which does not extend to the multi-process case. The semantics outlined here was derived by studying operational Linda and Network Linda implementations; hence, it captures the semantics of the currently running Linda-like systems. A full description of the semantics is in [29].
Reference: [20] <author> S. Kambhatla and J. Walpole. </author> <title> Recovery with limited replay: fault-tolerant processes in linda. </title> <type> Technical Report CS/E 90-019, </type> <institution> Oregon Grad. Inst., Dept. C.S. and Eng., </institution> <month> September </month> <year> 1990. </year> <month> 13 </month>
Reference-contexts: The fact that informal PASO memories are a pragmatic success makes them good candidates for formal, algorithmic, and theoretical research that aims at improving them. Kambhatla and Walpole make a case that tuple spaces are "a particularly suitable model for fault-tolerant applications" <ref> [20] </ref>, because of the "highly asynchronous" or "uncoupled" nature of the tuple space model. (Because processes are mutually anonymous and never deal with each other directly, it becomes relatively simple to substitute a new process for a failed one.) A PASO memory that is able to tolerate many rapidly occurring failures <p> Anderson and Shasha's [2] work on Persistent Linda includes support for transactions, but doesn't focus on the problem of reliable distributed tuple spaces. Kambhatla and Walpole 2 <ref> [20, 27] </ref> discuss reliable tuple spaces, and the use of a reliable tuple space to build a reliable application.
Reference: [21] <author> A. Karlin, M. Manasse, L. Rudolph, and D. Sleator. </author> <title> Competitive snoopy caching. </title> <journal> Algorithmica, </journal> <volume> 3(1) </volume> <pages> 79-119, </pages> <year> 1988. </year>
Reference-contexts: The main drawback of fault-tolerant systems has been that the benefits of preserving data in the face of failures may be outweighed by the loss of efficiency when errors are infrequent. Recent research in on-line algorithms using competitive analysis <ref> [23, 21] </ref> has presented schemes for adaptive file replication and migration that reduce overall message complexity in distributed file management (e.g. [3]). This paper suggests using the same adaptive on-line techniques to provide both efficiency and fault-tolerance. <p> If c = 0 and M 62 B (C), M leaves wg (C). The Basic algorithm is quite closely related to algorithms for snoopy caching <ref> [21] </ref> and file allocation on a uniform network [6]. The analysis and extensions below differ, however. We analyze the algorithm using the method of competitive analysis. Definitions and basic proof techniques of competitive analysis are given in Appendix B. Theorem 2 The Basic algorithm is (3 + =K)-competitive. <p> By standard arguments of amortized analysis, this shows that the total cost to the on-line algorithm is no more than 3 + =K times the total optimum cost. This is essentially the best possible <ref> [21] </ref>. The Basic algorithm can be extended to other data structures for the internal memory. In typical data structures (e.g. trees and linked lists), I (:) and D (:) are the of the same order, while Q (:) is more expensive.
Reference: [22] <author> B. Liskov. </author> <title> Position paper. The panel discussion at OLDA2, </title> <address> Vancouver, </address> <month> October 18 </month> <year> 1992. </year>
Reference-contexts: the context of C [10], Scheme 1 A preliminary version of this paper appeared in the Proc. 1994 ACM Symp. on Principles of Distributed Computing (PODC). 1 [18], Prolog [9], distributed object-oriented systems [24], Modula-2 [8], program visualization systems [25], math libraries [11], and as part of other coordination mechanisms <ref> [1, 22] </ref>. They have proven to be an effective basis for concurrent programming in many multi-processing environments [10]. Despite these various implementations, there is no widely accepted formal semantics for PASO memories (often referred to as "tuple spaces" in the literature).
Reference: [23] <author> M. Manasse, L. A. McGeoch, and D. Sleator. </author> <title> Competitive algorithms for on-line problems. </title> <booktitle> In Proc. 20th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 322-333, </pages> <year> 1988. </year>
Reference-contexts: The main drawback of fault-tolerant systems has been that the benefits of preserving data in the face of failures may be outweighed by the loss of efficiency when errors are infrequent. Recent research in on-line algorithms using competitive analysis <ref> [23, 21] </ref> has presented schemes for adaptive file replication and migration that reduce overall message complexity in distributed file management (e.g. [3]). This paper suggests using the same adaptive on-line techniques to provide both efficiency and fault-tolerance.
Reference: [24] <author> S. Matsuoka and S. Kawai. </author> <title> Using tuple space communication in distributed object-oriented languages. </title> <booktitle> In Proc. OOPSLA '88, </booktitle> <pages> pages 276-284, </pages> <month> Nov </month> <year> 1988. </year>
Reference-contexts: as PASOs have been used as coordination languages in a variety of parallel programming systems, e.g., in the context of C [10], Scheme 1 A preliminary version of this paper appeared in the Proc. 1994 ACM Symp. on Principles of Distributed Computing (PODC). 1 [18], Prolog [9], distributed object-oriented systems <ref> [24] </ref>, Modula-2 [8], program visualization systems [25], math libraries [11], and as part of other coordination mechanisms [1, 22]. They have proven to be an effective basis for concurrent programming in many multi-processing environments [10].
Reference: [25] <author> G. Roman, K. Cox, C. D. Wilcox, and J. Plun. Pavane: </author> <title> a system for declarative visualization of concurrent computations. </title> <journal> J. Visual Languages and Computing, </journal> <volume> 3 </volume> <pages> 161-193, </pages> <year> 1992. </year>
Reference-contexts: coordination languages in a variety of parallel programming systems, e.g., in the context of C [10], Scheme 1 A preliminary version of this paper appeared in the Proc. 1994 ACM Symp. on Principles of Distributed Computing (PODC). 1 [18], Prolog [9], distributed object-oriented systems [24], Modula-2 [8], program visualization systems <ref> [25] </ref>, math libraries [11], and as part of other coordination mechanisms [1, 22]. They have proven to be an effective basis for concurrent programming in many multi-processing environments [10].
Reference: [26] <author> D. D. Sleator and R. E. Tarjan. </author> <title> Amortized efficiency of list update and paging rules. </title> <journal> Commun. ACM, </journal> <volume> 28(2) </volume> <pages> 202-208, </pages> <year> 1985. </year>
Reference-contexts: The total cost incurred by the support selection algorithm in copying state, divided by the copy cost g (`), gives the total number of faults in the corresponding instance of paging. The proof is completed by applying lower bounds for paging <ref> [26, 12] </ref>. No deterministic paging algorithm is better than k competitive and no randomized algorithm is better than log k competitive.
Reference: [27] <author> J. Walpole and S. Kambhatla. </author> <title> Replication issues for long-lived parallel computations in a loosely-coupled distributed environment. </title> <booktitle> In Proc. Workshop on Management of Replicated Data, </booktitle> <year> 1990. </year>
Reference-contexts: Anderson and Shasha's [2] work on Persistent Linda includes support for transactions, but doesn't focus on the problem of reliable distributed tuple spaces. Kambhatla and Walpole 2 <ref> [20, 27] </ref> discuss reliable tuple spaces, and the use of a reliable tuple space to build a reliable application.
Reference: [28] <author> A. S. Xu and B. Liskov. </author> <title> A design for a fault-tolerant, distributed implementation of linda. </title> <booktitle> In Proc. 9th IEEE Int. Symp. Fault Tolerant Computing, </booktitle> <pages> pages 199-206, </pages> <year> 1989. </year>
Reference-contexts: The ISIS fault model covers a large range of frequently occurring faults, and the ISIS system is widely used. A prototype PASO system built on top of ISIS is currently running at Yale. In previous work, Xu and Liskov <ref> [28] </ref> discuss the use of the virtual partition algorithm to maintain the consistency of tuple replicas in the tuple space.
Reference: [29] <author> L. Zuck. </author> <title> The semantics of PASO systems. </title> <type> Unpulished manuscript, </type> <note> final version in preparation, </note> <month> Sept. </month> <year> 1993. </year> <month> 14 </month>
Reference-contexts: The semantics outlined here was derived by studying operational Linda and Network Linda implementations; hence, it captures the semantics of the currently running Linda-like systems. A full description of the semantics is in <ref> [29] </ref>. The set of objects is denoted by O. Each object has a "life". It is initially prenatal . If inserted, the object becomes live. If read&deled, the object becomes dead. Search criteria, used as arguments in read and read&del commands, are predicates over O.
References-found: 29

