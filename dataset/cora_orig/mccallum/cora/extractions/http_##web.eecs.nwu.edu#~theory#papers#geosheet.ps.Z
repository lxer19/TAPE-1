URL: http://web.eecs.nwu.edu/~theory/papers/geosheet.ps.Z
Refering-URL: http://web.eecs.nwu.edu/~theory/geomamos.html
Root-URL: 
Email: E-mail: fdtlee,sheusm,cfsheng@eecs.nwu.edu  
Phone: Tel: (708)491-5007  
Title: GeoSheet: A Distributed Visualization Tool for Geometric Algorithms  
Author: D.T. Lee Shih-Min Sheu and Chin-Fang Shen 
Note: Supported by the Office of Naval Research under the Grant No. N00014-93-1-0272. Research also supported by the National Science Foundation under the Grant CCR-9309743.  
Date: October 1994  
Address: Evanston, Illinois 60208, USA.  
Affiliation: Department of Electrical Engineering and Computer Science, Northwestern University,  
Abstract: To minimize development effort of the tool we make use of existing software packages available in public domain. Specifically we extend Xfig with a message-driven interface and a socket-based interprocess communication (IPC) mechanism. This extended-Xfig is the backbone of this version of the tool. Object-oriented programming methodology is used to construct the visualization interface. By deriving from traditional data type and algorithm libraries, our abstract GeoObject representation super-classes are easy to use, easy to construct, and highly portable. Although GeoSheet is not restricted to a particular application domain or any programming language, this release only contains geometric algorithm implementations in C++ and LEDA. We hope that the geometric algorithm designers will find it useful when they develop their algorithms. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. S. Almasi and A. Gottlieb, </author> <title> Highly Parallel Computing, </title> <publisher> Benjamin, </publisher> <address> Redwood, CA, </address> <year> 1989. </year>
Reference-contexts: the program may be implemented on a parallel 33 Field Names Types Operations READ WRITE CLEAR ALL CONTROL DELETE SELECT MODIFY REPLY ACK TERMINATE ERROR Object GRAPH WEIGHTED GRAPH UGRAPH WEIGHTED UGRAPH SEGMENT LINE POLYGON POLYLINE CIRCLE TRIANGLE RECTANGLE ARC TEXT Table 2: Summary of GeoIPC Message Types 34 machine <ref> [1] </ref>. Algorithm visualization in distributed collaborate environments [2] is yet another application of distributed execution. To effectively support distributed program visualization, we believe the following facilities are essential. 1. Remote algorithm browsing.
Reference: [2] <author> V. Anupam, C. Bajaj, D. Schikore and M. Schikore, </author> <title> "Distributed and Collaborative Visualization", </title> <booktitle> Computer, </booktitle> <month> July </month> <year> 1994, </year> <pages> pp. 37-43. </pages>
Reference-contexts: Logical work sheets only serve as communication channels for the visualization operations and results, and do not themselves implement any functions dependent on display characteristics. * Supporting distributed visualization. One key feature to support algorithm visualization in a distributed environment similar to <ref> [2, 3] </ref> is to provide a mechanism that multiple 17 programs can view or receive graphical data from a set of distributed but shared GeoSheets. Our approach is to use a logical name to refer to a distinct GeoSheet under the control task of GeoPanel. <p> Therefore algorithm implementation will not be affected by rapid changes of display technology. The separation also lets GeoSheet and the program work in client and server execution model, and is helpful in developing distributed collaborative visualization <ref> [2] </ref>. <p> Algorithm visualization in distributed collaborate environments <ref> [2] </ref> is yet another application of distributed execution. To effectively support distributed program visualization, we believe the following facilities are essential. 1. Remote algorithm browsing. To execute a program at a remote site, it is desirable to be able to browse all the algorithms on that site.
Reference: [3] <author> M. Accetta, et al., "SHASTRA: </author> <title> A Distributed and Collaborative Design Environment", Animation of Geometric Algorithms: A Video Review, </title> <month> June </month> <year> 1992, </year> <pages> pp. 12-14. </pages>
Reference-contexts: Logical work sheets only serve as communication channels for the visualization operations and results, and do not themselves implement any functions dependent on display characteristics. * Supporting distributed visualization. One key feature to support algorithm visualization in a distributed environment similar to <ref> [2, 3] </ref> is to provide a mechanism that multiple 17 programs can view or receive graphical data from a set of distributed but shared GeoSheets. Our approach is to use a logical name to refer to a distinct GeoSheet under the control task of GeoPanel.
Reference: [4] <author> M. H. Brown, </author> <title> Algorithm Animation, </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA. </address> <year> 1988. </year>
Reference: [5] <author> M. H. Brown, "Zeus: </author> <title> A System for Algorithm Animation and Multi-view Editing," </title> <type> SRC Tech. Report, </type> <institution> Digital Equipment Corporation, </institution> <month> Feb. </month> <year> 1992. </year>
Reference-contexts: We briefly describe some of these systems below: 1. Balsa. Brown and Sedgewick [9, 10], designers of Balsa (for Brown University Algorithm Simulator and Animator), were pioneers in using algorithm animation to teach algorithm design. Balsa and Zeus, which was implemented by Brown <ref> [5] </ref>, capture meaningful state changes (significant events) in the program by adding procedure calls to the program in a process called program annotation for visualization purpose. It emphasizes demonstration of algorithm execution. 2. Xtango [23].
Reference: [6] <author> M. H. Brown and J. Hershberger, </author> <title> "Color and Sound in Algorithm Animation," </title> <type> SRC Tech. Report, </type> <institution> Digital Equipment Corporation, </institution> <month> Aug. </month> <year> 1991 </year>
Reference-contexts: This scheme requires that the visualization subsystem locate the visualization object list efficiently and be able to pass back the exact object contents rather than just copy-to-copy-back protocol. 4.7 Animation Animation is very powerful in investigating the behavior of geometric algorithms <ref> [6] </ref>. In GeoSheet environment, we support both on-line and off-line animation. The on-line animation is supported by inserting a control module in the message sending mechanism to control sending of the sequence of visualization requests.
Reference: [7] <author> M. H. Brown and J. Hershberger, </author> <title> "Animation of Geometric Algorithms: A Video Review," Editors, </title> <institution> 87a-b, Digital Equipment Corporation, </institution> <month> June </month> <year> 1992. </year> <month> 41 </month>
Reference-contexts: It is written in Smalltalk/V in an object-oriented style running on Macintosh. 8. Others. Ten different geometric display systems were included in a videotape edited by Brown and Hershberger <ref> [7] </ref> and distributed at the 8th Annual Symposium on Computational Geometry. At the 9th Annual Symposium on Computational Geometry another videotape containing 8 segments was made available [8].
Reference: [8] <author> M. H. Brown and J. Hershberger, </author> <title> "Video Review," </title> <booktitle> Proc. 9th Symp. on Computational Geometry,, </booktitle> <month> June </month> <year> 1993, </year> <pages> pp. 391. </pages>
Reference-contexts: Others. Ten different geometric display systems were included in a videotape edited by Brown and Hershberger [7] and distributed at the 8th Annual Symposium on Computational Geometry. At the 9th Annual Symposium on Computational Geometry another videotape containing 8 segments was made available <ref> [8] </ref>. Each has demonstrated the power of animation in conveying the key ingredients of the algorithm being implemented. 3 Geometric Visualization Classes Visualization classes are used as a uniform interface to all geometric class objects for programs to invoke visualization functions.
Reference: [9] <author> M. H. Brown and R. Sedgewick, </author> <title> "A System for Algorithm Animation," </title> <journal> Computer Graphics, </journal> <volume> 18,3, </volume> <month> July </month> <year> 1984. </year> <pages> pp. 177-186. </pages>
Reference-contexts: Unification of these systems is difficult since the Input/Output interface, file formats, and graphical display environment are different. Systems, such as "XYZ GeoBench" and "Workbench" do consider most GAD phases, but provide primitive visualization support [14]. We briefly describe some of these systems below: 1. Balsa. Brown and Sedgewick <ref> [9, 10] </ref>, designers of Balsa (for Brown University Algorithm Simulator and Animator), were pioneers in using algorithm animation to teach algorithm design.
Reference: [10] <author> M. H. Brown and R. Sedgewick, </author> <title> "Techniques for Algorithm Animation," </title> <journal> IEEE Software, </journal> <volume> 2,1, </volume> <month> Jan. </month> <year> 1985, </year> <pages> pp. 28-39. </pages>
Reference-contexts: Unification of these systems is difficult since the Input/Output interface, file formats, and graphical display environment are different. Systems, such as "XYZ GeoBench" and "Workbench" do consider most GAD phases, but provide primitive visualization support [14]. We briefly describe some of these systems below: 1. Balsa. Brown and Sedgewick <ref> [9, 10] </ref>, designers of Balsa (for Brown University Algorithm Simulator and Animator), were pioneers in using algorithm animation to teach algorithm design.
Reference: [11] <author> M. A. Ellis and B. Stroustrup, </author> <title> The Annotated C++ Reference Manual, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1990. </year>
Reference-contexts: With the virtual function mechanism in GeoObject, the drawing function that matches the class of each object will be correctly invoked. This feature that all derived visualization classes use the same member functions is known as polymorphism <ref> [11] </ref>. The GeoObject data members are used for visualization object management, and will be discussed in Section 3.6. We remark here that we can also construct visualization classes directly from geometric classes without inheriting the GeoObject base class.
Reference: [12] <author> Epstein, P., J. Kavanagh, A. Knight, J. May, T. Nguyen, and J.-R. Sack, </author> <title> "A Workbench for Computational Geometry," </title> <journal> Algorithmica, </journal> <month> April </month> <year> 1994, </year> <pages> pp. 404-428. </pages>
Reference-contexts: To produce graphical output, the user is usually required to have special and non-trivial domain knowledge on visualization programming, such as computer graphics and animation. Such domain knowledge cannot be quickly acquired. Although many systems are now available for algorithm visualization <ref> [23, 18, 12] </ref>, users of most systems still face problems in using the visualization tools when implementing geometric algorithms. To invoke visualization functions provided in these systems, the user oftentimes has to follow specific instructions to place special statements within programs. <p> It provides a user interface as well as a library and is implemented in an object-oriented style running on Macintosh. 5 7. WorkBench <ref> [12] </ref>. This is similar to "XYZ GeoBench".
Reference: [13] <author> S. Fortune, </author> <title> "A sweepline algorithm for Voronoi diagrams," Algorithmic, </title> <type> 2, </type> <year> 1987, </year> <pages> pp. 153-174. </pages>
Reference: [14] <author> R. Gruia-Catalin and K. C. Cox, </author> " <title> A Toxonomy of Program Visualization Systems," </title> <booktitle> Computer, </booktitle> <month> Dec. </month> <year> 1993, </year> <pages> pp. 11-24. </pages>
Reference-contexts: Unification of these systems is difficult since the Input/Output interface, file formats, and graphical display environment are different. Systems, such as "XYZ GeoBench" and "Workbench" do consider most GAD phases, but provide primitive visualization support <ref> [14] </ref>. We briefly describe some of these systems below: 1. Balsa. Brown and Sedgewick [9, 10], designers of Balsa (for Brown University Algorithm Simulator and Animator), were pioneers in using algorithm animation to teach algorithm design.
Reference: [15] <author> A. J. Hanson, T. M. Munzner, and G. Francis, </author> <title> "Interactive Methods for Visualizable Geometry," </title> <booktitle> Computer, </booktitle> <address> 27,7, </address> <month> July </month> <year> 1994, </year> <pages> pp. 73-83. </pages>
Reference-contexts: Compared to other distributed visualization scheme, the most significant advantage in our approach is that the invocation messages can be directly generated from the program. This provides a much more flexible tool compared to those off-line data visualization schemes such as <ref> [15] </ref>. Besides, our geometric representation message layer can effectively reduce the number of messages. The X11 client/server messages are of finer grain size and will produce a larger number of messages for remote execution compared to our scheme.
Reference: [16] <author> D. T. Lee and A. K. Lin, </author> <title> "Computational Complexity of Art Gallery Problems," </title> <journal> IEEE Trans. Infor. Theory, </journal> <volume> IT-32,2, </volume> <month> March </month> <year> 1986, </year> <pages> pp. 276-282. </pages>
Reference-contexts: It has been shown that this optimization problem is NP-hard <ref> [16] </ref>. It is known that bn=3c vertex guards are always sufficient, and sometimes necessary [20], in order to see the entire polygon with n vertices. Because bn=3c guards are only sometimes necessary, it is often the case that the number of guards can be reduced to less the bn=3c.
Reference: [17] <author> Mehlhorn, K. and S. Naher, </author> <title> "LEDA | A Library of Efficient Data Types and Algorithms," </title> <booktitle> Lecture Notes in Computer Science, Springer-Verlag, </booktitle> <volume> Vol 379, </volume> <pages> 88-106, </pages> <year> 1989. </year>
Reference-contexts: These classes are 1 Refer to the World Wide Web pages at http://www.eecs.nwu.edu/~theory/geomamos.html for more detailed description of this project. 2 called visualization classes. Visualization classes give the specifications of generic GeoSheet visualization operations and can be derived from existing non-visualization algorithm and data structure classes such as LEDA <ref> [17, 19] </ref> in a straightforward manner by following object-oriented approach. When created, the instances of visualization classes are provided with inherited operations and states for both algorithmic and visualization support. <p> The system maps program annotations to display events using a finite-state transducer. This design has precise semantics and specifications for the data type, resulting in a rigorous framework for describing the actions that occur in a 2-D animation under an X-window environment. 3. LEDA <ref> [17, 19] </ref>. This is developed by a group led by Mehlhorn at Max Planck Institute fur Informatik, Germany. It provides a sizable collection of data types and algorithms in a form which allows them to be used by non-experts.
Reference: [18] <author> T. Munzner, L. Stuart, and M. Phillips, </author> <title> "GeomView User Manual", Geometry Center software, </title> <month> Nov. </month> <year> 1993. </year>
Reference-contexts: To produce graphical output, the user is usually required to have special and non-trivial domain knowledge on visualization programming, such as computer graphics and animation. Such domain knowledge cannot be quickly acquired. Although many systems are now available for algorithm visualization <ref> [23, 18, 12] </ref>, users of most systems still face problems in using the visualization tools when implementing geometric algorithms. To invoke visualization functions provided in these systems, the user oftentimes has to follow specific instructions to place special statements within programs.
Reference: [19] <author> S. Naher, </author> <title> "LEDA A Library of Efficient Data Types and Algorithms," </title> <institution> Max-Planck-institut fur informatik, Saarbrucken, </institution> <year> 1992. </year>
Reference-contexts: These classes are 1 Refer to the World Wide Web pages at http://www.eecs.nwu.edu/~theory/geomamos.html for more detailed description of this project. 2 called visualization classes. Visualization classes give the specifications of generic GeoSheet visualization operations and can be derived from existing non-visualization algorithm and data structure classes such as LEDA <ref> [17, 19] </ref> in a straightforward manner by following object-oriented approach. When created, the instances of visualization classes are provided with inherited operations and states for both algorithmic and visualization support. <p> The system maps program annotations to display events using a finite-state transducer. This design has precise semantics and specifications for the data type, resulting in a rigorous framework for describing the actions that occur in a 2-D animation under an X-window environment. 3. LEDA <ref> [17, 19] </ref>. This is developed by a group led by Mehlhorn at Max Planck Institute fur Informatik, Germany. It provides a sizable collection of data types and algorithms in a form which allows them to be used by non-experts.
Reference: [20] <author> O'Rourke, J. </author> <title> Art Gallery Theorems and Algorithms, </title> <address> New York, </address> <publisher> Oxford, Oxford University Press, </publisher> <year> 1987. </year>
Reference-contexts: It has been shown that this optimization problem is NP-hard [16]. It is known that bn=3c vertex guards are always sufficient, and sometimes necessary <ref> [20] </ref>, in order to see the entire polygon with n vertices. Because bn=3c guards are only sometimes necessary, it is often the case that the number of guards can be reduced to less the bn=3c.
Reference: [21] <author> B.V. Smith, </author> <title> The Xfig User Manual, </title> <year> 1993. </year>
Reference: [22] <author> P. Schorn, </author> <title> "An Object Oriented Workbench for Experimental Geometric Computation," </title> <booktitle> Proc. 2nd Canadian Conference in Computational Geometry, </booktitle> <address> Ottawa, </address> <month> August 6-10, </month> <year> 1990, </year> <pages> pp. 172-175. </pages>
Reference-contexts: The users can concentrate on implementing the desired algorithms and leave the display aspects like 3-D displaying, colors, rotating, shading, moving, etc., to GeomView. It runs on Silicon Graphics (SGI) IRIS workstations and NeXT workstations. 6. XYZ GeoBench <ref> [22] </ref>. It is designed by Nievergelt and Schorn [22] as a unified geometric programming environment, providing tools for creating, editing, and manipulating geometric objects; demonstrating and animating geometric algorithms; and reducing difficulties in the implementation, application and evaluation of geometric algorithms. <p> The users can concentrate on implementing the desired algorithms and leave the display aspects like 3-D displaying, colors, rotating, shading, moving, etc., to GeomView. It runs on Silicon Graphics (SGI) IRIS workstations and NeXT workstations. 6. XYZ GeoBench <ref> [22] </ref>. It is designed by Nievergelt and Schorn [22] as a unified geometric programming environment, providing tools for creating, editing, and manipulating geometric objects; demonstrating and animating geometric algorithms; and reducing difficulties in the implementation, application and evaluation of geometric algorithms.
Reference: [23] <author> J. T. Stasko, </author> <title> "Animating Algorithms with XTANGO," </title> <journal> SIGACT News, 23,2, </journal> <volume> Spring 92, </volume> <pages> pp. 67-72. </pages>
Reference-contexts: To produce graphical output, the user is usually required to have special and non-trivial domain knowledge on visualization programming, such as computer graphics and animation. Such domain knowledge cannot be quickly acquired. Although many systems are now available for algorithm visualization <ref> [23, 18, 12] </ref>, users of most systems still face problems in using the visualization tools when implementing geometric algorithms. To invoke visualization functions provided in these systems, the user oftentimes has to follow specific instructions to place special statements within programs. <p> Balsa and Zeus, which was implemented by Brown [5], capture meaningful state changes (significant events) in the program by adding procedure calls to the program in a process called program annotation for visualization purpose. It emphasizes demonstration of algorithm execution. 2. Xtango <ref> [23] </ref>. This is a system developed by Stasko in Georgia Institute of Technology for algorithm animation by using the path-transition paradigm to add animation to program interfaces [23]. It attempts to simplify program visualization focused on minimizing the 4 effort required to construct display code. <p> It emphasizes demonstration of algorithm execution. 2. Xtango <ref> [23] </ref>. This is a system developed by Stasko in Georgia Institute of Technology for algorithm animation by using the path-transition paradigm to add animation to program interfaces [23]. It attempts to simplify program visualization focused on minimizing the 4 effort required to construct display code. It is implemented in C and based on four abstract data types: location, image, path, and transition, with which the user constructs graphical objects and defines display events.
References-found: 23

