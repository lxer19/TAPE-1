URL: http://www.cs.virginia.edu/~son/publications/mrdb.ps
Refering-URL: http://www.cs.virginia.edu/~son/publications.html
Root-URL: http://www.cs.virginia.edu
Date: Abstract  
Pubnum: 1  
Abstract: Transactions in real-time database systems should be scheduled considering both data consistency and timing constraints. In addition, a real-time database must adapt to changes in the operating environment and guarantee the completion of critical tasks. The effects of scheduling decisions and concurrency control mechanisms for real-time database systems have typically been demonstrated in a simulated environment. In this paper we present a functional real-time relational database manager, called MRDB, which provides an operational platform for research in real-time database issues. Current research issues involving the development of run-time estimates for use in scheduling decisions, temporal consistency characteristics, and our efforts in using these are also discussed. 
Abstract-found: 1
Intro-found: 1
Reference: [Abb89] <author> R.Abbott, and H.Garcia-Molina, </author> <title> Scheduling Real-time Transactions with Disk Resident Data, </title> <booktitle> Proceedings of the 15th VLDB Conference, </booktitle> <year> 1989. </year>
Reference-contexts: Concurrency control mechanisms such as Priority inheritance, Priority ceiling protocol, Optimistic protocols, and Conditional restart have been studied and implemented in an attempt to manage the integration of real-time scheduling and data consistency requirements in real-time databases <ref> [Abb89, Car89, Har90, Hua90, Sha91] </ref>. They are typically compatible with time-driven scheduling, and meet both the required MRDB: A Multi-User Real-Time Database Testbed Sang H. Son, Young-Kuk Kim, and Robert C. <p> Furthermore, abort can be implemented by simply restoring before images. Numerous conict resolution policies such as High Priority, Priority Inheritance, Priority Ceiling and Conditional Priority Inheritance have been studied extensively in conjunction with a locking protocol environment <ref> [Abb89, Abb92, Hua90, Lin89, Sha88, Sha91] </ref>. The results indicate that such conict resolution policies are compatible with time-driven scheduling, and meet both the required goals of system response predictability and temporal consistency. <p> The results from the research conducted to date have indicated that run-time estimates are a viable option for improving scheduling decisions <ref> [Abb89, Abb92, Kim93, Son91] </ref>. The fact that critical information such as run-time costs can improve scheduling decisions and subsequently overall system performance is quite intuitive. However, the derivation of run-time estimates is not straightforward, and have typically been derived from simulation models.
Reference: [Abb92] <author> R.Abbott, and H.Garcia-Molina, </author> <title> Scheduling Real-time Transactions: a Performance Evaluation, </title> <journal> ACM Trans. on Database Systems, </journal> <volume> vol. 17, no. 3, </volume> <month> Sept. </month> <year> 1992, </year> <pages> pp 513-560. </pages>
Reference-contexts: The conventional real-time system attempts to ensure that no temporal constraints are violated. In real-time database systems, it is impossible to guarantee all temporal constraints because of the unpredictable data accesses, so the system must strive to minimize the number of constraints which are violated <ref> [Abb92, Kim93, Son93] </ref>. State-of-the-art database systems are typically not used in real-time applications due to two major inadequacies: lack of predictability and poor performance [Son90]. Current database systems do not schedule their transactions to meet response requirements and they commonly lock data objects to assure the consistency of the database. <p> Furthermore, abort can be implemented by simply restoring before images. Numerous conict resolution policies such as High Priority, Priority Inheritance, Priority Ceiling and Conditional Priority Inheritance have been studied extensively in conjunction with a locking protocol environment <ref> [Abb89, Abb92, Hua90, Lin89, Sha88, Sha91] </ref>. The results indicate that such conict resolution policies are compatible with time-driven scheduling, and meet both the required goals of system response predictability and temporal consistency. <p> All ineligible transactions are aborted and the MRDB client is informed of the decision. Eligible transactions remain in the system and are eligible for further processing. This approach differs from the non-tardy policy <ref> [Abb92] </ref> which accepts transactions that are currently not late, but may be in a position where it is physically impossible to make their deadlines. Only those transactions with feasible deadlines are considered to be eligible. <p> There are many ways for assigning priorities to real-time tasks. Three policies extensively studied by ear - 6 - lier researchers include First Come First Serve (FCFS), Earliest Deadline (ED) and Least Slack.(LS) <ref> [Abb92] </ref>. The primary weakness of FCFS is that it does not make use of deadline information. It discriminates against a newly arrived task with an urgent deadline in favor of an older task which may not have such an urgent deadline. <p> The results from the research conducted to date have indicated that run-time estimates are a viable option for improving scheduling decisions <ref> [Abb89, Abb92, Kim93, Son91] </ref>. The fact that critical information such as run-time costs can improve scheduling decisions and subsequently overall system performance is quite intuitive. However, the derivation of run-time estimates is not straightforward, and have typically been derived from simulation models.
Reference: [Ber87] <author> P.A.Bernstein, V.Hadzilacos, and N.Good-man, </author> <title> Concurrency Control and Recovery in Database Systems, </title> <publisher> Addison-Wesley Publishing Co., </publisher> <year> 1987. </year>
Reference-contexts: The MRDB system will process such relations without attaching any temporal meaning to them. The MRDB system employs a strict two-phase locking (2PL) protocol for concurrency control <ref> [Ber87] </ref>. The strict locking protocol was selected for concurrency control because of its prevalence in commercial applications system and because of its desirable characteristic of being recoverable and avoiding cascaded aborts. Furthermore, abort can be implemented by simply restoring before images.
Reference: [But90] <author> M. Butterbrodt, and J. Green, </author> <title> DOSE: A Vital Link in the Development of a Real-Time Relational Database Environment, Project Summary, </title> <institution> Naval Ocean Systems Center, </institution> <month> Jan. </month> <year> 1990. </year>
Reference-contexts: The results are based on database operations performed on relations of the format displayed in Figure 2. This relation represents the track data generated by the Interim Battle Group Tactical Trainer, for an outer air battle scenario being used at the Naval Ocean Systems Center <ref> [But90] </ref>. 4.3. Performance Results The results of run-time estimate performance measurements for four basic MRDB commands (project, select, union, set difference) operating on relations displayed in Figure 2 are given in Figure 3, and graphically displayed in Figure 4.
Reference: [Car89] <author> M.J.Carey, R.Jauhari, and M.Livny, </author> <title> Priority in DBMS Resource Scheduling, </title> <booktitle> Proceedings of the 15th VLDB Conference, </booktitle> <address> Amster-dam, </address> <year> 1989. </year>
Reference-contexts: Concurrency control mechanisms such as Priority inheritance, Priority ceiling protocol, Optimistic protocols, and Conditional restart have been studied and implemented in an attempt to manage the integration of real-time scheduling and data consistency requirements in real-time databases <ref> [Abb89, Car89, Har90, Hua90, Sha91] </ref>. They are typically compatible with time-driven scheduling, and meet both the required MRDB: A Multi-User Real-Time Database Testbed Sang H. Son, Young-Kuk Kim, and Robert C.
Reference: [Har90] <author> J. Haritsa, M. Carey, and M. Livny, </author> <title> Dynamic Real-Time Optimistic Concurrency Control, </title> <booktitle> IEEE Real-Time Systems Symposium, </booktitle> <address> Orlando, Florida, </address> <month> December </month> <year> 1990. </year>
Reference-contexts: Concurrency control mechanisms such as Priority inheritance, Priority ceiling protocol, Optimistic protocols, and Conditional restart have been studied and implemented in an attempt to manage the integration of real-time scheduling and data consistency requirements in real-time databases <ref> [Abb89, Car89, Har90, Hua90, Sha91] </ref>. They are typically compatible with time-driven scheduling, and meet both the required MRDB: A Multi-User Real-Time Database Testbed Sang H. Son, Young-Kuk Kim, and Robert C.
Reference: [Hua90] <author> J.Huang, J.A.Stankovic, K.Ramamritham, and D.Towsley, </author> <title> On Using Priority Inheritance In Real-Time Databases, </title> <institution> Dept. Computer and Information Science, University of Massachusetts, </institution> <month> November, </month> <year> 1990. </year>
Reference-contexts: Concurrency control mechanisms such as Priority inheritance, Priority ceiling protocol, Optimistic protocols, and Conditional restart have been studied and implemented in an attempt to manage the integration of real-time scheduling and data consistency requirements in real-time databases <ref> [Abb89, Car89, Har90, Hua90, Sha91] </ref>. They are typically compatible with time-driven scheduling, and meet both the required MRDB: A Multi-User Real-Time Database Testbed Sang H. Son, Young-Kuk Kim, and Robert C. <p> Furthermore, abort can be implemented by simply restoring before images. Numerous conict resolution policies such as High Priority, Priority Inheritance, Priority Ceiling and Conditional Priority Inheritance have been studied extensively in conjunction with a locking protocol environment <ref> [Abb89, Abb92, Hua90, Lin89, Sha88, Sha91] </ref>. The results indicate that such conict resolution policies are compatible with time-driven scheduling, and meet both the required goals of system response predictability and temporal consistency.
Reference: [IEEE93] <institution> Tenth IEEE Workshop on Real-Time Operating Systems and Software, </institution> <address> New York, New York, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: Appropriate methods and techniques for designing and implementing database systems that take timing constraints into account are playing an ever increasing role in determining the success or failure of real-time systems. In recent workshops <ref> [IEEE93, RTA93] </ref>, developers of real-time systems have pointed to the need for basic research in database systems that satisfy timing constraint requirements in collecting, updating, and retrieving shared data. Real-time database systems have many similarities with conventional database management systems and with conventional real-time systems.
Reference: [Kim93] <author> Y. Kim and S. H. Son, </author> <title> An Approach towards Predictable Real-Time Transaction Processing, </title> <booktitle> Euromicro Workshop on Real-Time Systems, Oulu, </booktitle> <address> Finland, </address> <month> June </month> <year> 1993, </year> <pages> pp 70-75. </pages>
Reference-contexts: The conventional real-time system attempts to ensure that no temporal constraints are violated. In real-time database systems, it is impossible to guarantee all temporal constraints because of the unpredictable data accesses, so the system must strive to minimize the number of constraints which are violated <ref> [Abb92, Kim93, Son93] </ref>. State-of-the-art database systems are typically not used in real-time applications due to two major inadequacies: lack of predictability and poor performance [Son90]. Current database systems do not schedule their transactions to meet response requirements and they commonly lock data objects to assure the consistency of the database. <p> However, because of their serious impact on scheduling decisions, the run-time estimates must be both predictable and reliable <ref> [Kim93] </ref>. Often a significant portion of a real-time database is highly perishable in the sense that it has value only if it is used in time. In addition to deadlines, therefore, other kinds of temporal information should be associated with data as well as transactions in a real-time database system. <p> The results from the research conducted to date have indicated that run-time estimates are a viable option for improving scheduling decisions <ref> [Abb89, Abb92, Kim93, Son91] </ref>. The fact that critical information such as run-time costs can improve scheduling decisions and subsequently overall system performance is quite intuitive. However, the derivation of run-time estimates is not straightforward, and have typically been derived from simulation models.
Reference: [Lee93] <author> J. Lee and S. H. Son, </author> <title> Using Dynamic Adjustment of Serialization Order for Real-Time Database Systems, </title> <booktitle> 14th IEEE Real-Time Systems Symposium, </booktitle> <address> Raleigh-Durham, North Carolina, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: It is based on a two-phase locking protocol and employs blocking, versus rollback, in an attempt to minimize the number of transactions that fail to meet their deadline. Protocols to schedule real-time transactions using the concept of dynamically adjusting the serialization order have been developed and evaluated <ref> [Lee93, Lin90, Son92] </ref>. Those approaches attempt to make scheduling decisions based mainly on transaction attributes such as priority, release time and deadline. These transaction characteristics are critical pieces in the scheduling puzzle, but they are not the only attributes available for use in solving the problem. <p> It is our goal to facilitate further development in this area. To that end we have oriented our work effort toward integrating and analyzing various conict resolution mechanisms, to include optimistic concurrency control mechanisms based on the notion of dynamic adjustment of serialization order <ref> [Son92, Lee93] </ref>. We also plan to extend the system to a distributed environment, capture system performance measurements, and improve the temporal functionality.
Reference: [Lee94] <author> J. Lee and S. H. Son, </author> <title> Concurrency Control Algorithms for Real-Time Database Systems, Performance of Concurrency Control Mechanisms in Centralized Database Systems, </title> <editor> V. Kumar (ed), </editor> <publisher> Prentice Hall, </publisher> <year> 1994. </year>
Reference-contexts: Previous studies using simulated environments have provided valuable information with respect to real-time database issues. However, performance results in some of the simulated studies are sometimes contradictory with each other since they made different assumptions about system environments <ref> [Lee94] </ref>. We believe that an operational environment for investigating real-time database issues will eliminate some of the problems associated with simulated systems and provide valuable and applicable insights to real-time database issues. The MRDB system is completely functional.
Reference: [Lin89] <author> K.Lin, </author> <title> Consistency Issues in Real-Time Da - 10 - tabase Systems, </title> <booktitle> Proc. 22nd, Hawaii International Conference on System Sciences, </booktitle> <month> Janu-ary </month> <year> 1989. </year>
Reference-contexts: Furthermore, abort can be implemented by simply restoring before images. Numerous conict resolution policies such as High Priority, Priority Inheritance, Priority Ceiling and Conditional Priority Inheritance have been studied extensively in conjunction with a locking protocol environment <ref> [Abb89, Abb92, Hua90, Lin89, Sha88, Sha91] </ref>. The results indicate that such conict resolution policies are compatible with time-driven scheduling, and meet both the required goals of system response predictability and temporal consistency.
Reference: [Lin90] <author> Y. Lin, and S. H. Son, </author> <title> Concurrency Control in Real-Time Databases by Dynamic Adjustment of Serialization Order, </title> <booktitle> 11th IEEE Real-Time Systems Symposium, </booktitle> <address> Orlando Florida, </address> <month> December </month> <year> 1990. </year>
Reference-contexts: It is based on a two-phase locking protocol and employs blocking, versus rollback, in an attempt to minimize the number of transactions that fail to meet their deadline. Protocols to schedule real-time transactions using the concept of dynamically adjusting the serialization order have been developed and evaluated <ref> [Lee93, Lin90, Son92] </ref>. Those approaches attempt to make scheduling decisions based mainly on transaction attributes such as priority, release time and deadline. These transaction characteristics are critical pieces in the scheduling puzzle, but they are not the only attributes available for use in solving the problem.
Reference: [Liu88] <author> Liu, J. W. S., K. J. Lin, and X. Song, </author> <title> Scheduling Hard Real-Time Transactions, </title> <booktitle> 5th IEEE Workshop on Real-Time OS and Software, </booktitle> <month> May </month> <year> 1988, </year> <pages> pp 112-260. </pages>
Reference-contexts: The system can compute the validity of data objects at the given time, provided the time of last modification and its validity curve <ref> [Liu88, Son91] </ref>. A real-time transaction should include its temporal consistency requirement which specifies the validity of data values accessed by the transaction.
Reference: [Ozso90] <author> G. Ozsoyoglu, CASE-DB: </author> <title> A Real-Time Database Management System, </title> <type> Tech Rep., </type> <institution> Case Western Reserve University, </institution> <year> 1990. </year>
Reference-contexts: It is also one of the major problems when designing a real-time scheduler which attempts to minimize the probability of transactions failing to meet their respective deadlines. Various approaches have been investigated to develop database systems to achieve this goal. The designers of CASE-DB <ref> [Ozso90] </ref> used an iterative evaluation technique coupled with a risk probability attribute in an attempt to provide as much information as possible within a given deadline.
Reference: [RTA93] <institution> IEEE Workshop on Real-Time Applications, </institution> <address> New York, New York, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: Appropriate methods and techniques for designing and implementing database systems that take timing constraints into account are playing an ever increasing role in determining the success or failure of real-time systems. In recent workshops <ref> [IEEE93, RTA93] </ref>, developers of real-time systems have pointed to the need for basic research in database systems that satisfy timing constraint requirements in collecting, updating, and retrieving shared data. Real-time database systems have many similarities with conventional database management systems and with conventional real-time systems.
Reference: [Sha88] <author> L.Sha, R.Rajkumar, and J.Lehoczky, </author> <title> Con-currency Control for Distributed Real-Time Databases, </title> <journal> ACM SIGMOD Record, </journal> <volume> vol. 17, no. 1, </volume> <month> March </month> <year> 1988, </year> <pages> pp. 82 - 98. </pages>
Reference-contexts: Furthermore, abort can be implemented by simply restoring before images. Numerous conict resolution policies such as High Priority, Priority Inheritance, Priority Ceiling and Conditional Priority Inheritance have been studied extensively in conjunction with a locking protocol environment <ref> [Abb89, Abb92, Hua90, Lin89, Sha88, Sha91] </ref>. The results indicate that such conict resolution policies are compatible with time-driven scheduling, and meet both the required goals of system response predictability and temporal consistency.
Reference: [Sha91] <author> L.Sha, R.Rajkumar, S. H. Son, and C. </author> <note> Chang, </note>
Reference-contexts: Concurrency control mechanisms such as Priority inheritance, Priority ceiling protocol, Optimistic protocols, and Conditional restart have been studied and implemented in an attempt to manage the integration of real-time scheduling and data consistency requirements in real-time databases <ref> [Abb89, Car89, Har90, Hua90, Sha91] </ref>. They are typically compatible with time-driven scheduling, and meet both the required MRDB: A Multi-User Real-Time Database Testbed Sang H. Son, Young-Kuk Kim, and Robert C. <p> The priority ceiling protocol, which was initially developed as a task scheduling protocol for real-time operating systems, has been extended for use in RTDBS <ref> [Sha91] </ref>. It is based on a two-phase locking protocol and employs blocking, versus rollback, in an attempt to minimize the number of transactions that fail to meet their deadline. <p> Furthermore, abort can be implemented by simply restoring before images. Numerous conict resolution policies such as High Priority, Priority Inheritance, Priority Ceiling and Conditional Priority Inheritance have been studied extensively in conjunction with a locking protocol environment <ref> [Abb89, Abb92, Hua90, Lin89, Sha88, Sha91] </ref>. The results indicate that such conict resolution policies are compatible with time-driven scheduling, and meet both the required goals of system response predictability and temporal consistency.
References-found: 18

