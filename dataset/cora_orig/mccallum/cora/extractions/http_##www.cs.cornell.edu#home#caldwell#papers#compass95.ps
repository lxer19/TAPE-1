URL: http://www.cs.cornell.edu/home/caldwell/papers/compass95.ps
Refering-URL: http://www.cs.cornell.edu/home/caldwell/papers.html
Root-URL: 
Title: Program in Formal Methods  
Author: Ricky W. Butler James L. Caldwell Victor A. Carre~no C. Michael Holloway Paul S. Miner Ben L. Di Vito 
Address: Hampton, Virginia  Hampton, Virginia  
Affiliation: Assessment Technology Branch NASA Langley Research Center  VGYAN Inc.  
Note: NASA Langley's Research and Technology-Transfer  
Abstract: This paper presents an overview of NASA Lang-ley's research program in formal methods. The major goals of this work are to make formal methods practical for use on life critical systems, and to orchestrate the transfer of this technology to U.S. industry through use of carefully designed demonstration projects. Several direct technology transfer efforts have been initiated that apply formal methods to critical subsystems of real aerospace computer systems. The research team consists of five NASA civil servants and contractors from Odyssey Research Associates, SRI International, and VGYAN Inc. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Nancy G. Leveson, </author> <title> "Software safety: What, why, and how", </title> <journal> Computing Surveys, </journal> <volume> vol. 18, </volume> <month> June </month> <year> 1986. </year>
Reference-contexts: 1 Rationale For Formal Methods Re search Program NASA Langley Research Center has been developing techniques for the design and validation of flight critical systems for over two decades. Although much progress has been made in developing methods to accommodate physical failures, design flaws remain a serious problem <ref> [1, 2, 3, 4, 5, 6, 7] </ref>.
Reference: [2] <author> Peter G. Neumann, </author> <title> "Illustrative risks to the public in the use of computer systems and related technology", </title> <journal> ACM Software Engineering Notes, </journal> <volume> vol. 19, </volume> <pages> pp. 16-29, </pages> <month> Jan. </month> <year> 1994. </year>
Reference-contexts: 1 Rationale For Formal Methods Re search Program NASA Langley Research Center has been developing techniques for the design and validation of flight critical systems for over two decades. Although much progress has been made in developing methods to accommodate physical failures, design flaws remain a serious problem <ref> [1, 2, 3, 4, 5, 6, 7] </ref>.
Reference: [3] <author> Margaret Hamilton, </author> <title> "Zero-defect software: the elusive goal", </title> <journal> IEEE Spectrum, </journal> <month> Mar. </month> <year> 1986. </year> <title> [4] "Saab blames Gripen crash on software", </title> <booktitle> Aviation Week & Space Technology, </booktitle> <month> Feb. </month> <year> 1989. </year>
Reference-contexts: 1 Rationale For Formal Methods Re search Program NASA Langley Research Center has been developing techniques for the design and validation of flight critical systems for over two decades. Although much progress has been made in developing methods to accommodate physical failures, design flaws remain a serious problem <ref> [1, 2, 3, 4, 5, 6, 7] </ref>.
Reference: [5] <author> Lauren Ruth Wiener, </author> <title> Digital Woes, </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1993, </year> <note> ISBN 0-201-62609-8. 6 This project was not initiated by Langley, but Langley has been a major participant in it. </note>
Reference-contexts: 1 Rationale For Formal Methods Re search Program NASA Langley Research Center has been developing techniques for the design and validation of flight critical systems for over two decades. Although much progress has been made in developing methods to accommodate physical failures, design flaws remain a serious problem <ref> [1, 2, 3, 4, 5, 6, 7] </ref>. <p> They soak up however much time or money, however many people we throw at them. The results are only modestly reliable. Even after the most thorough and rigorous testing some bugs remain. We can never test all threads through the system with all possible inputs <ref> [5] </ref>. The hardware industry also faces serious difficulties, as evidenced by the recent design error in the Pentium floating point unit.
Reference: [6] <author> W. Wayt Gibbs, </author> <title> "Software's Chronic Crisis", </title> <publisher> Scientific American, </publisher> <pages> pp. 86-95, </pages> <month> Sep. </month> <year> 1994. </year>
Reference-contexts: 1 Rationale For Formal Methods Re search Program NASA Langley Research Center has been developing techniques for the design and validation of flight critical systems for over two decades. Although much progress has been made in developing methods to accommodate physical failures, design flaws remain a serious problem <ref> [1, 2, 3, 4, 5, 6, 7] </ref>. <p> And three quarters of all large systems are "operating failures" that either do not function as intended or are not used at all. Despite 50 years of progress, the software industry remains years-perhaps decades-short of the mature engineering discipline needed to meet the demands of an information-age society <ref> [6] </ref>. Lauren Ruth Wiener describes the software problem in her book, Digital Woes: Why We Should Not Depend Upon Software: Software products|even programs of modest size|are among the most complex arti facts that humans produce, and software de-velopment projects are among our most complex undertakings.
Reference: [7] <author> Michael Rogers and David L. Gonzalez, </author> <title> "Can we trust our software?", </title> <address> Newsweek, </address> <month> Jan. </month> <year> 1990. </year>
Reference-contexts: 1 Rationale For Formal Methods Re search Program NASA Langley Research Center has been developing techniques for the design and validation of flight critical systems for over two decades. Although much progress has been made in developing methods to accommodate physical failures, design flaws remain a serious problem <ref> [1, 2, 3, 4, 5, 6, 7] </ref>.
Reference: [8] <institution> Key Technologies For the Year 2000, National Center for Advanced Technologies, </institution> <address> 1250 Eye Street N.W., Washington, D.C. 20005, </address> <month> June </month> <year> 1991. </year>
Reference-contexts: the major U.S. aerospace companies engaged in the research, development and manufacture of aircraft, missiles and space systems, and related propulsion, guidance, control and other equipment. tified "Provably Correct System Specification" and "Verification Formalism For Error-Free Specification" as key areas of research for future avionics software and ultrareliable electronics systems <ref> [8] </ref>. 1.1 Why Formal Methods Are Necessary Digital systems (both hardware and software) are notorious for their unpredictable and unreliable behavior: Studies have shown that for every six new large-scale software systems that are put into operation, two others are cancelled.
Reference: [9] <author> Michael Schrage, </author> <title> "`When the chips are down' will likely be heard more often in computing", The Washington Post, </title> <editor> p. B3, </editor> <month> December 16, </month> <year> 1994. </year>
Reference-contexts: In a recent Washington Post article, Michael Schrage wrote: Pentium type problems will prove to be the rule|rather than the isolated, aberrant exceptions|as new generations of complex hardware and software hit the market. More insidious errors and harmful bugs are in evitable. That is the new reality <ref> [9] </ref>. For life critical systems, errors may mean disaster. The potential for errors is high, because these systems must not only perform their functions correctly, but also must be able to recover from the effects of failing components.
Reference: [10] <author> Sam Owre, John Rushby, Natarajan Shankar, and Friedrich von Henke, </author> <title> "Formal verification for fault-tolerant architectures: Prolegomena to the design of pvs", </title> <journal> IEEE-TSE, </journal> <note> 1995, To appear. </note>
Reference-contexts: John Rushby writes: Organization of redundancy and fault-tolerance for ultra-high reliability is a challenging problem: redundancy management can account for half the software in a flight control system and, if less than perfect can itself become the primary source of system failure <ref> [10] </ref>. In a comprehensive assessment of formal methods [11], John Rushby discusses several notorious examples of such failures. These include the following: * The asynchronous operation of the AFTI-F16 and sensor noise led each channel to declare the other channels failed in flight test 44. <p> NASA Lang-ley has not sponsored the development of any general-purpose theorem provers. However, the technology transfer projects have lead to significant improvements in the Prototype Verification System (PVS) theorem prover <ref> [10] </ref> that SRI International (SRI) is developing. Several domain-specific tools are being sponsored: (1) Tablewise, (2) VHDL-analysis tool, and (3) DRS. These tools are discussed in later sections. It is also important to realize that formal methods include a large class of mathematical techniques and tools. <p> Our program has driven the development of PVS, the most advanced general-purpose theorem prover in the world <ref> [10] </ref>, and the Odyssey Research Associates VHDL-verification tool. Commercial industry has been anxious to work with our team, although we have not had sufficient resources to work with as many as we would have liked.
Reference: [11] <author> John Rushby, </author> <title> "Formal methods and digital systems validation for airborne systems", </title> <institution> NASA CR-4551, </institution> <year> 1993. </year>
Reference-contexts: In a comprehensive assessment of formal methods <ref> [11] </ref>, John Rushby discusses several notorious examples of such failures. These include the following: * The asynchronous operation of the AFTI-F16 and sensor noise led each channel to declare the other channels failed in flight test 44. The plane was flown home on a single channel. <p> The handbook provides detailed information about digital system design and validation and is used by the FAA certifiers. In preparation for this chapter, Rushby produced a comprehensive analysis of formal methods <ref> [11] </ref>.
Reference: [12] <author> John C. Knight and Nancy G. Leveson, </author> <title> "An experimental evaluation of the assumptions of independence in multiversion programming", </title> <journal> IEEE-TSE, </journal> <volume> vol. SE-12, </volume> <pages> pp. 96-109, </pages> <month> Jan. </month> <year> 1986. </year>
Reference-contexts: By assuming independence, one can obtain ultrareliable-level estimates of system reliability, even with failure rates for the individual versions on the order of 10 4 =hour. Unfortunately, the independence assumption has been rejected at the 99% confidence level in several experiments for low reliability software <ref> [12, 13] </ref>. Furthermore, the independence assumption cannot be validated for high reliability software because of the exorbitant test times required. If one cannot assume independence then one must measure correlations.
Reference: [13] <author> John. C. Knight and Nancy. G. Leveson, </author> <title> "A reply to the criticisms of the Knight & Leveson experiment", </title> <booktitle> ACM SIGSOFT Software Engineering Notes, </booktitle> <month> Jan. </month> <year> 1990. </year>
Reference-contexts: By assuming independence, one can obtain ultrareliable-level estimates of system reliability, even with failure rates for the individual versions on the order of 10 4 =hour. Unfortunately, the independence assumption has been rejected at the 99% confidence level in several experiments for low reliability software <ref> [12, 13] </ref>. Furthermore, the independence assumption cannot be validated for high reliability software because of the exorbitant test times required. If one cannot assume independence then one must measure correlations.
Reference: [14] <author> Ricky W. Butler and George B. Finelli, </author> <title> "The infeasibility of quantifying the reliability of life-critical real-time software", </title> <journal> IEEE-TSE, </journal> <volume> vol. 19, </volume> <pages> pp. 3-12, </pages> <month> Jan. </month> <year> 1993. </year>
Reference-contexts: Therefore, it is not possible, within feasible amounts of testing time, to establish that design diversity achieves ultrareliability. Consequently, design diversity can create an "illusion" of ultrareliability without actually providing it. For a more detailed discussion, see <ref> [14] </ref>. We believe that formal methods offer the only intellectually defensible method for handling design faults.
Reference: [15] <author> Geoff Barrett, </author> <title> "Formal methods applied to a floating-point number system", </title> <journal> IEEE-TSE, </journal> <volume> vol. 15, </volume> <pages> pp. 611-621, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: The tremendous scientific potential of formal methods has been recognized by theoreticians for a long time, but the formal techniques have remained the province of a few academicians, with only a few exceptions such as the Transputer <ref> [15] </ref> and the IBM CICS project [16]. The first five years of NASA Lang-ley's program have advanced the capabilities of formal methods to the point where commercial exploitation is near. There are many different types of formal methods with various degrees of rigor.
Reference: [16] <author> Iain Houston and Steve King, </author> <title> "CICS project report: Experiences and results from the use of Z in IBM", in VDM '91: </title> <booktitle> Formal Software Development Methods, </booktitle> <pages> pp. 588-596, </pages> <address> Noordwijker-hout, The Netherlands, </address> <month> Oct. </month> <year> 1991. </year> <editor> Springer Ver-lag, </editor> <volume> Volume 1: </volume> <booktitle> Conference Contributions. </booktitle>
Reference-contexts: The tremendous scientific potential of formal methods has been recognized by theoreticians for a long time, but the formal techniques have remained the province of a few academicians, with only a few exceptions such as the Transputer [15] and the IBM CICS project <ref> [16] </ref>. The first five years of NASA Lang-ley's program have advanced the capabilities of formal methods to the point where commercial exploitation is near. There are many different types of formal methods with various degrees of rigor.
Reference: [17] <author> Ricky W. Butler and Sally C. Johnson, </author> <title> "Formal methods for life-critical software", </title> <booktitle> in Computing in Aerospace 9 Conference, </booktitle> <pages> pp. 319-329, </pages> <address> San Diego, CA, </address> <month> Oct. </month> <year> 1993. </year>
Reference-contexts: Although a complete formal verification of a large complex system is impractical at this time, a great increase in confidence in the system can be obtained by the use of formal methods at key locations in the system. For more information on the basic principles of formal methods, see <ref> [17] </ref>. 2 Goals of Our Program, Strategy, and Research Team The major goals of the NASA Langley research program are to make formal methods practical for use on life critical systems developed in the United States, and to orchestrate the transfer of this technology to industry through use of carefully designed
Reference: [18] <author> Ricky W. Butler, (ed.), </author> <booktitle> "NASA formal methods workshop 1990", NASA CP-10052, </booktitle> <month> Nov. </month> <year> 1990. </year>
Reference-contexts: Langley has also been sponsoring a series of workshops on formal methods. The first workshop, held in August 1990, focused on building cooperation and communication between U.S. formal methods researchers <ref> [18] </ref>. The second, held in August 1992, focused on education of the U.S. aerospace industry about formal methods [19]. A third workshop will be held in May 1995.
Reference: [19] <author> Sally C. Johnson, C. Michael Holloway, and Ricky W. Butler, </author> <booktitle> "Second NASA formal methods workshop 1992", NASA CP-10110, </booktitle> <month> Nov. </month> <year> 1992. </year>
Reference-contexts: Langley has also been sponsoring a series of workshops on formal methods. The first workshop, held in August 1990, focused on building cooperation and communication between U.S. formal methods researchers [18]. The second, held in August 1992, focused on education of the U.S. aerospace industry about formal methods <ref> [19] </ref>. A third workshop will be held in May 1995. Another component of our technology transfer strategy, is to use the NASA's Small Business Innovative Research (SBIR) program to assist small businesses in the development of commercially viable formal methods tools and techniques.
Reference: [20] <institution> Computer Resource Management Inc., </institution> <note> Digital Systems Validation Handbook volume III, DOT/FAA/CT-88/10, FAA. </note>
Reference-contexts: John Rushby has written a chapter for the FAA Digital Systems Validation Handbook Volume III on formal methods <ref> [20] </ref>. The handbook provides detailed information about digital system design and validation and is used by the FAA certifiers. In preparation for this chapter, Rushby produced a comprehensive analysis of formal methods [11].
Reference: [21] <author> David W. Best, Nick M. Mykris Charles E. Kress, Jeffrey D. Russell, and William J. Smith, </author> <title> "An advanced-architecture CMOS/SOS microprocessor", </title> <journal> IEEE Micro, </journal> <volume> vol. 2, </volume> <pages> pp. 11-26, </pages> <month> Aug. </month> <year> 1982. </year>
Reference-contexts: The goal was to investigate the application of formal techniques to a commercial mi croprocessor design, the Collins AAMP5 micropro-cessor. The AAMP5 is the latest member of the CAPS/AAMP family of microprocessors and is object code compatible with the AAMP2 processor <ref> [21] </ref>. The CAPS/AAMP family of microprocessors has been widely used by the commercial and military aerospace industries.
Reference: [22] <author> Natarajan Shankar, </author> <title> "Verification of real-time systems using PVS", </title> <booktitle> In Courcoubetis [72], </booktitle> <pages> pp. 280-291. </pages>
Reference-contexts: The first phase of the project consisted of the formal specification of the AAMP5 instruction set and mi-croarchitecture using SRI's PVS <ref> [22, 23] </ref> While formally specifying the microprocessor, two design errors were discovered in the microcode. These errors were uncovered as a result of questions raised by the formal methods researchers at Collins and SRI while seeking to formally specify the behavior of the microprocessor [24].
Reference: [23] <author> Natarajan Shankar, Sam Owre, and John Rushby, </author> <title> PVS Tutorial, </title> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> Feb. </month> <year> 1993, </year> <title> Also appears in Tutorial Notes, </title> <booktitle> Formal Methods Europe '93: Industrial-Strength Formal Methods, </booktitle> <pages> pages 357-406, </pages> <address> Odense, Denmark, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: The first phase of the project consisted of the formal specification of the AAMP5 instruction set and mi-croarchitecture using SRI's PVS <ref> [22, 23] </ref> While formally specifying the microprocessor, two design errors were discovered in the microcode. These errors were uncovered as a result of questions raised by the formal methods researchers at Collins and SRI while seeking to formally specify the behavior of the microprocessor [24].
Reference: [24] <author> Steve Miller and Mandayam Srivas, </author> <title> "Formal verification of the AAMP5 microprocessor: A case study in the industrial use of formal methods", </title> <booktitle> in WIFT'95 Workshop on Industrial-strength Formal Specification Techniques, </booktitle> <address> Boca Raton, Florida USA, </address> <month> Apr. </month> <year> 1995, </year> <note> To appear. </note>
Reference-contexts: These errors were uncovered as a result of questions raised by the formal methods researchers at Collins and SRI while seeking to formally specify the behavior of the microprocessor <ref> [24] </ref>. The Collins formal methods team believes that this effort has prevented two significant errors from going into the first fabrication of the microprocessor. The second phase of the project consisted of formally verifying the microcode of a representative subset of the AAMP5 instructions. <p> Collins seeded two errors in the microcode provided to SRI in an attempt to assess the effectiveness of formal verification. Both of these errors (and suggested corrections) were discovered while proving the microcode correct <ref> [24] </ref>. It is noteworthy that both the level 2 and level 3 applications of formal methods were successful in finding bugs.
Reference: [25] <author> John Kelly, et. al., </author> <title> "Formal methods demonstration project for space applications phase i case study: Space shuttle orbit dap jet", </title> <month> Dec. </month> <year> 1993. </year>
Reference-contexts: The NASA Formal Methods Demonstration Project for Space Applications focuses on the use of formal methods for requirements analysis because the team believes that formal methods are more practically applied to requirements analysis than to late-lifecycle development phases <ref> [25] </ref>. A series of trial projects was conducted and cost effectiveness data were collected. The team's efforts in 1993 were concentrated on a single pilot project (discussed in a subsequent section), while efforts beginning in 1994 have been more diffuse.
Reference: [26] <author> Ricky W. Butler, </author> <title> "NASA Langley's research program in formal methods", </title> <booktitle> in COMPASS 91, </booktitle> <address> Gaithersburg, MD, </address> <month> June </month> <year> 1991. </year>
Reference-contexts: This section omits much of the early work described at COMPASS 91 <ref> [26] </ref>. 4.1 Fault-tolerant Systems The goal of this focus area was to create a formalized theory of fault tolerance including redundancy management, clock synchronization, Byzantine agreement, voting, etc. Much of the theory developed here is applicable to future fault-tolerant systems designs.
Reference: [27] <author> Sally C. Johnson and Ricky W. Butler, </author> <title> "Design for validation", </title> <journal> IEEE Aerospace and Electronics Systems, </journal> <pages> pp. 38-43, </pages> <month> Jan. </month> <year> 1992. </year>
Reference-contexts: It is hoped that the RCP will serve as a demonstration of the formal methods process and provide a foundation that can be expanded and used for future aerospace applications. The RCP architecture was designed in accordance with a system design philosophy called "Design For Validation" <ref> [27, 28] </ref>. The basic tenets of this design philosophy are as follows: 1. A system is designed in such a manner that complete and accurate models can be constructed to estimate critical properties such as reliability and performance.
Reference: [28] <author> Sally C. Johnson and Ricky W. Butler, </author> <title> "Design for validation", </title> <booktitle> in AIAA/IEEE 10th Digital Avionics Systems Conference, </booktitle> <pages> pp. 487-492, </pages> <address> Los Angeles, California, </address> <month> Oct. </month> <year> 1991. </year>
Reference-contexts: It is hoped that the RCP will serve as a demonstration of the formal methods process and provide a foundation that can be expanded and used for future aerospace applications. The RCP architecture was designed in accordance with a system design philosophy called "Design For Validation" <ref> [27, 28] </ref>. The basic tenets of this design philosophy are as follows: 1. A system is designed in such a manner that complete and accurate models can be constructed to estimate critical properties such as reliability and performance.
Reference: [29] <author> Leslie Lamport and P. M. Melliar-Smith, </author> <title> "Synchronizing clocks in the presence of faults", </title> <journal> Journal Of The ACM, </journal> <volume> vol. 32, </volume> <pages> pp. 52-78, </pages> <month> Jan. </month> <year> 1985. </year>
Reference-contexts: This allows a more explicit modeling of interprocessor communication and the time phasing of computation, communication, and voting. At the fourth level (DA), the assumptions of the synchronous model are discharged through use of the interactive-convergence clock synchronization algorithm <ref> [29] </ref>. In the LE model, a more detailed specification of the activities on a local processor are presented. In particular, three areas of activity are elaborated in detail: (1) task dispatching and execution, (2) minimal voting, and (3) interprocessor communication via mailboxes. <p> The verification process involves two important steps: (1) verification that the algorithm satisfies the maximum skew property and (2) verification that the digital circuitry correctly implements the algorithm. The first step was completed by SRI International. The first such proof was accomplished during the design and verification of SIFT <ref> [29] </ref>. The proof was done by hand in the style of journal proofs. More recently this proof step was mechanically verified using the Ehdm theorem prover [39, 40]. In addition, SRI mechanically verified Schneider's clock synchronization paradigm [41] using Ehdm [42, 43].
Reference: [30] <author> Ben L. Di Vito, Ricky W. Butler, and James L. Caldwell, </author> <title> II, "Formal design and verification of a reliable computing platform for real-time control (Phase 1 results)", </title> <institution> NASA TM-102716, </institution> <month> Oct. </month> <year> 1990. </year>
Reference-contexts: The top two levels of the RCP were originally formally specified in standard mathematical notation and connected via mathematical (i.e. level 2 formal methods) proof <ref> [30, 31, 32] </ref>. Under the assumption that a majority of processors is working in each frame, the proof establishes that the replicated system computes the same results as a single processor system not subject to failures.
Reference: [31] <author> Ben L. Di Vito, Ricky W. Butler, and James L. Caldwell, </author> <title> "High level design proof of a reliable computing platform", in Dependable Computing for Critical Applications 2, </title> <booktitle> Dependable Computing and Fault-Tolerant Systems, </booktitle> <pages> pp. 279-306. </pages> <publisher> Springer Verlag, </publisher> <address> Wien New York, </address> <year> 1992. </year>
Reference-contexts: The top two levels of the RCP were originally formally specified in standard mathematical notation and connected via mathematical (i.e. level 2 formal methods) proof <ref> [30, 31, 32] </ref>. Under the assumption that a majority of processors is working in each frame, the proof establishes that the replicated system computes the same results as a single processor system not subject to failures.
Reference: [32] <author> Ben L. Di Vito and Ricky W. Butler, </author> <title> "Provable transient recovery for frame-based, fault-tolerant computing systems", </title> <booktitle> in Real-Time Systems Symposium, </booktitle> <address> Phoenix, Az, </address> <month> Dec. </month> <year> 1992. </year>
Reference-contexts: The top two levels of the RCP were originally formally specified in standard mathematical notation and connected via mathematical (i.e. level 2 formal methods) proof <ref> [30, 31, 32] </ref>. Under the assumption that a majority of processors is working in each frame, the proof establishes that the replicated system computes the same results as a single processor system not subject to failures.
Reference: [33] <author> John Rushby, </author> <title> "Formal specification and verification of a fault-masking and transient-recovery model for digital flight-control systems", </title> <institution> NASA CR-4384, </institution> <month> July </month> <year> 1991. </year>
Reference-contexts: Sufficient conditions were developed that guarantee that the replicated system recovers from transient faults within a bounded amount of time. SRI subsequently generalized the models and constructed a mechanical proof in Ehdm <ref> [33] </ref>. Next, the local team developed the third and fourth level models. The top two levels and the two new models (i.e. DS and DA) were then specified in Ehdm and all of the proofs were done mechanically using the Ehdm 5.2 prover [34, 35].
Reference: [34] <author> Ricky W. Butler and Ben L. Di Vito, </author> <title> "Formal design and verification of a reliable computing platform for real-time control (Phase 2 results)", </title> <institution> NASA TM-104196, </institution> <month> Jan. </month> <year> 1992. </year>
Reference-contexts: Next, the local team developed the third and fourth level models. The top two levels and the two new models (i.e. DS and DA) were then specified in Ehdm and all of the proofs were done mechanically using the Ehdm 5.2 prover <ref> [34, 35] </ref>. Both the DA minv model and the LE model were specified formally and have been verified using the Ehdm verification system [36]. All RCP specifications and proofs are available electronically via the Internet using anonymous FTP or World Wide Web (WWW) access.
Reference: [35] <author> Ben L. Di Vito and Ricky W. Butler, </author> <title> "Formal techniques for synchronized fault-tolerant systems", in Dependable Computing for Critical Applications 3, </title> <booktitle> Dependable Computing and Fault-Tolerant Systems, </booktitle> <pages> pp. 279-306. </pages> <publisher> Springer Verlag, </publisher> <address> Wien New York, </address> <year> 1993. </year>
Reference-contexts: Next, the local team developed the third and fourth level models. The top two levels and the two new models (i.e. DS and DA) were then specified in Ehdm and all of the proofs were done mechanically using the Ehdm 5.2 prover <ref> [34, 35] </ref>. Both the DA minv model and the LE model were specified formally and have been verified using the Ehdm verification system [36]. All RCP specifications and proofs are available electronically via the Internet using anonymous FTP or World Wide Web (WWW) access.
Reference: [36] <author> Ricky W. Butler, Ben L. Di Vito, and C. Michael Holloway, </author> <title> "Formal design and verification of a reliable computing platform for real-time control (Phase 3 results)", </title> <institution> NASA TM-109140, </institution> <month> Aug. </month> <year> 1994. </year>
Reference-contexts: DS and DA) were then specified in Ehdm and all of the proofs were done mechanically using the Ehdm 5.2 prover [34, 35]. Both the DA minv model and the LE model were specified formally and have been verified using the Ehdm verification system <ref> [36] </ref>. All RCP specifications and proofs are available electronically via the Internet using anonymous FTP or World Wide Web (WWW) access. Anonymous FTP access is available through the host deduction.larc.nasa.gov using the path pub/fm/larc/RCP-specs.
Reference: [37] <author> Leslie Lamport, </author> <title> "Using time instead of timeout for fault-tolerant distributed systems", </title> <journal> ACM TOPLAS, </journal> <volume> vol. 6, </volume> <pages> pp. 254-280, </pages> <month> Apr. </month> <year> 1984. </year>
Reference-contexts: Although in many systems the clock synchronization function has not been decoupled from the applications (e.g. the redundant versions of the applications synchronize by messages), research and experience have led us to believe that solving the synchronization problem independently from the applications design can provide significant simplification of the system <ref> [37, 38] </ref>. The operating system is built on top of this clock-synchronization foundation. Of course, the correctness of this foundation is essential. Thus, the clock synchronization algorithm and its implementation are prime candidates for formal methods. The verification strategy shown in figure 1 is being explored.
Reference: [38] <editor> Jack Goldberg et al., </editor> <title> "Development and analysis of the software implemented fault-tolerance (SIFT) computer", </title> <institution> NASA CR-172146, </institution> <year> 1984. </year>
Reference-contexts: Although in many systems the clock synchronization function has not been decoupled from the applications (e.g. the redundant versions of the applications synchronize by messages), research and experience have led us to believe that solving the synchronization problem independently from the applications design can provide significant simplification of the system <ref> [37, 38] </ref>. The operating system is built on top of this clock-synchronization foundation. Of course, the correctness of this foundation is essential. Thus, the clock synchronization algorithm and its implementation are prime candidates for formal methods. The verification strategy shown in figure 1 is being explored.
Reference: [39] <author> John Rushby and Friedrich von Henke, </author> <title> "Formal verification of a fault-tolerant clock synchronization algorithm", </title> <institution> NASA CR-4239, </institution> <month> June </month> <year> 1989. </year>
Reference-contexts: The first step was completed by SRI International. The first such proof was accomplished during the design and verification of SIFT [29]. The proof was done by hand in the style of journal proofs. More recently this proof step was mechanically verified using the Ehdm theorem prover <ref> [39, 40] </ref>. In addition, SRI mechanically verified Schneider's clock synchronization paradigm [41] using Ehdm [42, 43]. A further generalization was found at NASA Langley [44] 4 .
Reference: [40] <author> John Rushby and Friedrich von Henke, </author> <title> "Formal verification of algorithms for critical systems", </title> <journal> IEEE-TSE, </journal> <volume> vol. 19, </volume> <pages> pp. 13-23, </pages> <month> Jan. </month> <year> 1993. </year>
Reference-contexts: The first step was completed by SRI International. The first such proof was accomplished during the design and verification of SIFT [29]. The proof was done by hand in the style of journal proofs. More recently this proof step was mechanically verified using the Ehdm theorem prover <ref> [39, 40] </ref>. In addition, SRI mechanically verified Schneider's clock synchronization paradigm [41] using Ehdm [42, 43]. A further generalization was found at NASA Langley [44] 4 .
Reference: [41] <author> Fred B. Schneider, </author> <title> "Understanding protocols for Byzantine clock synchronization", </title> <type> Technical Report 87-859, </type> <institution> Cornell University, </institution> <address> Ithaca, NY, </address> <month> Aug. </month> <year> 1987. </year>
Reference-contexts: The proof was done by hand in the style of journal proofs. More recently this proof step was mechanically verified using the Ehdm theorem prover [39, 40]. In addition, SRI mechanically verified Schneider's clock synchronization paradigm <ref> [41] </ref> using Ehdm [42, 43]. A further generalization was found at NASA Langley [44] 4 .
Reference: [42] <author> Natarajan Shankar, </author> <title> "Mechanical verification of a schematic Byzantine clock synchronization algorithm", </title> <institution> NASA CR-4386, </institution> <month> July </month> <year> 1991. </year>
Reference-contexts: The proof was done by hand in the style of journal proofs. More recently this proof step was mechanically verified using the Ehdm theorem prover [39, 40]. In addition, SRI mechanically verified Schneider's clock synchronization paradigm [41] using Ehdm <ref> [42, 43] </ref>. A further generalization was found at NASA Langley [44] 4 .
Reference: [43] <author> Natarajan Shankar, </author> <title> "Mechanical verification of a generalized protocol for byzantine fault-tolerant clock synchronization", </title> <booktitle> vol. 571 of Lecture Notes in Computer Science, </booktitle> <pages> pp. 217-236. </pages> <publisher> Springer Ver-lag, </publisher> <month> Jan. </month> <year> 1992. </year>
Reference-contexts: The proof was done by hand in the style of journal proofs. More recently this proof step was mechanically verified using the Ehdm theorem prover [39, 40]. In addition, SRI mechanically verified Schneider's clock synchronization paradigm [41] using Ehdm <ref> [42, 43] </ref>. A further generalization was found at NASA Langley [44] 4 .
Reference: [44] <author> Paul S. Miner, </author> <title> "An extension to schneider's general paradigm for fault-tolerant clock synchronization", </title> <institution> NASA TM-107634, Langley Research Center, Hampton, VA, </institution> <year> 1992. </year>
Reference-contexts: The proof was done by hand in the style of journal proofs. More recently this proof step was mechanically verified using the Ehdm theorem prover [39, 40]. In addition, SRI mechanically verified Schneider's clock synchronization paradigm [41] using Ehdm [42, 43]. A further generalization was found at NASA Langley <ref> [44] </ref> 4 . The design of a digital circuit to distribute clock values in support of fault-tolerant synchronization was completed by SRI and was partially verified. 5 CLI reproduced the SRI verification of the interactive convergence algorithm using the Boyer-Moore theorem prover [45]. <p> NASA Langley researchers designed and implemented a fault-tolerant clock synchronization circuit capable of recovery from transient faults <ref> [46, 47, 44] </ref>. The top-level specification for the design is the Ehdm 4 The bounded delay assumption was shown to follow from the other assumptions of the theory. 5 Unlike the NASA circuit, the SRI intent is that the convergence algorithm be implemented in software. verification of Schneider's paradigm.
Reference: [45] <author> William D. Young, </author> <title> "Verifying the interactive convergence clock synchronization algorithm using the boyer-moore theorem prover", </title> <institution> NASA CR-189649, </institution> <month> Apr. </month> <year> 1992. </year>
Reference-contexts: The design of a digital circuit to distribute clock values in support of fault-tolerant synchronization was completed by SRI and was partially verified. 5 CLI reproduced the SRI verification of the interactive convergence algorithm using the Boyer-Moore theorem prover <ref> [45] </ref>. NASA Langley researchers designed and implemented a fault-tolerant clock synchronization circuit capable of recovery from transient faults [46, 47, 44].
Reference: [46] <author> Paul S. Miner, </author> <title> "Verification of fault-tolerant clock synchronization systems", </title> <institution> NASA TP-3349, </institution> <month> Nov. </month> <year> 1993. </year>
Reference-contexts: NASA Langley researchers designed and implemented a fault-tolerant clock synchronization circuit capable of recovery from transient faults <ref> [46, 47, 44] </ref>. The top-level specification for the design is the Ehdm 4 The bounded delay assumption was shown to follow from the other assumptions of the theory. 5 Unlike the NASA circuit, the SRI intent is that the convergence algorithm be implemented in software. verification of Schneider's paradigm.
Reference: [47] <author> Paul S. Miner, </author> <title> "A verified design of a fault-tolerant clock synchronization circuit: Preliminary investigations", </title> <institution> NASA TM-107568, </institution> <month> Mar. </month> <year> 1992. </year>
Reference-contexts: NASA Langley researchers designed and implemented a fault-tolerant clock synchronization circuit capable of recovery from transient faults <ref> [46, 47, 44] </ref>. The top-level specification for the design is the Ehdm 4 The bounded delay assumption was shown to follow from the other assumptions of the theory. 5 Unlike the NASA circuit, the SRI intent is that the convergence algorithm be implemented in software. verification of Schneider's paradigm.
Reference: [48] <author> Paul S. Miner, Peter A. Padilla, and Wilfredo Torres, </author> <title> "A provably correct design of a fault-tolerant clock synchronization circuit", </title> <booktitle> in 11th Digital Avionics Systems Conference, </booktitle> <pages> pp. 341-346, </pages> <address> Seattle, WA, </address> <month> Oct. </month> <year> 1992. </year>
Reference-contexts: The circuit was implemented with programmable logic devices (PLDs) and FOXI fiber optic communications chips <ref> [48] </ref>. Using a combination of formal techniques, a verified clock synchronization circuit design has also been developed [49]. The principal design tool was the Digital Design Derivation system (DDD) developed by Indiana University [50].
Reference: [49] <author> Paul S. Miner, Shyamsundar Pullela, and Steven D. Johnson, </author> <title> "Interaction of formal design systems in the development of a fault-tolerant clock synchronization circuit", </title> <booktitle> in 13th Symposium on Reliable Distributed Systems, </booktitle> <pages> pp. 128-137, </pages> <publisher> Dana Point, </publisher> <address> California, </address> <month> October </month> <year> 1994. </year>
Reference-contexts: The circuit was implemented with programmable logic devices (PLDs) and FOXI fiber optic communications chips [48]. Using a combination of formal techniques, a verified clock synchronization circuit design has also been developed <ref> [49] </ref>. The principal design tool was the Digital Design Derivation system (DDD) developed by Indiana University [50]. Some design optimizations that were not possible within DDD were verified using PVS. 4.1.3 Byzantine Agreement Algorithms Fault-tolerant systems, although internally redundant, must deal with single-source information from the external world.
Reference: [50] <author> Bhaskar Bose, </author> <title> "DDD ATransformation system for Digital Design Derivation", </title> <type> Technical Report 331, </type> <institution> Indiana University, Computer Science Department, </institution> <month> May </month> <year> 1991. </year>
Reference-contexts: The circuit was implemented with programmable logic devices (PLDs) and FOXI fiber optic communications chips [48]. Using a combination of formal techniques, a verified clock synchronization circuit design has also been developed [49]. The principal design tool was the Digital Design Derivation system (DDD) developed by Indiana University <ref> [50] </ref>. Some design optimizations that were not possible within DDD were verified using PVS. 4.1.3 Byzantine Agreement Algorithms Fault-tolerant systems, although internally redundant, must deal with single-source information from the external world. <p> DDD implements a formal design algebra that allows a designer to transform a formal specification into a correct implementation <ref> [50] </ref>. Bose formally derived the DDD-FM9001 [70] microprocessor from Hunt's top-level specification of the FM9001 microprocessor [71]. 5 Some Observations Some general conclusions can be drawn from the collective experience of the Langley-sponsored projects.
Reference: [51] <author> Leslie Lamport, Robert Shostak, and Marshall Pease, </author> <title> "The Byzantine Generals problem", </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> vol. 4, </volume> <pages> pp. 382-401, </pages> <month> July </month> <year> 1982. </year>
Reference-contexts: Thus, the sensor values (the complete redundant suite) must be distributed to each processor in a manner which guarantees that all working processors receive exactly the same value even in the presence of some faulty processors. This is the classic Byzantine Generals problem <ref> [51] </ref>; algorithms to solve the problem are called Byzantine agreement algorithms. CLI investigated the formal verification and implementation of such algorithms. They formally verified the original Marshall, Shostak, and Lamport version of this algorithm using the Boyer Moore theorem prover [52].
Reference: [52] <author> William R. Bevier and William D. Young, </author> <title> "Machine checked proofs of the design and implementation of a fault-tolerant circuit", </title> <institution> NASA CR-182099, </institution> <month> Nov. </month> <year> 1990. </year>
Reference-contexts: This is the classic Byzantine Generals problem [51]; algorithms to solve the problem are called Byzantine agreement algorithms. CLI investigated the formal verification and implementation of such algorithms. They formally verified the original Marshall, Shostak, and Lamport version of this algorithm using the Boyer Moore theorem prover <ref> [52] </ref>. They also implemented this algorithm down to the register-transfer level and demonstrated that it implements the mathematical algorithm [53], and then subsequently verified the design down to a hardware description language HDL developed at CLI [54].
Reference: [53] <author> William R. Bevier and William D. Young, </author> <title> "The proof of correctness of a fault-tolerant circuit design", </title> <booktitle> in Second IFIP Conference on Dependable Computing For Critical Applications, </booktitle> <pages> pp. 107-114, </pages> <address> Tucson, Arizona, </address> <month> Feb. </month> <year> 1991. </year>
Reference-contexts: CLI investigated the formal verification and implementation of such algorithms. They formally verified the original Marshall, Shostak, and Lamport version of this algorithm using the Boyer Moore theorem prover [52]. They also implemented this algorithm down to the register-transfer level and demonstrated that it implements the mathematical algorithm <ref> [53] </ref>, and then subsequently verified the design down to a hardware description language HDL developed at CLI [54]. A more efficient mechanical proof of the oral messages algorithm was also developed by SRI [55]. ORA also investigated the formal verification of Byzantine Generals algorithms.
Reference: [54] <author> J Strother Moore, </author> <title> "Mechanically verified hardware implementing an 8-bit parallel io byzantine agreement processor", </title> <institution> NASA CR-189588, </institution> <month> Apr. </month> <year> 1992. </year>
Reference-contexts: They also implemented this algorithm down to the register-transfer level and demonstrated that it implements the mathematical algorithm [53], and then subsequently verified the design down to a hardware description language HDL developed at CLI <ref> [54] </ref>. A more efficient mechanical proof of the oral messages algorithm was also developed by SRI [55]. ORA also investigated the formal verification of Byzantine Generals algorithms. They focused on the practical implementation of a Byzantine-resilient communications mechanism between Mini-Cayuga microprocessors [56, 57].
Reference: [55] <author> John Rushby, </author> <title> "Formal verification of an oral messages algorithm for interactive consistency", </title> <institution> NASA CR-189704, </institution> <month> Oct. </month> <year> 1992. </year>
Reference-contexts: A more efficient mechanical proof of the oral messages algorithm was also developed by SRI <ref> [55] </ref>. ORA also investigated the formal verification of Byzantine Generals algorithms. They focused on the practical implementation of a Byzantine-resilient communications mechanism between Mini-Cayuga microprocessors [56, 57]. The Mini-Cayuga is a small but formally verified microprocessor developed by ORA. It is a research prototype and has not been fabricated.
Reference: [56] <author> Mandayam Srivas and Mark Bickford, </author> <title> "Verification of the FtCayuga fault-tolerant microprocessor system (Volume 1: A case study in theorem prover-based verification)", </title> <institution> NASA CR-4381, </institution> <month> July </month> <year> 1991. </year>
Reference-contexts: A more efficient mechanical proof of the oral messages algorithm was also developed by SRI [55]. ORA also investigated the formal verification of Byzantine Generals algorithms. They focused on the practical implementation of a Byzantine-resilient communications mechanism between Mini-Cayuga microprocessors <ref> [56, 57] </ref>. The Mini-Cayuga is a small but formally verified microprocessor developed by ORA. It is a research prototype and has not been fabricated. The communications circuitry would serve as a foundation for a fault-tolerant architecture.
Reference: [57] <author> Mark Bickford and Mandayam Srivas, </author> <title> "Verification of the FtCayuga fault-tolerant microprocessor system (Volume 2: Formal specification and correctness theorems)", </title> <institution> NASA CR-187574, </institution> <month> July </month> <year> 1991. </year>
Reference-contexts: A more efficient mechanical proof of the oral messages algorithm was also developed by SRI [55]. ORA also investigated the formal verification of Byzantine Generals algorithms. They focused on the practical implementation of a Byzantine-resilient communications mechanism between Mini-Cayuga microprocessors <ref> [56, 57] </ref>. The Mini-Cayuga is a small but formally verified microprocessor developed by ORA. It is a research prototype and has not been fabricated. The communications circuitry would serve as a foundation for a fault-tolerant architecture.
Reference: [58] <author> Philip Thambidurai and You-Keun Park, </author> <title> "Interactive consistency with multiple failure modes", </title> <booktitle> in 7th Symposium on Reliable Distributed Systems, </booktitle> <pages> pp. 93-100, </pages> <address> Columbus, OH, </address> <month> Oct. </month> <year> 1988. </year>
Reference-contexts: It was designed assuming that the underlying processors were synchronized (say by a clock synchronization circuit). The issues involved with connecting the Byzantine communications circuit with a clock synchronization circuit and verifying the combination has not yet been explored. Thambidurai and Park <ref> [58] </ref> introduced a fault model that classified faults into three categories: asymmetric, symmetric, and benign. They further suggested the need for and developed an algorithm that had capabilities beyond that of the earlier Byzan-tine generals algorithms.
Reference: [59] <author> Patrick Lincoln and John Rushby, </author> <title> "A formally verified algorithm for interactice consistency under a hybrid fault model", </title> <institution> NASA CR-4527, </institution> <month> July </month> <year> 1993. </year>
Reference-contexts: In particular, their algorithm can mask the effects of a less severe class of faults, in a more effective way. SRI has formally verified an improved version of this algorithm <ref> [59, 60, 61] </ref> The newly developed hybrid-fault theory was then applied to the analysis of the Charles Stark Draper Labs "Fault-Tolerant Processor" (FTP). A unique feature of this architecture is its use of "interstages" to relay messages between processors.
Reference: [60] <author> Patrick Lincoln and John Rushby, </author> <title> "Formal verification of an algorithm for interactive consistency under a hybrid fault model", </title> <booktitle> In Courcoubetis [72], </booktitle> <pages> pp. 292-304. </pages>
Reference-contexts: In particular, their algorithm can mask the effects of a less severe class of faults, in a more effective way. SRI has formally verified an improved version of this algorithm <ref> [59, 60, 61] </ref> The newly developed hybrid-fault theory was then applied to the analysis of the Charles Stark Draper Labs "Fault-Tolerant Processor" (FTP). A unique feature of this architecture is its use of "interstages" to relay messages between processors.
Reference: [61] <author> Patrick Lincoln and John Rushby, </author> <title> "A formally verified algorithm for interactive consistency under a hybrid fault model", </title> <booktitle> in Fault Tolerant Computing Symposium 23, </booktitle> <pages> pp. 402-411, </pages> <address> Toulouse, France, June 1993. </address> <publisher> IEEE Computer Society. </publisher>
Reference-contexts: In particular, their algorithm can mask the effects of a less severe class of faults, in a more effective way. SRI has formally verified an improved version of this algorithm <ref> [59, 60, 61] </ref> The newly developed hybrid-fault theory was then applied to the analysis of the Charles Stark Draper Labs "Fault-Tolerant Processor" (FTP). A unique feature of this architecture is its use of "interstages" to relay messages between processors.
Reference: [62] <author> Patrick Lincoln and John Rushby, </author> <title> "Formal verification of an interactive consistency algorithm for the draper ftp architecture under a hybrid fault model", </title> <booktitle> in COMPASS 94, </booktitle> <month> June </month> <year> 1994. </year>
Reference-contexts: These are significantly smaller than a processor and lead to an asymmetric architecture that is far more efficient than the traditional Byzantine agreement architectures. The SRI work not only formalized the existing informal analysis but extended it to cover a wider range of faulty behavior <ref> [62] </ref>.
Reference: [63] <author> John Rushby, </author> <title> "A formally verified algorithm clock sychronization under a hybrid fault model", </title> <booktitle> in ACM Principles of Distributed Computing '94, </booktitle> <month> Aug. </month> <year> 1994. </year>
Reference-contexts: The SRI work not only formalized the existing informal analysis but extended it to cover a wider range of faulty behavior [62]. Also SRI subsequently generalized their clock synchronization work to encompass the hybrid fault model <ref> [63] </ref>. 4.2 Verification of Software Our past software verification projects are described in this section. 4.2.1 Formal Specification of Space Shuttle Jet Select NASA Langley worked with NASA Johnson Space Center and the Jet Propulsion Laboratory (JPL) in a study to explore the feasibility and utility of applying mechanically-supported formal methods
Reference: [64] <author> David Guaspari, "Penelope, </author> <title> an ada verification system", </title> <booktitle> in Proceedings of Tri-Ada '89, </booktitle> <pages> pp. 216-224, </pages> <address> Pittsburgh, PA, </address> <month> Oct. </month> <year> 1989. </year>
Reference-contexts: The first task was to verify some utility routines obtained from the NASA Goddard Space Flight Center and the NASA Lewis Research Center using their Ada Verification Tool named Penelope <ref> [64] </ref>. This task was accomplished in two steps: (1) formal specification of the routines and (2) formal verification of the routines. Both steps uncovered errors [65].
Reference: [65] <author> Carl T. Eichenlaub, C. Douglas Harper, and Ge-offrey Hird, </author> <title> "Using Penelope to assess the correctness of NASA ada software: A demonstration of formal methods as a counterpart to testing", </title> <institution> NASA CR-4509, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: This task was accomplished in two steps: (1) formal specification of the routines and (2) formal verification of the routines. Both steps uncovered errors <ref> [65] </ref>.
Reference: [66] <author> David Guaspari, </author> <title> "Formally specifying the logic of an automatic guidance controller", </title> <booktitle> in Ada-Europe Conference, </booktitle> <address> Athens, Greece, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: Both steps uncovered errors [65]. The second task was to formally specify the mode-control panel logic of a Boeing 737 experimental aircraft system using Larch (the specification language used by Penelope) <ref> [66] </ref>. 4.3 Verification of Hardware Devices Our past research and technology transfer efforts in the area of formal verification of hardware devices are described below. 4.3.1 CSDL Scoreboard Hardware A joint project between ORA and Charles Stark Draper Laboratory (CSDL) was completed in 1993.
Reference: [67] <author> Richard E. Harper, Jay H. Lala, and John J. Deyst, </author> <title> "Fault tolerant parallel processor architecture overview", </title> <booktitle> in Proceedings of the 18th Symposium on Fault Tolerant Computing, </booktitle> <pages> pp. 252-257, </pages> <year> 1988. </year>
Reference-contexts: During this project, CSDL became interested in the use of formal methods to increase confidence in their designs. ORA was given the task of formally specifying and verifying a key circuit (called the scoreboard) of the Fault-Tolerant Parallel Processor (FTPP) <ref> [67] </ref> in Clio [68]. The formal verification uncovered previously unknown design errors. When the scoreboard chip was fabricated, it worked without any error manifestation. It was the first time that CSDL produced a chip that worked "perfectly" on a first fabrication.
Reference: [68] <author> Mandayam Srivas and Mark Bickford, </author> <title> "Moving formal methods into practice: Verifying the FTPP scoreboard: Phase 1 results", </title> <institution> NASA CR-189607, </institution> <month> May </month> <year> 1992. </year>
Reference-contexts: During this project, CSDL became interested in the use of formal methods to increase confidence in their designs. ORA was given the task of formally specifying and verifying a key circuit (called the scoreboard) of the Fault-Tolerant Parallel Processor (FTPP) [67] in Clio <ref> [68] </ref>. The formal verification uncovered previously unknown design errors. When the scoreboard chip was fabricated, it worked without any error manifestation. It was the first time that CSDL produced a chip that worked "perfectly" on a first fabrication.
Reference: [69] <author> J Strother Moore, </author> <title> "A formal model of asynchronous communication and its use in mechanically verifying a biphase mark protocol", </title> <institution> NASA CR-4433, </institution> <month> June </month> <year> 1992. </year>
Reference-contexts: CSDL credits VHDL-development tools and formal methods for the success. 4.3.2 Asynchronous Communication CLI developed a formal model of asynchronous communication and demonstrated its utility by formally verifying a widely used protocol for asynchronous communication called the bi-phase mark protocol, also known as "Bi--M," "FM" or "single density" <ref> [69] </ref>.
Reference: [70] <author> Bhaskar Bose and Steven D. Johnson, "DDD-FM9001: </author> <title> Derivation of a verified microprocessor. an exercise in integrating verification with formal derivation", </title> <booktitle> Proceedings of IFIP Conference on Correct Hardware Design and Verification Methods, </booktitle> <pages> pp. 191-202. </pages> <publisher> Springer, LNCS 683, </publisher> <year> 1993. </year>
Reference-contexts: DDD implements a formal design algebra that allows a designer to transform a formal specification into a correct implementation [50]. Bose formally derived the DDD-FM9001 <ref> [70] </ref> microprocessor from Hunt's top-level specification of the FM9001 microprocessor [71]. 5 Some Observations Some general conclusions can be drawn from the collective experience of the Langley-sponsored projects.
Reference: [71] <author> Warren A. Hunt, </author> <title> "A formal HDL and its use in the FM9001 verification", in C.A.R. </title> <editor> Hoare and M.J. Gordon, editors, </editor> <title> Mechanized Reasoning in Hardware Design. </title> <publisher> Prentice-Hall, </publisher> <year> 1992. </year>
Reference-contexts: DDD implements a formal design algebra that allows a designer to transform a formal specification into a correct implementation [50]. Bose formally derived the DDD-FM9001 [70] microprocessor from Hunt's top-level specification of the FM9001 microprocessor <ref> [71] </ref>. 5 Some Observations Some general conclusions can be drawn from the collective experience of the Langley-sponsored projects. First, modern formal specification languages such as PVS, which support higher order logic and a rich type system, provide a means of writing specifications that can be read and understood by engineers.
Reference: [72] <editor> Costas Courcoubetis, editor, </editor> <booktitle> Computer Aided Verification, CAV '93, vol. 697 of Lecture Notes in Computer Science, </booktitle> <address> Elounda, Greece, June/July 1993. </address> <publisher> Springer Verlag. </publisher>
References-found: 71

