URL: http://www-csag.cs.uiuc.edu/individual/achien/cs491-s96/isis-perf.ps
Refering-URL: http://www-csag.cs.uiuc.edu/individual/achien/cs491-s96/reading.html
Root-URL: http://www.cs.uiuc.edu
Title: Performance of the Isis Distributed Computing Toolkit  
Author: Kenneth P. Birman and Timothy Clark 
Keyword: and phrases: Distributed computing, performance, process groups, atomic broadcast, causal and total message ordering, cbcast, abcast, multiple process groups, hardware multicast, IP multicast, virtual synchrony, fault-tolerance.  
Date: June 22, 1994  
Abstract: The Isis Toolkit is a programming environment for building process-group structured distributed software. The system is widely used in settings requiring high reliability, strong distributed consistency guarantees, and high speed communication. In this paper, we describe experimental studies of Isis performance. Our work explores the impact of hardware support for multicast performance, with a focus on flow control mechanisms. The use of hardware multicast in Isis has not been discussed elsewhere. One conclusion of the paper is that although Isis performance is limited primarily by flow control considerations, this type of hardware support can lead to significant performance improvements for certain communication patterns. A second conclusion was that the Isis flow-control problem is surprisingly difficult. More work in this area, and on the underlying operating system communications layer (UDP), could have significant impact on the system. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Yair Amir, L.E. Moser, P.M. Melliar-Smith, D.A. AAgarwal, and P. Ciarfella. </author> <title> Fast message ordering and membership using a logical token passing ring. </title> <booktitle> In Intl. Conference on Distributed Computing Systems, </booktitle> <pages> pages 551-560, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: This paper undertakes such a study, working with Isis V3.1.0 (Jan. 1994) on SUN Sparc 10/51 computers running Sun OS 4.1.3c with IP multicast software on a 10Mbit ethernet. There has been a considerable amount of work on the performance of reliable multicast protocols <ref> [2, 1, 5, 6, 7, 8, 9] </ref>. However, the prior work of which we are aware has focused on the multicast performance of a single group of processes at a time, confining attention to issues such as throughput (messages per second), latency, and delay to stability.
Reference: [2] <author> Ken Birman, Andre Schiper, and Pat Stephenson. </author> <title> Lightweight causal and atomic group multicast. </title> <journal> Transactions on Computer Systems, </journal> <volume> 9(3) </volume> <pages> 272-314, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: This paper undertakes such a study, working with Isis V3.1.0 (Jan. 1994) on SUN Sparc 10/51 computers running Sun OS 4.1.3c with IP multicast software on a 10Mbit ethernet. There has been a considerable amount of work on the performance of reliable multicast protocols <ref> [2, 1, 5, 6, 7, 8, 9] </ref>. However, the prior work of which we are aware has focused on the multicast performance of a single group of processes at a time, confining attention to issues such as throughput (messages per second), latency, and delay to stability. <p> The protocol operates through an exchange of copies of pending multicasts and of flush "mark" messages, and is very similar to an optimized version of the consistent cut algorithm of Chandy and Lamport [4]; the detailed protocol used is discussed in <ref> [2] </ref>. The cost of the flush protocol is shown in 21. This graph explores the impact of group joins and leaves on message latency, using a group of three members, which are periodically joined by a fourth member that loops issuing joins and leaves.
Reference: [3] <author> Kenneth P. Birman and Robbert van Rennesse. </author> <title> Reliable Distributed Computing Using the Isis Toolkit. </title> <publisher> IEEE Press, </publisher> <year> 1994. </year>
Reference-contexts: Doing so has permitted us to develop rigorous correctness and optimality proofs for our protocols, and greatly simplifies the development of complex distributed algorithms that operate over the basic Isis tools <ref> [3] </ref>. As is the case with other aspects of Isis, virtual synchrony has some associated cost. But it also reduces costs within application programs, by providing a strong model that simplifies the application process.
Reference: [4] <author> K. Mani Chandy and Leslie Lamport. </author> <title> Distributed snapshots: Determining global states of distributed systems. </title> <journal> Transactions on Computer Systems, </journal> <volume> 3(1) </volume> <pages> 63-75, </pages> <month> February </month> <year> 1985. </year>
Reference-contexts: The protocol operates through an exchange of copies of pending multicasts and of flush "mark" messages, and is very similar to an optimized version of the consistent cut algorithm of Chandy and Lamport <ref> [4] </ref>; the detailed protocol used is discussed in [2]. The cost of the flush protocol is shown in 21.
Reference: [5] <author> J. Chang and N. Maxemchuk. </author> <title> Reliable broadcast protocols. </title> <journal> Transactions on Computer Systems, </journal> <volume> 2(3) </volume> <pages> 251-273, </pages> <month> August </month> <year> 1984. </year>
Reference-contexts: This paper undertakes such a study, working with Isis V3.1.0 (Jan. 1994) on SUN Sparc 10/51 computers running Sun OS 4.1.3c with IP multicast software on a 10Mbit ethernet. There has been a considerable amount of work on the performance of reliable multicast protocols <ref> [2, 1, 5, 6, 7, 8, 9] </ref>. However, the prior work of which we are aware has focused on the multicast performance of a single group of processes at a time, confining attention to issues such as throughput (messages per second), latency, and delay to stability. <p> Multicast flow control remains complex, however, in its need to handle message loss and in how it sends acknowledgements and negative acknowledgements. Previous work on multicast has favored ring schemes, in which some form of token circulates within a group, carrying messages and acknowledgement information <ref> [5, 6] </ref>. A multicast with point-to-point acknowledgements is often rejected because of the presumed linear performance degradation, even when each ack may cover several multicast messages. In our work, these approaches were compared. For use in Isis, somewhat surprisingly, ring-style protocols did not perform as well as the point-to-point algorithm.
Reference: [6] <author> M. Frans Kaashoek, A. Tannenbaum, S. Flynn Hummel, and H. Bal. </author> <title> An efficient reliable broadcast protocol. </title> <journal> Operating Systems Review, </journal> <volume> 23(4) </volume> <pages> 5-20, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: This paper undertakes such a study, working with Isis V3.1.0 (Jan. 1994) on SUN Sparc 10/51 computers running Sun OS 4.1.3c with IP multicast software on a 10Mbit ethernet. There has been a considerable amount of work on the performance of reliable multicast protocols <ref> [2, 1, 5, 6, 7, 8, 9] </ref>. However, the prior work of which we are aware has focused on the multicast performance of a single group of processes at a time, confining attention to issues such as throughput (messages per second), latency, and delay to stability. <p> Multicast flow control remains complex, however, in its need to handle message loss and in how it sends acknowledgements and negative acknowledgements. Previous work on multicast has favored ring schemes, in which some form of token circulates within a group, carrying messages and acknowledgement information <ref> [5, 6] </ref>. A multicast with point-to-point acknowledgements is often rejected because of the presumed linear performance degradation, even when each ack may cover several multicast messages. In our work, these approaches were compared. For use in Isis, somewhat surprisingly, ring-style protocols did not perform as well as the point-to-point algorithm.
Reference: [7] <author> Rivka Ladin, B. Liskov, L. Shrira, and S. Ghemawat. </author> <title> Providing high availability using lazy replication. </title> <journal> Transactions on Computer Systems, </journal> <volume> 10(4) </volume> <pages> 360-391, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: This paper undertakes such a study, working with Isis V3.1.0 (Jan. 1994) on SUN Sparc 10/51 computers running Sun OS 4.1.3c with IP multicast software on a 10Mbit ethernet. There has been a considerable amount of work on the performance of reliable multicast protocols <ref> [2, 1, 5, 6, 7, 8, 9] </ref>. However, the prior work of which we are aware has focused on the multicast performance of a single group of processes at a time, confining attention to issues such as throughput (messages per second), latency, and delay to stability.
Reference: [8] <author> Larry L. Peterson, Nick C. Bucholz, and Richard Schlichting. </author> <title> Preserving and using context information in interprocess communication. </title> <journal> Transactions on Computer Systems, </journal> <volume> 7(3) </volume> <pages> 217-246, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: This paper undertakes such a study, working with Isis V3.1.0 (Jan. 1994) on SUN Sparc 10/51 computers running Sun OS 4.1.3c with IP multicast software on a 10Mbit ethernet. There has been a considerable amount of work on the performance of reliable multicast protocols <ref> [2, 1, 5, 6, 7, 8, 9] </ref>. However, the prior work of which we are aware has focused on the multicast performance of a single group of processes at a time, confining attention to issues such as throughput (messages per second), latency, and delay to stability.
Reference: [9] <author> Brian Whetten. </author> <title> A reliable multicast protocol. </title> <type> Technical report, </type> <institution> University of California, Berkeley, </institution> <month> March </month> <year> 1994. </year> <booktitle> In progress. </booktitle> <pages> 29 </pages>
Reference-contexts: This paper undertakes such a study, working with Isis V3.1.0 (Jan. 1994) on SUN Sparc 10/51 computers running Sun OS 4.1.3c with IP multicast software on a 10Mbit ethernet. There has been a considerable amount of work on the performance of reliable multicast protocols <ref> [2, 1, 5, 6, 7, 8, 9] </ref>. However, the prior work of which we are aware has focused on the multicast performance of a single group of processes at a time, confining attention to issues such as throughput (messages per second), latency, and delay to stability.
References-found: 9

