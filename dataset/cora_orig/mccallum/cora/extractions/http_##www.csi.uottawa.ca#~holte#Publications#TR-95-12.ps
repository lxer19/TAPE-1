URL: http://www.csi.uottawa.ca/~holte/Publications/TR-95-12.ps
Refering-URL: http://www.csi.uottawa.ca/~debruijn/irbib.html
Root-URL: 
Title: A Learning Agent that Assists the Browsing of Software Libraries  
Author: Chris Drummond Dan Ionescu SM IEEE and Robert Holteyy 
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> J.A. Alty and M.J. Coombs. </author> <title> Expert Systems: Concepts And Examples. </title> <publisher> National Computing Centre Publications (1984) </publisher>
Reference-contexts: The following sections describe the inference system and template matcher in detail. 5.1 The Inference System The inference system is a standard rule-based system with * a forward chaining inference engine supporting conjunction, disjunction, negation and Mycin-like confidence factors <ref> [1] </ref>. 18 19 * a working memory containing facts representing the user's browsing actions and the current analogue and template. * a rule base containing rules and meta-rules. The rules represent the system's knowledge of how to infer the user's intent from his actions.
Reference: [2] <author> M. J. Bates. </author> <title> Terminological Assistance For The Online Subject Searcher. </title> <booktitle> Proceedings Of The Second Conference On Computer Interfaces For Information Retrieval. </booktitle> <year> (1986) </year>
Reference-contexts: Overall, browsing is seen as a more natural and effective process when the user is uncertain of the target description. In summarizing the advantages of browsing, [38] cites <ref> [2] </ref>: "Bates (1986) points out the advantage of browsing by showing how it takes advantage of two cognitive capabilities. The first one is the greater ability to recognize what is wanted over being able to describe it. ...
Reference: [3] <author> Ted J. Biggerstaff, Charles Richter. </author> <title> Reusability Framework, Assessment And Directions. </title> <note> Software Reusability Vol 1 Ed T.J. Biggerstaff A.J. Perlis, ACM Press pp 1-17(1987) </note>
Reference-contexts: 1 Introduction Searching a software library for a particular item (source code or design documentation) is a central activity in all stages of the software development life-cycle. In software reuse, for example, the locating of relevant software artifacts has long been recognized as an essential activity <ref> [3, 19, 18] </ref>. At present, it is a slow knowledge-intensive process that is by no means guaranteed to succeed, and almost all aspects of software development are hampered by the cost and low success rate of this search. As libraries grow so does the problem.
Reference: [4] <author> Edwin Bos. </author> <title> Some Virtues and Limitations Of Action Inferring Interfaces. </title> <booktitle> 5th Annual Symposium on User Interface Software and Technology (1992) </booktitle>
Reference-contexts: Likewise, plan recognition systems are daemons because they simply match the user's action sequence against a given library of plans [27, 7], or "parse" the user's actions with a given set of plan schemas [21]. Most "programming by demonstration" systems that do inference employ daemons. For example, <ref> [4, 8, 41] </ref> all use a preprogrammed notion of "similar action" to detect repeated sequences of actions. "Learning agents" do not have a preprogrammed set of situation-action rules, but instead they learn from the user's actions when to interrupt the user and/or what advice to give.
Reference: [5] <author> Guy A. Boy. </author> <title> Indexing Hypertext Documents In Context. </title> <booktitle> Proceedings of 3rd ACM Conference on Hypertext (1991) 46 </booktitle>
Reference-contexts: In some approaches, the user may customize the browsing system [29, 14], or enter into a dialogue with the system in order to select better operators <ref> [5] </ref>. In other approaches, the user may refine the query, as in relevance feedback systems [22, 23], or query-reformulation systems [16, 13, 25, 34, 40]. Imposing structure on the library [35, 42] can also improve browsing speed and reliability.
Reference: [6] <author> F.R. Campagnoni and Kate Ehrlich. </author> <title> Information Retrieval Using A Hypertext-based Help System. </title> <booktitle> SIGIR 89 Proceedings of the 12th International Conference on Research and Development in Information Retrieval (1989) </booktitle>
Reference-contexts: Uncertainty is reduced through iterative search, with evaluation and refinement of the goal at each step. The cognitive attractiveness of browsing as a means for locating artifacts in a library has been observed and analyzed by several authors. Studies <ref> [6] </ref> have shown that when given the choice, browsing is preferred by many users over "analytic strategies which require formulation of specific well structured queries".
Reference: [7] <author> Robin Cohen, B. Spencer. </author> <title> Specifying and Updating Plan Libraries for Plan Recognition Tasks. </title> <booktitle> Proceedings of the Conference on Artificial Intelligence Applications (CAIA-93) 1993 pp 27-33 (1993) </booktitle>
Reference-contexts: Likewise, plan recognition systems are daemons because they simply match the user's action sequence against a given library of plans <ref> [27, 7] </ref>, or "parse" the user's actions with a given set of plan schemas [21]. Most "programming by demonstration" systems that do inference employ daemons.
Reference: [8] <author> Allen Cypher. EAGER: </author> <title> Programming Repetitive Tasks by Example. </title> <booktitle> Proceedings of the SIGCHI Conference 1991 pp 33-39 (1991) </booktitle>
Reference-contexts: Likewise, plan recognition systems are daemons because they simply match the user's action sequence against a given library of plans [27, 7], or "parse" the user's actions with a given set of plan schemas [21]. Most "programming by demonstration" systems that do inference employ daemons. For example, <ref> [4, 8, 41] </ref> all use a preprogrammed notion of "similar action" to detect repeated sequences of actions. "Learning agents" do not have a preprogrammed set of situation-action rules, but instead they learn from the user's actions when to interrupt the user and/or what advice to give.
Reference: [9] <author> Lisa Dent, </author> <note> Jesus Boicario,John McDermott,Tom Mitchell and David Zabowski A Personal Learning Apprentice Proceedings of AAAI 92 (1992) </note>
Reference-contexts: Unlike classical relevance feedback systems, which "adapt" to the user's immediate concerns, these systems learn a user model over an extended period. Learning agents have also been developed to assist a user in filling in a form <ref> [9, 26, 33] </ref>. As the user fills in the various fields of the form, the agent suggests how the remaining fields should be completed. If the agent's predictions are correct, the number of keystrokes needed to complete the form will have been reduced, thereby speeding up the process.
Reference: [10] <author> P. Devanbu, R. Brachman, P. Selfridge. </author> <title> LaSSIE: A Knowledge-Based Software Information System. </title> <journal> Communications of the ACM vol. </journal> <note> 34(5) 1991 pp 34-49 (1991) </note>
Reference-contexts: As libraries grow so does the problem. A person's search through a software library is mediated by what we call a "browsing system" (in <ref> [10] </ref> it is called a software information system). Typically, such systems provide a variety of "browsing" operations, including various forms of content-based retrieval ("indexing") and ways of navigating through the library. <p> For example, [25, 32, 35, 42] provide expressive query languages and flexible matching, and <ref> [10] </ref> uses a rich knowledge-base and a powerful inference technique to answer its queries. In some approaches, the user may customize the browsing system [29, 14], or enter into a dialogue with the system in order to select better operators [5].
Reference: [11] <author> Chris Drummond, </author> <title> Automatic Goal Extraction from User Actions to Accelerate the Browsing of Software Libraries, M.A.Sc. </title> <type> Thesis, </type> <institution> University of Ottawa, </institution> <month> December </month> <year> 1992. </year>
Reference-contexts: To examine the sensitivity of the results in table 1 to the choice of "five consecutive appearances in a box of size ten", the number of wins were recorded while varying the two factors. Details of this experiment can be found in <ref> [11] </ref>. The results were found not to be highly sensitive to the suggestion box length. There is a sensitivity, not surprisingly, for suggestion boxes containing only a very small number of classes. However, this quickly levels out for sizes greater than eight. <p> Instead of measuring the numerical difference in rankings, one could simply measure the sign of the difference in rankings at each step <ref> [11] </ref>. This indicates, for each step, how frequently the target class is ranked higher by the active browsing system than by the browsing system. A similar pattern emerges.
Reference: [12] <author> T. W. Finin. </author> <title> Providing Help and Advice in Task Oriented Systems. </title> <note> Proceedings of IJCAI-83 1983 pp 176-178 (1983) </note>
Reference-contexts: A good review of critics is given in [37]. Finin's active help system <ref> [12] </ref> is similar, consisting of a collection of rules each of which defines a particular situation, specified by a (generalized) sequence of actions, and the advice to give should that situation arise.
Reference: [13] <author> Gerhard Fischer, Scott Henninger, David Redmiles. </author> <title> Cognitive Tools For Locating And Comprehending Software Objects For Reuse. </title> <booktitle> Proceedings of CHI-91 Human Factors In Computing Systems 1991 pp 318-328 (1991) </booktitle>
Reference-contexts: In some approaches, the user may customize the browsing system [29, 14], or enter into a dialogue with the system in order to select better operators [5]. In other approaches, the user may refine the query, as in relevance feedback systems [22, 23], or query-reformulation systems <ref> [16, 13, 25, 34, 40] </ref>. Imposing structure on the library [35, 42] can also improve browsing speed and reliability. Our approach to improving browsing systems is complementary to the preceding ones.
Reference: [14] <author> Gerhard Fischer, A. Girgensohn. </author> <title> End-User Modifiability in Design Environments. </title> <note> Proceedings of CHI-90 (`Empowering People") 1990 pp 183-191 (1990) </note>
Reference-contexts: For example, [25, 32, 35, 42] provide expressive query languages and flexible matching, and [10] uses a rich knowledge-base and a powerful inference technique to answer its queries. In some approaches, the user may customize the browsing system <ref> [29, 14] </ref>, or enter into a dialogue with the system in order to select better operators [5]. In other approaches, the user may refine the query, as in relevance feedback systems [22, 23], or query-reformulation systems [16, 13, 25, 34, 40].
Reference: [15] <author> Gerhard Fischer, A. C. Lemke, T. Mastaglio, A. I. Morch. </author> <note> Using Critics to Empower users. Proceedings of CHI-90 (`Empowering People") 1990 pp 337-347 (1990) </note>
Reference-contexts: We categorize active assistants based on the nature of their internal inference mechanism. "Daemons" are preprogrammed to recognize particular patterns of user behaviour, and, when a particular pattern of behaviour is detected, to issue the corresponding pre 3 programmed response. For example, the critics in Fischer's design environment <ref> [15] </ref> are daemons: each critic recognizes certain types of flaws in the user's current design (e.g. violations of design constraints) and draws these to the user's attention (possibly also suggesting corrections). A good review of critics is given in [37].
Reference: [16] <author> Gerhard Fischer and Helga Nieper-Lemke. HELGON: </author> <title> Extending The Retrieval By Reformulation Paradigm. </title> <booktitle> Proceedings of CHI-89 Human Factors In Computing Systems pp 357-362 (1989) </booktitle>
Reference-contexts: In some approaches, the user may customize the browsing system [29, 14], or enter into a dialogue with the system in order to select better operators [5]. In other approaches, the user may refine the query, as in relevance feedback systems [22, 23], or query-reformulation systems <ref> [16, 13, 25, 34, 40] </ref>. Imposing structure on the library [35, 42] can also improve browsing speed and reliability. Our approach to improving browsing systems is complementary to the preceding ones. <p> Studies [6] have shown that when given the choice, browsing is preferred by many users over "analytic strategies which require formulation of specific well structured queries". This is further supported by in <ref> [16] </ref> which states "This (human remembering) theory postulates that people naturally think about categories of things not in terms of formal attributes but in terms of examples". Overall, browsing is seen as a more natural and effective process when the user is uncertain of the target description.
Reference: [17] <author> William B. Frakes, P. Gandel. </author> <title> Representing Reusable Software. </title> <journal> Information and Soft--ware Technology vol. </journal> <note> 32(10) 1990 pp 47-54 (1990) </note>
Reference-contexts: Research aimed at improving the speed and reliability of searching software (or other kinds of) libraries has considered a wide variety of techniques for improving browsing systems. A survey of techniques specific to software reuse may be found in [31] and <ref> [17] </ref>. Analogous techniques for information retrieval systems are summarized in [38]. 1 In the most common approach to improving browsing, the browsing system remains purely passive.
Reference: [18] <author> W. B. Frakes, B. A. Nejmeh. </author> <title> Software Reuse Through Information Retrieval. </title> <booktitle> Proceedings of the 12th Annual Hawaii International Conference on system Sciences pp 530-535. </booktitle> <year> (1987) </year>
Reference-contexts: 1 Introduction Searching a software library for a particular item (source code or design documentation) is a central activity in all stages of the software development life-cycle. In software reuse, for example, the locating of relevant software artifacts has long been recognized as an essential activity <ref> [3, 19, 18] </ref>. At present, it is a slow knowledge-intensive process that is by no means guaranteed to succeed, and almost all aspects of software development are hampered by the cost and low success rate of this search. As libraries grow so does the problem.
Reference: [19] <author> P. Freeman. </author> <title> Reusable Software Engineering: </title> <booktitle> Concepts And Research Directions. Proceedings Of the Workshop on Reusability In Programming (1983) </booktitle>
Reference-contexts: 1 Introduction Searching a software library for a particular item (source code or design documentation) is a central activity in all stages of the software development life-cycle. In software reuse, for example, the locating of relevant software artifacts has long been recognized as an essential activity <ref> [3, 19, 18] </ref>. At present, it is a slow knowledge-intensive process that is by no means guaranteed to succeed, and almost all aspects of software development are hampered by the cost and low success rate of this search. As libraries grow so does the problem.
Reference: [20] <author> G.W. Furnas, T.K. Landauer, L.M. Gomez and S.T. Dumais. </author> <title> The Vocabulary Problem In Human-System Communication. </title> <journal> Communications of The ACM. </journal> <note> Nov 1987 Vol 30 No 11 pp 964-971 (1987) </note>
Reference-contexts: The adjustment step is the counterpart of a few cycles of spreading the activation along the links in the library. This flexible matching goes some way towards addressing the vocabulary problem. 26 In <ref> [20] </ref> the authors demonstrate the large amount of inconsistency that occurs when people assign names to items.
Reference: [21] <author> B. A. Goodman, Diane J. Litman. </author> <title> Plan Recognition for Intelligent Interfaces. </title> <booktitle> Proceedings of the Sixth Conference on Artificial Intelligence Applications (CAIA-90) 1990 pp 297-303 (1990) </booktitle>
Reference-contexts: Likewise, plan recognition systems are daemons because they simply match the user's action sequence against a given library of plans [27, 7], or "parse" the user's actions with a given set of plan schemas <ref> [21] </ref>. Most "programming by demonstration" systems that do inference employ daemons.
Reference: [22] <author> David Hanies, W. Bruce Croft. </author> <title> Relevance Feedback and Inference Networks. </title> <booktitle> Proceedings of the 16th International ACM SIGIR Conference on Research and Development in Information Retrieval 1993 pp 2-11 (1993) </booktitle>
Reference-contexts: In some approaches, the user may customize the browsing system [29, 14], or enter into a dialogue with the system in order to select better operators [5]. In other approaches, the user may refine the query, as in relevance feedback systems <ref> [22, 23] </ref>, or query-reformulation systems [16, 13, 25, 34, 40]. Imposing structure on the library [35, 42] can also improve browsing speed and reliability. Our approach to improving browsing systems is complementary to the preceding ones. <p> As it was infeasible to conduct so large an experiment with human subjects, an automated heuristic browsing agent was developed and used. A similar experimental method is used in <ref> [22] </ref> to compare relevance feedback systems.
Reference: [23] <author> Donna Harman. </author> <title> Relevance Feedback Revisited. </title> <booktitle> SIGIR 92 Proceedings of the 15th International Conference on Research and Development in Information Retrieval (1982) </booktitle>
Reference-contexts: In some approaches, the user may customize the browsing system [29, 14], or enter into a dialogue with the system in order to select better operators [5]. In other approaches, the user may refine the query, as in relevance feedback systems <ref> [22, 23] </ref>, or query-reformulation systems [16, 13, 25, 34, 40]. Imposing structure on the library [35, 42] can also improve browsing speed and reliability. Our approach to improving browsing systems is complementary to the preceding ones.
Reference: [24] <author> Richard Helm and Yoelle S. Maarek. </author> <title> Integrating Information Retrieval And Domain Specific Approaches For Browsing And Retrieval In Object-Oriented Class Libraries. Proceedings of OOPSLA-91: Object-Oriented Programming Systems, </title> <journal> Languages, </journal> <note> and Applications pp 47-60 (1991) </note>
Reference: [25] <author> Scott Henninger. CodeFinder: </author> <title> A Tool For Locating Software Objects For Reuse. Automating Software Design: </title> <booktitle> Interactive Design Workshop Notes 9th National Conference on Artificial Intelligence AAAI-91 pp 40-47 (1991) 48 </booktitle>
Reference-contexts: The speed and reliability of browsing are improved by increasing the effectiveness of the browsing operations, either by introducing new, more powerful operations or by organizing the library so that the existing operations are more effective. For example, <ref> [25, 32, 35, 42] </ref> provide expressive query languages and flexible matching, and [10] uses a rich knowledge-base and a powerful inference technique to answer its queries. <p> In some approaches, the user may customize the browsing system [29, 14], or enter into a dialogue with the system in order to select better operators [5]. In other approaches, the user may refine the query, as in relevance feedback systems [22, 23], or query-reformulation systems <ref> [16, 13, 25, 34, 40] </ref>. Imposing structure on the library [35, 42] can also improve browsing speed and reliability. Our approach to improving browsing systems is complementary to the preceding ones. <p> In general, the matching algorithm returns a score inversely related to graphical distance. This two-step matching process basic matching of a class followed by an adjustment based on the class's neighbours' basic matching scores is very similar to spreading activation <ref> [25, 28] </ref>. In spreading activation, the library is represented by nodes connected together by weighted links. Some of the nodes are the library items, themselves, others might represent, for instance, common terms.
Reference: [26] <author> L.A. Hermens, J.C. Schlimmer. </author> <title> A Machine-Learning Apprentice for the Completion of Repetitive Forms. </title> <booktitle> Proceedings of the Ninth Conference on Artificial Intelligence for Applications (CAIA-90) 1993 pp 164-170 (1993) </booktitle>
Reference-contexts: Unlike classical relevance feedback systems, which "adapt" to the user's immediate concerns, these systems learn a user model over an extended period. Learning agents have also been developed to assist a user in filling in a form <ref> [9, 26, 33] </ref>. As the user fills in the various fields of the form, the agent suggests how the remaining fields should be completed. If the agent's predictions are correct, the number of keystrokes needed to complete the form will have been reduced, thereby speeding up the process.
Reference: [27] <author> Kristina Hook, J. Karlgren, A. Woern. </author> <title> Inferring Complex Plans. </title> <note> Intelligent User Interfaces-93 1993 pp 231-234 (1993) </note>
Reference-contexts: Likewise, plan recognition systems are daemons because they simply match the user's action sequence against a given library of plans <ref> [27, 7] </ref>, or "parse" the user's actions with a given set of plan schemas [21]. Most "programming by demonstration" systems that do inference employ daemons.
Reference: [28] <author> Andrew Jennings, Hideyuki Higuchi. </author> <title> A User Model Neural Network for a Personal News Service. User Modeling and User-Adapted Interaction vol. </title> <note> 3 1993 pp 1-25 (1993) </note>
Reference-contexts: The user directly states his actual interest in the articles and this feedback drives a form of artificial evolution that improves the agent's performance. The news filtering agent in <ref> [28] </ref> serves a similar purpose but uses different techniques for learning. Unlike classical relevance feedback systems, which "adapt" to the user's immediate concerns, these systems learn a user model over an extended period. <p> In general, the matching algorithm returns a score inversely related to graphical distance. This two-step matching process basic matching of a class followed by an adjustment based on the class's neighbours' basic matching scores is very similar to spreading activation <ref> [25, 28] </ref>. In spreading activation, the library is represented by nodes connected together by weighted links. Some of the nodes are the library items, themselves, others might represent, for instance, common terms.
Reference: [29] <author> Craig Kaplan, J. Fenwick, J. Chen. </author> <title> Adaptive Hypertext Navigation Based on User Goals and Context. User Modeling and User-Adapted Interaction vol. </title> <note> 3 1993 pp 193-220 (1993) </note>
Reference-contexts: For example, [25, 32, 35, 42] provide expressive query languages and flexible matching, and [10] uses a rich knowledge-base and a powerful inference technique to answer its queries. In some approaches, the user may customize the browsing system <ref> [29, 14] </ref>, or enter into a dialogue with the system in order to select better operators [5]. In other approaches, the user may refine the query, as in relevance feedback systems [22, 23], or query-reformulation systems [16, 13, 25, 34, 40].
Reference: [30] <author> Dennis Kibler and Pat Langley. </author> <title> Machine Learning As An Experimental Science. </title> <booktitle> Proceedings Of the Third Working Session On Learning (1989) </booktitle>
Reference-contexts: As it was infeasible to conduct so large an experiment with human subjects, an automated heuristic browsing agent was developed and used. A similar experimental method is used in [22] to compare relevance feedback systems. The advantage of using an automated browsing agent is the generally accepted idea <ref> [30] </ref> that by using "artificial data" (which is what the heuristic browsing agent provides), one can run experiments that are larger-scale, much more carefully controlled, and repeatable, than experiments using "real" data (human browsing agents, in this case).
Reference: [31] <author> Charles W. Krueger. </author> <title> Software Reuse. </title> <journal> ACM Computing Surveys vol. </journal> <note> 24(2) 1992 pp 131-184 (1992) </note>
Reference-contexts: Research aimed at improving the speed and reliability of searching software (or other kinds of) libraries has considered a wide variety of techniques for improving browsing systems. A survey of techniques specific to software reuse may be found in <ref> [31] </ref> and [17]. Analogous techniques for information retrieval systems are summarized in [38]. 1 In the most common approach to improving browsing, the browsing system remains purely passive.
Reference: [32] <author> Yoelle S. Maarek, Daniel M. Berry and Gail E. Kaiser. </author> <title> An Information Retrieval Approach For Automatically Constructing Software Libraries. </title> <journal> IEEE Transactions On Software Engineering Vol. </journal> <volume> 17 No. </volume> <month> 8 Aug. </month> <note> 1991 pp 800-813 (1991) </note>
Reference-contexts: The speed and reliability of browsing are improved by increasing the effectiveness of the browsing operations, either by introducing new, more powerful operations or by organizing the library so that the existing operations are more effective. For example, <ref> [25, 32, 35, 42] </ref> provide expressive query languages and flexible matching, and [10] uses a rich knowledge-base and a powerful inference technique to answer its queries.
Reference: [33] <institution> Pattie Maes and Robyn Kozierok Learning Interface agents Proceedings of AAAI (1993) </institution>
Reference-contexts: Unlike classical relevance feedback systems, which "adapt" to the user's immediate concerns, these systems learn a user model over an extended period. Learning agents have also been developed to assist a user in filling in a form <ref> [9, 26, 33] </ref>. As the user fills in the various fields of the form, the agent suggests how the remaining fields should be completed. If the agent's predictions are correct, the number of keystrokes needed to complete the form will have been reduced, thereby speeding up the process.
Reference: [34] <author> P. F. Patel-Schneider, R. J. Brachman, H. J. Levesque. ARGON: </author> <title> Knowledge Representation meets Information Retrieval. </title> <booktitle> Proceedings of the First Conference on Artificial Intelligence Applications 1984 pp 280-286 (1984) </booktitle>
Reference-contexts: In some approaches, the user may customize the browsing system [29, 14], or enter into a dialogue with the system in order to select better operators [5]. In other approaches, the user may refine the query, as in relevance feedback systems [22, 23], or query-reformulation systems <ref> [16, 13, 25, 34, 40] </ref>. Imposing structure on the library [35, 42] can also improve browsing speed and reliability. Our approach to improving browsing systems is complementary to the preceding ones.
Reference: [35] <author> Ruben Prieto-Diaz. </author> <title> Implementing Faceted Classification For Software Reuse. </title> <note> Communications of the ACM Vol 34 1991 pp 89-97 (1991) </note>
Reference-contexts: The speed and reliability of browsing are improved by increasing the effectiveness of the browsing operations, either by introducing new, more powerful operations or by organizing the library so that the existing operations are more effective. For example, <ref> [25, 32, 35, 42] </ref> provide expressive query languages and flexible matching, and [10] uses a rich knowledge-base and a powerful inference technique to answer its queries. <p> In other approaches, the user may refine the query, as in relevance feedback systems [22, 23], or query-reformulation systems [16, 13, 25, 34, 40]. Imposing structure on the library <ref> [35, 42] </ref> can also improve browsing speed and reliability. Our approach to improving browsing systems is complementary to the preceding ones. We aim to add an active component to the browsing system, so that in addition to passively supporting user-directed search, the system actively assists or guides the user.
Reference: [36] <institution> Beerud Sheth and Pattie Maes Evolving Agents For Personalized Information Filtering Proceeding of the 9th Conference on Artificial Intelligence For Applications (1993) 49 </institution>
Reference-contexts: For example, <ref> [36] </ref> describes a "personalized information filtering" agent, which assists a user by suggesting USENET news articles that might be of interest. The user directly states his actual interest in the articles and this feedback drives a form of artificial evolution that improves the agent's performance.
Reference: [37] <author> Barry G. Silverman and T.M. Mazher. </author> <title> Expert Critics in Engineering Design: Lessons Learned and Research Needs. </title> <journal> AI Magazine, </journal> <volume> vol. 13, no. 1, </volume> <pages> pp 45-62 (1992) </pages>
Reference-contexts: For example, the critics in Fischer's design environment [15] are daemons: each critic recognizes certain types of flaws in the user's current design (e.g. violations of design constraints) and draws these to the user's attention (possibly also suggesting corrections). A good review of critics is given in <ref> [37] </ref>. Finin's active help system [12] is similar, consisting of a collection of rules each of which defines a particular situation, specified by a (generalized) sequence of actions, and the advice to give should that situation arise.
Reference: [38] <author> R. H. Thompson and W. B. Croft. </author> <title> Support for Browsing In An Intelligent Text Retrieval System. </title> <journal> Int. J. Man-Machine Studies Vol. </journal> <note> 30 pp 639-668 (1989) </note>
Reference-contexts: A survey of techniques specific to software reuse may be found in [31] and [17]. Analogous techniques for information retrieval systems are summarized in <ref> [38] </ref>. 1 In the most common approach to improving browsing, the browsing system remains purely passive. <p> Overall, browsing is seen as a more natural and effective process when the user is uncertain of the target description. In summarizing the advantages of browsing, <ref> [38] </ref> cites [2]: "Bates (1986) points out the advantage of browsing by showing how it takes advantage of two cognitive capabilities. The first one is the greater ability to recognize what is wanted over being able to describe it. ...
Reference: [39] <author> G. Widmer, M. </author> <title> Kubat. Effective Learning in Dynamic Environments by Explicit Context Tracking. </title> <booktitle> Proceedings of the European Conference on Machine Learning (ECML-93), </booktitle> <editor> Pavel Brazdil (editor), </editor> <year> 1993 </year> <month> pp 227-243 </month> <year> (1993) </year>
Reference-contexts: The previous information collected would then be degraded in inverse proportion to the confidence in this inference. Techniques similar to this have been used in machine learning to cope with "drifting" concepts <ref> [39] </ref>. A second possible approach would be to add rules that make use of various forms of statistics about library structure.
Reference: [40] <author> M. D. Williams. </author> <note> What Makes RABBIT Run ? International Journal of Man-Machine Studies vol 21 1984 pp 333-352 (1984) </note>
Reference-contexts: In some approaches, the user may customize the browsing system [29, 14], or enter into a dialogue with the system in order to select better operators [5]. In other approaches, the user may refine the query, as in relevance feedback systems [22, 23], or query-reformulation systems <ref> [16, 13, 25, 34, 40] </ref>. Imposing structure on the library [35, 42] can also improve browsing speed and reliability. Our approach to improving browsing systems is complementary to the preceding ones.
Reference: [41] <author> Ian H. Witten, Dan Mo. TELS: </author> <title> Learning Text Editing Tasks from Examples. Watch What I Do, edited by Allen Cypher, </title> <note> MIT Press 1993 pp 183-204 (1993) </note>
Reference-contexts: Likewise, plan recognition systems are daemons because they simply match the user's action sequence against a given library of plans [27, 7], or "parse" the user's actions with a given set of plan schemas [21]. Most "programming by demonstration" systems that do inference employ daemons. For example, <ref> [4, 8, 41] </ref> all use a preprogrammed notion of "similar action" to detect repeated sequences of actions. "Learning agents" do not have a preprogrammed set of situation-action rules, but instead they learn from the user's actions when to interrupt the user and/or what advice to give.

References-found: 41

